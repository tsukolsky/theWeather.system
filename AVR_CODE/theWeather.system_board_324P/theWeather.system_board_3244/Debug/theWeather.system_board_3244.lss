
theWeather.system_board_3244.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000420  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000125  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002f9  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000f4  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000124  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001de  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 ed       	ldi	r30, 0xD2	; 210
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 30       	cpi	r26, 0x00	; 0
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
/* ------------------------------------------------------------ */


/*****************************************************************************************************************/
int main(void)
{	
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
	//unsigned int delay;
	DeviceInit();
  c2:	0e 94 8c 00 	call	0x118	; 0x118 <DeviceInit>
	AppInit(MYUBRR);
  c6:	8f e5       	ldi	r24, 0x5F	; 95
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 ae 00 	call	0x15c	; 0x15c <AppInit>
	
	// main program loop
	while (fTrue) {		
		cli();
  ce:	f8 94       	cli
		Wait_ms(1000);
  d0:	88 ee       	ldi	r24, 0xE8	; 232
  d2:	93 e0       	ldi	r25, 0x03	; 3
  d4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Wait_ms>
		prtDEBUG |= (1 << bnOrange);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	28 e2       	ldi	r18, 0x28	; 40
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	20 64       	ori	r18, 0x40	; 64
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
		Wait_ms(1000);
  ea:	88 ee       	ldi	r24, 0xE8	; 232
  ec:	93 e0       	ldi	r25, 0x03	; 3
  ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Wait_ms>
		ResetDebug();
  f2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ResetDebug>
		prtDEBUG |= (1 << bnRed);
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	28 e2       	ldi	r18, 0x28	; 40
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	20 81       	ld	r18, Z
 102:	20 68       	ori	r18, 0x80	; 128
 104:	fc 01       	movw	r30, r24
 106:	20 83       	st	Z, r18
		Wait_ms(3000);
 108:	88 eb       	ldi	r24, 0xB8	; 184
 10a:	9b e0       	ldi	r25, 0x0B	; 11
 10c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <Wait_ms>
		ResetDebug();
 110:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ResetDebug>
		__resetDebug();
		prtDEBUG |= (1 << bnOrange);	//should turn red on only
		Wait_ms(1000);
		__resetDebug();
		prtDEBUG |= (1 << bnRed);	//should turn orange on only
*/		sei();
 114:	78 94       	sei
		
	}  //end while fTrue
 116:	db cf       	rjmp	.-74     	; 0xce <main+0x14>

00000118 <DeviceInit>:
} // end main()


/**********************************************************************************************************************************/
void DeviceInit(void)
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups enabled	
	DDRB = 0;
 120:	84 e2       	ldi	r24, 0x24	; 36
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	10 82       	st	Z, r1
	DDRC = 0;
 128:	87 e2       	ldi	r24, 0x27	; 39
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	10 82       	st	Z, r1
	DDRD = 0;
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	10 82       	st	Z, r1

	PORTB = 0xFF;
 138:	85 e2       	ldi	r24, 0x25	; 37
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
	PORTC = 0xFF;
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	PORTD = 0xFF;
 14c:	8b e2       	ldi	r24, 0x2B	; 43
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <AppInit>:
/**********************************************************************************************************************************/
#ifdef DEAD
void AppInit(unsigned int ubrr)
{
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <AppInit+0x6>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	9a 83       	std	Y+2, r25	; 0x02
 168:	89 83       	std	Y+1, r24	; 0x01
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
 16a:	84 ec       	ldi	r24, 0xC4	; 196
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
 174:	85 ec       	ldi	r24, 0xC5	; 197
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	29 81       	ldd	r18, Y+1	; 0x01
 17a:	3a 81       	ldd	r19, Y+2	; 0x02
 17c:	23 2f       	mov	r18, r19
 17e:	33 27       	eor	r19, r19
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
 184:	81 ec       	ldi	r24, 0xC1	; 193
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	28 e1       	ldi	r18, 0x18	; 24
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
 18e:	82 ec       	ldi	r24, 0xC2	; 194
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	26 e0       	ldi	r18, 0x06	; 6
 194:	fc 01       	movw	r30, r24
 196:	20 83       	st	Z, r18

	//Initialize Debug LEDS
	ddrDEBUG |= (1 << bnBlue)|(1 << bnGreen)|(1 << bnOrange)|(1 << bnYellow)|(1 << bnRed);
 198:	87 e2       	ldi	r24, 0x27	; 39
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	27 e2       	ldi	r18, 0x27	; 39
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	20 81       	ld	r18, Z
 1a4:	28 6f       	ori	r18, 0xF8	; 248
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
	ResetDebug(); //Turn them off initially
 1aa:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ResetDebug>
	sei();
 1ae:	78 94       	sei
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <ResetDebug>:


void ResetDebug(){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <ResetDebug+0x6>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDEBUG ^ debugNumber);	//gets numbers to clear,
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	90 81       	ld	r25, Z
 1cc:	88 ef       	ldi	r24, 0xF8	; 248
 1ce:	89 27       	eor	r24, r25
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	89 83       	std	Y+1, r24	; 0x01
		prtDEBUG &= tempNumber;
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	28 e2       	ldi	r18, 0x28	; 40
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	30 81       	ld	r19, Z
 1e4:	29 81       	ldd	r18, Y+1	; 0x01
 1e6:	23 23       	and	r18, r19
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
}
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <Wait_ms>:
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <Wait_ms+0x6>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <Wait_ms+0x8>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	9c 83       	std	Y+4, r25	; 0x04
 204:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
 206:	14 c0       	rjmp	.+40     	; 0x230 <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
 208:	1a 82       	std	Y+2, r1	; 0x02
 20a:	19 82       	std	Y+1, r1	; 0x01
 20c:	06 c0       	rjmp	.+12     	; 0x21a <Wait_ms+0x24>
			asm volatile("nop");
 20e:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	9a 83       	std	Y+2, r25	; 0x02
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	9a 81       	ldd	r25, Y+2	; 0x02
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	80 39       	cpi	r24, 0x90	; 144
 222:	92 07       	cpc	r25, r18
 224:	a0 f3       	brcs	.-24     	; 0x20e <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	9c 83       	std	Y+4, r25	; 0x04
 22e:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
 230:	8b 81       	ldd	r24, Y+3	; 0x03
 232:	9c 81       	ldd	r25, Y+4	; 0x04
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	41 f7       	brne	.-48     	; 0x208 <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <PutUart0Ch>:
/**********************************************************************************************************************************/

void PutUart0Ch(char ch)
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	0f 92       	push	r0
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)) ) { asm volatile("nop"); }
 252:	01 c0       	rjmp	.+2      	; 0x256 <PutUart0Ch+0x10>
 254:	00 00       	nop
 256:	80 ec       	ldi	r24, 0xC0	; 192
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	88 2f       	mov	r24, r24
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	80 72       	andi	r24, 0x20	; 32
 264:	90 70       	andi	r25, 0x00	; 0
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	a9 f3       	breq	.-22     	; 0x254 <PutUart0Ch+0xe>
	UDR0 = ch;
 26a:	86 ec       	ldi	r24, 0xC6	; 198
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	29 81       	ldd	r18, Y+1	; 0x01
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
}
 274:	0f 90       	pop	r0
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <Print0>:
/**********************************************************************************************************************************/
void Print0(char string[])
{	
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <Print0+0x6>
 282:	0f 92       	push	r0
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	9b 83       	std	Y+3, r25	; 0x03
 28a:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
 28c:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
 28e:	0e c0       	rjmp	.+28     	; 0x2ac <Print0+0x30>
		PutUart0Ch(string[i]);  //send byte		
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2a 81       	ldd	r18, Y+2	; 0x02
 298:	3b 81       	ldd	r19, Y+3	; 0x03
 29a:	82 0f       	add	r24, r18
 29c:	93 1f       	adc	r25, r19
 29e:	fc 01       	movw	r30, r24
 2a0:	80 81       	ld	r24, Z
 2a2:	0e 94 23 01 	call	0x246	; 0x246 <PutUart0Ch>
		i += 1;
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{	
	BYTE i;
	i = 0;

	while (string[i]) {
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2a 81       	ldd	r18, Y+2	; 0x02
 2b4:	3b 81       	ldd	r19, Y+3	; 0x03
 2b6:	82 0f       	add	r24, r18
 2b8:	93 1f       	adc	r25, r19
 2ba:	fc 01       	movw	r30, r24
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	39 f7       	brne	.-50     	; 0x290 <Print0+0x14>
		PutUart0Ch(string[i]);  //send byte		
		i += 1;
	}
}
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>

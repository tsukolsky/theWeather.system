
theWeather.system_board_324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001c16  00001caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800154  00800154  00001cfe  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00001d00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000779  00000000  00000000  00004bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005330  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f44  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000549  00000000  00000000  000063b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4c  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  0000744c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046c  00000000  00000000  0000780c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001047  00000000  00000000  00007c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_3>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_11>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <__stack+0xd7>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <GetTempTI+0x44>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <DeviceInit+0x4>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <__vector_3+0x2e>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e6 e1       	ldi	r30, 0x16	; 22
     18a:	fc e1       	ldi	r31, 0x1C	; 28
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 35       	cpi	r26, 0x54	; 84
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	11 e0       	ldi	r17, 0x01	; 1
     19a:	a4 e5       	ldi	r26, 0x54	; 84
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a9 35       	cpi	r26, 0x59	; 89
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
     1ac:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
	prtDebug = (1 << bnD2);	//should toggle amber LED on. 
     1de:	88 e2       	ldi	r24, 0x28	; 40
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	20 e2       	ldi	r18, 0x20	; 32
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	Wait_ms(10);
     1e8:	8a e0       	ldi	r24, 0x0A	; 10
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	//Clears interrupt vector
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <__vector_18>:


ISR(TIMER0_OVF_vect){
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	8f 93       	push	r24
     226:	9f 93       	push	r25
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
	static BYTE timerZeroCount=0;
	timerZeroCount++;;
     234:	80 91 56 01 	lds	r24, 0x0156
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	80 93 56 01 	sts	0x0156, r24
	if (timerZeroCount >= 20) {pinDebug |= (1 << bnD0); timerZeroCount = 0;}		//should toggle amber LED and red to left of it
     23e:	80 91 56 01 	lds	r24, 0x0156
     242:	84 31       	cpi	r24, 0x14	; 20
     244:	58 f0       	brcs	.+22     	; 0x25c <__vector_18+0x46>
     246:	86 e2       	ldi	r24, 0x26	; 38
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	26 e2       	ldi	r18, 0x26	; 38
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	20 81       	ld	r18, Z
     252:	28 60       	ori	r18, 0x08	; 8
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
     258:	10 92 56 01 	sts	0x0156, r1
}	
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	static BYTE timerTwoCount=0;
	if (timerTwoCount++ >=40) {pinDebug = (1 << bnD0); timerTwoCount = 0;}		//toggles green, left LED
     292:	90 91 55 01 	lds	r25, 0x0155
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	98 32       	cpi	r25, 0x28	; 40
     29a:	08 f4       	brcc	.+2      	; 0x29e <__vector_11+0x28>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	9f 5f       	subi	r25, 0xFF	; 255
     2a0:	90 93 55 01 	sts	0x0155, r25
     2a4:	88 23       	and	r24, r24
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <__vector_11+0x40>
     2a8:	86 e2       	ldi	r24, 0x26	; 38
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	28 e0       	ldi	r18, 0x08	; 8
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
     2b2:	10 92 55 01 	sts	0x0155, r1
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <main>:


/*****************************************************************************************************************/
int main(void)
{	
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	DeviceInit();
     2d6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DeviceInit>
	AppInit(MYUBRR);
     2da:	83 e3       	ldi	r24, 0x33	; 51
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 1f 02 	call	0x43e	; 0x43e <AppInit>
	sei();
     2e2:	78 94       	sei
	Wait_ms(40);
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	ResetDebug();	//clear LED's
     2ec:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
	//InitTimer0();
	InitTimer2();
     2f0:	0e 94 0b 03 	call	0x616	; 0x616 <InitTimer2>

	// main program loop
	while (fTrue) {	
		
		//Get Humidity from HoneyWell sensor, located on ADC1
		prtDebug |= (1 << bnD0);
     2f4:	88 e2       	ldi	r24, 0x28	; 40
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	28 e2       	ldi	r18, 0x28	; 40
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	28 60       	ori	r18, 0x08	; 8
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
		GetHumidity();
     306:	0e 94 2e 05 	call	0xa5c	; 0xa5c <GetHumidity>
		Wait_ms(10);
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		ResetDebug();
     312:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>

		
		//Get temp data from ADT7302 source, on SPI
		prtDebug |= (1 << bnD1);
     316:	88 e2       	ldi	r24, 0x28	; 40
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	28 e2       	ldi	r18, 0x28	; 40
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	20 61       	ori	r18, 0x10	; 16
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
		GetTempADT();
     328:	0e 94 05 06 	call	0xc0a	; 0xc0a <GetTempADT>
		Wait_ms(10);
     32c:	8a e0       	ldi	r24, 0x0A	; 10
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		ResetDebug();
     334:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
		
		//Get temperature data from TI source on SPI/USART0
		prtDebug |= (1 << bnD2);
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	28 e2       	ldi	r18, 0x28	; 40
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	20 62       	ori	r18, 0x20	; 32
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
		GetTempTI(MYUBRR);
     34a:	83 e3       	ldi	r24, 0x33	; 51
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 3f 03 	call	0x67e	; 0x67e <GetTempTI>
		Wait_ms(10);
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		ResetDebug();
     35a:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
		
		//Get temperature data from Thermistor on ADC2
		prtDebug |= (1 << bnD3);
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	28 e2       	ldi	r18, 0x28	; 40
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	20 64       	ori	r18, 0x40	; 64
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
		GetTempTherm();
     370:	84 e4       	ldi	r24, 0x44	; 68
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	fc 01       	movw	r30, r24
     376:	09 95       	icall
		Wait_ms(10);
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
						
		//Power save. Should sleep for ~10 seconds
		Print0(" Going to sleep... ");
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
		ResetDebug();						//Clear the LED's
     388:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
		flagGoToSleep=fTrue;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	90 93 58 01 	sts	0x0158, r25
     394:	80 93 57 01 	sts	0x0157, r24
		sleepCnt=0;
     398:	10 92 54 01 	sts	0x0154, r1
		SMCR = (1 << SM1)|(1 << SM0);
     39c:	83 e5       	ldi	r24, 0x53	; 83
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	26 e0       	ldi	r18, 0x06	; 6
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
     3a6:	83 e5       	ldi	r24, 0x53	; 83
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	23 e5       	ldi	r18, 0x53	; 83
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	f9 01       	movw	r30, r18
     3b0:	20 81       	ld	r18, Z
     3b2:	21 60       	ori	r18, 0x01	; 1
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
		while (sleepCnt<SLEEP_TIME){
     3b8:	06 c0       	rjmp	.+12     	; 0x3c6 <main+0xf8>
			asm volatile("SLEEP");
     3ba:	88 95       	sleep
			sleepCnt++;
     3bc:	80 91 54 01 	lds	r24, 0x0154
     3c0:	8f 5f       	subi	r24, 0xFF	; 255
     3c2:	80 93 54 01 	sts	0x0154, r24
		ResetDebug();						//Clear the LED's
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (sleepCnt<SLEEP_TIME){
     3c6:	80 91 54 01 	lds	r24, 0x0154
     3ca:	88 37       	cpi	r24, 0x78	; 120
     3cc:	b0 f3       	brcs	.-20     	; 0x3ba <main+0xec>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
     3ce:	83 e5       	ldi	r24, 0x53	; 83
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	fc 01       	movw	r30, r24
     3d4:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
     3d6:	10 92 58 01 	sts	0x0158, r1
     3da:	10 92 57 01 	sts	0x0157, r1
		Wait_ms(20);
     3de:	84 e1       	ldi	r24, 0x14	; 20
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		//Reset sleep register on wakeup
		Print0(" Waking up... ");
     3e6:	84 e1       	ldi	r24, 0x14	; 20
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
		
	}  //end while fTrue
     3ee:	82 cf       	rjmp	.-252    	; 0x2f4 <main+0x26>

000003f0 <DeviceInit>:
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
     3f8:	81 e2       	ldi	r24, 0x21	; 33
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	fc 01       	movw	r30, r24
     3fe:	10 82       	st	Z, r1
	DDRB = 0;
     400:	84 e2       	ldi	r24, 0x24	; 36
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	fc 01       	movw	r30, r24
     406:	10 82       	st	Z, r1
	DDRC = 0;
     408:	87 e2       	ldi	r24, 0x27	; 39
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	fc 01       	movw	r30, r24
     40e:	10 82       	st	Z, r1
	DDRD = 0;
     410:	8a e2       	ldi	r24, 0x2A	; 42
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	fc 01       	movw	r30, r24
     416:	10 82       	st	Z, r1

	PORTA = 0x00;
     418:	82 e2       	ldi	r24, 0x22	; 34
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	fc 01       	movw	r30, r24
     41e:	10 82       	st	Z, r1
	PORTB = 0x00;
     420:	85 e2       	ldi	r24, 0x25	; 37
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	10 82       	st	Z, r1
	PORTC = 0x00;
     428:	88 e2       	ldi	r24, 0x28	; 40
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	fc 01       	movw	r30, r24
     42e:	10 82       	st	Z, r1
	PORTD = 0x00;
     430:	8b e2       	ldi	r24, 0x2B	; 43
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	10 82       	st	Z, r1
}
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <AppInit>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	00 d0       	rcall	.+0      	; 0x444 <AppInit+0x6>
     444:	00 d0       	rcall	.+0      	; 0x446 <AppInit+0x8>
     446:	00 d0       	rcall	.+0      	; 0x448 <AppInit+0xa>
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	9e 83       	std	Y+6, r25	; 0x06
     44e:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
     450:	84 ec       	ldi	r24, 0xC4	; 196
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2d 81       	ldd	r18, Y+5	; 0x05
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
     45a:	85 ec       	ldi	r24, 0xC5	; 197
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	2d 81       	ldd	r18, Y+5	; 0x05
     460:	3e 81       	ldd	r19, Y+6	; 0x06
     462:	23 2f       	mov	r18, r19
     464:	33 27       	eor	r19, r19
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
     46a:	81 ec       	ldi	r24, 0xC1	; 193
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	28 e1       	ldi	r18, 0x18	; 24
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
     474:	82 ec       	ldi	r24, 0xC2	; 194
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	26 e0       	ldi	r18, 0x06	; 6
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
     47e:	87 e2       	ldi	r24, 0x27	; 39
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	27 e2       	ldi	r18, 0x27	; 39
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	28 6f       	ori	r18, 0xF8	; 248
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	1d c0       	rjmp	.+58     	; 0x4d4 <AppInit+0x96>
		prtDebug |= (1 << i);
     49a:	88 e2       	ldi	r24, 0x28	; 40
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	28 e2       	ldi	r18, 0x28	; 40
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	42 2f       	mov	r20, r18
     4a8:	21 e0       	ldi	r18, 0x01	; 1
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	09 80       	ldd	r0, Y+1	; 0x01
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <AppInit+0x76>
     4b0:	22 0f       	add	r18, r18
     4b2:	33 1f       	adc	r19, r19
     4b4:	0a 94       	dec	r0
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <AppInit+0x72>
     4b8:	24 2b       	or	r18, r20
     4ba:	fc 01       	movw	r30, r24
     4bc:	20 83       	st	Z, r18
		Wait_ms(10);
     4be:	8a e0       	ldi	r24, 0x0A	; 10
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		ResetDebug();
     4c6:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	9a 81       	ldd	r25, Y+2	; 0x02
     4d8:	88 30       	cpi	r24, 0x08	; 8
     4da:	91 05       	cpc	r25, r1
     4dc:	f4 f2       	brlt	.-68     	; 0x49a <AppInit+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     4de:	87 e0       	ldi	r24, 0x07	; 7
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	9c 83       	std	Y+4, r25	; 0x04
     4e4:	8b 83       	std	Y+3, r24	; 0x03
     4e6:	1d c0       	rjmp	.+58     	; 0x522 <AppInit+0xe4>
		prtDebug |= (1 << j);
     4e8:	88 e2       	ldi	r24, 0x28	; 40
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	28 e2       	ldi	r18, 0x28	; 40
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	f9 01       	movw	r30, r18
     4f2:	20 81       	ld	r18, Z
     4f4:	42 2f       	mov	r20, r18
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	0b 80       	ldd	r0, Y+3	; 0x03
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <AppInit+0xc4>
     4fe:	22 0f       	add	r18, r18
     500:	33 1f       	adc	r19, r19
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <AppInit+0xc0>
     506:	24 2b       	or	r18, r20
     508:	fc 01       	movw	r30, r24
     50a:	20 83       	st	Z, r18
		Wait_ms(10);
     50c:	8a e0       	ldi	r24, 0x0A	; 10
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
		ResetDebug();
     514:	0e 94 bb 06 	call	0xd76	; 0xd76 <ResetDebug>
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	9c 81       	ldd	r25, Y+4	; 0x04
     51c:	01 97       	sbiw	r24, 0x01	; 1
     51e:	9c 83       	std	Y+4, r25	; 0x04
     520:	8b 83       	std	Y+3, r24	; 0x03
     522:	8b 81       	ldd	r24, Y+3	; 0x03
     524:	9c 81       	ldd	r25, Y+4	; 0x04
     526:	99 23       	and	r25, r25
     528:	fc f6       	brge	.-66     	; 0x4e8 <AppInit+0xaa>
		Wait_ms(10);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
     52a:	84 e2       	ldi	r24, 0x24	; 36
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	24 e2       	ldi	r18, 0x24	; 36
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	20 6b       	ori	r18, 0xB0	; 176
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
     53c:	85 e2       	ldi	r24, 0x25	; 37
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	25 e2       	ldi	r18, 0x25	; 37
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	20 69       	ori	r18, 0x90	; 144
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
     54e:	85 e2       	ldi	r24, 0x25	; 37
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	25 e2       	ldi	r18, 0x25	; 37
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	2f 7b       	andi	r18, 0xBF	; 191
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
     560:	85 e2       	ldi	r24, 0x25	; 37
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	25 e2       	ldi	r18, 0x25	; 37
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	2f 7d       	andi	r18, 0xDF	; 223
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
     572:	8c e4       	ldi	r24, 0x4C	; 76
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2c e4       	ldi	r18, 0x4C	; 76
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	23 65       	ori	r18, 0x53	; 83
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
     584:	84 e6       	ldi	r24, 0x64	; 100
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	24 e6       	ldi	r18, 0x64	; 100
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	2d 6f       	ori	r18, 0xFD	; 253
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
     596:	89 e6       	ldi	r24, 0x69	; 105
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	29 e6       	ldi	r18, 0x69	; 105
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 63       	ori	r18, 0x30	; 48
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
     5a8:	8d e3       	ldi	r24, 0x3D	; 61
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	24 e0       	ldi	r18, 0x04	; 4
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
	
	flagGoToSleep=fFalse;
     5b2:	10 92 58 01 	sts	0x0158, r1
     5b6:	10 92 57 01 	sts	0x0157, r1
}
     5ba:	26 96       	adiw	r28, 0x06	; 6
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	f8 94       	cli
     5c0:	de bf       	out	0x3e, r29	; 62
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	cd bf       	out	0x3d, r28	; 61
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <InitTimer0>:

/**********************************************************************************************************************************/
void InitTimer0(){
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	//Disable glbal interrupts
	cli();
     5d4:	f8 94       	cli
	//Enable TIMER0 power
	PRR0 &= ~(1 << PRTIM0);
     5d6:	84 e6       	ldi	r24, 0x64	; 100
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	24 e6       	ldi	r18, 0x64	; 100
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	f9 01       	movw	r30, r18
     5e0:	20 81       	ld	r18, Z
     5e2:	2f 7d       	andi	r18, 0xDF	; 223
     5e4:	fc 01       	movw	r30, r24
     5e6:	20 83       	st	Z, r18
	Wait_ms(1);
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	//Set up regiterst
	TCCR0B = (1 << CS02)|(1 << CS00);			//prescaler of 256 from clkIO
     5f0:	85 e4       	ldi	r24, 0x45	; 69
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	25 e0       	ldi	r18, 0x05	; 5
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
	TIFR0 = (1 << TOV0);						//Clear TOV0/ any pending interrupts
     5fa:	85 e3       	ldi	r24, 0x35	; 53
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	TIMSK0 = (1 << TOIE0);						//Enable overflow interrupt service routine
     604:	8e e6       	ldi	r24, 0x6E	; 110
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	//Enable global interrupts
	sei();
     60e:	78 94       	sei
}	
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <InitTimer2>:
	
/**********************************************************************************************************************************/
void InitTimer2(){
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
     61e:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
     620:	84 e6       	ldi	r24, 0x64	; 100
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	24 e6       	ldi	r18, 0x64	; 100
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	f9 01       	movw	r30, r18
     62a:	20 81       	ld	r18, Z
     62c:	2f 7b       	andi	r18, 0xBF	; 191
     62e:	fc 01       	movw	r30, r24
     630:	20 83       	st	Z, r18
	Wait_ms(1);	
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
     63a:	81 eb       	ldi	r24, 0xB1	; 177
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	21 eb       	ldi	r18, 0xB1	; 177
     640:	30 e0       	ldi	r19, 0x00	; 0
     642:	f9 01       	movw	r30, r18
     644:	20 81       	ld	r18, Z
     646:	27 60       	ori	r18, 0x07	; 7
     648:	fc 01       	movw	r30, r24
     64a:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
     64c:	00 00       	nop
     64e:	86 eb       	ldi	r24, 0xB6	; 182
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	81 71       	andi	r24, 0x11	; 17
     65c:	90 70       	andi	r25, 0x00	; 0
     65e:	00 97       	sbiw	r24, 0x00	; 0
     660:	b1 f7       	brne	.-20     	; 0x64e <InitTimer2+0x38>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
     662:	87 e3       	ldi	r24, 0x37	; 55
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	fc 01       	movw	r30, r24
     66a:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
     66c:	80 e7       	ldi	r24, 0x70	; 112
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	21 e0       	ldi	r18, 0x01	; 1
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
     676:	78 94       	sei
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <GetTempTI>:
/**********************************************************************************************************************************/

void GetTempTI(unsigned int ubrr)
{
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	60 97       	sbiw	r28, 0x10	; 16
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	98 8b       	std	Y+16, r25	; 0x10
     698:	8f 87       	std	Y+15, r24	; 0x0f
	WORD tempDataTI = 0;
     69a:	1a 82       	std	Y+2, r1	; 0x02
     69c:	19 82       	std	Y+1, r1	; 0x01
	char tempStringTI[8];
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
     69e:	84 e6       	ldi	r24, 0x64	; 100
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	24 e6       	ldi	r18, 0x64	; 100
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	20 81       	ld	r18, Z
     6aa:	2f 7e       	andi	r18, 0xEF	; 239
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
     6b0:	8a e0       	ldi	r24, 0x0A	; 10
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	UBRR1 = 0;
     6b8:	8c ec       	ldi	r24, 0xCC	; 204
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	11 82       	std	Z+1, r1	; 0x01
     6c0:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
     6c2:	8a e2       	ldi	r24, 0x2A	; 42
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2a e2       	ldi	r18, 0x2A	; 42
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	20 63       	ori	r18, 0x30	; 48
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	20 63       	ori	r18, 0x30	; 48
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
     6e6:	8a ec       	ldi	r24, 0xCA	; 202
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	20 ec       	ldi	r18, 0xC0	; 192
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
     6f0:	89 ec       	ldi	r24, 0xC9	; 201
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	28 e1       	ldi	r18, 0x18	; 24
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
     6fa:	8c ec       	ldi	r24, 0xCC	; 204
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	2f 85       	ldd	r18, Y+15	; 0x0f
     700:	fc 01       	movw	r30, r24
     702:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
     704:	8d ec       	ldi	r24, 0xCD	; 205
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	2f 85       	ldd	r18, Y+15	; 0x0f
     70a:	38 89       	ldd	r19, Y+16	; 0x10
     70c:	23 2f       	mov	r18, r19
     70e:	33 27       	eor	r19, r19
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
     714:	00 00       	nop
     716:	88 ec       	ldi	r24, 0xC8	; 200
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	80 72       	andi	r24, 0x20	; 32
     724:	90 70       	andi	r25, 0x00	; 0
     726:	00 97       	sbiw	r24, 0x00	; 0
     728:	b1 f3       	breq	.-20     	; 0x716 <GetTempTI+0x98>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
     72a:	8b e2       	ldi	r24, 0x2B	; 43
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	2b e2       	ldi	r18, 0x2B	; 43
     730:	30 e0       	ldi	r19, 0x00	; 0
     732:	f9 01       	movw	r30, r18
     734:	20 81       	ld	r18, Z
     736:	2f 7d       	andi	r18, 0xDF	; 223
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
     73c:	8e ec       	ldi	r24, 0xCE	; 206
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
     744:	00 00       	nop
     746:	88 ec       	ldi	r24, 0xC8	; 200
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	fc 01       	movw	r30, r24
     74c:	80 81       	ld	r24, Z
     74e:	88 23       	and	r24, r24
     750:	d4 f7       	brge	.-12     	; 0x746 <GetTempTI+0xc8>
	tempDataTI = (UDR1 << 8);	//first byte of data
     752:	8e ec       	ldi	r24, 0xCE	; 206
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	88 2f       	mov	r24, r24
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	98 2f       	mov	r25, r24
     760:	88 27       	eor	r24, r24
     762:	9a 83       	std	Y+2, r25	; 0x02
     764:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
     766:	8e ec       	ldi	r24, 0xCE	; 206
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	fc 01       	movw	r30, r24
     76c:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
     76e:	00 00       	nop
     770:	88 ec       	ldi	r24, 0xC8	; 200
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	88 23       	and	r24, r24
     77a:	d4 f7       	brge	.-12     	; 0x770 <GetTempTI+0xf2>
	tempDataTI |= UDR1;	
     77c:	8e ec       	ldi	r24, 0xCE	; 206
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	88 2f       	mov	r24, r24
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	29 81       	ldd	r18, Y+1	; 0x01
     78a:	3a 81       	ldd	r19, Y+2	; 0x02
     78c:	82 2b       	or	r24, r18
     78e:	93 2b       	or	r25, r19
     790:	9a 83       	std	Y+2, r25	; 0x02
     792:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
     794:	8b e2       	ldi	r24, 0x2B	; 43
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	2b e2       	ldi	r18, 0x2B	; 43
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	20 63       	ori	r18, 0x30	; 48
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
     7a6:	8a ec       	ldi	r24, 0xCA	; 202
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	fc 01       	movw	r30, r24
     7ac:	10 82       	st	Z, r1
	UCSR1B = 0;
     7ae:	89 ec       	ldi	r24, 0xC9	; 201
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	10 82       	st	Z, r1
	UCSR1A = 0;
     7b6:	88 ec       	ldi	r24, 0xC8	; 200
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	10 82       	st	Z, r1
	UBRR1L = 0;
     7be:	8c ec       	ldi	r24, 0xCC	; 204
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	fc 01       	movw	r30, r24
     7c4:	10 82       	st	Z, r1
	UBRR1H = 0;
     7c6:	8d ec       	ldi	r24, 0xCD	; 205
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	fc 01       	movw	r30, r24
     7cc:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
     7ce:	84 e6       	ldi	r24, 0x64	; 100
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	24 e6       	ldi	r18, 0x64	; 100
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	20 61       	ori	r18, 0x10	; 16
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	float dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	96 95       	lsr	r25
     7ea:	87 95       	ror	r24
     7ec:	cc 01       	movw	r24, r24
     7ee:	a0 e0       	ldi	r26, 0x00	; 0
     7f0:	b0 e0       	ldi	r27, 0x00	; 0
     7f2:	bc 01       	movw	r22, r24
     7f4:	cd 01       	movw	r24, r26
     7f6:	0e 94 11 08 	call	0x1022	; 0x1022 <__floatunsisf>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	bc 01       	movw	r22, r24
     800:	cd 01       	movw	r24, r26
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	5d e3       	ldi	r21, 0x3D	; 61
     80a:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	bc 01       	movw	r22, r24
     814:	cd 01       	movw	r24, r26
     816:	26 e6       	ldi	r18, 0x66	; 102
     818:	36 e6       	ldi	r19, 0x66	; 102
     81a:	46 ee       	ldi	r20, 0xE6	; 230
     81c:	5f e3       	ldi	r21, 0x3F	; 63
     81e:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	bc 01       	movw	r22, r24
     828:	cd 01       	movw	r24, r26
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	52 e4       	ldi	r21, 0x42	; 66
     832:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     836:	dc 01       	movw	r26, r24
     838:	cb 01       	movw	r24, r22
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	9c 83       	std	Y+4, r25	; 0x04
     83e:	ad 83       	std	Y+5, r26	; 0x05
     840:	be 83       	std	Y+6, r27	; 0x06
	dtostrf(dataTI, 5, 2, tempStringTI);
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	ad 81       	ldd	r26, Y+5	; 0x05
     848:	be 81       	ldd	r27, Y+6	; 0x06
     84a:	fe 01       	movw	r30, r28
     84c:	37 96       	adiw	r30, 0x07	; 7
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	45 e0       	ldi	r20, 0x05	; 5
     854:	22 e0       	ldi	r18, 0x02	; 2
     856:	8f 01       	movw	r16, r30
     858:	0e 94 02 09 	call	0x1204	; 0x1204 <dtostrf>
	tempStringTI[6] = '.';
     85c:	8e e2       	ldi	r24, 0x2E	; 46
     85e:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringTI[7] = '\0';
     860:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" TI temp= ");
     862:	83 e2       	ldi	r24, 0x23	; 35
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
	Print0(tempStringTI);	
     86a:	ce 01       	movw	r24, r28
     86c:	07 96       	adiw	r24, 0x07	; 7
     86e:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
		
}
     872:	60 96       	adiw	r28, 0x10	; 16
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <GetTempTherm>:

/**********************************************************************************************************************************/
void GetTempTherm()
{
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	62 97       	sbiw	r28, 0x12	; 18
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
     8a0:	1c 82       	std	Y+4, r1	; 0x04
     8a2:	1b 82       	std	Y+3, r1	; 0x03
	float dataTherm = 0;
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	dc 01       	movw	r26, r24
     8aa:	8d 83       	std	Y+5, r24	; 0x05
     8ac:	9e 83       	std	Y+6, r25	; 0x06
     8ae:	af 83       	std	Y+7, r26	; 0x07
     8b0:	b8 87       	std	Y+8, r27	; 0x08
	char stringTherm[10];
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
     8b2:	84 e6       	ldi	r24, 0x64	; 100
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	24 e6       	ldi	r18, 0x64	; 100
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	2e 7f       	andi	r18, 0xFE	; 254
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
     8c4:	8c e7       	ldi	r24, 0x7C	; 124
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2c e7       	ldi	r18, 0x7C	; 124
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	22 64       	ori	r18, 0x42	; 66
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
     8d6:	8a e7       	ldi	r24, 0x7A	; 122
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	2a e7       	ldi	r18, 0x7A	; 122
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	27 68       	ori	r18, 0x87	; 135
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     8e8:	8e e7       	ldi	r24, 0x7E	; 126
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2b ef       	ldi	r18, 0xFB	; 251
     8ee:	fc 01       	movw	r30, r24
     8f0:	20 83       	st	Z, r18
	Wait_ms(10);
     8f2:	8a e0       	ldi	r24, 0x0A	; 10
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     8fa:	1a 82       	std	Y+2, r1	; 0x02
     8fc:	19 82       	std	Y+1, r1	; 0x01
     8fe:	19 c0       	rjmp	.+50     	; 0x932 <__stack+0x33>
     900:	8a e7       	ldi	r24, 0x7A	; 122
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	2a e7       	ldi	r18, 0x7A	; 122
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	f9 01       	movw	r30, r18
     90a:	20 81       	ld	r18, Z
     90c:	20 64       	ori	r18, 0x40	; 64
     90e:	fc 01       	movw	r30, r24
     910:	20 83       	st	Z, r18
     912:	00 00       	nop
     914:	8a e7       	ldi	r24, 0x7A	; 122
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	fc 01       	movw	r30, r24
     91a:	80 81       	ld	r24, Z
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	80 74       	andi	r24, 0x40	; 64
     922:	90 70       	andi	r25, 0x00	; 0
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	b1 f7       	brne	.-20     	; 0x914 <__stack+0x15>
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	9a 81       	ldd	r25, Y+2	; 0x02
     936:	82 30       	cpi	r24, 0x02	; 2
     938:	91 05       	cpc	r25, r1
     93a:	14 f3       	brlt	.-60     	; 0x900 <__stack+0x1>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
     93c:	88 e7       	ldi	r24, 0x78	; 120
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 2f       	mov	r24, r24
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
     94c:	89 e7       	ldi	r24, 0x79	; 121
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	88 2f       	mov	r24, r24
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	98 2f       	mov	r25, r24
     95a:	88 27       	eor	r24, r24
     95c:	2b 81       	ldd	r18, Y+3	; 0x03
     95e:	3c 81       	ldd	r19, Y+4	; 0x04
     960:	82 2b       	or	r24, r18
     962:	93 2b       	or	r25, r19
     964:	9c 83       	std	Y+4, r25	; 0x04
     966:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     968:	8a e7       	ldi	r24, 0x7A	; 122
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	fc 01       	movw	r30, r24
     96e:	10 82       	st	Z, r1
	ADMUX = 0;
     970:	8c e7       	ldi	r24, 0x7C	; 124
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	fc 01       	movw	r30, r24
     976:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
     978:	8e e7       	ldi	r24, 0x7E	; 126
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	2e e7       	ldi	r18, 0x7E	; 126
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	f9 01       	movw	r30, r18
     982:	20 81       	ld	r18, Z
     984:	24 60       	ori	r18, 0x04	; 4
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     98a:	84 e6       	ldi	r24, 0x64	; 100
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	24 e6       	ldi	r18, 0x64	; 100
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	21 60       	ori	r18, 0x01	; 1
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
     99c:	22 ef       	ldi	r18, 0xF2	; 242
     99e:	32 e0       	ldi	r19, 0x02	; 2
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	a9 01       	movw	r20, r18
     9a6:	48 1b       	sub	r20, r24
     9a8:	59 0b       	sbc	r21, r25
     9aa:	ca 01       	movw	r24, r20
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	8b 83       	std	Y+3, r24	; 0x03
	Print0(" RAW Therm ADC= ");
	Print0(shibby);
	#endif
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	cc 01       	movw	r24, r24
     9b6:	a0 e0       	ldi	r26, 0x00	; 0
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	bc 01       	movw	r22, r24
     9bc:	cd 01       	movw	r24, r26
     9be:	0e 94 11 08 	call	0x1022	; 0x1022 <__floatunsisf>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	bc 01       	movw	r22, r24
     9c8:	cd 01       	movw	r24, r26
     9ca:	28 e4       	ldi	r18, 0x48	; 72
     9cc:	31 ee       	ldi	r19, 0xE1	; 225
     9ce:	4c e1       	ldi	r20, 0x1C	; 28
     9d0:	51 e4       	ldi	r21, 0x41	; 65
     9d2:	0e 94 a9 07 	call	0xf52	; 0xf52 <__divsf3>
     9d6:	dc 01       	movw	r26, r24
     9d8:	cb 01       	movw	r24, r22
     9da:	8d 83       	std	Y+5, r24	; 0x05
     9dc:	9e 83       	std	Y+6, r25	; 0x06
     9de:	af 83       	std	Y+7, r26	; 0x07
     9e0:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
     9e2:	6d 81       	ldd	r22, Y+5	; 0x05
     9e4:	7e 81       	ldd	r23, Y+6	; 0x06
     9e6:	8f 81       	ldd	r24, Y+7	; 0x07
     9e8:	98 85       	ldd	r25, Y+8	; 0x08
     9ea:	26 e6       	ldi	r18, 0x66	; 102
     9ec:	36 e6       	ldi	r19, 0x66	; 102
     9ee:	46 ee       	ldi	r20, 0xE6	; 230
     9f0:	5f e3       	ldi	r21, 0x3F	; 63
     9f2:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	bc 01       	movw	r22, r24
     9fc:	cd 01       	movw	r24, r26
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	52 e4       	ldi	r21, 0x42	; 66
     a06:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	8d 83       	std	Y+5, r24	; 0x05
     a10:	9e 83       	std	Y+6, r25	; 0x06
     a12:	af 83       	std	Y+7, r26	; 0x07
     a14:	b8 87       	std	Y+8, r27	; 0x08
	
	//Convert into a string
	dtostrf(dataTherm,5,2,stringTherm);
     a16:	8d 81       	ldd	r24, Y+5	; 0x05
     a18:	9e 81       	ldd	r25, Y+6	; 0x06
     a1a:	af 81       	ldd	r26, Y+7	; 0x07
     a1c:	b8 85       	ldd	r27, Y+8	; 0x08
     a1e:	fe 01       	movw	r30, r28
     a20:	39 96       	adiw	r30, 0x09	; 9
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	45 e0       	ldi	r20, 0x05	; 5
     a28:	22 e0       	ldi	r18, 0x02	; 2
     a2a:	8f 01       	movw	r16, r30
     a2c:	0e 94 02 09 	call	0x1204	; 0x1204 <dtostrf>
	stringTherm[8] = '.';
     a30:	8e e2       	ldi	r24, 0x2E	; 46
     a32:	89 8b       	std	Y+17, r24	; 0x11
	stringTherm[9] = '\0';
     a34:	1a 8a       	std	Y+18, r1	; 0x12
	
	//Print temperature
	Print0(" Therm Temp= ");
     a36:	8e e2       	ldi	r24, 0x2E	; 46
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
	Print0(stringTherm);
     a3e:	ce 01       	movw	r24, r28
     a40:	09 96       	adiw	r24, 0x09	; 9
     a42:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
		
}
     a46:	62 96       	adiw	r28, 0x12	; 18
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	f8 94       	cli
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	cd bf       	out	0x3d, r28	; 61
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <GetHumidity>:

/**********************************************************************************************************************************/	
void GetHumidity()
{
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	62 97       	sbiw	r28, 0x12	; 18
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	char humidityString[10];
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	24 e6       	ldi	r18, 0x64	; 100
     a7a:	30 e0       	ldi	r19, 0x00	; 0
     a7c:	f9 01       	movw	r30, r18
     a7e:	20 81       	ld	r18, Z
     a80:	2e 7f       	andi	r18, 0xFE	; 254
     a82:	fc 01       	movw	r30, r24
     a84:	20 83       	st	Z, r18
	Wait_ms(10);						
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
     a8e:	8c e7       	ldi	r24, 0x7C	; 124
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2c e7       	ldi	r18, 0x7C	; 124
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	21 64       	ori	r18, 0x41	; 65
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
     aa0:	8a e7       	ldi	r24, 0x7A	; 122
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	2a e7       	ldi	r18, 0x7A	; 122
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	27 68       	ori	r18, 0x87	; 135
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     ab2:	8e e7       	ldi	r24, 0x7E	; 126
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	2d ef       	ldi	r18, 0xFD	; 253
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	Wait_ms(10);
     abc:	8a e0       	ldi	r24, 0x0A	; 10
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     ac4:	1a 82       	std	Y+2, r1	; 0x02
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	19 c0       	rjmp	.+50     	; 0xafc <GetHumidity+0xa0>
     aca:	8a e7       	ldi	r24, 0x7A	; 122
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2a e7       	ldi	r18, 0x7A	; 122
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	f9 01       	movw	r30, r18
     ad4:	20 81       	ld	r18, Z
     ad6:	20 64       	ori	r18, 0x40	; 64
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
     adc:	00 00       	nop
     ade:	8a e7       	ldi	r24, 0x7A	; 122
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	fc 01       	movw	r30, r24
     ae4:	80 81       	ld	r24, Z
     ae6:	88 2f       	mov	r24, r24
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	80 74       	andi	r24, 0x40	; 64
     aec:	90 70       	andi	r25, 0x00	; 0
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	b1 f7       	brne	.-20     	; 0xade <GetHumidity+0x82>
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	9a 83       	std	Y+2, r25	; 0x02
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	9a 81       	ldd	r25, Y+2	; 0x02
     b00:	82 30       	cpi	r24, 0x02	; 2
     b02:	91 05       	cpc	r25, r1
     b04:	14 f3       	brlt	.-60     	; 0xaca <GetHumidity+0x6e>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
     b06:	88 e7       	ldi	r24, 0x78	; 120
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	88 2f       	mov	r24, r24
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	9c 83       	std	Y+4, r25	; 0x04
     b14:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
     b16:	89 e7       	ldi	r24, 0x79	; 121
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	fc 01       	movw	r30, r24
     b1c:	80 81       	ld	r24, Z
     b1e:	88 2f       	mov	r24, r24
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	98 2f       	mov	r25, r24
     b24:	88 27       	eor	r24, r24
     b26:	2b 81       	ldd	r18, Y+3	; 0x03
     b28:	3c 81       	ldd	r19, Y+4	; 0x04
     b2a:	82 2b       	or	r24, r18
     b2c:	93 2b       	or	r25, r19
     b2e:	9c 83       	std	Y+4, r25	; 0x04
     b30:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     b32:	8a e7       	ldi	r24, 0x7A	; 122
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	fc 01       	movw	r30, r24
     b38:	10 82       	st	Z, r1
	ADMUX = 0;
     b3a:	8c e7       	ldi	r24, 0x7C	; 124
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	fc 01       	movw	r30, r24
     b40:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
     b42:	8e e7       	ldi	r24, 0x7E	; 126
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	2e e7       	ldi	r18, 0x7E	; 126
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	22 60       	ori	r18, 0x02	; 2
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     b54:	84 e6       	ldi	r24, 0x64	; 100
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	24 e6       	ldi	r18, 0x64	; 100
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	21 60       	ori	r18, 0x01	; 1
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18

	//Get actual humidity
	float humidityResultFloat = (float)humidityResult;
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	cc 01       	movw	r24, r24
     b6c:	a0 e0       	ldi	r26, 0x00	; 0
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	bc 01       	movw	r22, r24
     b72:	cd 01       	movw	r24, r26
     b74:	0e 94 11 08 	call	0x1022	; 0x1022 <__floatunsisf>
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	8d 83       	std	Y+5, r24	; 0x05
     b7e:	9e 83       	std	Y+6, r25	; 0x06
     b80:	af 83       	std	Y+7, r26	; 0x07
     b82:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
     b84:	6d 81       	ldd	r22, Y+5	; 0x05
     b86:	7e 81       	ldd	r23, Y+6	; 0x06
     b88:	8f 81       	ldd	r24, Y+7	; 0x07
     b8a:	98 85       	ldd	r25, Y+8	; 0x08
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4b e1       	ldi	r20, 0x1B	; 27
     b92:	53 e4       	ldi	r21, 0x43	; 67
     b94:	0e 94 44 07 	call	0xe88	; 0xe88 <__subsf3>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	8d 83       	std	Y+5, r24	; 0x05
     b9e:	9e 83       	std	Y+6, r25	; 0x06
     ba0:	af 83       	std	Y+7, r26	; 0x07
     ba2:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat /= HUMIDITY_CONVERTER;	//get actual humidity	
     ba4:	6d 81       	ldd	r22, Y+5	; 0x05
     ba6:	7e 81       	ldd	r23, Y+6	; 0x06
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	23 e7       	ldi	r18, 0x73	; 115
     bae:	38 e6       	ldi	r19, 0x68	; 104
     bb0:	4d e9       	ldi	r20, 0x9D	; 157
     bb2:	50 e4       	ldi	r21, 0x40	; 64
     bb4:	0e 94 a9 07 	call	0xf52	; 0xf52 <__divsf3>
     bb8:	dc 01       	movw	r26, r24
     bba:	cb 01       	movw	r24, r22
     bbc:	8d 83       	std	Y+5, r24	; 0x05
     bbe:	9e 83       	std	Y+6, r25	; 0x06
     bc0:	af 83       	std	Y+7, r26	; 0x07
     bc2:	b8 87       	std	Y+8, r27	; 0x08
	
	//Print humidity to terminal
	dtostrf(humidityResultFloat, 5, 2, humidityString);
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	9e 81       	ldd	r25, Y+6	; 0x06
     bc8:	af 81       	ldd	r26, Y+7	; 0x07
     bca:	b8 85       	ldd	r27, Y+8	; 0x08
     bcc:	fe 01       	movw	r30, r28
     bce:	39 96       	adiw	r30, 0x09	; 9
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	45 e0       	ldi	r20, 0x05	; 5
     bd6:	22 e0       	ldi	r18, 0x02	; 2
     bd8:	8f 01       	movw	r16, r30
     bda:	0e 94 02 09 	call	0x1204	; 0x1204 <dtostrf>
	humidityString[8] = '.';
     bde:	8e e2       	ldi	r24, 0x2E	; 46
     be0:	89 8b       	std	Y+17, r24	; 0x11
	humidityString[9] = '\0';
     be2:	1a 8a       	std	Y+18, r1	; 0x12
	Print0(" Humidity: ");
     be4:	8c e3       	ldi	r24, 0x3C	; 60
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
	Print0(humidityString);
     bec:	ce 01       	movw	r24, r28
     bee:	09 96       	adiw	r24, 0x09	; 9
     bf0:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
}
     bf4:	62 96       	adiw	r28, 0x12	; 18
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <GetTempADT>:

/**********************************************************************************************************************************/	

void GetTempADT()
{
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	2e 97       	sbiw	r28, 0x0e	; 14
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	WORD rawDataAD = 0;
     c22:	1a 82       	std	Y+2, r1	; 0x02
     c24:	19 82       	std	Y+1, r1	; 0x01
	char tempStringAD[8];
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
     c26:	84 e6       	ldi	r24, 0x64	; 100
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	24 e6       	ldi	r18, 0x64	; 100
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	2b 7f       	andi	r18, 0xFB	; 251
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
	Wait_ms(10);
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
     c40:	85 e2       	ldi	r24, 0x25	; 37
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	25 e2       	ldi	r18, 0x25	; 37
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	f9 01       	movw	r30, r18
     c4a:	20 81       	ld	r18, Z
     c4c:	2f 7e       	andi	r18, 0xEF	; 239
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
     c52:	8e e4       	ldi	r24, 0x4E	; 78
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
     c5a:	00 00       	nop
     c5c:	8d e4       	ldi	r24, 0x4D	; 77
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	80 81       	ld	r24, Z
     c64:	88 23       	and	r24, r24
     c66:	d4 f7       	brge	.-12     	; 0xc5c <GetTempADT+0x52>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
     c68:	8e e4       	ldi	r24, 0x4E	; 78
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	fc 01       	movw	r30, r24
     c6e:	80 81       	ld	r24, Z
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	98 2f       	mov	r25, r24
     c76:	88 27       	eor	r24, r24
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
     c7c:	8e e4       	ldi	r24, 0x4E	; 78
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	fc 01       	movw	r30, r24
     c82:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
     c84:	00 00       	nop
     c86:	8d e4       	ldi	r24, 0x4D	; 77
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	d4 f7       	brge	.-12     	; 0xc86 <GetTempADT+0x7c>
	rawDataAD |= SPDR0;					//get second byte, store in low order
     c92:	8e e4       	ldi	r24, 0x4E	; 78
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	3a 81       	ldd	r19, Y+2	; 0x02
     ca2:	82 2b       	or	r24, r18
     ca4:	93 2b       	or	r25, r19
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
     caa:	84 e6       	ldi	r24, 0x64	; 100
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	24 e6       	ldi	r18, 0x64	; 100
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	f9 01       	movw	r30, r18
     cb4:	20 81       	ld	r18, Z
     cb6:	24 60       	ori	r18, 0x04	; 4
     cb8:	fc 01       	movw	r30, r24
     cba:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
     cbc:	85 e2       	ldi	r24, 0x25	; 37
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	25 e2       	ldi	r18, 0x25	; 37
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	f9 01       	movw	r30, r18
     cc6:	20 81       	ld	r18, Z
     cc8:	20 69       	ori	r18, 0x90	; 144
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <Wait_ms>
	
	//Convert number into Celsius, then Fahrenheit
	float dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	cc 01       	movw	r24, r24
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 11 08 	call	0x1022	; 0x1022 <__floatunsisf>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	5d e3       	ldi	r21, 0x3D	; 61
     cf8:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     cfc:	dc 01       	movw	r26, r24
     cfe:	cb 01       	movw	r24, r22
     d00:	bc 01       	movw	r22, r24
     d02:	cd 01       	movw	r24, r26
     d04:	26 e6       	ldi	r18, 0x66	; 102
     d06:	36 e6       	ldi	r19, 0x66	; 102
     d08:	46 ee       	ldi	r20, 0xE6	; 230
     d0a:	5f e3       	ldi	r21, 0x3F	; 63
     d0c:	0e 94 9f 08 	call	0x113e	; 0x113e <__mulsf3>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	52 e4       	ldi	r21, 0x42	; 66
     d20:	0e 94 45 07 	call	0xe8a	; 0xe8a <__addsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8b 83       	std	Y+3, r24	; 0x03
     d2a:	9c 83       	std	Y+4, r25	; 0x04
     d2c:	ad 83       	std	Y+5, r26	; 0x05
     d2e:	be 83       	std	Y+6, r27	; 0x06
	
	//Print string
	dtostrf(dataAD, 5, 2, tempStringAD);
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	ad 81       	ldd	r26, Y+5	; 0x05
     d36:	be 81       	ldd	r27, Y+6	; 0x06
     d38:	fe 01       	movw	r30, r28
     d3a:	37 96       	adiw	r30, 0x07	; 7
     d3c:	bc 01       	movw	r22, r24
     d3e:	cd 01       	movw	r24, r26
     d40:	45 e0       	ldi	r20, 0x05	; 5
     d42:	22 e0       	ldi	r18, 0x02	; 2
     d44:	8f 01       	movw	r16, r30
     d46:	0e 94 02 09 	call	0x1204	; 0x1204 <dtostrf>
	tempStringAD[6] = '.';
     d4a:	8e e2       	ldi	r24, 0x2E	; 46
     d4c:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringAD[7] = '\0';
     d4e:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" AD temp= ");
     d50:	88 e4       	ldi	r24, 0x48	; 72
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
	Print0(tempStringAD);
     d58:	ce 01       	movw	r24, r28
     d5a:	07 96       	adiw	r24, 0x07	; 7
     d5c:	0e 94 1b 07 	call	0xe36	; 0xe36 <Print0>
}
     d60:	2e 96       	adiw	r28, 0x0e	; 14
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <ResetDebug>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <ResetDebug+0x6>
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
     d80:	88 e2       	ldi	r24, 0x28	; 40
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	fc 01       	movw	r30, r24
     d86:	90 81       	ld	r25, Z
     d88:	88 ef       	ldi	r24, 0xF8	; 248
     d8a:	89 27       	eor	r24, r25
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
     d94:	88 e2       	ldi	r24, 0x28	; 40
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	28 e2       	ldi	r18, 0x28	; 40
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	30 81       	ld	r19, Z
     da0:	29 81       	ldd	r18, Y+1	; 0x01
     da2:	23 23       	and	r18, r19
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <Wait_ms>:

/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	00 d0       	rcall	.+0      	; 0xdb8 <Wait_ms+0x6>
     db8:	00 d0       	rcall	.+0      	; 0xdba <Wait_ms+0x8>
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	9c 83       	std	Y+4, r25	; 0x04
     dc0:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
     dc2:	14 c0       	rjmp	.+40     	; 0xdec <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
     dc4:	1a 82       	std	Y+2, r1	; 0x02
     dc6:	19 82       	std	Y+1, r1	; 0x01
     dc8:	06 c0       	rjmp	.+12     	; 0xdd6 <Wait_ms+0x24>
			asm volatile("nop");
     dca:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	21 e0       	ldi	r18, 0x01	; 1
     ddc:	80 39       	cpi	r24, 0x90	; 144
     dde:	92 07       	cpc	r25, r18
     de0:	a0 f3       	brcs	.-24     	; 0xdca <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	41 f7       	brne	.-48     	; 0xdc4 <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <PutUart0Ch>:

/**********************************************************************************************************************************/

void PutUart0Ch(char ch)
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
     e0e:	00 00       	nop
     e10:	80 ec       	ldi	r24, 0xC0	; 192
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	88 2f       	mov	r24, r24
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	80 72       	andi	r24, 0x20	; 32
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	00 97       	sbiw	r24, 0x00	; 0
     e22:	b1 f3       	breq	.-20     	; 0xe10 <PutUart0Ch+0xe>
	UDR0 = ch;
     e24:	86 ec       	ldi	r24, 0xC6	; 198
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	29 81       	ldd	r18, Y+1	; 0x01
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
}
     e2e:	0f 90       	pop	r0
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <Print0>:

/**********************************************************************************************************************************/
void Print0(char string[])
{	
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <Print0+0x6>
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	9b 83       	std	Y+3, r25	; 0x03
     e44:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     e46:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     e48:	0e c0       	rjmp	.+28     	; 0xe66 <Print0+0x30>
		PutUart0Ch(string[i]);  //send byte		
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	2a 81       	ldd	r18, Y+2	; 0x02
     e52:	3b 81       	ldd	r19, Y+3	; 0x03
     e54:	82 0f       	add	r24, r18
     e56:	93 1f       	adc	r25, r19
     e58:	fc 01       	movw	r30, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	0e 94 01 07 	call	0xe02	; 0xe02 <PutUart0Ch>
		i += 1;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{	
	BYTE i;
	i = 0;

	while (string[i]) {
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	88 2f       	mov	r24, r24
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	2a 81       	ldd	r18, Y+2	; 0x02
     e6e:	3b 81       	ldd	r19, Y+3	; 0x03
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	fc 01       	movw	r30, r24
     e76:	80 81       	ld	r24, Z
     e78:	88 23       	and	r24, r24
     e7a:	39 f7       	brne	.-50     	; 0xe4a <Print0+0x14>
		PutUart0Ch(string[i]);  //send byte		
		i += 1;
	}
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <__subsf3>:
     e88:	50 58       	subi	r21, 0x80	; 128

00000e8a <__addsf3>:
     e8a:	bb 27       	eor	r27, r27
     e8c:	aa 27       	eor	r26, r26
     e8e:	0e d0       	rcall	.+28     	; 0xeac <__addsf3x>
     e90:	1c c1       	rjmp	.+568    	; 0x10ca <__fp_round>
     e92:	0d d1       	rcall	.+538    	; 0x10ae <__fp_pscA>
     e94:	30 f0       	brcs	.+12     	; 0xea2 <__addsf3+0x18>
     e96:	12 d1       	rcall	.+548    	; 0x10bc <__fp_pscB>
     e98:	20 f0       	brcs	.+8      	; 0xea2 <__addsf3+0x18>
     e9a:	31 f4       	brne	.+12     	; 0xea8 <__addsf3+0x1e>
     e9c:	9f 3f       	cpi	r25, 0xFF	; 255
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__addsf3+0x1a>
     ea0:	1e f4       	brtc	.+6      	; 0xea8 <__addsf3+0x1e>
     ea2:	02 c1       	rjmp	.+516    	; 0x10a8 <__fp_nan>
     ea4:	0e f4       	brtc	.+2      	; 0xea8 <__addsf3+0x1e>
     ea6:	e0 95       	com	r30
     ea8:	e7 fb       	bst	r30, 7
     eaa:	f8 c0       	rjmp	.+496    	; 0x109c <__fp_inf>

00000eac <__addsf3x>:
     eac:	e9 2f       	mov	r30, r25
     eae:	1e d1       	rcall	.+572    	; 0x10ec <__fp_split3>
     eb0:	80 f3       	brcs	.-32     	; 0xe92 <__addsf3+0x8>
     eb2:	ba 17       	cp	r27, r26
     eb4:	62 07       	cpc	r22, r18
     eb6:	73 07       	cpc	r23, r19
     eb8:	84 07       	cpc	r24, r20
     eba:	95 07       	cpc	r25, r21
     ebc:	18 f0       	brcs	.+6      	; 0xec4 <__addsf3x+0x18>
     ebe:	71 f4       	brne	.+28     	; 0xedc <__addsf3x+0x30>
     ec0:	9e f5       	brtc	.+102    	; 0xf28 <__addsf3x+0x7c>
     ec2:	36 c1       	rjmp	.+620    	; 0x1130 <__fp_zero>
     ec4:	0e f4       	brtc	.+2      	; 0xec8 <__addsf3x+0x1c>
     ec6:	e0 95       	com	r30
     ec8:	0b 2e       	mov	r0, r27
     eca:	ba 2f       	mov	r27, r26
     ecc:	a0 2d       	mov	r26, r0
     ece:	0b 01       	movw	r0, r22
     ed0:	b9 01       	movw	r22, r18
     ed2:	90 01       	movw	r18, r0
     ed4:	0c 01       	movw	r0, r24
     ed6:	ca 01       	movw	r24, r20
     ed8:	a0 01       	movw	r20, r0
     eda:	11 24       	eor	r1, r1
     edc:	ff 27       	eor	r31, r31
     ede:	59 1b       	sub	r21, r25
     ee0:	99 f0       	breq	.+38     	; 0xf08 <__addsf3x+0x5c>
     ee2:	59 3f       	cpi	r21, 0xF9	; 249
     ee4:	50 f4       	brcc	.+20     	; 0xefa <__addsf3x+0x4e>
     ee6:	50 3e       	cpi	r21, 0xE0	; 224
     ee8:	68 f1       	brcs	.+90     	; 0xf44 <__addsf3x+0x98>
     eea:	1a 16       	cp	r1, r26
     eec:	f0 40       	sbci	r31, 0x00	; 0
     eee:	a2 2f       	mov	r26, r18
     ef0:	23 2f       	mov	r18, r19
     ef2:	34 2f       	mov	r19, r20
     ef4:	44 27       	eor	r20, r20
     ef6:	58 5f       	subi	r21, 0xF8	; 248
     ef8:	f3 cf       	rjmp	.-26     	; 0xee0 <__addsf3x+0x34>
     efa:	46 95       	lsr	r20
     efc:	37 95       	ror	r19
     efe:	27 95       	ror	r18
     f00:	a7 95       	ror	r26
     f02:	f0 40       	sbci	r31, 0x00	; 0
     f04:	53 95       	inc	r21
     f06:	c9 f7       	brne	.-14     	; 0xefa <__addsf3x+0x4e>
     f08:	7e f4       	brtc	.+30     	; 0xf28 <__addsf3x+0x7c>
     f0a:	1f 16       	cp	r1, r31
     f0c:	ba 0b       	sbc	r27, r26
     f0e:	62 0b       	sbc	r22, r18
     f10:	73 0b       	sbc	r23, r19
     f12:	84 0b       	sbc	r24, r20
     f14:	ba f0       	brmi	.+46     	; 0xf44 <__addsf3x+0x98>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	a1 f0       	breq	.+40     	; 0xf42 <__addsf3x+0x96>
     f1a:	ff 0f       	add	r31, r31
     f1c:	bb 1f       	adc	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	c2 f7       	brpl	.-16     	; 0xf16 <__addsf3x+0x6a>
     f26:	0e c0       	rjmp	.+28     	; 0xf44 <__addsf3x+0x98>
     f28:	ba 0f       	add	r27, r26
     f2a:	62 1f       	adc	r22, r18
     f2c:	73 1f       	adc	r23, r19
     f2e:	84 1f       	adc	r24, r20
     f30:	48 f4       	brcc	.+18     	; 0xf44 <__addsf3x+0x98>
     f32:	87 95       	ror	r24
     f34:	77 95       	ror	r23
     f36:	67 95       	ror	r22
     f38:	b7 95       	ror	r27
     f3a:	f7 95       	ror	r31
     f3c:	9e 3f       	cpi	r25, 0xFE	; 254
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__addsf3x+0x96>
     f40:	b3 cf       	rjmp	.-154    	; 0xea8 <__addsf3+0x1e>
     f42:	93 95       	inc	r25
     f44:	88 0f       	add	r24, r24
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__addsf3x+0x9e>
     f48:	99 27       	eor	r25, r25
     f4a:	ee 0f       	add	r30, r30
     f4c:	97 95       	ror	r25
     f4e:	87 95       	ror	r24
     f50:	08 95       	ret

00000f52 <__divsf3>:
     f52:	0c d0       	rcall	.+24     	; 0xf6c <__divsf3x>
     f54:	ba c0       	rjmp	.+372    	; 0x10ca <__fp_round>
     f56:	b2 d0       	rcall	.+356    	; 0x10bc <__fp_pscB>
     f58:	40 f0       	brcs	.+16     	; 0xf6a <__divsf3+0x18>
     f5a:	a9 d0       	rcall	.+338    	; 0x10ae <__fp_pscA>
     f5c:	30 f0       	brcs	.+12     	; 0xf6a <__divsf3+0x18>
     f5e:	21 f4       	brne	.+8      	; 0xf68 <__divsf3+0x16>
     f60:	5f 3f       	cpi	r21, 0xFF	; 255
     f62:	19 f0       	breq	.+6      	; 0xf6a <__divsf3+0x18>
     f64:	9b c0       	rjmp	.+310    	; 0x109c <__fp_inf>
     f66:	51 11       	cpse	r21, r1
     f68:	e4 c0       	rjmp	.+456    	; 0x1132 <__fp_szero>
     f6a:	9e c0       	rjmp	.+316    	; 0x10a8 <__fp_nan>

00000f6c <__divsf3x>:
     f6c:	bf d0       	rcall	.+382    	; 0x10ec <__fp_split3>
     f6e:	98 f3       	brcs	.-26     	; 0xf56 <__divsf3+0x4>

00000f70 <__divsf3_pse>:
     f70:	99 23       	and	r25, r25
     f72:	c9 f3       	breq	.-14     	; 0xf66 <__divsf3+0x14>
     f74:	55 23       	and	r21, r21
     f76:	b1 f3       	breq	.-20     	; 0xf64 <__divsf3+0x12>
     f78:	95 1b       	sub	r25, r21
     f7a:	55 0b       	sbc	r21, r21
     f7c:	bb 27       	eor	r27, r27
     f7e:	aa 27       	eor	r26, r26
     f80:	62 17       	cp	r22, r18
     f82:	73 07       	cpc	r23, r19
     f84:	84 07       	cpc	r24, r20
     f86:	38 f0       	brcs	.+14     	; 0xf96 <__divsf3_pse+0x26>
     f88:	9f 5f       	subi	r25, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	44 1f       	adc	r20, r20
     f92:	aa 1f       	adc	r26, r26
     f94:	a9 f3       	breq	.-22     	; 0xf80 <__divsf3_pse+0x10>
     f96:	33 d0       	rcall	.+102    	; 0xffe <__divsf3_pse+0x8e>
     f98:	0e 2e       	mov	r0, r30
     f9a:	3a f0       	brmi	.+14     	; 0xfaa <__divsf3_pse+0x3a>
     f9c:	e0 e8       	ldi	r30, 0x80	; 128
     f9e:	30 d0       	rcall	.+96     	; 0x1000 <__divsf3_pse+0x90>
     fa0:	91 50       	subi	r25, 0x01	; 1
     fa2:	50 40       	sbci	r21, 0x00	; 0
     fa4:	e6 95       	lsr	r30
     fa6:	00 1c       	adc	r0, r0
     fa8:	ca f7       	brpl	.-14     	; 0xf9c <__divsf3_pse+0x2c>
     faa:	29 d0       	rcall	.+82     	; 0xffe <__divsf3_pse+0x8e>
     fac:	fe 2f       	mov	r31, r30
     fae:	27 d0       	rcall	.+78     	; 0xffe <__divsf3_pse+0x8e>
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	bb 1f       	adc	r27, r27
     fb8:	26 17       	cp	r18, r22
     fba:	37 07       	cpc	r19, r23
     fbc:	48 07       	cpc	r20, r24
     fbe:	ab 07       	cpc	r26, r27
     fc0:	b0 e8       	ldi	r27, 0x80	; 128
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <__divsf3_pse+0x56>
     fc4:	bb 0b       	sbc	r27, r27
     fc6:	80 2d       	mov	r24, r0
     fc8:	bf 01       	movw	r22, r30
     fca:	ff 27       	eor	r31, r31
     fcc:	93 58       	subi	r25, 0x83	; 131
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	2a f0       	brmi	.+10     	; 0xfdc <__divsf3_pse+0x6c>
     fd2:	9e 3f       	cpi	r25, 0xFE	; 254
     fd4:	51 05       	cpc	r21, r1
     fd6:	68 f0       	brcs	.+26     	; 0xff2 <__divsf3_pse+0x82>
     fd8:	61 c0       	rjmp	.+194    	; 0x109c <__fp_inf>
     fda:	ab c0       	rjmp	.+342    	; 0x1132 <__fp_szero>
     fdc:	5f 3f       	cpi	r21, 0xFF	; 255
     fde:	ec f3       	brlt	.-6      	; 0xfda <__divsf3_pse+0x6a>
     fe0:	98 3e       	cpi	r25, 0xE8	; 232
     fe2:	dc f3       	brlt	.-10     	; 0xfda <__divsf3_pse+0x6a>
     fe4:	86 95       	lsr	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	b7 95       	ror	r27
     fec:	f7 95       	ror	r31
     fee:	9f 5f       	subi	r25, 0xFF	; 255
     ff0:	c9 f7       	brne	.-14     	; 0xfe4 <__divsf3_pse+0x74>
     ff2:	88 0f       	add	r24, r24
     ff4:	91 1d       	adc	r25, r1
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	97 f9       	bld	r25, 7
     ffc:	08 95       	ret
     ffe:	e1 e0       	ldi	r30, 0x01	; 1
    1000:	66 0f       	add	r22, r22
    1002:	77 1f       	adc	r23, r23
    1004:	88 1f       	adc	r24, r24
    1006:	bb 1f       	adc	r27, r27
    1008:	62 17       	cp	r22, r18
    100a:	73 07       	cpc	r23, r19
    100c:	84 07       	cpc	r24, r20
    100e:	ba 07       	cpc	r27, r26
    1010:	20 f0       	brcs	.+8      	; 0x101a <__divsf3_pse+0xaa>
    1012:	62 1b       	sub	r22, r18
    1014:	73 0b       	sbc	r23, r19
    1016:	84 0b       	sbc	r24, r20
    1018:	ba 0b       	sbc	r27, r26
    101a:	ee 1f       	adc	r30, r30
    101c:	88 f7       	brcc	.-30     	; 0x1000 <__divsf3_pse+0x90>
    101e:	e0 95       	com	r30
    1020:	08 95       	ret

00001022 <__floatunsisf>:
    1022:	e8 94       	clt
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <__floatsisf+0x12>

00001026 <__floatsisf>:
    1026:	97 fb       	bst	r25, 7
    1028:	3e f4       	brtc	.+14     	; 0x1038 <__floatsisf+0x12>
    102a:	90 95       	com	r25
    102c:	80 95       	com	r24
    102e:	70 95       	com	r23
    1030:	61 95       	neg	r22
    1032:	7f 4f       	sbci	r23, 0xFF	; 255
    1034:	8f 4f       	sbci	r24, 0xFF	; 255
    1036:	9f 4f       	sbci	r25, 0xFF	; 255
    1038:	99 23       	and	r25, r25
    103a:	a9 f0       	breq	.+42     	; 0x1066 <__floatsisf+0x40>
    103c:	f9 2f       	mov	r31, r25
    103e:	96 e9       	ldi	r25, 0x96	; 150
    1040:	bb 27       	eor	r27, r27
    1042:	93 95       	inc	r25
    1044:	f6 95       	lsr	r31
    1046:	87 95       	ror	r24
    1048:	77 95       	ror	r23
    104a:	67 95       	ror	r22
    104c:	b7 95       	ror	r27
    104e:	f1 11       	cpse	r31, r1
    1050:	f8 cf       	rjmp	.-16     	; 0x1042 <__floatsisf+0x1c>
    1052:	fa f4       	brpl	.+62     	; 0x1092 <__floatsisf+0x6c>
    1054:	bb 0f       	add	r27, r27
    1056:	11 f4       	brne	.+4      	; 0x105c <__floatsisf+0x36>
    1058:	60 ff       	sbrs	r22, 0
    105a:	1b c0       	rjmp	.+54     	; 0x1092 <__floatsisf+0x6c>
    105c:	6f 5f       	subi	r22, 0xFF	; 255
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8f 4f       	sbci	r24, 0xFF	; 255
    1062:	9f 4f       	sbci	r25, 0xFF	; 255
    1064:	16 c0       	rjmp	.+44     	; 0x1092 <__floatsisf+0x6c>
    1066:	88 23       	and	r24, r24
    1068:	11 f0       	breq	.+4      	; 0x106e <__floatsisf+0x48>
    106a:	96 e9       	ldi	r25, 0x96	; 150
    106c:	11 c0       	rjmp	.+34     	; 0x1090 <__floatsisf+0x6a>
    106e:	77 23       	and	r23, r23
    1070:	21 f0       	breq	.+8      	; 0x107a <__floatsisf+0x54>
    1072:	9e e8       	ldi	r25, 0x8E	; 142
    1074:	87 2f       	mov	r24, r23
    1076:	76 2f       	mov	r23, r22
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <__floatsisf+0x5e>
    107a:	66 23       	and	r22, r22
    107c:	71 f0       	breq	.+28     	; 0x109a <__floatsisf+0x74>
    107e:	96 e8       	ldi	r25, 0x86	; 134
    1080:	86 2f       	mov	r24, r22
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	2a f0       	brmi	.+10     	; 0x1092 <__floatsisf+0x6c>
    1088:	9a 95       	dec	r25
    108a:	66 0f       	add	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	da f7       	brpl	.-10     	; 0x1088 <__floatsisf+0x62>
    1092:	88 0f       	add	r24, r24
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	97 f9       	bld	r25, 7
    109a:	08 95       	ret

0000109c <__fp_inf>:
    109c:	97 f9       	bld	r25, 7
    109e:	9f 67       	ori	r25, 0x7F	; 127
    10a0:	80 e8       	ldi	r24, 0x80	; 128
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	08 95       	ret

000010a8 <__fp_nan>:
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	80 ec       	ldi	r24, 0xC0	; 192
    10ac:	08 95       	ret

000010ae <__fp_pscA>:
    10ae:	00 24       	eor	r0, r0
    10b0:	0a 94       	dec	r0
    10b2:	16 16       	cp	r1, r22
    10b4:	17 06       	cpc	r1, r23
    10b6:	18 06       	cpc	r1, r24
    10b8:	09 06       	cpc	r0, r25
    10ba:	08 95       	ret

000010bc <__fp_pscB>:
    10bc:	00 24       	eor	r0, r0
    10be:	0a 94       	dec	r0
    10c0:	12 16       	cp	r1, r18
    10c2:	13 06       	cpc	r1, r19
    10c4:	14 06       	cpc	r1, r20
    10c6:	05 06       	cpc	r0, r21
    10c8:	08 95       	ret

000010ca <__fp_round>:
    10ca:	09 2e       	mov	r0, r25
    10cc:	03 94       	inc	r0
    10ce:	00 0c       	add	r0, r0
    10d0:	11 f4       	brne	.+4      	; 0x10d6 <__fp_round+0xc>
    10d2:	88 23       	and	r24, r24
    10d4:	52 f0       	brmi	.+20     	; 0x10ea <__fp_round+0x20>
    10d6:	bb 0f       	add	r27, r27
    10d8:	40 f4       	brcc	.+16     	; 0x10ea <__fp_round+0x20>
    10da:	bf 2b       	or	r27, r31
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <__fp_round+0x18>
    10de:	60 ff       	sbrs	r22, 0
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <__fp_round+0x20>
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	8f 4f       	sbci	r24, 0xFF	; 255
    10e8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ea:	08 95       	ret

000010ec <__fp_split3>:
    10ec:	57 fd       	sbrc	r21, 7
    10ee:	90 58       	subi	r25, 0x80	; 128
    10f0:	44 0f       	add	r20, r20
    10f2:	55 1f       	adc	r21, r21
    10f4:	59 f0       	breq	.+22     	; 0x110c <__fp_splitA+0x10>
    10f6:	5f 3f       	cpi	r21, 0xFF	; 255
    10f8:	71 f0       	breq	.+28     	; 0x1116 <__fp_splitA+0x1a>
    10fa:	47 95       	ror	r20

000010fc <__fp_splitA>:
    10fc:	88 0f       	add	r24, r24
    10fe:	97 fb       	bst	r25, 7
    1100:	99 1f       	adc	r25, r25
    1102:	61 f0       	breq	.+24     	; 0x111c <__fp_splitA+0x20>
    1104:	9f 3f       	cpi	r25, 0xFF	; 255
    1106:	79 f0       	breq	.+30     	; 0x1126 <__fp_splitA+0x2a>
    1108:	87 95       	ror	r24
    110a:	08 95       	ret
    110c:	12 16       	cp	r1, r18
    110e:	13 06       	cpc	r1, r19
    1110:	14 06       	cpc	r1, r20
    1112:	55 1f       	adc	r21, r21
    1114:	f2 cf       	rjmp	.-28     	; 0x10fa <__fp_split3+0xe>
    1116:	46 95       	lsr	r20
    1118:	f1 df       	rcall	.-30     	; 0x10fc <__fp_splitA>
    111a:	08 c0       	rjmp	.+16     	; 0x112c <__fp_splitA+0x30>
    111c:	16 16       	cp	r1, r22
    111e:	17 06       	cpc	r1, r23
    1120:	18 06       	cpc	r1, r24
    1122:	99 1f       	adc	r25, r25
    1124:	f1 cf       	rjmp	.-30     	; 0x1108 <__fp_splitA+0xc>
    1126:	86 95       	lsr	r24
    1128:	71 05       	cpc	r23, r1
    112a:	61 05       	cpc	r22, r1
    112c:	08 94       	sec
    112e:	08 95       	ret

00001130 <__fp_zero>:
    1130:	e8 94       	clt

00001132 <__fp_szero>:
    1132:	bb 27       	eor	r27, r27
    1134:	66 27       	eor	r22, r22
    1136:	77 27       	eor	r23, r23
    1138:	cb 01       	movw	r24, r22
    113a:	97 f9       	bld	r25, 7
    113c:	08 95       	ret

0000113e <__mulsf3>:
    113e:	0b d0       	rcall	.+22     	; 0x1156 <__mulsf3x>
    1140:	c4 cf       	rjmp	.-120    	; 0x10ca <__fp_round>
    1142:	b5 df       	rcall	.-150    	; 0x10ae <__fp_pscA>
    1144:	28 f0       	brcs	.+10     	; 0x1150 <__mulsf3+0x12>
    1146:	ba df       	rcall	.-140    	; 0x10bc <__fp_pscB>
    1148:	18 f0       	brcs	.+6      	; 0x1150 <__mulsf3+0x12>
    114a:	95 23       	and	r25, r21
    114c:	09 f0       	breq	.+2      	; 0x1150 <__mulsf3+0x12>
    114e:	a6 cf       	rjmp	.-180    	; 0x109c <__fp_inf>
    1150:	ab cf       	rjmp	.-170    	; 0x10a8 <__fp_nan>
    1152:	11 24       	eor	r1, r1
    1154:	ee cf       	rjmp	.-36     	; 0x1132 <__fp_szero>

00001156 <__mulsf3x>:
    1156:	ca df       	rcall	.-108    	; 0x10ec <__fp_split3>
    1158:	a0 f3       	brcs	.-24     	; 0x1142 <__mulsf3+0x4>

0000115a <__mulsf3_pse>:
    115a:	95 9f       	mul	r25, r21
    115c:	d1 f3       	breq	.-12     	; 0x1152 <__mulsf3+0x14>
    115e:	95 0f       	add	r25, r21
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	55 1f       	adc	r21, r21
    1164:	62 9f       	mul	r22, r18
    1166:	f0 01       	movw	r30, r0
    1168:	72 9f       	mul	r23, r18
    116a:	bb 27       	eor	r27, r27
    116c:	f0 0d       	add	r31, r0
    116e:	b1 1d       	adc	r27, r1
    1170:	63 9f       	mul	r22, r19
    1172:	aa 27       	eor	r26, r26
    1174:	f0 0d       	add	r31, r0
    1176:	b1 1d       	adc	r27, r1
    1178:	aa 1f       	adc	r26, r26
    117a:	64 9f       	mul	r22, r20
    117c:	66 27       	eor	r22, r22
    117e:	b0 0d       	add	r27, r0
    1180:	a1 1d       	adc	r26, r1
    1182:	66 1f       	adc	r22, r22
    1184:	82 9f       	mul	r24, r18
    1186:	22 27       	eor	r18, r18
    1188:	b0 0d       	add	r27, r0
    118a:	a1 1d       	adc	r26, r1
    118c:	62 1f       	adc	r22, r18
    118e:	73 9f       	mul	r23, r19
    1190:	b0 0d       	add	r27, r0
    1192:	a1 1d       	adc	r26, r1
    1194:	62 1f       	adc	r22, r18
    1196:	83 9f       	mul	r24, r19
    1198:	a0 0d       	add	r26, r0
    119a:	61 1d       	adc	r22, r1
    119c:	22 1f       	adc	r18, r18
    119e:	74 9f       	mul	r23, r20
    11a0:	33 27       	eor	r19, r19
    11a2:	a0 0d       	add	r26, r0
    11a4:	61 1d       	adc	r22, r1
    11a6:	23 1f       	adc	r18, r19
    11a8:	84 9f       	mul	r24, r20
    11aa:	60 0d       	add	r22, r0
    11ac:	21 1d       	adc	r18, r1
    11ae:	82 2f       	mov	r24, r18
    11b0:	76 2f       	mov	r23, r22
    11b2:	6a 2f       	mov	r22, r26
    11b4:	11 24       	eor	r1, r1
    11b6:	9f 57       	subi	r25, 0x7F	; 127
    11b8:	50 40       	sbci	r21, 0x00	; 0
    11ba:	8a f0       	brmi	.+34     	; 0x11de <__mulsf3_pse+0x84>
    11bc:	e1 f0       	breq	.+56     	; 0x11f6 <__mulsf3_pse+0x9c>
    11be:	88 23       	and	r24, r24
    11c0:	4a f0       	brmi	.+18     	; 0x11d4 <__mulsf3_pse+0x7a>
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	bb 1f       	adc	r27, r27
    11c8:	66 1f       	adc	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	91 50       	subi	r25, 0x01	; 1
    11d0:	50 40       	sbci	r21, 0x00	; 0
    11d2:	a9 f7       	brne	.-22     	; 0x11be <__mulsf3_pse+0x64>
    11d4:	9e 3f       	cpi	r25, 0xFE	; 254
    11d6:	51 05       	cpc	r21, r1
    11d8:	70 f0       	brcs	.+28     	; 0x11f6 <__mulsf3_pse+0x9c>
    11da:	60 cf       	rjmp	.-320    	; 0x109c <__fp_inf>
    11dc:	aa cf       	rjmp	.-172    	; 0x1132 <__fp_szero>
    11de:	5f 3f       	cpi	r21, 0xFF	; 255
    11e0:	ec f3       	brlt	.-6      	; 0x11dc <__mulsf3_pse+0x82>
    11e2:	98 3e       	cpi	r25, 0xE8	; 232
    11e4:	dc f3       	brlt	.-10     	; 0x11dc <__mulsf3_pse+0x82>
    11e6:	86 95       	lsr	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	e7 95       	ror	r30
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	c1 f7       	brne	.-16     	; 0x11e6 <__mulsf3_pse+0x8c>
    11f6:	fe 2b       	or	r31, r30
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret

00001204 <dtostrf>:
    1204:	ef 92       	push	r14
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	32 2f       	mov	r19, r18
    120e:	c0 2f       	mov	r28, r16
    1210:	47 ff       	sbrs	r20, 7
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <dtostrf+0x14>
    1214:	a4 e1       	ldi	r26, 0x14	; 20
    1216:	01 c0       	rjmp	.+2      	; 0x121a <dtostrf+0x16>
    1218:	a4 e0       	ldi	r26, 0x04	; 4
    121a:	e4 2f       	mov	r30, r20
    121c:	ff 27       	eor	r31, r31
    121e:	e7 fd       	sbrc	r30, 7
    1220:	f0 95       	com	r31
    1222:	f7 ff       	sbrs	r31, 7
    1224:	03 c0       	rjmp	.+6      	; 0x122c <dtostrf+0x28>
    1226:	f0 95       	com	r31
    1228:	e1 95       	neg	r30
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	4c 2f       	mov	r20, r28
    122e:	51 2f       	mov	r21, r17
    1230:	2e 2f       	mov	r18, r30
    1232:	03 2f       	mov	r16, r19
    1234:	ea 2e       	mov	r14, r26
    1236:	0e 94 02 0b 	call	0x1604	; 0x1604 <dtoa_prf>
    123a:	8c 2f       	mov	r24, r28
    123c:	91 2f       	mov	r25, r17
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ef 90       	pop	r14
    1246:	08 95       	ret

00001248 <vfprintf>:
    1248:	ad e0       	ldi	r26, 0x0D	; 13
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e2       	ldi	r30, 0x2A	; 42
    124e:	f9 e0       	ldi	r31, 0x09	; 9
    1250:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__prologue_saves__>
    1254:	3c 01       	movw	r6, r24
    1256:	7d 87       	std	Y+13, r23	; 0x0d
    1258:	6c 87       	std	Y+12, r22	; 0x0c
    125a:	5a 01       	movw	r10, r20
    125c:	fc 01       	movw	r30, r24
    125e:	17 82       	std	Z+7, r1	; 0x07
    1260:	16 82       	std	Z+6, r1	; 0x06
    1262:	83 81       	ldd	r24, Z+3	; 0x03
    1264:	81 ff       	sbrs	r24, 1
    1266:	c8 c1       	rjmp	.+912    	; 0x15f8 <vfprintf+0x3b0>
    1268:	2e 01       	movw	r4, r28
    126a:	08 94       	sec
    126c:	41 1c       	adc	r4, r1
    126e:	51 1c       	adc	r5, r1
    1270:	f3 01       	movw	r30, r6
    1272:	93 81       	ldd	r25, Z+3	; 0x03
    1274:	ec 85       	ldd	r30, Y+12	; 0x0c
    1276:	fd 85       	ldd	r31, Y+13	; 0x0d
    1278:	93 fd       	sbrc	r25, 3
    127a:	85 91       	lpm	r24, Z+
    127c:	93 ff       	sbrs	r25, 3
    127e:	81 91       	ld	r24, Z+
    1280:	fd 87       	std	Y+13, r31	; 0x0d
    1282:	ec 87       	std	Y+12, r30	; 0x0c
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <vfprintf+0x42>
    1288:	b3 c1       	rjmp	.+870    	; 0x15f0 <vfprintf+0x3a8>
    128a:	85 32       	cpi	r24, 0x25	; 37
    128c:	41 f4       	brne	.+16     	; 0x129e <vfprintf+0x56>
    128e:	93 fd       	sbrc	r25, 3
    1290:	85 91       	lpm	r24, Z+
    1292:	93 ff       	sbrs	r25, 3
    1294:	81 91       	ld	r24, Z+
    1296:	fd 87       	std	Y+13, r31	; 0x0d
    1298:	ec 87       	std	Y+12, r30	; 0x0c
    129a:	85 32       	cpi	r24, 0x25	; 37
    129c:	29 f4       	brne	.+10     	; 0x12a8 <vfprintf+0x60>
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	b3 01       	movw	r22, r6
    12a2:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    12a6:	e4 cf       	rjmp	.-56     	; 0x1270 <vfprintf+0x28>
    12a8:	ff 24       	eor	r15, r15
    12aa:	ee 24       	eor	r14, r14
    12ac:	10 e0       	ldi	r17, 0x00	; 0
    12ae:	10 32       	cpi	r17, 0x20	; 32
    12b0:	b0 f4       	brcc	.+44     	; 0x12de <vfprintf+0x96>
    12b2:	8b 32       	cpi	r24, 0x2B	; 43
    12b4:	69 f0       	breq	.+26     	; 0x12d0 <vfprintf+0x88>
    12b6:	8c 32       	cpi	r24, 0x2C	; 44
    12b8:	28 f4       	brcc	.+10     	; 0x12c4 <vfprintf+0x7c>
    12ba:	80 32       	cpi	r24, 0x20	; 32
    12bc:	51 f0       	breq	.+20     	; 0x12d2 <vfprintf+0x8a>
    12be:	83 32       	cpi	r24, 0x23	; 35
    12c0:	71 f4       	brne	.+28     	; 0x12de <vfprintf+0x96>
    12c2:	0b c0       	rjmp	.+22     	; 0x12da <vfprintf+0x92>
    12c4:	8d 32       	cpi	r24, 0x2D	; 45
    12c6:	39 f0       	breq	.+14     	; 0x12d6 <vfprintf+0x8e>
    12c8:	80 33       	cpi	r24, 0x30	; 48
    12ca:	49 f4       	brne	.+18     	; 0x12de <vfprintf+0x96>
    12cc:	11 60       	ori	r17, 0x01	; 1
    12ce:	2c c0       	rjmp	.+88     	; 0x1328 <vfprintf+0xe0>
    12d0:	12 60       	ori	r17, 0x02	; 2
    12d2:	14 60       	ori	r17, 0x04	; 4
    12d4:	29 c0       	rjmp	.+82     	; 0x1328 <vfprintf+0xe0>
    12d6:	18 60       	ori	r17, 0x08	; 8
    12d8:	27 c0       	rjmp	.+78     	; 0x1328 <vfprintf+0xe0>
    12da:	10 61       	ori	r17, 0x10	; 16
    12dc:	25 c0       	rjmp	.+74     	; 0x1328 <vfprintf+0xe0>
    12de:	17 fd       	sbrc	r17, 7
    12e0:	2e c0       	rjmp	.+92     	; 0x133e <vfprintf+0xf6>
    12e2:	28 2f       	mov	r18, r24
    12e4:	20 53       	subi	r18, 0x30	; 48
    12e6:	2a 30       	cpi	r18, 0x0A	; 10
    12e8:	98 f4       	brcc	.+38     	; 0x1310 <vfprintf+0xc8>
    12ea:	16 ff       	sbrs	r17, 6
    12ec:	08 c0       	rjmp	.+16     	; 0x12fe <vfprintf+0xb6>
    12ee:	8f 2d       	mov	r24, r15
    12f0:	88 0f       	add	r24, r24
    12f2:	f8 2e       	mov	r15, r24
    12f4:	ff 0c       	add	r15, r15
    12f6:	ff 0c       	add	r15, r15
    12f8:	f8 0e       	add	r15, r24
    12fa:	f2 0e       	add	r15, r18
    12fc:	15 c0       	rjmp	.+42     	; 0x1328 <vfprintf+0xe0>
    12fe:	8e 2d       	mov	r24, r14
    1300:	88 0f       	add	r24, r24
    1302:	e8 2e       	mov	r14, r24
    1304:	ee 0c       	add	r14, r14
    1306:	ee 0c       	add	r14, r14
    1308:	e8 0e       	add	r14, r24
    130a:	e2 0e       	add	r14, r18
    130c:	10 62       	ori	r17, 0x20	; 32
    130e:	0c c0       	rjmp	.+24     	; 0x1328 <vfprintf+0xe0>
    1310:	8e 32       	cpi	r24, 0x2E	; 46
    1312:	21 f4       	brne	.+8      	; 0x131c <vfprintf+0xd4>
    1314:	16 fd       	sbrc	r17, 6
    1316:	6c c1       	rjmp	.+728    	; 0x15f0 <vfprintf+0x3a8>
    1318:	10 64       	ori	r17, 0x40	; 64
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0xe0>
    131c:	8c 36       	cpi	r24, 0x6C	; 108
    131e:	11 f4       	brne	.+4      	; 0x1324 <vfprintf+0xdc>
    1320:	10 68       	ori	r17, 0x80	; 128
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0xe0>
    1324:	88 36       	cpi	r24, 0x68	; 104
    1326:	59 f4       	brne	.+22     	; 0x133e <vfprintf+0xf6>
    1328:	ec 85       	ldd	r30, Y+12	; 0x0c
    132a:	fd 85       	ldd	r31, Y+13	; 0x0d
    132c:	93 fd       	sbrc	r25, 3
    132e:	85 91       	lpm	r24, Z+
    1330:	93 ff       	sbrs	r25, 3
    1332:	81 91       	ld	r24, Z+
    1334:	fd 87       	std	Y+13, r31	; 0x0d
    1336:	ec 87       	std	Y+12, r30	; 0x0c
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <vfprintf+0xf6>
    133c:	b8 cf       	rjmp	.-144    	; 0x12ae <vfprintf+0x66>
    133e:	98 2f       	mov	r25, r24
    1340:	95 54       	subi	r25, 0x45	; 69
    1342:	93 30       	cpi	r25, 0x03	; 3
    1344:	18 f0       	brcs	.+6      	; 0x134c <vfprintf+0x104>
    1346:	90 52       	subi	r25, 0x20	; 32
    1348:	93 30       	cpi	r25, 0x03	; 3
    134a:	38 f4       	brcc	.+14     	; 0x135a <vfprintf+0x112>
    134c:	24 e0       	ldi	r18, 0x04	; 4
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	a2 0e       	add	r10, r18
    1352:	b3 1e       	adc	r11, r19
    1354:	3f e3       	ldi	r19, 0x3F	; 63
    1356:	39 83       	std	Y+1, r19	; 0x01
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <vfprintf+0x130>
    135a:	83 36       	cpi	r24, 0x63	; 99
    135c:	31 f0       	breq	.+12     	; 0x136a <vfprintf+0x122>
    135e:	83 37       	cpi	r24, 0x73	; 115
    1360:	81 f0       	breq	.+32     	; 0x1382 <vfprintf+0x13a>
    1362:	83 35       	cpi	r24, 0x53	; 83
    1364:	09 f0       	breq	.+2      	; 0x1368 <vfprintf+0x120>
    1366:	5a c0       	rjmp	.+180    	; 0x141c <vfprintf+0x1d4>
    1368:	22 c0       	rjmp	.+68     	; 0x13ae <vfprintf+0x166>
    136a:	f5 01       	movw	r30, r10
    136c:	80 81       	ld	r24, Z
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	22 e0       	ldi	r18, 0x02	; 2
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	a2 0e       	add	r10, r18
    1376:	b3 1e       	adc	r11, r19
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	c2 2e       	mov	r12, r18
    137c:	d1 2c       	mov	r13, r1
    137e:	42 01       	movw	r8, r4
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <vfprintf+0x162>
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	29 2e       	mov	r2, r25
    1386:	31 2c       	mov	r3, r1
    1388:	2a 0c       	add	r2, r10
    138a:	3b 1c       	adc	r3, r11
    138c:	f5 01       	movw	r30, r10
    138e:	80 80       	ld	r8, Z
    1390:	91 80       	ldd	r9, Z+1	; 0x01
    1392:	16 ff       	sbrs	r17, 6
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vfprintf+0x154>
    1396:	6f 2d       	mov	r22, r15
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <vfprintf+0x158>
    139c:	6f ef       	ldi	r22, 0xFF	; 255
    139e:	7f ef       	ldi	r23, 0xFF	; 255
    13a0:	c4 01       	movw	r24, r8
    13a2:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <strnlen>
    13a6:	6c 01       	movw	r12, r24
    13a8:	51 01       	movw	r10, r2
    13aa:	1f 77       	andi	r17, 0x7F	; 127
    13ac:	15 c0       	rjmp	.+42     	; 0x13d8 <vfprintf+0x190>
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	28 2e       	mov	r2, r24
    13b2:	31 2c       	mov	r3, r1
    13b4:	2a 0c       	add	r2, r10
    13b6:	3b 1c       	adc	r3, r11
    13b8:	f5 01       	movw	r30, r10
    13ba:	80 80       	ld	r8, Z
    13bc:	91 80       	ldd	r9, Z+1	; 0x01
    13be:	16 ff       	sbrs	r17, 6
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <vfprintf+0x180>
    13c2:	6f 2d       	mov	r22, r15
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x184>
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	7f ef       	ldi	r23, 0xFF	; 255
    13cc:	c4 01       	movw	r24, r8
    13ce:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <strnlen_P>
    13d2:	6c 01       	movw	r12, r24
    13d4:	10 68       	ori	r17, 0x80	; 128
    13d6:	51 01       	movw	r10, r2
    13d8:	13 fd       	sbrc	r17, 3
    13da:	1c c0       	rjmp	.+56     	; 0x1414 <vfprintf+0x1cc>
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <vfprintf+0x1a2>
    13de:	80 e2       	ldi	r24, 0x20	; 32
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	b3 01       	movw	r22, r6
    13e4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    13e8:	ea 94       	dec	r14
    13ea:	8e 2d       	mov	r24, r14
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	c8 16       	cp	r12, r24
    13f0:	d9 06       	cpc	r13, r25
    13f2:	a8 f3       	brcs	.-22     	; 0x13de <vfprintf+0x196>
    13f4:	0f c0       	rjmp	.+30     	; 0x1414 <vfprintf+0x1cc>
    13f6:	f4 01       	movw	r30, r8
    13f8:	17 fd       	sbrc	r17, 7
    13fa:	85 91       	lpm	r24, Z+
    13fc:	17 ff       	sbrs	r17, 7
    13fe:	81 91       	ld	r24, Z+
    1400:	4f 01       	movw	r8, r30
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	b3 01       	movw	r22, r6
    1406:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    140a:	e1 10       	cpse	r14, r1
    140c:	ea 94       	dec	r14
    140e:	08 94       	sec
    1410:	c1 08       	sbc	r12, r1
    1412:	d1 08       	sbc	r13, r1
    1414:	c1 14       	cp	r12, r1
    1416:	d1 04       	cpc	r13, r1
    1418:	71 f7       	brne	.-36     	; 0x13f6 <vfprintf+0x1ae>
    141a:	e7 c0       	rjmp	.+462    	; 0x15ea <vfprintf+0x3a2>
    141c:	84 36       	cpi	r24, 0x64	; 100
    141e:	11 f0       	breq	.+4      	; 0x1424 <vfprintf+0x1dc>
    1420:	89 36       	cpi	r24, 0x69	; 105
    1422:	51 f5       	brne	.+84     	; 0x1478 <vfprintf+0x230>
    1424:	f5 01       	movw	r30, r10
    1426:	17 ff       	sbrs	r17, 7
    1428:	07 c0       	rjmp	.+14     	; 0x1438 <vfprintf+0x1f0>
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	a2 81       	ldd	r26, Z+2	; 0x02
    1430:	b3 81       	ldd	r27, Z+3	; 0x03
    1432:	24 e0       	ldi	r18, 0x04	; 4
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	08 c0       	rjmp	.+16     	; 0x1448 <vfprintf+0x200>
    1438:	80 81       	ld	r24, Z
    143a:	91 81       	ldd	r25, Z+1	; 0x01
    143c:	aa 27       	eor	r26, r26
    143e:	97 fd       	sbrc	r25, 7
    1440:	a0 95       	com	r26
    1442:	ba 2f       	mov	r27, r26
    1444:	22 e0       	ldi	r18, 0x02	; 2
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	a2 0e       	add	r10, r18
    144a:	b3 1e       	adc	r11, r19
    144c:	01 2f       	mov	r16, r17
    144e:	0f 76       	andi	r16, 0x6F	; 111
    1450:	b7 ff       	sbrs	r27, 7
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <vfprintf+0x21c>
    1454:	b0 95       	com	r27
    1456:	a0 95       	com	r26
    1458:	90 95       	com	r25
    145a:	81 95       	neg	r24
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	af 4f       	sbci	r26, 0xFF	; 255
    1460:	bf 4f       	sbci	r27, 0xFF	; 255
    1462:	00 68       	ori	r16, 0x80	; 128
    1464:	bc 01       	movw	r22, r24
    1466:	cd 01       	movw	r24, r26
    1468:	a2 01       	movw	r20, r4
    146a:	2a e0       	ldi	r18, 0x0A	; 10
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__ultoa_invert>
    1472:	d8 2e       	mov	r13, r24
    1474:	d4 18       	sub	r13, r4
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <vfprintf+0x2ae>
    1478:	85 37       	cpi	r24, 0x75	; 117
    147a:	21 f4       	brne	.+8      	; 0x1484 <vfprintf+0x23c>
    147c:	1f 7e       	andi	r17, 0xEF	; 239
    147e:	2a e0       	ldi	r18, 0x0A	; 10
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	20 c0       	rjmp	.+64     	; 0x14c4 <vfprintf+0x27c>
    1484:	19 7f       	andi	r17, 0xF9	; 249
    1486:	8f 36       	cpi	r24, 0x6F	; 111
    1488:	a9 f0       	breq	.+42     	; 0x14b4 <vfprintf+0x26c>
    148a:	80 37       	cpi	r24, 0x70	; 112
    148c:	20 f4       	brcc	.+8      	; 0x1496 <vfprintf+0x24e>
    148e:	88 35       	cpi	r24, 0x58	; 88
    1490:	09 f0       	breq	.+2      	; 0x1494 <vfprintf+0x24c>
    1492:	ae c0       	rjmp	.+348    	; 0x15f0 <vfprintf+0x3a8>
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <vfprintf+0x264>
    1496:	80 37       	cpi	r24, 0x70	; 112
    1498:	21 f0       	breq	.+8      	; 0x14a2 <vfprintf+0x25a>
    149a:	88 37       	cpi	r24, 0x78	; 120
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vfprintf+0x258>
    149e:	a8 c0       	rjmp	.+336    	; 0x15f0 <vfprintf+0x3a8>
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <vfprintf+0x25c>
    14a2:	10 61       	ori	r17, 0x10	; 16
    14a4:	14 ff       	sbrs	r17, 4
    14a6:	09 c0       	rjmp	.+18     	; 0x14ba <vfprintf+0x272>
    14a8:	14 60       	ori	r17, 0x04	; 4
    14aa:	07 c0       	rjmp	.+14     	; 0x14ba <vfprintf+0x272>
    14ac:	14 ff       	sbrs	r17, 4
    14ae:	08 c0       	rjmp	.+16     	; 0x14c0 <vfprintf+0x278>
    14b0:	16 60       	ori	r17, 0x06	; 6
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0x278>
    14b4:	28 e0       	ldi	r18, 0x08	; 8
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <vfprintf+0x27c>
    14ba:	20 e1       	ldi	r18, 0x10	; 16
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <vfprintf+0x27c>
    14c0:	20 e1       	ldi	r18, 0x10	; 16
    14c2:	32 e0       	ldi	r19, 0x02	; 2
    14c4:	f5 01       	movw	r30, r10
    14c6:	17 ff       	sbrs	r17, 7
    14c8:	07 c0       	rjmp	.+14     	; 0x14d8 <vfprintf+0x290>
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	82 81       	ldd	r24, Z+2	; 0x02
    14d0:	93 81       	ldd	r25, Z+3	; 0x03
    14d2:	44 e0       	ldi	r20, 0x04	; 4
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <vfprintf+0x29c>
    14d8:	60 81       	ld	r22, Z
    14da:	71 81       	ldd	r23, Z+1	; 0x01
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	42 e0       	ldi	r20, 0x02	; 2
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	a4 0e       	add	r10, r20
    14e6:	b5 1e       	adc	r11, r21
    14e8:	a2 01       	movw	r20, r4
    14ea:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__ultoa_invert>
    14ee:	d8 2e       	mov	r13, r24
    14f0:	d4 18       	sub	r13, r4
    14f2:	01 2f       	mov	r16, r17
    14f4:	0f 77       	andi	r16, 0x7F	; 127
    14f6:	06 ff       	sbrs	r16, 6
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <vfprintf+0x2c4>
    14fa:	0e 7f       	andi	r16, 0xFE	; 254
    14fc:	df 14       	cp	r13, r15
    14fe:	30 f4       	brcc	.+12     	; 0x150c <vfprintf+0x2c4>
    1500:	04 ff       	sbrs	r16, 4
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <vfprintf+0x2c8>
    1504:	02 fd       	sbrc	r16, 2
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <vfprintf+0x2c8>
    1508:	0f 7e       	andi	r16, 0xEF	; 239
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <vfprintf+0x2c8>
    150c:	1d 2d       	mov	r17, r13
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <vfprintf+0x2ca>
    1510:	1f 2d       	mov	r17, r15
    1512:	80 2f       	mov	r24, r16
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	04 ff       	sbrs	r16, 4
    1518:	0c c0       	rjmp	.+24     	; 0x1532 <vfprintf+0x2ea>
    151a:	fe 01       	movw	r30, r28
    151c:	ed 0d       	add	r30, r13
    151e:	f1 1d       	adc	r31, r1
    1520:	20 81       	ld	r18, Z
    1522:	20 33       	cpi	r18, 0x30	; 48
    1524:	11 f4       	brne	.+4      	; 0x152a <vfprintf+0x2e2>
    1526:	09 7e       	andi	r16, 0xE9	; 233
    1528:	09 c0       	rjmp	.+18     	; 0x153c <vfprintf+0x2f4>
    152a:	02 ff       	sbrs	r16, 2
    152c:	06 c0       	rjmp	.+12     	; 0x153a <vfprintf+0x2f2>
    152e:	1e 5f       	subi	r17, 0xFE	; 254
    1530:	05 c0       	rjmp	.+10     	; 0x153c <vfprintf+0x2f4>
    1532:	86 78       	andi	r24, 0x86	; 134
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	00 97       	sbiw	r24, 0x00	; 0
    1538:	09 f0       	breq	.+2      	; 0x153c <vfprintf+0x2f4>
    153a:	1f 5f       	subi	r17, 0xFF	; 255
    153c:	80 2e       	mov	r8, r16
    153e:	99 24       	eor	r9, r9
    1540:	03 fd       	sbrc	r16, 3
    1542:	12 c0       	rjmp	.+36     	; 0x1568 <vfprintf+0x320>
    1544:	00 ff       	sbrs	r16, 0
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <vfprintf+0x31a>
    1548:	fd 2c       	mov	r15, r13
    154a:	1e 15       	cp	r17, r14
    154c:	50 f4       	brcc	.+20     	; 0x1562 <vfprintf+0x31a>
    154e:	fe 0c       	add	r15, r14
    1550:	f1 1a       	sub	r15, r17
    1552:	1e 2d       	mov	r17, r14
    1554:	06 c0       	rjmp	.+12     	; 0x1562 <vfprintf+0x31a>
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	b3 01       	movw	r22, r6
    155c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    1560:	1f 5f       	subi	r17, 0xFF	; 255
    1562:	1e 15       	cp	r17, r14
    1564:	c0 f3       	brcs	.-16     	; 0x1556 <vfprintf+0x30e>
    1566:	04 c0       	rjmp	.+8      	; 0x1570 <vfprintf+0x328>
    1568:	1e 15       	cp	r17, r14
    156a:	10 f4       	brcc	.+4      	; 0x1570 <vfprintf+0x328>
    156c:	e1 1a       	sub	r14, r17
    156e:	01 c0       	rjmp	.+2      	; 0x1572 <vfprintf+0x32a>
    1570:	ee 24       	eor	r14, r14
    1572:	84 fe       	sbrs	r8, 4
    1574:	0f c0       	rjmp	.+30     	; 0x1594 <vfprintf+0x34c>
    1576:	80 e3       	ldi	r24, 0x30	; 48
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	b3 01       	movw	r22, r6
    157c:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    1580:	82 fe       	sbrs	r8, 2
    1582:	1f c0       	rjmp	.+62     	; 0x15c2 <vfprintf+0x37a>
    1584:	81 fe       	sbrs	r8, 1
    1586:	03 c0       	rjmp	.+6      	; 0x158e <vfprintf+0x346>
    1588:	88 e5       	ldi	r24, 0x58	; 88
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	10 c0       	rjmp	.+32     	; 0x15ae <vfprintf+0x366>
    158e:	88 e7       	ldi	r24, 0x78	; 120
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0d c0       	rjmp	.+26     	; 0x15ae <vfprintf+0x366>
    1594:	c4 01       	movw	r24, r8
    1596:	86 78       	andi	r24, 0x86	; 134
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	91 f0       	breq	.+36     	; 0x15c2 <vfprintf+0x37a>
    159e:	81 fc       	sbrc	r8, 1
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <vfprintf+0x35e>
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <vfprintf+0x360>
    15a6:	8b e2       	ldi	r24, 0x2B	; 43
    15a8:	07 fd       	sbrc	r16, 7
    15aa:	8d e2       	ldi	r24, 0x2D	; 45
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	b3 01       	movw	r22, r6
    15b0:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0x37a>
    15b6:	80 e3       	ldi	r24, 0x30	; 48
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	b3 01       	movw	r22, r6
    15bc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    15c0:	fa 94       	dec	r15
    15c2:	df 14       	cp	r13, r15
    15c4:	c0 f3       	brcs	.-16     	; 0x15b6 <vfprintf+0x36e>
    15c6:	da 94       	dec	r13
    15c8:	f2 01       	movw	r30, r4
    15ca:	ed 0d       	add	r30, r13
    15cc:	f1 1d       	adc	r31, r1
    15ce:	80 81       	ld	r24, Z
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	b3 01       	movw	r22, r6
    15d4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    15d8:	dd 20       	and	r13, r13
    15da:	a9 f7       	brne	.-22     	; 0x15c6 <vfprintf+0x37e>
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x3a2>
    15de:	80 e2       	ldi	r24, 0x20	; 32
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	b3 01       	movw	r22, r6
    15e4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <fputc>
    15e8:	ea 94       	dec	r14
    15ea:	ee 20       	and	r14, r14
    15ec:	c1 f7       	brne	.-16     	; 0x15de <vfprintf+0x396>
    15ee:	40 ce       	rjmp	.-896    	; 0x1270 <vfprintf+0x28>
    15f0:	f3 01       	movw	r30, r6
    15f2:	86 81       	ldd	r24, Z+6	; 0x06
    15f4:	97 81       	ldd	r25, Z+7	; 0x07
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <vfprintf+0x3b4>
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	9f ef       	ldi	r25, 0xFF	; 255
    15fc:	2d 96       	adiw	r28, 0x0d	; 13
    15fe:	e2 e1       	ldi	r30, 0x12	; 18
    1600:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__epilogue_restores__>

00001604 <dtoa_prf>:
    1604:	a9 e0       	ldi	r26, 0x09	; 9
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e8 e0       	ldi	r30, 0x08	; 8
    160a:	fb e0       	ldi	r31, 0x0B	; 11
    160c:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <__prologue_saves__+0x8>
    1610:	6a 01       	movw	r12, r20
    1612:	12 2f       	mov	r17, r18
    1614:	f0 2e       	mov	r15, r16
    1616:	2b e3       	ldi	r18, 0x3B	; 59
    1618:	20 17       	cp	r18, r16
    161a:	18 f0       	brcs	.+6      	; 0x1622 <dtoa_prf+0x1e>
    161c:	b0 2e       	mov	r11, r16
    161e:	b3 94       	inc	r11
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <dtoa_prf+0x22>
    1622:	3c e3       	ldi	r19, 0x3C	; 60
    1624:	b3 2e       	mov	r11, r19
    1626:	ae 01       	movw	r20, r28
    1628:	4f 5f       	subi	r20, 0xFF	; 255
    162a:	5f 4f       	sbci	r21, 0xFF	; 255
    162c:	27 e0       	ldi	r18, 0x07	; 7
    162e:	0b 2d       	mov	r16, r11
    1630:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <__ftoa_engine>
    1634:	bc 01       	movw	r22, r24
    1636:	a9 81       	ldd	r26, Y+1	; 0x01
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	cd 01       	movw	r24, r26
    163c:	89 70       	andi	r24, 0x09	; 9
    163e:	90 70       	andi	r25, 0x00	; 0
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	31 f0       	breq	.+12     	; 0x1652 <dtoa_prf+0x4e>
    1646:	e1 fc       	sbrc	r14, 1
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <dtoa_prf+0x52>
    164a:	e0 fe       	sbrs	r14, 0
    164c:	06 c0       	rjmp	.+12     	; 0x165a <dtoa_prf+0x56>
    164e:	40 e2       	ldi	r20, 0x20	; 32
    1650:	05 c0       	rjmp	.+10     	; 0x165c <dtoa_prf+0x58>
    1652:	4d e2       	ldi	r20, 0x2D	; 45
    1654:	03 c0       	rjmp	.+6      	; 0x165c <dtoa_prf+0x58>
    1656:	4b e2       	ldi	r20, 0x2B	; 43
    1658:	01 c0       	rjmp	.+2      	; 0x165c <dtoa_prf+0x58>
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	a3 ff       	sbrs	r26, 3
    165e:	36 c0       	rjmp	.+108    	; 0x16cc <dtoa_prf+0xc8>
    1660:	44 23       	and	r20, r20
    1662:	11 f0       	breq	.+4      	; 0x1668 <dtoa_prf+0x64>
    1664:	84 e0       	ldi	r24, 0x04	; 4
    1666:	01 c0       	rjmp	.+2      	; 0x166a <dtoa_prf+0x66>
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	81 17       	cp	r24, r17
    166c:	10 f4       	brcc	.+4      	; 0x1672 <dtoa_prf+0x6e>
    166e:	18 1b       	sub	r17, r24
    1670:	01 c0       	rjmp	.+2      	; 0x1674 <dtoa_prf+0x70>
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	e4 fc       	sbrc	r14, 4
    1676:	0b c0       	rjmp	.+22     	; 0x168e <dtoa_prf+0x8a>
    1678:	91 2f       	mov	r25, r17
    167a:	f6 01       	movw	r30, r12
    167c:	80 e2       	ldi	r24, 0x20	; 32
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <dtoa_prf+0x80>
    1680:	81 93       	st	Z+, r24
    1682:	91 50       	subi	r25, 0x01	; 1
    1684:	99 23       	and	r25, r25
    1686:	e1 f7       	brne	.-8      	; 0x1680 <dtoa_prf+0x7c>
    1688:	c1 0e       	add	r12, r17
    168a:	d1 1c       	adc	r13, r1
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	44 23       	and	r20, r20
    1690:	19 f0       	breq	.+6      	; 0x1698 <dtoa_prf+0x94>
    1692:	f6 01       	movw	r30, r12
    1694:	41 93       	st	Z+, r20
    1696:	6f 01       	movw	r12, r30
    1698:	e2 fe       	sbrs	r14, 2
    169a:	05 c0       	rjmp	.+10     	; 0x16a6 <dtoa_prf+0xa2>
    169c:	8e e4       	ldi	r24, 0x4E	; 78
    169e:	f6 01       	movw	r30, r12
    16a0:	80 83       	st	Z, r24
    16a2:	91 e4       	ldi	r25, 0x41	; 65
    16a4:	04 c0       	rjmp	.+8      	; 0x16ae <dtoa_prf+0xaa>
    16a6:	8e e6       	ldi	r24, 0x6E	; 110
    16a8:	f6 01       	movw	r30, r12
    16aa:	80 83       	st	Z, r24
    16ac:	91 e6       	ldi	r25, 0x61	; 97
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	82 83       	std	Z+2, r24	; 0x02
    16b2:	83 e0       	ldi	r24, 0x03	; 3
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	c8 0e       	add	r12, r24
    16b8:	d9 1e       	adc	r13, r25
    16ba:	81 2f       	mov	r24, r17
    16bc:	f6 01       	movw	r30, r12
    16be:	90 e2       	ldi	r25, 0x20	; 32
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <dtoa_prf+0xc2>
    16c2:	91 93       	st	Z+, r25
    16c4:	81 50       	subi	r24, 0x01	; 1
    16c6:	88 23       	and	r24, r24
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <dtoa_prf+0xbe>
    16ca:	3a c0       	rjmp	.+116    	; 0x1740 <dtoa_prf+0x13c>
    16cc:	a2 ff       	sbrs	r26, 2
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <dtoa_prf+0x14a>
    16d0:	44 23       	and	r20, r20
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <dtoa_prf+0xd4>
    16d4:	84 e0       	ldi	r24, 0x04	; 4
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <dtoa_prf+0xd6>
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	81 17       	cp	r24, r17
    16dc:	10 f4       	brcc	.+4      	; 0x16e2 <dtoa_prf+0xde>
    16de:	18 1b       	sub	r17, r24
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <dtoa_prf+0xe0>
    16e2:	10 e0       	ldi	r17, 0x00	; 0
    16e4:	e4 fc       	sbrc	r14, 4
    16e6:	0b c0       	rjmp	.+22     	; 0x16fe <dtoa_prf+0xfa>
    16e8:	91 2f       	mov	r25, r17
    16ea:	f6 01       	movw	r30, r12
    16ec:	80 e2       	ldi	r24, 0x20	; 32
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <dtoa_prf+0xf0>
    16f0:	81 93       	st	Z+, r24
    16f2:	91 50       	subi	r25, 0x01	; 1
    16f4:	99 23       	and	r25, r25
    16f6:	e1 f7       	brne	.-8      	; 0x16f0 <dtoa_prf+0xec>
    16f8:	c1 0e       	add	r12, r17
    16fa:	d1 1c       	adc	r13, r1
    16fc:	10 e0       	ldi	r17, 0x00	; 0
    16fe:	44 23       	and	r20, r20
    1700:	19 f0       	breq	.+6      	; 0x1708 <dtoa_prf+0x104>
    1702:	f6 01       	movw	r30, r12
    1704:	41 93       	st	Z+, r20
    1706:	6f 01       	movw	r12, r30
    1708:	e2 fe       	sbrs	r14, 2
    170a:	07 c0       	rjmp	.+14     	; 0x171a <dtoa_prf+0x116>
    170c:	89 e4       	ldi	r24, 0x49	; 73
    170e:	f6 01       	movw	r30, r12
    1710:	80 83       	st	Z, r24
    1712:	8e e4       	ldi	r24, 0x4E	; 78
    1714:	81 83       	std	Z+1, r24	; 0x01
    1716:	86 e4       	ldi	r24, 0x46	; 70
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <dtoa_prf+0x122>
    171a:	89 e6       	ldi	r24, 0x69	; 105
    171c:	f6 01       	movw	r30, r12
    171e:	80 83       	st	Z, r24
    1720:	8e e6       	ldi	r24, 0x6E	; 110
    1722:	81 83       	std	Z+1, r24	; 0x01
    1724:	86 e6       	ldi	r24, 0x66	; 102
    1726:	82 83       	std	Z+2, r24	; 0x02
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	c8 0e       	add	r12, r24
    172e:	d9 1e       	adc	r13, r25
    1730:	81 2f       	mov	r24, r17
    1732:	f6 01       	movw	r30, r12
    1734:	90 e2       	ldi	r25, 0x20	; 32
    1736:	02 c0       	rjmp	.+4      	; 0x173c <dtoa_prf+0x138>
    1738:	91 93       	st	Z+, r25
    173a:	81 50       	subi	r24, 0x01	; 1
    173c:	88 23       	and	r24, r24
    173e:	e1 f7       	brne	.-8      	; 0x1738 <dtoa_prf+0x134>
    1740:	c1 0e       	add	r12, r17
    1742:	d1 1c       	adc	r13, r1
    1744:	f6 01       	movw	r30, r12
    1746:	10 82       	st	Z, r1
    1748:	8e ef       	ldi	r24, 0xFE	; 254
    174a:	9f ef       	ldi	r25, 0xFF	; 255
    174c:	af c0       	rjmp	.+350    	; 0x18ac <dtoa_prf+0x2a8>
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	44 23       	and	r20, r20
    1754:	11 f4       	brne	.+4      	; 0x175a <dtoa_prf+0x156>
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	16 16       	cp	r1, r22
    175c:	17 06       	cpc	r1, r23
    175e:	1c f4       	brge	.+6      	; 0x1766 <dtoa_prf+0x162>
    1760:	cb 01       	movw	r24, r22
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	02 c0       	rjmp	.+4      	; 0x176a <dtoa_prf+0x166>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	28 0f       	add	r18, r24
    176c:	39 1f       	adc	r19, r25
    176e:	ff 20       	and	r15, r15
    1770:	21 f0       	breq	.+8      	; 0x177a <dtoa_prf+0x176>
    1772:	8f 2d       	mov	r24, r15
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	01 96       	adiw	r24, 0x01	; 1
    1778:	02 c0       	rjmp	.+4      	; 0x177e <dtoa_prf+0x17a>
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	21 2f       	mov	r18, r17
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	1c f4       	brge	.+6      	; 0x1792 <dtoa_prf+0x18e>
    178c:	51 2f       	mov	r21, r17
    178e:	58 1b       	sub	r21, r24
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <dtoa_prf+0x190>
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	8e 2d       	mov	r24, r14
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	9c 01       	movw	r18, r24
    179a:	20 71       	andi	r18, 0x10	; 16
    179c:	30 70       	andi	r19, 0x00	; 0
    179e:	e4 fc       	sbrc	r14, 4
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <dtoa_prf+0x1b8>
    17a2:	e3 fc       	sbrc	r14, 3
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <dtoa_prf+0x1b8>
    17a6:	85 2f       	mov	r24, r21
    17a8:	f6 01       	movw	r30, r12
    17aa:	90 e2       	ldi	r25, 0x20	; 32
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <dtoa_prf+0x1ae>
    17ae:	91 93       	st	Z+, r25
    17b0:	81 50       	subi	r24, 0x01	; 1
    17b2:	88 23       	and	r24, r24
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <dtoa_prf+0x1aa>
    17b6:	c5 0e       	add	r12, r21
    17b8:	d1 1c       	adc	r13, r1
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	44 23       	and	r20, r20
    17be:	19 f0       	breq	.+6      	; 0x17c6 <dtoa_prf+0x1c2>
    17c0:	f6 01       	movw	r30, r12
    17c2:	41 93       	st	Z+, r20
    17c4:	6f 01       	movw	r12, r30
    17c6:	21 15       	cp	r18, r1
    17c8:	31 05       	cpc	r19, r1
    17ca:	59 f4       	brne	.+22     	; 0x17e2 <dtoa_prf+0x1de>
    17cc:	85 2f       	mov	r24, r21
    17ce:	f6 01       	movw	r30, r12
    17d0:	90 e3       	ldi	r25, 0x30	; 48
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <dtoa_prf+0x1d4>
    17d4:	91 93       	st	Z+, r25
    17d6:	81 50       	subi	r24, 0x01	; 1
    17d8:	88 23       	and	r24, r24
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <dtoa_prf+0x1d0>
    17dc:	c5 0e       	add	r12, r21
    17de:	d1 1c       	adc	r13, r1
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	b6 0e       	add	r11, r22
    17e4:	4a 81       	ldd	r20, Y+2	; 0x02
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	62 2e       	mov	r6, r18
    17ea:	71 2c       	mov	r7, r1
    17ec:	6a 22       	and	r6, r26
    17ee:	7b 22       	and	r7, r27
    17f0:	a4 ff       	sbrs	r26, 4
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <dtoa_prf+0x1f6>
    17f4:	41 33       	cpi	r20, 0x31	; 49
    17f6:	09 f4       	brne	.+2      	; 0x17fa <dtoa_prf+0x1f6>
    17f8:	ba 94       	dec	r11
    17fa:	1b 14       	cp	r1, r11
    17fc:	2c f4       	brge	.+10     	; 0x1808 <dtoa_prf+0x204>
    17fe:	8b 2d       	mov	r24, r11
    1800:	89 30       	cpi	r24, 0x09	; 9
    1802:	18 f0       	brcs	.+6      	; 0x180a <dtoa_prf+0x206>
    1804:	88 e0       	ldi	r24, 0x08	; 8
    1806:	01 c0       	rjmp	.+2      	; 0x180a <dtoa_prf+0x206>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	9b 01       	movw	r18, r22
    180c:	77 ff       	sbrs	r23, 7
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <dtoa_prf+0x210>
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	9e e2       	ldi	r25, 0x2E	; 46
    181a:	e9 2e       	mov	r14, r25
    181c:	4b 01       	movw	r8, r22
    181e:	88 1a       	sub	r8, r24
    1820:	91 08       	sbc	r9, r1
    1822:	cb 01       	movw	r24, r22
    1824:	82 1b       	sub	r24, r18
    1826:	93 0b       	sbc	r25, r19
    1828:	8e 01       	movw	r16, r28
    182a:	0f 5f       	subi	r16, 0xFF	; 255
    182c:	1f 4f       	sbci	r17, 0xFF	; 255
    182e:	08 0f       	add	r16, r24
    1830:	19 1f       	adc	r17, r25
    1832:	8f 2d       	mov	r24, r15
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	aa 24       	eor	r10, r10
    1838:	bb 24       	eor	r11, r11
    183a:	a8 1a       	sub	r10, r24
    183c:	b9 0a       	sbc	r11, r25
    183e:	ff ef       	ldi	r31, 0xFF	; 255
    1840:	2f 3f       	cpi	r18, 0xFF	; 255
    1842:	3f 07       	cpc	r19, r31
    1844:	19 f4       	brne	.+6      	; 0x184c <dtoa_prf+0x248>
    1846:	f6 01       	movw	r30, r12
    1848:	e1 92       	st	Z+, r14
    184a:	6f 01       	movw	r12, r30
    184c:	62 17       	cp	r22, r18
    184e:	73 07       	cpc	r23, r19
    1850:	44 f0       	brlt	.+16     	; 0x1862 <dtoa_prf+0x25e>
    1852:	82 16       	cp	r8, r18
    1854:	93 06       	cpc	r9, r19
    1856:	2c f4       	brge	.+10     	; 0x1862 <dtoa_prf+0x25e>
    1858:	f8 01       	movw	r30, r16
    185a:	ea 0f       	add	r30, r26
    185c:	fb 1f       	adc	r31, r27
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <dtoa_prf+0x260>
    1862:	80 e3       	ldi	r24, 0x30	; 48
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	30 40       	sbci	r19, 0x00	; 0
    1868:	11 96       	adiw	r26, 0x01	; 1
    186a:	2a 15       	cp	r18, r10
    186c:	3b 05       	cpc	r19, r11
    186e:	24 f0       	brlt	.+8      	; 0x1878 <dtoa_prf+0x274>
    1870:	f6 01       	movw	r30, r12
    1872:	81 93       	st	Z+, r24
    1874:	6f 01       	movw	r12, r30
    1876:	e3 cf       	rjmp	.-58     	; 0x183e <dtoa_prf+0x23a>
    1878:	26 17       	cp	r18, r22
    187a:	37 07       	cpc	r19, r23
    187c:	41 f4       	brne	.+16     	; 0x188e <dtoa_prf+0x28a>
    187e:	46 33       	cpi	r20, 0x36	; 54
    1880:	28 f4       	brcc	.+10     	; 0x188c <dtoa_prf+0x288>
    1882:	45 33       	cpi	r20, 0x35	; 53
    1884:	21 f4       	brne	.+8      	; 0x188e <dtoa_prf+0x28a>
    1886:	61 14       	cp	r6, r1
    1888:	71 04       	cpc	r7, r1
    188a:	09 f4       	brne	.+2      	; 0x188e <dtoa_prf+0x28a>
    188c:	81 e3       	ldi	r24, 0x31	; 49
    188e:	f6 01       	movw	r30, r12
    1890:	81 93       	st	Z+, r24
    1892:	85 2f       	mov	r24, r21
    1894:	df 01       	movw	r26, r30
    1896:	90 e2       	ldi	r25, 0x20	; 32
    1898:	02 c0       	rjmp	.+4      	; 0x189e <dtoa_prf+0x29a>
    189a:	9d 93       	st	X+, r25
    189c:	81 50       	subi	r24, 0x01	; 1
    189e:	88 23       	and	r24, r24
    18a0:	e1 f7       	brne	.-8      	; 0x189a <dtoa_prf+0x296>
    18a2:	e5 0f       	add	r30, r21
    18a4:	f1 1d       	adc	r31, r1
    18a6:	10 82       	st	Z, r1
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	29 96       	adiw	r28, 0x09	; 9
    18ae:	ee e0       	ldi	r30, 0x0E	; 14
    18b0:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__epilogue_restores__+0x8>

000018b4 <__ftoa_engine>:
    18b4:	28 30       	cpi	r18, 0x08	; 8
    18b6:	08 f0       	brcs	.+2      	; 0x18ba <__ftoa_engine+0x6>
    18b8:	27 e0       	ldi	r18, 0x07	; 7
    18ba:	33 27       	eor	r19, r19
    18bc:	da 01       	movw	r26, r20
    18be:	99 0f       	add	r25, r25
    18c0:	31 1d       	adc	r19, r1
    18c2:	87 fd       	sbrc	r24, 7
    18c4:	91 60       	ori	r25, 0x01	; 1
    18c6:	00 96       	adiw	r24, 0x00	; 0
    18c8:	61 05       	cpc	r22, r1
    18ca:	71 05       	cpc	r23, r1
    18cc:	39 f4       	brne	.+14     	; 0x18dc <__ftoa_engine+0x28>
    18ce:	32 60       	ori	r19, 0x02	; 2
    18d0:	2e 5f       	subi	r18, 0xFE	; 254
    18d2:	3d 93       	st	X+, r19
    18d4:	30 e3       	ldi	r19, 0x30	; 48
    18d6:	2a 95       	dec	r18
    18d8:	e1 f7       	brne	.-8      	; 0x18d2 <__ftoa_engine+0x1e>
    18da:	08 95       	ret
    18dc:	9f 3f       	cpi	r25, 0xFF	; 255
    18de:	30 f0       	brcs	.+12     	; 0x18ec <__ftoa_engine+0x38>
    18e0:	80 38       	cpi	r24, 0x80	; 128
    18e2:	71 05       	cpc	r23, r1
    18e4:	61 05       	cpc	r22, r1
    18e6:	09 f0       	breq	.+2      	; 0x18ea <__ftoa_engine+0x36>
    18e8:	3c 5f       	subi	r19, 0xFC	; 252
    18ea:	3c 5f       	subi	r19, 0xFC	; 252
    18ec:	3d 93       	st	X+, r19
    18ee:	91 30       	cpi	r25, 0x01	; 1
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <__ftoa_engine+0x40>
    18f2:	80 68       	ori	r24, 0x80	; 128
    18f4:	91 1d       	adc	r25, r1
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	1f 93       	push	r17
    18fc:	0f 93       	push	r16
    18fe:	ff 92       	push	r15
    1900:	ef 92       	push	r14
    1902:	19 2f       	mov	r17, r25
    1904:	98 7f       	andi	r25, 0xF8	; 248
    1906:	96 95       	lsr	r25
    1908:	e9 2f       	mov	r30, r25
    190a:	96 95       	lsr	r25
    190c:	96 95       	lsr	r25
    190e:	e9 0f       	add	r30, r25
    1910:	ff 27       	eor	r31, r31
    1912:	ea 52       	subi	r30, 0x2A	; 42
    1914:	ff 4f       	sbci	r31, 0xFF	; 255
    1916:	99 27       	eor	r25, r25
    1918:	33 27       	eor	r19, r19
    191a:	ee 24       	eor	r14, r14
    191c:	ff 24       	eor	r15, r15
    191e:	a7 01       	movw	r20, r14
    1920:	e7 01       	movw	r28, r14
    1922:	05 90       	lpm	r0, Z+
    1924:	08 94       	sec
    1926:	07 94       	ror	r0
    1928:	28 f4       	brcc	.+10     	; 0x1934 <__ftoa_engine+0x80>
    192a:	36 0f       	add	r19, r22
    192c:	e7 1e       	adc	r14, r23
    192e:	f8 1e       	adc	r15, r24
    1930:	49 1f       	adc	r20, r25
    1932:	51 1d       	adc	r21, r1
    1934:	66 0f       	add	r22, r22
    1936:	77 1f       	adc	r23, r23
    1938:	88 1f       	adc	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	06 94       	lsr	r0
    193e:	a1 f7       	brne	.-24     	; 0x1928 <__ftoa_engine+0x74>
    1940:	05 90       	lpm	r0, Z+
    1942:	07 94       	ror	r0
    1944:	28 f4       	brcc	.+10     	; 0x1950 <__ftoa_engine+0x9c>
    1946:	e7 0e       	add	r14, r23
    1948:	f8 1e       	adc	r15, r24
    194a:	49 1f       	adc	r20, r25
    194c:	56 1f       	adc	r21, r22
    194e:	c1 1d       	adc	r28, r1
    1950:	77 0f       	add	r23, r23
    1952:	88 1f       	adc	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	66 1f       	adc	r22, r22
    1958:	06 94       	lsr	r0
    195a:	a1 f7       	brne	.-24     	; 0x1944 <__ftoa_engine+0x90>
    195c:	05 90       	lpm	r0, Z+
    195e:	07 94       	ror	r0
    1960:	28 f4       	brcc	.+10     	; 0x196c <__ftoa_engine+0xb8>
    1962:	f8 0e       	add	r15, r24
    1964:	49 1f       	adc	r20, r25
    1966:	56 1f       	adc	r21, r22
    1968:	c7 1f       	adc	r28, r23
    196a:	d1 1d       	adc	r29, r1
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	06 94       	lsr	r0
    1976:	a1 f7       	brne	.-24     	; 0x1960 <__ftoa_engine+0xac>
    1978:	05 90       	lpm	r0, Z+
    197a:	07 94       	ror	r0
    197c:	20 f4       	brcc	.+8      	; 0x1986 <__ftoa_engine+0xd2>
    197e:	49 0f       	add	r20, r25
    1980:	56 1f       	adc	r21, r22
    1982:	c7 1f       	adc	r28, r23
    1984:	d8 1f       	adc	r29, r24
    1986:	99 0f       	add	r25, r25
    1988:	66 1f       	adc	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	06 94       	lsr	r0
    1990:	a9 f7       	brne	.-22     	; 0x197c <__ftoa_engine+0xc8>
    1992:	84 91       	lpm	r24, Z
    1994:	10 95       	com	r17
    1996:	17 70       	andi	r17, 0x07	; 7
    1998:	41 f0       	breq	.+16     	; 0x19aa <__ftoa_engine+0xf6>
    199a:	d6 95       	lsr	r29
    199c:	c7 95       	ror	r28
    199e:	57 95       	ror	r21
    19a0:	47 95       	ror	r20
    19a2:	f7 94       	ror	r15
    19a4:	e7 94       	ror	r14
    19a6:	1a 95       	dec	r17
    19a8:	c1 f7       	brne	.-16     	; 0x199a <__ftoa_engine+0xe6>
    19aa:	ec e7       	ldi	r30, 0x7C	; 124
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	68 94       	set
    19b0:	15 90       	lpm	r1, Z+
    19b2:	15 91       	lpm	r17, Z+
    19b4:	35 91       	lpm	r19, Z+
    19b6:	65 91       	lpm	r22, Z+
    19b8:	95 91       	lpm	r25, Z+
    19ba:	05 90       	lpm	r0, Z+
    19bc:	7f e2       	ldi	r23, 0x2F	; 47
    19be:	73 95       	inc	r23
    19c0:	e1 18       	sub	r14, r1
    19c2:	f1 0a       	sbc	r15, r17
    19c4:	43 0b       	sbc	r20, r19
    19c6:	56 0b       	sbc	r21, r22
    19c8:	c9 0b       	sbc	r28, r25
    19ca:	d0 09       	sbc	r29, r0
    19cc:	c0 f7       	brcc	.-16     	; 0x19be <__ftoa_engine+0x10a>
    19ce:	e1 0c       	add	r14, r1
    19d0:	f1 1e       	adc	r15, r17
    19d2:	43 1f       	adc	r20, r19
    19d4:	56 1f       	adc	r21, r22
    19d6:	c9 1f       	adc	r28, r25
    19d8:	d0 1d       	adc	r29, r0
    19da:	7e f4       	brtc	.+30     	; 0x19fa <__ftoa_engine+0x146>
    19dc:	70 33       	cpi	r23, 0x30	; 48
    19de:	11 f4       	brne	.+4      	; 0x19e4 <__ftoa_engine+0x130>
    19e0:	8a 95       	dec	r24
    19e2:	e6 cf       	rjmp	.-52     	; 0x19b0 <__ftoa_engine+0xfc>
    19e4:	e8 94       	clt
    19e6:	01 50       	subi	r16, 0x01	; 1
    19e8:	30 f0       	brcs	.+12     	; 0x19f6 <__ftoa_engine+0x142>
    19ea:	08 0f       	add	r16, r24
    19ec:	0a f4       	brpl	.+2      	; 0x19f0 <__ftoa_engine+0x13c>
    19ee:	00 27       	eor	r16, r16
    19f0:	02 17       	cp	r16, r18
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <__ftoa_engine+0x142>
    19f4:	20 2f       	mov	r18, r16
    19f6:	23 95       	inc	r18
    19f8:	02 2f       	mov	r16, r18
    19fa:	7a 33       	cpi	r23, 0x3A	; 58
    19fc:	28 f0       	brcs	.+10     	; 0x1a08 <__ftoa_engine+0x154>
    19fe:	79 e3       	ldi	r23, 0x39	; 57
    1a00:	7d 93       	st	X+, r23
    1a02:	2a 95       	dec	r18
    1a04:	e9 f7       	brne	.-6      	; 0x1a00 <__ftoa_engine+0x14c>
    1a06:	10 c0       	rjmp	.+32     	; 0x1a28 <__ftoa_engine+0x174>
    1a08:	7d 93       	st	X+, r23
    1a0a:	2a 95       	dec	r18
    1a0c:	89 f6       	brne	.-94     	; 0x19b0 <__ftoa_engine+0xfc>
    1a0e:	06 94       	lsr	r0
    1a10:	97 95       	ror	r25
    1a12:	67 95       	ror	r22
    1a14:	37 95       	ror	r19
    1a16:	17 95       	ror	r17
    1a18:	17 94       	ror	r1
    1a1a:	e1 18       	sub	r14, r1
    1a1c:	f1 0a       	sbc	r15, r17
    1a1e:	43 0b       	sbc	r20, r19
    1a20:	56 0b       	sbc	r21, r22
    1a22:	c9 0b       	sbc	r28, r25
    1a24:	d0 09       	sbc	r29, r0
    1a26:	98 f0       	brcs	.+38     	; 0x1a4e <__ftoa_engine+0x19a>
    1a28:	23 95       	inc	r18
    1a2a:	7e 91       	ld	r23, -X
    1a2c:	73 95       	inc	r23
    1a2e:	7a 33       	cpi	r23, 0x3A	; 58
    1a30:	08 f0       	brcs	.+2      	; 0x1a34 <__ftoa_engine+0x180>
    1a32:	70 e3       	ldi	r23, 0x30	; 48
    1a34:	7c 93       	st	X, r23
    1a36:	20 13       	cpse	r18, r16
    1a38:	b8 f7       	brcc	.-18     	; 0x1a28 <__ftoa_engine+0x174>
    1a3a:	7e 91       	ld	r23, -X
    1a3c:	70 61       	ori	r23, 0x10	; 16
    1a3e:	7d 93       	st	X+, r23
    1a40:	30 f0       	brcs	.+12     	; 0x1a4e <__ftoa_engine+0x19a>
    1a42:	83 95       	inc	r24
    1a44:	71 e3       	ldi	r23, 0x31	; 49
    1a46:	7d 93       	st	X+, r23
    1a48:	70 e3       	ldi	r23, 0x30	; 48
    1a4a:	2a 95       	dec	r18
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <__ftoa_engine+0x192>
    1a4e:	11 24       	eor	r1, r1
    1a50:	ef 90       	pop	r14
    1a52:	ff 90       	pop	r15
    1a54:	0f 91       	pop	r16
    1a56:	1f 91       	pop	r17
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	99 27       	eor	r25, r25
    1a5e:	87 fd       	sbrc	r24, 7
    1a60:	90 95       	com	r25
    1a62:	08 95       	ret

00001a64 <strnlen_P>:
    1a64:	fc 01       	movw	r30, r24
    1a66:	05 90       	lpm	r0, Z+
    1a68:	61 50       	subi	r22, 0x01	; 1
    1a6a:	70 40       	sbci	r23, 0x00	; 0
    1a6c:	01 10       	cpse	r0, r1
    1a6e:	d8 f7       	brcc	.-10     	; 0x1a66 <strnlen_P+0x2>
    1a70:	80 95       	com	r24
    1a72:	90 95       	com	r25
    1a74:	8e 0f       	add	r24, r30
    1a76:	9f 1f       	adc	r25, r31
    1a78:	08 95       	ret

00001a7a <strnlen>:
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	61 50       	subi	r22, 0x01	; 1
    1a7e:	70 40       	sbci	r23, 0x00	; 0
    1a80:	01 90       	ld	r0, Z+
    1a82:	01 10       	cpse	r0, r1
    1a84:	d8 f7       	brcc	.-10     	; 0x1a7c <strnlen+0x2>
    1a86:	80 95       	com	r24
    1a88:	90 95       	com	r25
    1a8a:	8e 0f       	add	r24, r30
    1a8c:	9f 1f       	adc	r25, r31
    1a8e:	08 95       	ret

00001a90 <fputc>:
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
    1a94:	cf 93       	push	r28
    1a96:	df 93       	push	r29
    1a98:	8c 01       	movw	r16, r24
    1a9a:	eb 01       	movw	r28, r22
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	81 ff       	sbrs	r24, 1
    1aa0:	1b c0       	rjmp	.+54     	; 0x1ad8 <fputc+0x48>
    1aa2:	82 ff       	sbrs	r24, 2
    1aa4:	0d c0       	rjmp	.+26     	; 0x1ac0 <fputc+0x30>
    1aa6:	2e 81       	ldd	r18, Y+6	; 0x06
    1aa8:	3f 81       	ldd	r19, Y+7	; 0x07
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	9d 81       	ldd	r25, Y+5	; 0x05
    1aae:	28 17       	cp	r18, r24
    1ab0:	39 07       	cpc	r19, r25
    1ab2:	64 f4       	brge	.+24     	; 0x1acc <fputc+0x3c>
    1ab4:	e8 81       	ld	r30, Y
    1ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ab8:	01 93       	st	Z+, r16
    1aba:	f9 83       	std	Y+1, r31	; 0x01
    1abc:	e8 83       	st	Y, r30
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <fputc+0x3c>
    1ac0:	e8 85       	ldd	r30, Y+8	; 0x08
    1ac2:	f9 85       	ldd	r31, Y+9	; 0x09
    1ac4:	80 2f       	mov	r24, r16
    1ac6:	09 95       	icall
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	31 f4       	brne	.+12     	; 0x1ad8 <fputc+0x48>
    1acc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ace:	9f 81       	ldd	r25, Y+7	; 0x07
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	9f 83       	std	Y+7, r25	; 0x07
    1ad4:	8e 83       	std	Y+6, r24	; 0x06
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <fputc+0x4c>
    1ad8:	0f ef       	ldi	r16, 0xFF	; 255
    1ada:	1f ef       	ldi	r17, 0xFF	; 255
    1adc:	c8 01       	movw	r24, r16
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <__ultoa_invert>:
    1ae8:	fa 01       	movw	r30, r20
    1aea:	aa 27       	eor	r26, r26
    1aec:	28 30       	cpi	r18, 0x08	; 8
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <__ultoa_invert+0x5c>
    1af0:	20 31       	cpi	r18, 0x10	; 16
    1af2:	81 f1       	breq	.+96     	; 0x1b54 <__ultoa_invert+0x6c>
    1af4:	e8 94       	clt
    1af6:	6f 93       	push	r22
    1af8:	6e 7f       	andi	r22, 0xFE	; 254
    1afa:	6e 5f       	subi	r22, 0xFE	; 254
    1afc:	7f 4f       	sbci	r23, 0xFF	; 255
    1afe:	8f 4f       	sbci	r24, 0xFF	; 255
    1b00:	9f 4f       	sbci	r25, 0xFF	; 255
    1b02:	af 4f       	sbci	r26, 0xFF	; 255
    1b04:	b1 e0       	ldi	r27, 0x01	; 1
    1b06:	3e d0       	rcall	.+124    	; 0x1b84 <__ultoa_invert+0x9c>
    1b08:	b4 e0       	ldi	r27, 0x04	; 4
    1b0a:	3c d0       	rcall	.+120    	; 0x1b84 <__ultoa_invert+0x9c>
    1b0c:	67 0f       	add	r22, r23
    1b0e:	78 1f       	adc	r23, r24
    1b10:	89 1f       	adc	r24, r25
    1b12:	9a 1f       	adc	r25, r26
    1b14:	a1 1d       	adc	r26, r1
    1b16:	68 0f       	add	r22, r24
    1b18:	79 1f       	adc	r23, r25
    1b1a:	8a 1f       	adc	r24, r26
    1b1c:	91 1d       	adc	r25, r1
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	6a 0f       	add	r22, r26
    1b22:	71 1d       	adc	r23, r1
    1b24:	81 1d       	adc	r24, r1
    1b26:	91 1d       	adc	r25, r1
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	20 d0       	rcall	.+64     	; 0x1b6c <__ultoa_invert+0x84>
    1b2c:	09 f4       	brne	.+2      	; 0x1b30 <__ultoa_invert+0x48>
    1b2e:	68 94       	set
    1b30:	3f 91       	pop	r19
    1b32:	2a e0       	ldi	r18, 0x0A	; 10
    1b34:	26 9f       	mul	r18, r22
    1b36:	11 24       	eor	r1, r1
    1b38:	30 19       	sub	r19, r0
    1b3a:	30 5d       	subi	r19, 0xD0	; 208
    1b3c:	31 93       	st	Z+, r19
    1b3e:	de f6       	brtc	.-74     	; 0x1af6 <__ultoa_invert+0xe>
    1b40:	cf 01       	movw	r24, r30
    1b42:	08 95       	ret
    1b44:	46 2f       	mov	r20, r22
    1b46:	47 70       	andi	r20, 0x07	; 7
    1b48:	40 5d       	subi	r20, 0xD0	; 208
    1b4a:	41 93       	st	Z+, r20
    1b4c:	b3 e0       	ldi	r27, 0x03	; 3
    1b4e:	0f d0       	rcall	.+30     	; 0x1b6e <__ultoa_invert+0x86>
    1b50:	c9 f7       	brne	.-14     	; 0x1b44 <__ultoa_invert+0x5c>
    1b52:	f6 cf       	rjmp	.-20     	; 0x1b40 <__ultoa_invert+0x58>
    1b54:	46 2f       	mov	r20, r22
    1b56:	4f 70       	andi	r20, 0x0F	; 15
    1b58:	40 5d       	subi	r20, 0xD0	; 208
    1b5a:	4a 33       	cpi	r20, 0x3A	; 58
    1b5c:	18 f0       	brcs	.+6      	; 0x1b64 <__ultoa_invert+0x7c>
    1b5e:	49 5d       	subi	r20, 0xD9	; 217
    1b60:	31 fd       	sbrc	r19, 1
    1b62:	40 52       	subi	r20, 0x20	; 32
    1b64:	41 93       	st	Z+, r20
    1b66:	02 d0       	rcall	.+4      	; 0x1b6c <__ultoa_invert+0x84>
    1b68:	a9 f7       	brne	.-22     	; 0x1b54 <__ultoa_invert+0x6c>
    1b6a:	ea cf       	rjmp	.-44     	; 0x1b40 <__ultoa_invert+0x58>
    1b6c:	b4 e0       	ldi	r27, 0x04	; 4
    1b6e:	a6 95       	lsr	r26
    1b70:	97 95       	ror	r25
    1b72:	87 95       	ror	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	ba 95       	dec	r27
    1b7a:	c9 f7       	brne	.-14     	; 0x1b6e <__ultoa_invert+0x86>
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	61 05       	cpc	r22, r1
    1b80:	71 05       	cpc	r23, r1
    1b82:	08 95       	ret
    1b84:	9b 01       	movw	r18, r22
    1b86:	ac 01       	movw	r20, r24
    1b88:	0a 2e       	mov	r0, r26
    1b8a:	06 94       	lsr	r0
    1b8c:	57 95       	ror	r21
    1b8e:	47 95       	ror	r20
    1b90:	37 95       	ror	r19
    1b92:	27 95       	ror	r18
    1b94:	ba 95       	dec	r27
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__ultoa_invert+0xa2>
    1b98:	62 0f       	add	r22, r18
    1b9a:	73 1f       	adc	r23, r19
    1b9c:	84 1f       	adc	r24, r20
    1b9e:	95 1f       	adc	r25, r21
    1ba0:	a0 1d       	adc	r26, r0
    1ba2:	08 95       	ret

00001ba4 <__prologue_saves__>:
    1ba4:	2f 92       	push	r2
    1ba6:	3f 92       	push	r3
    1ba8:	4f 92       	push	r4
    1baa:	5f 92       	push	r5
    1bac:	6f 92       	push	r6
    1bae:	7f 92       	push	r7
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	0f 93       	push	r16
    1bc2:	1f 93       	push	r17
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	ca 1b       	sub	r28, r26
    1bce:	db 0b       	sbc	r29, r27
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	09 94       	ijmp

00001bdc <__epilogue_restores__>:
    1bdc:	2a 88       	ldd	r2, Y+18	; 0x12
    1bde:	39 88       	ldd	r3, Y+17	; 0x11
    1be0:	48 88       	ldd	r4, Y+16	; 0x10
    1be2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1be4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1be6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1be8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bea:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bec:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bee:	b9 84       	ldd	r11, Y+9	; 0x09
    1bf0:	c8 84       	ldd	r12, Y+8	; 0x08
    1bf2:	df 80       	ldd	r13, Y+7	; 0x07
    1bf4:	ee 80       	ldd	r14, Y+6	; 0x06
    1bf6:	fd 80       	ldd	r15, Y+5	; 0x05
    1bf8:	0c 81       	ldd	r16, Y+4	; 0x04
    1bfa:	1b 81       	ldd	r17, Y+3	; 0x03
    1bfc:	aa 81       	ldd	r26, Y+2	; 0x02
    1bfe:	b9 81       	ldd	r27, Y+1	; 0x01
    1c00:	ce 0f       	add	r28, r30
    1c02:	d1 1d       	adc	r29, r1
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	ed 01       	movw	r28, r26
    1c10:	08 95       	ret

00001c12 <_exit>:
    1c12:	f8 94       	cli

00001c14 <__stop_program>:
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <__stop_program>


theWeather.system_board_324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001bba  00001c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800144  00800144  00001c92  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000779  00000000  00000000  00004b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000052c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4b  00000000  00000000  00005400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053c  00000000  00000000  0000634b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b70  00000000  00000000  00006887  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  000073f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00007758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f83  00000000  00000000  00007ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008b23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_3>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <__stack+0xd7>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <GetTempTI+0xa2>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <main+0x15c>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <__vector_3+0x2e>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	ea eb       	ldi	r30, 0xBA	; 186
     18a:	fb e1       	ldi	r31, 0x1B	; 27
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 34       	cpi	r26, 0x44	; 68
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	11 e0       	ldi	r17, 0x01	; 1
     19a:	a4 e4       	ldi	r26, 0x44	; 68
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a9 34       	cpi	r26, 0x49	; 73
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 4c 01 	call	0x298	; 0x298 <main>
     1ac:	0c 94 db 0d 	jmp	0x1bb6	; 0x1bb6 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
	prtDebug = (1 << bnD2);	//should toggle amber LED on. 
     1de:	88 e2       	ldi	r24, 0x28	; 40
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	20 e2       	ldi	r18, 0x20	; 32
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	Wait_ms(500);
     1e8:	84 ef       	ldi	r24, 0xF4	; 244
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	//Clears interrupt vector
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <__vector_18>:

ISR(TIMER0_OVF_vect){
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	8f 93       	push	r24
     226:	9f 93       	push	r25
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
	timerZeroCount++; sleepCnt++;
     234:	80 91 46 01 	lds	r24, 0x0146
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	80 93 46 01 	sts	0x0146, r24
     23e:	80 91 44 01 	lds	r24, 0x0144
     242:	8f 5f       	subi	r24, 0xFF	; 255
     244:	80 93 44 01 	sts	0x0144, r24
	if (timerZeroCount >= 20) {pinDebug |= (1 << bnD0); timerZeroCount = 0;}		//should toggle amber LED and red to left of it
     248:	80 91 46 01 	lds	r24, 0x0146
     24c:	84 31       	cpi	r24, 0x14	; 20
     24e:	58 f0       	brcs	.+22     	; 0x266 <__vector_18+0x50>
     250:	86 e2       	ldi	r24, 0x26	; 38
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	26 e2       	ldi	r18, 0x26	; 38
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	f9 01       	movw	r30, r18
     25a:	20 81       	ld	r18, Z
     25c:	28 60       	ori	r18, 0x08	; 8
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
     262:	10 92 46 01 	sts	0x0146, r1
	if (sleepCnt >= 150) {sleepCnt = 0; flagGoToSleep = fTrue;}
     266:	80 91 44 01 	lds	r24, 0x0144
     26a:	86 39       	cpi	r24, 0x96	; 150
     26c:	40 f0       	brcs	.+16     	; 0x27e <__vector_18+0x68>
     26e:	10 92 44 01 	sts	0x0144, r1
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	90 93 48 01 	sts	0x0148, r25
     27a:	80 93 47 01 	sts	0x0147, r24
}	
     27e:	df 91       	pop	r29
     280:	cf 91       	pop	r28
     282:	ff 91       	pop	r31
     284:	ef 91       	pop	r30
     286:	9f 91       	pop	r25
     288:	8f 91       	pop	r24
     28a:	3f 91       	pop	r19
     28c:	2f 91       	pop	r18
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <main>:
}
*/

/*****************************************************************************************************************/
int main(void)
{	
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	00 d0       	rcall	.+0      	; 0x29e <main+0x6>
     29e:	cd b7       	in	r28, 0x3d	; 61
     2a0:	de b7       	in	r29, 0x3e	; 62
	
	flagGoToSleep = fFalse; sleepCnt = 0; timerZeroCount = 0; timerTwoCount = 0;	//initialize the global variables
     2a2:	10 92 48 01 	sts	0x0148, r1
     2a6:	10 92 47 01 	sts	0x0147, r1
     2aa:	10 92 44 01 	sts	0x0144, r1
     2ae:	10 92 46 01 	sts	0x0146, r1
     2b2:	10 92 45 01 	sts	0x0145, r1
	DeviceInit();
     2b6:	0e 94 01 02 	call	0x402	; 0x402 <DeviceInit>
	AppInit(MYUBRR);
     2ba:	8f e5       	ldi	r24, 0x5F	; 95
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 28 02 	call	0x450	; 0x450 <AppInit>
	sei();
     2c2:	78 94       	sei
	Wait_ms(1000);
     2c4:	88 ee       	ldi	r24, 0xE8	; 232
     2c6:	93 e0       	ldi	r25, 0x03	; 3
     2c8:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	ResetDebug();	//clear LED's
     2cc:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
	InitTimer0();
     2d0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <InitTimer0>

	// main program loop
	while (fTrue) {	
		
		//Get Humidity from HoneyWell sensor, located on ADC1
		prtDebug |= (1 << bnD0);
     2d4:	88 e2       	ldi	r24, 0x28	; 40
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	28 e2       	ldi	r18, 0x28	; 40
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	f9 01       	movw	r30, r18
     2de:	20 81       	ld	r18, Z
     2e0:	28 60       	ori	r18, 0x08	; 8
     2e2:	fc 01       	movw	r30, r24
     2e4:	20 83       	st	Z, r18
		GetHumidity();
     2e6:	0e 94 ff 04 	call	0x9fe	; 0x9fe <GetHumidity>
		ResetDebug();
     2ea:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
		
		//Get temp data from ADT7302 source, on SPI
		prtDebug |= (1 << bnD1);
     2ee:	88 e2       	ldi	r24, 0x28	; 40
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	28 e2       	ldi	r18, 0x28	; 40
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	20 61       	ori	r18, 0x10	; 16
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
		GetTempADT();
     300:	0e 94 d6 05 	call	0xbac	; 0xbac <GetTempADT>
		ResetDebug();
     304:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
		
		//Get temperature data from TI source on SPI/USART0
		prtDebug |= (1 << bnD2);
     308:	88 e2       	ldi	r24, 0x28	; 40
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	28 e2       	ldi	r18, 0x28	; 40
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	f9 01       	movw	r30, r18
     312:	20 81       	ld	r18, Z
     314:	20 62       	ori	r18, 0x20	; 32
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
		GetTempTI(MYUBRR);
     31a:	8f e5       	ldi	r24, 0x5F	; 95
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 10 03 	call	0x620	; 0x620 <GetTempTI>
		ResetDebug();
     322:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
		
		//Get temperature data from Thermistor on ADC2
		prtDebug |= (1 << bnD3);
     326:	88 e2       	ldi	r24, 0x28	; 40
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	28 e2       	ldi	r18, 0x28	; 40
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	f9 01       	movw	r30, r18
     330:	20 81       	ld	r18, Z
     332:	20 64       	ori	r18, 0x40	; 64
     334:	fc 01       	movw	r30, r24
     336:	20 83       	st	Z, r18
		GetTempTherm();
     338:	85 e1       	ldi	r24, 0x15	; 21
     33a:	94 e0       	ldi	r25, 0x04	; 4
     33c:	fc 01       	movw	r30, r24
     33e:	09 95       	icall
		ResetDebug();
     340:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
		Wait_ms(100);
     344:	84 e6       	ldi	r24, 0x64	; 100
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
		
		//Strobe last LED in heartbeat pattern
		for (int i = 0; i < 12; i++) {
     34c:	1a 82       	std	Y+2, r1	; 0x02
     34e:	19 82       	std	Y+1, r1	; 0x01
     350:	2b c0       	rjmp	.+86     	; 0x3a8 <main+0x110>
			prtDebug |= (1 << bnD4);
     352:	88 e2       	ldi	r24, 0x28	; 40
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	28 e2       	ldi	r18, 0x28	; 40
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	20 68       	ori	r18, 0x80	; 128
     360:	fc 01       	movw	r30, r24
     362:	20 83       	st	Z, r18
			Wait_ms(300);
     364:	8c e2       	ldi	r24, 0x2C	; 44
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
			ResetDebug();
     36c:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
			Wait_ms(310);
     370:	86 e3       	ldi	r24, 0x36	; 54
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
			prtDebug |= (1 << bnD4);
     378:	88 e2       	ldi	r24, 0x28	; 40
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	28 e2       	ldi	r18, 0x28	; 40
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	f9 01       	movw	r30, r18
     382:	20 81       	ld	r18, Z
     384:	20 68       	ori	r18, 0x80	; 128
     386:	fc 01       	movw	r30, r24
     388:	20 83       	st	Z, r18
			Wait_ms(400);
     38a:	80 e9       	ldi	r24, 0x90	; 144
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
			ResetDebug();
     392:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
			Wait_ms(1000);
     396:	88 ee       	ldi	r24, 0xE8	; 232
     398:	93 e0       	ldi	r25, 0x03	; 3
     39a:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
		GetTempTherm();
		ResetDebug();
		Wait_ms(100);
		
		//Strobe last LED in heartbeat pattern
		for (int i = 0; i < 12; i++) {
     39e:	89 81       	ldd	r24, Y+1	; 0x01
     3a0:	9a 81       	ldd	r25, Y+2	; 0x02
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
     3a8:	89 81       	ldd	r24, Y+1	; 0x01
     3aa:	9a 81       	ldd	r25, Y+2	; 0x02
     3ac:	8c 30       	cpi	r24, 0x0C	; 12
     3ae:	91 05       	cpc	r25, r1
     3b0:	84 f2       	brlt	.-96     	; 0x352 <main+0xba>
			Wait_ms(400);
			ResetDebug();
			Wait_ms(1000);
		}
		
		if (flagGoToSleep){
     3b2:	80 91 47 01 	lds	r24, 0x0147
     3b6:	90 91 48 01 	lds	r25, 0x0148
     3ba:	00 97       	sbiw	r24, 0x00	; 0
     3bc:	e9 f0       	breq	.+58     	; 0x3f8 <main+0x160>
			//Power down, wakes up on external interrupt on pin INT2, header pin 5
			SMCR = (1 << SM1)|(1 << SM0);
     3be:	83 e5       	ldi	r24, 0x53	; 83
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	26 e0       	ldi	r18, 0x06	; 6
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
			SMCR |= (1 << SE);
     3c8:	83 e5       	ldi	r24, 0x53	; 83
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	23 e5       	ldi	r18, 0x53	; 83
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	21 60       	ori	r18, 0x01	; 1
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
			Print0("\tPowering down...\t");
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
			ResetDebug();						//Clear the LED's
     3e2:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
			asm volatile("SLEEP");
     3e6:	88 95       	sleep
			//Reset sleep register on wakeup
			flagGoToSleep = fFalse;
     3e8:	10 92 48 01 	sts	0x0148, r1
     3ec:	10 92 47 01 	sts	0x0147, r1
			SMCR = 0;
     3f0:	83 e5       	ldi	r24, 0x53	; 83
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	fc 01       	movw	r30, r24
     3f6:	10 82       	st	Z, r1
		}
		
		//Double check and make sure flag is False if it gets to here.
		flagGoToSleep = fFalse;
     3f8:	10 92 48 01 	sts	0x0148, r1
     3fc:	10 92 47 01 	sts	0x0147, r1
	}  //end while fTrue
     400:	69 cf       	rjmp	.-302    	; 0x2d4 <main+0x3c>

00000402 <DeviceInit>:
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
     40a:	81 e2       	ldi	r24, 0x21	; 33
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	fc 01       	movw	r30, r24
     410:	10 82       	st	Z, r1
	DDRB = 0;
     412:	84 e2       	ldi	r24, 0x24	; 36
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	fc 01       	movw	r30, r24
     418:	10 82       	st	Z, r1
	DDRC = 0;
     41a:	87 e2       	ldi	r24, 0x27	; 39
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	fc 01       	movw	r30, r24
     420:	10 82       	st	Z, r1
	DDRD = 0;
     422:	8a e2       	ldi	r24, 0x2A	; 42
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	10 82       	st	Z, r1

	PORTA = 0x00;
     42a:	82 e2       	ldi	r24, 0x22	; 34
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fc 01       	movw	r30, r24
     430:	10 82       	st	Z, r1
	PORTB = 0x00;
     432:	85 e2       	ldi	r24, 0x25	; 37
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	10 82       	st	Z, r1
	PORTC = 0x00;
     43a:	88 e2       	ldi	r24, 0x28	; 40
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	10 82       	st	Z, r1
	PORTD = 0x00;
     442:	8b e2       	ldi	r24, 0x2B	; 43
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	10 82       	st	Z, r1
}
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <AppInit>:
/**********************************************************************************************************************************/
#ifdef STARTUP
void AppInit(unsigned int ubrr)
{
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <AppInit+0x6>
     456:	00 d0       	rcall	.+0      	; 0x458 <AppInit+0x8>
     458:	00 d0       	rcall	.+0      	; 0x45a <AppInit+0xa>
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	9e 83       	std	Y+6, r25	; 0x06
     460:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
     462:	84 ec       	ldi	r24, 0xC4	; 196
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2d 81       	ldd	r18, Y+5	; 0x05
     468:	fc 01       	movw	r30, r24
     46a:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
     46c:	85 ec       	ldi	r24, 0xC5	; 197
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	2d 81       	ldd	r18, Y+5	; 0x05
     472:	3e 81       	ldd	r19, Y+6	; 0x06
     474:	23 2f       	mov	r18, r19
     476:	33 27       	eor	r19, r19
     478:	fc 01       	movw	r30, r24
     47a:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
     47c:	81 ec       	ldi	r24, 0xC1	; 193
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	28 e1       	ldi	r18, 0x18	; 24
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
     486:	82 ec       	ldi	r24, 0xC2	; 194
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	26 e0       	ldi	r18, 0x06	; 6
     48c:	fc 01       	movw	r30, r24
     48e:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
     490:	87 e2       	ldi	r24, 0x27	; 39
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	27 e2       	ldi	r18, 0x27	; 39
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	20 81       	ld	r18, Z
     49c:	28 6f       	ori	r18, 0xF8	; 248
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	9a 83       	std	Y+2, r25	; 0x02
     4a8:	89 83       	std	Y+1, r24	; 0x01
     4aa:	1d c0       	rjmp	.+58     	; 0x4e6 <AppInit+0x96>
		prtDebug |= (1 << i);
     4ac:	88 e2       	ldi	r24, 0x28	; 40
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	28 e2       	ldi	r18, 0x28	; 40
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	20 81       	ld	r18, Z
     4b8:	42 2f       	mov	r20, r18
     4ba:	21 e0       	ldi	r18, 0x01	; 1
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	09 80       	ldd	r0, Y+1	; 0x01
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <AppInit+0x76>
     4c2:	22 0f       	add	r18, r18
     4c4:	33 1f       	adc	r19, r19
     4c6:	0a 94       	dec	r0
     4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <AppInit+0x72>
     4ca:	24 2b       	or	r18, r20
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
		Wait_ms(200);
     4d0:	88 ec       	ldi	r24, 0xC8	; 200
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
		ResetDebug();
     4d8:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	9a 83       	std	Y+2, r25	; 0x02
     4e4:	89 83       	std	Y+1, r24	; 0x01
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	88 30       	cpi	r24, 0x08	; 8
     4ec:	91 05       	cpc	r25, r1
     4ee:	f4 f2       	brlt	.-68     	; 0x4ac <AppInit+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     4f0:	87 e0       	ldi	r24, 0x07	; 7
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	9c 83       	std	Y+4, r25	; 0x04
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	1d c0       	rjmp	.+58     	; 0x534 <AppInit+0xe4>
		prtDebug |= (1 << j);
     4fa:	88 e2       	ldi	r24, 0x28	; 40
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	28 e2       	ldi	r18, 0x28	; 40
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	f9 01       	movw	r30, r18
     504:	20 81       	ld	r18, Z
     506:	42 2f       	mov	r20, r18
     508:	21 e0       	ldi	r18, 0x01	; 1
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	0b 80       	ldd	r0, Y+3	; 0x03
     50e:	02 c0       	rjmp	.+4      	; 0x514 <AppInit+0xc4>
     510:	22 0f       	add	r18, r18
     512:	33 1f       	adc	r19, r19
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <AppInit+0xc0>
     518:	24 2b       	or	r18, r20
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
		Wait_ms(200);
     51e:	88 ec       	ldi	r24, 0xC8	; 200
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
		ResetDebug();
     526:	0e 94 8c 06 	call	0xd18	; 0xd18 <ResetDebug>
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	01 97       	sbiw	r24, 0x01	; 1
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	8b 83       	std	Y+3, r24	; 0x03
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	99 23       	and	r25, r25
     53a:	fc f6       	brge	.-66     	; 0x4fa <AppInit+0xaa>
		Wait_ms(200);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
     53c:	84 e2       	ldi	r24, 0x24	; 36
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	24 e2       	ldi	r18, 0x24	; 36
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	20 6b       	ori	r18, 0xB0	; 176
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
     54e:	85 e2       	ldi	r24, 0x25	; 37
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	25 e2       	ldi	r18, 0x25	; 37
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	20 69       	ori	r18, 0x90	; 144
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
     560:	85 e2       	ldi	r24, 0x25	; 37
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	25 e2       	ldi	r18, 0x25	; 37
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	2f 7b       	andi	r18, 0xBF	; 191
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
     572:	85 e2       	ldi	r24, 0x25	; 37
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	25 e2       	ldi	r18, 0x25	; 37
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	2f 7d       	andi	r18, 0xDF	; 223
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
     584:	8c e4       	ldi	r24, 0x4C	; 76
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2c e4       	ldi	r18, 0x4C	; 76
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	23 65       	ori	r18, 0x53	; 83
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
     596:	84 e6       	ldi	r24, 0x64	; 100
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	24 e6       	ldi	r18, 0x64	; 100
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	2d 6f       	ori	r18, 0xFD	; 253
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
     5a8:	89 e6       	ldi	r24, 0x69	; 105
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	29 e6       	ldi	r18, 0x69	; 105
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	f9 01       	movw	r30, r18
     5b2:	20 81       	ld	r18, Z
     5b4:	20 63       	ori	r18, 0x30	; 48
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
     5ba:	8d e3       	ldi	r24, 0x3D	; 61
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	24 e0       	ldi	r18, 0x04	; 4
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
}
     5c4:	26 96       	adiw	r28, 0x06	; 6
     5c6:	0f b6       	in	r0, 0x3f	; 63
     5c8:	f8 94       	cli
     5ca:	de bf       	out	0x3e, r29	; 62
     5cc:	0f be       	out	0x3f, r0	; 63
     5ce:	cd bf       	out	0x3d, r28	; 61
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <InitTimer0>:

/**********************************************************************************************************************************/

/**********************************************************************************************************************************/
#ifdef TIMER0
void InitTimer0(){
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	//Disable glbal interrupts
	cli();
     5de:	f8 94       	cli
	//Enable TIMER0 power
	PRR0 &= ~(1 << PRTIM0);
     5e0:	84 e6       	ldi	r24, 0x64	; 100
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	24 e6       	ldi	r18, 0x64	; 100
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	f9 01       	movw	r30, r18
     5ea:	20 81       	ld	r18, Z
     5ec:	2f 7d       	andi	r18, 0xDF	; 223
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
	Wait_ms(1);
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	//Set up regiterst
	TCCR0B = (1 << CS02)|(1 << CS00);			//prescaler of 256 from clkIO
     5fa:	85 e4       	ldi	r24, 0x45	; 69
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	25 e0       	ldi	r18, 0x05	; 5
     600:	fc 01       	movw	r30, r24
     602:	20 83       	st	Z, r18
	TIFR0 = (1 << TOV0);						//Clear TOV0/ any pending interrupts
     604:	85 e3       	ldi	r24, 0x35	; 53
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	21 e0       	ldi	r18, 0x01	; 1
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	TIMSK0 = (1 << TOIE0);						//Enable overflow interrupt service routine
     60e:	8e e6       	ldi	r24, 0x6E	; 110
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	21 e0       	ldi	r18, 0x01	; 1
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
	//Enable global interrupts
	sei();
     618:	78 94       	sei
}	
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <GetTempTI>:

/**********************************************************************************************************************************/
#ifdef SENSORS

void GetTempTI(unsigned int ubrr)
{
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
     62c:	60 97       	sbiw	r28, 0x10	; 16
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	98 8b       	std	Y+16, r25	; 0x10
     63a:	8f 87       	std	Y+15, r24	; 0x0f
	WORD tempDataTI = 0;
     63c:	1a 82       	std	Y+2, r1	; 0x02
     63e:	19 82       	std	Y+1, r1	; 0x01
	char tempStringTI[8];
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
     640:	84 e6       	ldi	r24, 0x64	; 100
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	24 e6       	ldi	r18, 0x64	; 100
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	f9 01       	movw	r30, r18
     64a:	20 81       	ld	r18, Z
     64c:	2f 7e       	andi	r18, 0xEF	; 239
     64e:	fc 01       	movw	r30, r24
     650:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
     652:	8a e0       	ldi	r24, 0x0A	; 10
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	UBRR1 = 0;
     65a:	8c ec       	ldi	r24, 0xCC	; 204
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	11 82       	std	Z+1, r1	; 0x01
     662:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
     664:	8a e2       	ldi	r24, 0x2A	; 42
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	2a e2       	ldi	r18, 0x2A	; 42
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	20 63       	ori	r18, 0x30	; 48
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
     676:	8b e2       	ldi	r24, 0x2B	; 43
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	2b e2       	ldi	r18, 0x2B	; 43
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	f9 01       	movw	r30, r18
     680:	20 81       	ld	r18, Z
     682:	20 63       	ori	r18, 0x30	; 48
     684:	fc 01       	movw	r30, r24
     686:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
     688:	8a ec       	ldi	r24, 0xCA	; 202
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	20 ec       	ldi	r18, 0xC0	; 192
     68e:	fc 01       	movw	r30, r24
     690:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
     692:	89 ec       	ldi	r24, 0xC9	; 201
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	28 e1       	ldi	r18, 0x18	; 24
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
     69c:	8c ec       	ldi	r24, 0xCC	; 204
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	2f 85       	ldd	r18, Y+15	; 0x0f
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
     6a6:	8d ec       	ldi	r24, 0xCD	; 205
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	2f 85       	ldd	r18, Y+15	; 0x0f
     6ac:	38 89       	ldd	r19, Y+16	; 0x10
     6ae:	23 2f       	mov	r18, r19
     6b0:	33 27       	eor	r19, r19
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
     6b6:	00 00       	nop
     6b8:	88 ec       	ldi	r24, 0xC8	; 200
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	80 72       	andi	r24, 0x20	; 32
     6c6:	90 70       	andi	r25, 0x00	; 0
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	b1 f3       	breq	.-20     	; 0x6b8 <GetTempTI+0x98>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
     6cc:	8b e2       	ldi	r24, 0x2B	; 43
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2b e2       	ldi	r18, 0x2B	; 43
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	2f 7d       	andi	r18, 0xDF	; 223
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
     6de:	8e ec       	ldi	r24, 0xCE	; 206
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	fc 01       	movw	r30, r24
     6e4:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
     6e6:	00 00       	nop
     6e8:	88 ec       	ldi	r24, 0xC8	; 200
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	fc 01       	movw	r30, r24
     6ee:	80 81       	ld	r24, Z
     6f0:	88 23       	and	r24, r24
     6f2:	d4 f7       	brge	.-12     	; 0x6e8 <GetTempTI+0xc8>
	tempDataTI = (UDR1 << 8);	//first byte of data
     6f4:	8e ec       	ldi	r24, 0xCE	; 206
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 81       	ld	r24, Z
     6fc:	88 2f       	mov	r24, r24
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	98 2f       	mov	r25, r24
     702:	88 27       	eor	r24, r24
     704:	9a 83       	std	Y+2, r25	; 0x02
     706:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
     708:	8e ec       	ldi	r24, 0xCE	; 206
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
     710:	00 00       	nop
     712:	88 ec       	ldi	r24, 0xC8	; 200
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	fc 01       	movw	r30, r24
     718:	80 81       	ld	r24, Z
     71a:	88 23       	and	r24, r24
     71c:	d4 f7       	brge	.-12     	; 0x712 <GetTempTI+0xf2>
	tempDataTI |= UDR1;	
     71e:	8e ec       	ldi	r24, 0xCE	; 206
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	fc 01       	movw	r30, r24
     724:	80 81       	ld	r24, Z
     726:	88 2f       	mov	r24, r24
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	29 81       	ldd	r18, Y+1	; 0x01
     72c:	3a 81       	ldd	r19, Y+2	; 0x02
     72e:	82 2b       	or	r24, r18
     730:	93 2b       	or	r25, r19
     732:	9a 83       	std	Y+2, r25	; 0x02
     734:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
     736:	8b e2       	ldi	r24, 0x2B	; 43
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	2b e2       	ldi	r18, 0x2B	; 43
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	20 63       	ori	r18, 0x30	; 48
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
     748:	8a ec       	ldi	r24, 0xCA	; 202
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	fc 01       	movw	r30, r24
     74e:	10 82       	st	Z, r1
	UCSR1B = 0;
     750:	89 ec       	ldi	r24, 0xC9	; 201
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	fc 01       	movw	r30, r24
     756:	10 82       	st	Z, r1
	UCSR1A = 0;
     758:	88 ec       	ldi	r24, 0xC8	; 200
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	10 82       	st	Z, r1
	UBRR1L = 0;
     760:	8c ec       	ldi	r24, 0xCC	; 204
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	10 82       	st	Z, r1
	UBRR1H = 0;
     768:	8d ec       	ldi	r24, 0xCD	; 205
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
     770:	84 e6       	ldi	r24, 0x64	; 100
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	24 e6       	ldi	r18, 0x64	; 100
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	20 61       	ori	r18, 0x10	; 16
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	float dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	96 95       	lsr	r25
     788:	87 95       	ror	r24
     78a:	96 95       	lsr	r25
     78c:	87 95       	ror	r24
     78e:	cc 01       	movw	r24, r24
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__floatunsisf>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	bc 01       	movw	r22, r24
     7a2:	cd 01       	movw	r24, r26
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	5d e3       	ldi	r21, 0x3D	; 61
     7ac:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__mulsf3>
     7b0:	dc 01       	movw	r26, r24
     7b2:	cb 01       	movw	r24, r22
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	26 e6       	ldi	r18, 0x66	; 102
     7ba:	36 e6       	ldi	r19, 0x66	; 102
     7bc:	46 ee       	ldi	r20, 0xE6	; 230
     7be:	5f e3       	ldi	r21, 0x3F	; 63
     7c0:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__mulsf3>
     7c4:	dc 01       	movw	r26, r24
     7c6:	cb 01       	movw	r24, r22
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	52 e4       	ldi	r21, 0x42	; 66
     7d4:	0e 94 17 07 	call	0xe2e	; 0xe2e <__addsf3>
     7d8:	dc 01       	movw	r26, r24
     7da:	cb 01       	movw	r24, r22
     7dc:	8b 83       	std	Y+3, r24	; 0x03
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	ad 83       	std	Y+5, r26	; 0x05
     7e2:	be 83       	std	Y+6, r27	; 0x06
	dtostrf(dataTI, 5, 2, tempStringTI);
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	9c 81       	ldd	r25, Y+4	; 0x04
     7e8:	ad 81       	ldd	r26, Y+5	; 0x05
     7ea:	be 81       	ldd	r27, Y+6	; 0x06
     7ec:	fe 01       	movw	r30, r28
     7ee:	37 96       	adiw	r30, 0x07	; 7
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	45 e0       	ldi	r20, 0x05	; 5
     7f6:	22 e0       	ldi	r18, 0x02	; 2
     7f8:	8f 01       	movw	r16, r30
     7fa:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <dtostrf>
	tempStringTI[6] = '.';
     7fe:	8e e2       	ldi	r24, 0x2E	; 46
     800:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringTI[7] = '\0';
     802:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" TI temp= ");
     804:	83 e1       	ldi	r24, 0x13	; 19
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
	Print0(tempStringTI);	
     80c:	ce 01       	movw	r24, r28
     80e:	07 96       	adiw	r24, 0x07	; 7
     810:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
		
}
     814:	60 96       	adiw	r28, 0x10	; 16
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	f8 94       	cli
     81a:	de bf       	out	0x3e, r29	; 62
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	cd bf       	out	0x3d, r28	; 61
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	08 95       	ret

0000082a <GetTempTherm>:

/**********************************************************************************************************************************/
void GetTempTherm()
{
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	62 97       	sbiw	r28, 0x12	; 18
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
     842:	1c 82       	std	Y+4, r1	; 0x04
     844:	1b 82       	std	Y+3, r1	; 0x03
	float dataTherm = 0;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	dc 01       	movw	r26, r24
     84c:	8d 83       	std	Y+5, r24	; 0x05
     84e:	9e 83       	std	Y+6, r25	; 0x06
     850:	af 83       	std	Y+7, r26	; 0x07
     852:	b8 87       	std	Y+8, r27	; 0x08
	char stringTherm[10];
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
     854:	84 e6       	ldi	r24, 0x64	; 100
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	24 e6       	ldi	r18, 0x64	; 100
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	20 81       	ld	r18, Z
     860:	2e 7f       	andi	r18, 0xFE	; 254
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
     866:	8c e7       	ldi	r24, 0x7C	; 124
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	2c e7       	ldi	r18, 0x7C	; 124
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	22 64       	ori	r18, 0x42	; 66
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
     878:	8a e7       	ldi	r24, 0x7A	; 122
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	2a e7       	ldi	r18, 0x7A	; 122
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	f9 01       	movw	r30, r18
     882:	20 81       	ld	r18, Z
     884:	27 68       	ori	r18, 0x87	; 135
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     88a:	8e e7       	ldi	r24, 0x7E	; 126
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	2b ef       	ldi	r18, 0xFB	; 251
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
	Wait_ms(10);
     894:	8a e0       	ldi	r24, 0x0A	; 10
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     89c:	1a 82       	std	Y+2, r1	; 0x02
     89e:	19 82       	std	Y+1, r1	; 0x01
     8a0:	19 c0       	rjmp	.+50     	; 0x8d4 <GetTempTherm+0xaa>
     8a2:	8a e7       	ldi	r24, 0x7A	; 122
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	2a e7       	ldi	r18, 0x7A	; 122
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	20 64       	ori	r18, 0x40	; 64
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	00 00       	nop
     8b6:	8a e7       	ldi	r24, 0x7A	; 122
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	88 2f       	mov	r24, r24
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	80 74       	andi	r24, 0x40	; 64
     8c4:	90 70       	andi	r25, 0x00	; 0
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	b1 f7       	brne	.-20     	; 0x8b6 <GetTempTherm+0x8c>
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	82 30       	cpi	r24, 0x02	; 2
     8da:	91 05       	cpc	r25, r1
     8dc:	14 f3       	brlt	.-60     	; 0x8a2 <GetTempTherm+0x78>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
     8de:	88 e7       	ldi	r24, 0x78	; 120
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	fc 01       	movw	r30, r24
     8e4:	80 81       	ld	r24, Z
     8e6:	88 2f       	mov	r24, r24
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	9c 83       	std	Y+4, r25	; 0x04
     8ec:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
     8ee:	89 e7       	ldi	r24, 0x79	; 121
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	88 2f       	mov	r24, r24
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	98 2f       	mov	r25, r24
     8fc:	88 27       	eor	r24, r24
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	3c 81       	ldd	r19, Y+4	; 0x04
     902:	82 2b       	or	r24, r18
     904:	93 2b       	or	r25, r19
     906:	9c 83       	std	Y+4, r25	; 0x04
     908:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     90a:	8a e7       	ldi	r24, 0x7A	; 122
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
	ADMUX = 0;
     912:	8c e7       	ldi	r24, 0x7C	; 124
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
     91a:	8e e7       	ldi	r24, 0x7E	; 126
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2e e7       	ldi	r18, 0x7E	; 126
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	f9 01       	movw	r30, r18
     924:	20 81       	ld	r18, Z
     926:	24 60       	ori	r18, 0x04	; 4
     928:	fc 01       	movw	r30, r24
     92a:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     92c:	84 e6       	ldi	r24, 0x64	; 100
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	24 e6       	ldi	r18, 0x64	; 100
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	f9 01       	movw	r30, r18
     936:	20 81       	ld	r18, Z
     938:	21 60       	ori	r18, 0x01	; 1
     93a:	fc 01       	movw	r30, r24
     93c:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
     93e:	22 ef       	ldi	r18, 0xF2	; 242
     940:	32 e0       	ldi	r19, 0x02	; 2
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	a9 01       	movw	r20, r18
     948:	48 1b       	sub	r20, r24
     94a:	59 0b       	sbc	r21, r25
     94c:	ca 01       	movw	r24, r20
     94e:	9c 83       	std	Y+4, r25	; 0x04
     950:	8b 83       	std	Y+3, r24	; 0x03
	Print0(" RAW Therm ADC= ");
	Print0(shibby);
	#endif
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
     952:	8b 81       	ldd	r24, Y+3	; 0x03
     954:	9c 81       	ldd	r25, Y+4	; 0x04
     956:	cc 01       	movw	r24, r24
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__floatunsisf>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	28 e4       	ldi	r18, 0x48	; 72
     96e:	31 ee       	ldi	r19, 0xE1	; 225
     970:	4c e1       	ldi	r20, 0x1C	; 28
     972:	51 e4       	ldi	r21, 0x41	; 65
     974:	0e 94 7b 07 	call	0xef6	; 0xef6 <__divsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	8d 83       	std	Y+5, r24	; 0x05
     97e:	9e 83       	std	Y+6, r25	; 0x06
     980:	af 83       	std	Y+7, r26	; 0x07
     982:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
     984:	6d 81       	ldd	r22, Y+5	; 0x05
     986:	7e 81       	ldd	r23, Y+6	; 0x06
     988:	8f 81       	ldd	r24, Y+7	; 0x07
     98a:	98 85       	ldd	r25, Y+8	; 0x08
     98c:	26 e6       	ldi	r18, 0x66	; 102
     98e:	36 e6       	ldi	r19, 0x66	; 102
     990:	46 ee       	ldi	r20, 0xE6	; 230
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__mulsf3>
     998:	dc 01       	movw	r26, r24
     99a:	cb 01       	movw	r24, r22
     99c:	bc 01       	movw	r22, r24
     99e:	cd 01       	movw	r24, r26
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	52 e4       	ldi	r21, 0x42	; 66
     9a8:	0e 94 17 07 	call	0xe2e	; 0xe2e <__addsf3>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	8d 83       	std	Y+5, r24	; 0x05
     9b2:	9e 83       	std	Y+6, r25	; 0x06
     9b4:	af 83       	std	Y+7, r26	; 0x07
     9b6:	b8 87       	std	Y+8, r27	; 0x08
	
	//Convert into a string
	dtostrf(dataTherm,5,2,stringTherm);
     9b8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ba:	9e 81       	ldd	r25, Y+6	; 0x06
     9bc:	af 81       	ldd	r26, Y+7	; 0x07
     9be:	b8 85       	ldd	r27, Y+8	; 0x08
     9c0:	fe 01       	movw	r30, r28
     9c2:	39 96       	adiw	r30, 0x09	; 9
     9c4:	bc 01       	movw	r22, r24
     9c6:	cd 01       	movw	r24, r26
     9c8:	45 e0       	ldi	r20, 0x05	; 5
     9ca:	22 e0       	ldi	r18, 0x02	; 2
     9cc:	8f 01       	movw	r16, r30
     9ce:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <dtostrf>
	stringTherm[8] = '.';
     9d2:	8e e2       	ldi	r24, 0x2E	; 46
     9d4:	89 8b       	std	Y+17, r24	; 0x11
	stringTherm[9] = '\0';
     9d6:	1a 8a       	std	Y+18, r1	; 0x12
	
	//Print temperature
	Print0(" Therm Temp= ");
     9d8:	8e e1       	ldi	r24, 0x1E	; 30
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
	Print0(stringTherm);
     9e0:	ce 01       	movw	r24, r28
     9e2:	09 96       	adiw	r24, 0x09	; 9
     9e4:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
		
}
     9e8:	62 96       	adiw	r28, 0x12	; 18
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	f8 94       	cli
     9ee:	de bf       	out	0x3e, r29	; 62
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	cd bf       	out	0x3d, r28	; 61
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	08 95       	ret

000009fe <GetHumidity>:

/**********************************************************************************************************************************/	
void GetHumidity()
{
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	62 97       	sbiw	r28, 0x12	; 18
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	char humidityString[10];
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
     a16:	84 e6       	ldi	r24, 0x64	; 100
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	24 e6       	ldi	r18, 0x64	; 100
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	2e 7f       	andi	r18, 0xFE	; 254
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
	Wait_ms(10);						
     a28:	8a e0       	ldi	r24, 0x0A	; 10
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
     a30:	8c e7       	ldi	r24, 0x7C	; 124
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	2c e7       	ldi	r18, 0x7C	; 124
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	21 64       	ori	r18, 0x41	; 65
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
     a42:	8a e7       	ldi	r24, 0x7A	; 122
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	2a e7       	ldi	r18, 0x7A	; 122
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	27 68       	ori	r18, 0x87	; 135
     a50:	fc 01       	movw	r30, r24
     a52:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     a54:	8e e7       	ldi	r24, 0x7E	; 126
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	2d ef       	ldi	r18, 0xFD	; 253
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18
	Wait_ms(10);
     a5e:	8a e0       	ldi	r24, 0x0A	; 10
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     a66:	1a 82       	std	Y+2, r1	; 0x02
     a68:	19 82       	std	Y+1, r1	; 0x01
     a6a:	19 c0       	rjmp	.+50     	; 0xa9e <GetHumidity+0xa0>
     a6c:	8a e7       	ldi	r24, 0x7A	; 122
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	2a e7       	ldi	r18, 0x7A	; 122
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	f9 01       	movw	r30, r18
     a76:	20 81       	ld	r18, Z
     a78:	20 64       	ori	r18, 0x40	; 64
     a7a:	fc 01       	movw	r30, r24
     a7c:	20 83       	st	Z, r18
     a7e:	00 00       	nop
     a80:	8a e7       	ldi	r24, 0x7A	; 122
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	fc 01       	movw	r30, r24
     a86:	80 81       	ld	r24, Z
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	80 74       	andi	r24, 0x40	; 64
     a8e:	90 70       	andi	r25, 0x00	; 0
     a90:	00 97       	sbiw	r24, 0x00	; 0
     a92:	b1 f7       	brne	.-20     	; 0xa80 <GetHumidity+0x82>
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	9a 81       	ldd	r25, Y+2	; 0x02
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	82 30       	cpi	r24, 0x02	; 2
     aa4:	91 05       	cpc	r25, r1
     aa6:	14 f3       	brlt	.-60     	; 0xa6c <GetHumidity+0x6e>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
     aa8:	88 e7       	ldi	r24, 0x78	; 120
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	fc 01       	movw	r30, r24
     aae:	80 81       	ld	r24, Z
     ab0:	88 2f       	mov	r24, r24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	9c 83       	std	Y+4, r25	; 0x04
     ab6:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
     ab8:	89 e7       	ldi	r24, 0x79	; 121
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	98 2f       	mov	r25, r24
     ac6:	88 27       	eor	r24, r24
     ac8:	2b 81       	ldd	r18, Y+3	; 0x03
     aca:	3c 81       	ldd	r19, Y+4	; 0x04
     acc:	82 2b       	or	r24, r18
     ace:	93 2b       	or	r25, r19
     ad0:	9c 83       	std	Y+4, r25	; 0x04
     ad2:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     ad4:	8a e7       	ldi	r24, 0x7A	; 122
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	fc 01       	movw	r30, r24
     ada:	10 82       	st	Z, r1
	ADMUX = 0;
     adc:	8c e7       	ldi	r24, 0x7C	; 124
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	fc 01       	movw	r30, r24
     ae2:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
     ae4:	8e e7       	ldi	r24, 0x7E	; 126
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	2e e7       	ldi	r18, 0x7E	; 126
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	f9 01       	movw	r30, r18
     aee:	20 81       	ld	r18, Z
     af0:	22 60       	ori	r18, 0x02	; 2
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     af6:	84 e6       	ldi	r24, 0x64	; 100
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	24 e6       	ldi	r18, 0x64	; 100
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	f9 01       	movw	r30, r18
     b00:	20 81       	ld	r18, Z
     b02:	21 60       	ori	r18, 0x01	; 1
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18

	//Get actual humidity
	float humidityResultFloat = (float)humidityResult;
     b08:	8b 81       	ldd	r24, Y+3	; 0x03
     b0a:	9c 81       	ldd	r25, Y+4	; 0x04
     b0c:	cc 01       	movw	r24, r24
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	bc 01       	movw	r22, r24
     b14:	cd 01       	movw	r24, r26
     b16:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__floatunsisf>
     b1a:	dc 01       	movw	r26, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	8d 83       	std	Y+5, r24	; 0x05
     b20:	9e 83       	std	Y+6, r25	; 0x06
     b22:	af 83       	std	Y+7, r26	; 0x07
     b24:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
     b26:	6d 81       	ldd	r22, Y+5	; 0x05
     b28:	7e 81       	ldd	r23, Y+6	; 0x06
     b2a:	8f 81       	ldd	r24, Y+7	; 0x07
     b2c:	98 85       	ldd	r25, Y+8	; 0x08
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4b e1       	ldi	r20, 0x1B	; 27
     b34:	53 e4       	ldi	r21, 0x43	; 67
     b36:	0e 94 16 07 	call	0xe2c	; 0xe2c <__subsf3>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	8d 83       	std	Y+5, r24	; 0x05
     b40:	9e 83       	std	Y+6, r25	; 0x06
     b42:	af 83       	std	Y+7, r26	; 0x07
     b44:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat /= HUMIDITY_CONVERTER;	//get actual humidity	
     b46:	6d 81       	ldd	r22, Y+5	; 0x05
     b48:	7e 81       	ldd	r23, Y+6	; 0x06
     b4a:	8f 81       	ldd	r24, Y+7	; 0x07
     b4c:	98 85       	ldd	r25, Y+8	; 0x08
     b4e:	23 e7       	ldi	r18, 0x73	; 115
     b50:	38 e6       	ldi	r19, 0x68	; 104
     b52:	4d e9       	ldi	r20, 0x9D	; 157
     b54:	50 e4       	ldi	r21, 0x40	; 64
     b56:	0e 94 7b 07 	call	0xef6	; 0xef6 <__divsf3>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	8d 83       	std	Y+5, r24	; 0x05
     b60:	9e 83       	std	Y+6, r25	; 0x06
     b62:	af 83       	std	Y+7, r26	; 0x07
     b64:	b8 87       	std	Y+8, r27	; 0x08
	
	//Print humidity to terminal
	dtostrf(humidityResultFloat, 5, 2, humidityString);
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	af 81       	ldd	r26, Y+7	; 0x07
     b6c:	b8 85       	ldd	r27, Y+8	; 0x08
     b6e:	fe 01       	movw	r30, r28
     b70:	39 96       	adiw	r30, 0x09	; 9
     b72:	bc 01       	movw	r22, r24
     b74:	cd 01       	movw	r24, r26
     b76:	45 e0       	ldi	r20, 0x05	; 5
     b78:	22 e0       	ldi	r18, 0x02	; 2
     b7a:	8f 01       	movw	r16, r30
     b7c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <dtostrf>
	humidityString[8] = '.';
     b80:	8e e2       	ldi	r24, 0x2E	; 46
     b82:	89 8b       	std	Y+17, r24	; 0x11
	humidityString[9] = '\0';
     b84:	1a 8a       	std	Y+18, r1	; 0x12
	Print0(" Humidity: ");
     b86:	8c e2       	ldi	r24, 0x2C	; 44
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
	Print0(humidityString);
     b8e:	ce 01       	movw	r24, r28
     b90:	09 96       	adiw	r24, 0x09	; 9
     b92:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
}
     b96:	62 96       	adiw	r28, 0x12	; 18
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	1f 91       	pop	r17
     ba8:	0f 91       	pop	r16
     baa:	08 95       	ret

00000bac <GetTempADT>:

/**********************************************************************************************************************************/	

void GetTempADT()
{
     bac:	0f 93       	push	r16
     bae:	1f 93       	push	r17
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	2e 97       	sbiw	r28, 0x0e	; 14
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
	WORD rawDataAD = 0;
     bc4:	1a 82       	std	Y+2, r1	; 0x02
     bc6:	19 82       	std	Y+1, r1	; 0x01
	char tempStringAD[8];
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
     bc8:	84 e6       	ldi	r24, 0x64	; 100
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	24 e6       	ldi	r18, 0x64	; 100
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	2b 7f       	andi	r18, 0xFB	; 251
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
	Wait_ms(10);
     bda:	8a e0       	ldi	r24, 0x0A	; 10
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
     be2:	85 e2       	ldi	r24, 0x25	; 37
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	25 e2       	ldi	r18, 0x25	; 37
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	2f 7e       	andi	r18, 0xEF	; 239
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
     bf4:	8e e4       	ldi	r24, 0x4E	; 78
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	fc 01       	movw	r30, r24
     bfa:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
     bfc:	00 00       	nop
     bfe:	8d e4       	ldi	r24, 0x4D	; 77
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	80 81       	ld	r24, Z
     c06:	88 23       	and	r24, r24
     c08:	d4 f7       	brge	.-12     	; 0xbfe <GetTempADT+0x52>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
     c0a:	8e e4       	ldi	r24, 0x4E	; 78
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fc 01       	movw	r30, r24
     c10:	80 81       	ld	r24, Z
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	98 2f       	mov	r25, r24
     c18:	88 27       	eor	r24, r24
     c1a:	9a 83       	std	Y+2, r25	; 0x02
     c1c:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
     c1e:	8e e4       	ldi	r24, 0x4E	; 78
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	fc 01       	movw	r30, r24
     c24:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
     c26:	00 00       	nop
     c28:	8d e4       	ldi	r24, 0x4D	; 77
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	fc 01       	movw	r30, r24
     c2e:	80 81       	ld	r24, Z
     c30:	88 23       	and	r24, r24
     c32:	d4 f7       	brge	.-12     	; 0xc28 <GetTempADT+0x7c>
	rawDataAD |= SPDR0;					//get second byte, store in low order
     c34:	8e e4       	ldi	r24, 0x4E	; 78
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	29 81       	ldd	r18, Y+1	; 0x01
     c42:	3a 81       	ldd	r19, Y+2	; 0x02
     c44:	82 2b       	or	r24, r18
     c46:	93 2b       	or	r25, r19
     c48:	9a 83       	std	Y+2, r25	; 0x02
     c4a:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
     c4c:	84 e6       	ldi	r24, 0x64	; 100
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	24 e6       	ldi	r18, 0x64	; 100
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	24 60       	ori	r18, 0x04	; 4
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
     c5e:	85 e2       	ldi	r24, 0x25	; 37
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	25 e2       	ldi	r18, 0x25	; 37
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	20 69       	ori	r18, 0x90	; 144
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
     c70:	8a e0       	ldi	r24, 0x0A	; 10
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 aa 06 	call	0xd54	; 0xd54 <Wait_ms>
	
	//Convert number into Celsius, then Fahrenheit
	float dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	9a 81       	ldd	r25, Y+2	; 0x02
     c7c:	cc 01       	movw	r24, r24
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	bc 01       	movw	r22, r24
     c84:	cd 01       	movw	r24, r26
     c86:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__floatunsisf>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	5d e3       	ldi	r21, 0x3D	; 61
     c9a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	26 e6       	ldi	r18, 0x66	; 102
     ca8:	36 e6       	ldi	r19, 0x66	; 102
     caa:	46 ee       	ldi	r20, 0xE6	; 230
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__mulsf3>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	bc 01       	movw	r22, r24
     cb8:	cd 01       	movw	r24, r26
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	52 e4       	ldi	r21, 0x42	; 66
     cc2:	0e 94 17 07 	call	0xe2e	; 0xe2e <__addsf3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	8b 83       	std	Y+3, r24	; 0x03
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	ad 83       	std	Y+5, r26	; 0x05
     cd0:	be 83       	std	Y+6, r27	; 0x06
	
	//Print string
	dtostrf(dataAD, 5, 2, tempStringAD);
     cd2:	8b 81       	ldd	r24, Y+3	; 0x03
     cd4:	9c 81       	ldd	r25, Y+4	; 0x04
     cd6:	ad 81       	ldd	r26, Y+5	; 0x05
     cd8:	be 81       	ldd	r27, Y+6	; 0x06
     cda:	fe 01       	movw	r30, r28
     cdc:	37 96       	adiw	r30, 0x07	; 7
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	45 e0       	ldi	r20, 0x05	; 5
     ce4:	22 e0       	ldi	r18, 0x02	; 2
     ce6:	8f 01       	movw	r16, r30
     ce8:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <dtostrf>
	tempStringAD[6] = '.';
     cec:	8e e2       	ldi	r24, 0x2E	; 46
     cee:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringAD[7] = '\0';
     cf0:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" AD temp= ");
     cf2:	88 e3       	ldi	r24, 0x38	; 56
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
	Print0(tempStringAD);
     cfa:	ce 01       	movw	r24, r28
     cfc:	07 96       	adiw	r24, 0x07	; 7
     cfe:	0e 94 ed 06 	call	0xdda	; 0xdda <Print0>
}
     d02:	2e 96       	adiw	r28, 0x0e	; 14
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	08 95       	ret

00000d18 <ResetDebug>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <ResetDebug+0x6>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
     d22:	88 e2       	ldi	r24, 0x28	; 40
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	fc 01       	movw	r30, r24
     d28:	90 81       	ld	r25, Z
     d2a:	88 ef       	ldi	r24, 0xF8	; 248
     d2c:	89 27       	eor	r24, r25
     d2e:	88 2f       	mov	r24, r24
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	9a 83       	std	Y+2, r25	; 0x02
     d34:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
     d36:	88 e2       	ldi	r24, 0x28	; 40
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	28 e2       	ldi	r18, 0x28	; 40
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	f9 01       	movw	r30, r18
     d40:	30 81       	ld	r19, Z
     d42:	29 81       	ldd	r18, Y+1	; 0x01
     d44:	23 23       	and	r18, r19
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18
}
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <Wait_ms>:
/**********************************************************************************************************************************/																											
#ifdef MISC


void Wait_ms(WORD delay)
{	
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	00 d0       	rcall	.+0      	; 0xd5a <Wait_ms+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <Wait_ms+0x8>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9c 83       	std	Y+4, r25	; 0x04
     d62:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
     d64:	14 c0       	rjmp	.+40     	; 0xd8e <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
     d66:	1a 82       	std	Y+2, r1	; 0x02
     d68:	19 82       	std	Y+1, r1	; 0x01
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <Wait_ms+0x24>
			asm volatile("nop");
     d6c:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	01 96       	adiw	r24, 0x01	; 1
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	21 e0       	ldi	r18, 0x01	; 1
     d7e:	80 39       	cpi	r24, 0x90	; 144
     d80:	92 07       	cpc	r25, r18
     d82:	a0 f3       	brcs	.-24     	; 0xd6c <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	9c 81       	ldd	r25, Y+4	; 0x04
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	9c 83       	std	Y+4, r25	; 0x04
     d8c:	8b 83       	std	Y+3, r24	; 0x03

void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	41 f7       	brne	.-48     	; 0xd66 <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <PutUart0Ch>:

/**********************************************************************************************************************************/

void PutUart0Ch(char ch)
{
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)) ) { asm volatile("nop"); }
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <PutUart0Ch+0x10>
     db2:	00 00       	nop
     db4:	80 ec       	ldi	r24, 0xC0	; 192
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	80 72       	andi	r24, 0x20	; 32
     dc2:	90 70       	andi	r25, 0x00	; 0
     dc4:	00 97       	sbiw	r24, 0x00	; 0
     dc6:	a9 f3       	breq	.-22     	; 0xdb2 <PutUart0Ch+0xe>
	UDR0 = ch;
     dc8:	86 ec       	ldi	r24, 0xC6	; 198
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	29 81       	ldd	r18, Y+1	; 0x01
     dce:	fc 01       	movw	r30, r24
     dd0:	20 83       	st	Z, r18
}
     dd2:	0f 90       	pop	r0
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	08 95       	ret

00000dda <Print0>:

/**********************************************************************************************************************************/
void Print0(char string[])
{	
     dda:	cf 93       	push	r28
     ddc:	df 93       	push	r29
     dde:	00 d0       	rcall	.+0      	; 0xde0 <Print0+0x6>
     de0:	0f 92       	push	r0
     de2:	cd b7       	in	r28, 0x3d	; 61
     de4:	de b7       	in	r29, 0x3e	; 62
     de6:	9b 83       	std	Y+3, r25	; 0x03
     de8:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     dea:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     dec:	0e c0       	rjmp	.+28     	; 0xe0a <Print0+0x30>
		PutUart0Ch(string[i]);  //send byte		
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	2a 81       	ldd	r18, Y+2	; 0x02
     df6:	3b 81       	ldd	r19, Y+3	; 0x03
     df8:	82 0f       	add	r24, r18
     dfa:	93 1f       	adc	r25, r19
     dfc:	fc 01       	movw	r30, r24
     dfe:	80 81       	ld	r24, Z
     e00:	0e 94 d2 06 	call	0xda4	; 0xda4 <PutUart0Ch>
		i += 1;
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	8f 5f       	subi	r24, 0xFF	; 255
     e08:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{	
	BYTE i;
	i = 0;

	while (string[i]) {
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	2a 81       	ldd	r18, Y+2	; 0x02
     e12:	3b 81       	ldd	r19, Y+3	; 0x03
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	fc 01       	movw	r30, r24
     e1a:	80 81       	ld	r24, Z
     e1c:	88 23       	and	r24, r24
     e1e:	39 f7       	brne	.-50     	; 0xdee <Print0+0x14>
		PutUart0Ch(string[i]);  //send byte		
		i += 1;
	}
}
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	08 95       	ret

00000e2c <__subsf3>:
     e2c:	50 58       	subi	r21, 0x80	; 128

00000e2e <__addsf3>:
     e2e:	bb 27       	eor	r27, r27
     e30:	aa 27       	eor	r26, r26
     e32:	0e d0       	rcall	.+28     	; 0xe50 <__addsf3x>
     e34:	1c c1       	rjmp	.+568    	; 0x106e <__fp_round>
     e36:	0d d1       	rcall	.+538    	; 0x1052 <__fp_pscA>
     e38:	30 f0       	brcs	.+12     	; 0xe46 <__addsf3+0x18>
     e3a:	12 d1       	rcall	.+548    	; 0x1060 <__fp_pscB>
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <__addsf3+0x18>
     e3e:	31 f4       	brne	.+12     	; 0xe4c <__addsf3+0x1e>
     e40:	9f 3f       	cpi	r25, 0xFF	; 255
     e42:	11 f4       	brne	.+4      	; 0xe48 <__addsf3+0x1a>
     e44:	1e f4       	brtc	.+6      	; 0xe4c <__addsf3+0x1e>
     e46:	02 c1       	rjmp	.+516    	; 0x104c <__fp_nan>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3+0x1e>
     e4a:	e0 95       	com	r30
     e4c:	e7 fb       	bst	r30, 7
     e4e:	f8 c0       	rjmp	.+496    	; 0x1040 <__fp_inf>

00000e50 <__addsf3x>:
     e50:	e9 2f       	mov	r30, r25
     e52:	1e d1       	rcall	.+572    	; 0x1090 <__fp_split3>
     e54:	80 f3       	brcs	.-32     	; 0xe36 <__addsf3+0x8>
     e56:	ba 17       	cp	r27, r26
     e58:	62 07       	cpc	r22, r18
     e5a:	73 07       	cpc	r23, r19
     e5c:	84 07       	cpc	r24, r20
     e5e:	95 07       	cpc	r25, r21
     e60:	18 f0       	brcs	.+6      	; 0xe68 <__addsf3x+0x18>
     e62:	71 f4       	brne	.+28     	; 0xe80 <__addsf3x+0x30>
     e64:	9e f5       	brtc	.+102    	; 0xecc <__addsf3x+0x7c>
     e66:	36 c1       	rjmp	.+620    	; 0x10d4 <__fp_zero>
     e68:	0e f4       	brtc	.+2      	; 0xe6c <__addsf3x+0x1c>
     e6a:	e0 95       	com	r30
     e6c:	0b 2e       	mov	r0, r27
     e6e:	ba 2f       	mov	r27, r26
     e70:	a0 2d       	mov	r26, r0
     e72:	0b 01       	movw	r0, r22
     e74:	b9 01       	movw	r22, r18
     e76:	90 01       	movw	r18, r0
     e78:	0c 01       	movw	r0, r24
     e7a:	ca 01       	movw	r24, r20
     e7c:	a0 01       	movw	r20, r0
     e7e:	11 24       	eor	r1, r1
     e80:	ff 27       	eor	r31, r31
     e82:	59 1b       	sub	r21, r25
     e84:	99 f0       	breq	.+38     	; 0xeac <__addsf3x+0x5c>
     e86:	59 3f       	cpi	r21, 0xF9	; 249
     e88:	50 f4       	brcc	.+20     	; 0xe9e <__addsf3x+0x4e>
     e8a:	50 3e       	cpi	r21, 0xE0	; 224
     e8c:	68 f1       	brcs	.+90     	; 0xee8 <__addsf3x+0x98>
     e8e:	1a 16       	cp	r1, r26
     e90:	f0 40       	sbci	r31, 0x00	; 0
     e92:	a2 2f       	mov	r26, r18
     e94:	23 2f       	mov	r18, r19
     e96:	34 2f       	mov	r19, r20
     e98:	44 27       	eor	r20, r20
     e9a:	58 5f       	subi	r21, 0xF8	; 248
     e9c:	f3 cf       	rjmp	.-26     	; 0xe84 <__addsf3x+0x34>
     e9e:	46 95       	lsr	r20
     ea0:	37 95       	ror	r19
     ea2:	27 95       	ror	r18
     ea4:	a7 95       	ror	r26
     ea6:	f0 40       	sbci	r31, 0x00	; 0
     ea8:	53 95       	inc	r21
     eaa:	c9 f7       	brne	.-14     	; 0xe9e <__addsf3x+0x4e>
     eac:	7e f4       	brtc	.+30     	; 0xecc <__addsf3x+0x7c>
     eae:	1f 16       	cp	r1, r31
     eb0:	ba 0b       	sbc	r27, r26
     eb2:	62 0b       	sbc	r22, r18
     eb4:	73 0b       	sbc	r23, r19
     eb6:	84 0b       	sbc	r24, r20
     eb8:	ba f0       	brmi	.+46     	; 0xee8 <__addsf3x+0x98>
     eba:	91 50       	subi	r25, 0x01	; 1
     ebc:	a1 f0       	breq	.+40     	; 0xee6 <__addsf3x+0x96>
     ebe:	ff 0f       	add	r31, r31
     ec0:	bb 1f       	adc	r27, r27
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	c2 f7       	brpl	.-16     	; 0xeba <__addsf3x+0x6a>
     eca:	0e c0       	rjmp	.+28     	; 0xee8 <__addsf3x+0x98>
     ecc:	ba 0f       	add	r27, r26
     ece:	62 1f       	adc	r22, r18
     ed0:	73 1f       	adc	r23, r19
     ed2:	84 1f       	adc	r24, r20
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <__addsf3x+0x98>
     ed6:	87 95       	ror	r24
     ed8:	77 95       	ror	r23
     eda:	67 95       	ror	r22
     edc:	b7 95       	ror	r27
     ede:	f7 95       	ror	r31
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <__addsf3x+0x96>
     ee4:	b3 cf       	rjmp	.-154    	; 0xe4c <__addsf3+0x1e>
     ee6:	93 95       	inc	r25
     ee8:	88 0f       	add	r24, r24
     eea:	08 f0       	brcs	.+2      	; 0xeee <__addsf3x+0x9e>
     eec:	99 27       	eor	r25, r25
     eee:	ee 0f       	add	r30, r30
     ef0:	97 95       	ror	r25
     ef2:	87 95       	ror	r24
     ef4:	08 95       	ret

00000ef6 <__divsf3>:
     ef6:	0c d0       	rcall	.+24     	; 0xf10 <__divsf3x>
     ef8:	ba c0       	rjmp	.+372    	; 0x106e <__fp_round>
     efa:	b2 d0       	rcall	.+356    	; 0x1060 <__fp_pscB>
     efc:	40 f0       	brcs	.+16     	; 0xf0e <__divsf3+0x18>
     efe:	a9 d0       	rcall	.+338    	; 0x1052 <__fp_pscA>
     f00:	30 f0       	brcs	.+12     	; 0xf0e <__divsf3+0x18>
     f02:	21 f4       	brne	.+8      	; 0xf0c <__divsf3+0x16>
     f04:	5f 3f       	cpi	r21, 0xFF	; 255
     f06:	19 f0       	breq	.+6      	; 0xf0e <__divsf3+0x18>
     f08:	9b c0       	rjmp	.+310    	; 0x1040 <__fp_inf>
     f0a:	51 11       	cpse	r21, r1
     f0c:	e4 c0       	rjmp	.+456    	; 0x10d6 <__fp_szero>
     f0e:	9e c0       	rjmp	.+316    	; 0x104c <__fp_nan>

00000f10 <__divsf3x>:
     f10:	bf d0       	rcall	.+382    	; 0x1090 <__fp_split3>
     f12:	98 f3       	brcs	.-26     	; 0xefa <__divsf3+0x4>

00000f14 <__divsf3_pse>:
     f14:	99 23       	and	r25, r25
     f16:	c9 f3       	breq	.-14     	; 0xf0a <__divsf3+0x14>
     f18:	55 23       	and	r21, r21
     f1a:	b1 f3       	breq	.-20     	; 0xf08 <__divsf3+0x12>
     f1c:	95 1b       	sub	r25, r21
     f1e:	55 0b       	sbc	r21, r21
     f20:	bb 27       	eor	r27, r27
     f22:	aa 27       	eor	r26, r26
     f24:	62 17       	cp	r22, r18
     f26:	73 07       	cpc	r23, r19
     f28:	84 07       	cpc	r24, r20
     f2a:	38 f0       	brcs	.+14     	; 0xf3a <__divsf3_pse+0x26>
     f2c:	9f 5f       	subi	r25, 0xFF	; 255
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	44 1f       	adc	r20, r20
     f36:	aa 1f       	adc	r26, r26
     f38:	a9 f3       	breq	.-22     	; 0xf24 <__divsf3_pse+0x10>
     f3a:	33 d0       	rcall	.+102    	; 0xfa2 <__divsf3_pse+0x8e>
     f3c:	0e 2e       	mov	r0, r30
     f3e:	3a f0       	brmi	.+14     	; 0xf4e <__divsf3_pse+0x3a>
     f40:	e0 e8       	ldi	r30, 0x80	; 128
     f42:	30 d0       	rcall	.+96     	; 0xfa4 <__divsf3_pse+0x90>
     f44:	91 50       	subi	r25, 0x01	; 1
     f46:	50 40       	sbci	r21, 0x00	; 0
     f48:	e6 95       	lsr	r30
     f4a:	00 1c       	adc	r0, r0
     f4c:	ca f7       	brpl	.-14     	; 0xf40 <__divsf3_pse+0x2c>
     f4e:	29 d0       	rcall	.+82     	; 0xfa2 <__divsf3_pse+0x8e>
     f50:	fe 2f       	mov	r31, r30
     f52:	27 d0       	rcall	.+78     	; 0xfa2 <__divsf3_pse+0x8e>
     f54:	66 0f       	add	r22, r22
     f56:	77 1f       	adc	r23, r23
     f58:	88 1f       	adc	r24, r24
     f5a:	bb 1f       	adc	r27, r27
     f5c:	26 17       	cp	r18, r22
     f5e:	37 07       	cpc	r19, r23
     f60:	48 07       	cpc	r20, r24
     f62:	ab 07       	cpc	r26, r27
     f64:	b0 e8       	ldi	r27, 0x80	; 128
     f66:	09 f0       	breq	.+2      	; 0xf6a <__divsf3_pse+0x56>
     f68:	bb 0b       	sbc	r27, r27
     f6a:	80 2d       	mov	r24, r0
     f6c:	bf 01       	movw	r22, r30
     f6e:	ff 27       	eor	r31, r31
     f70:	93 58       	subi	r25, 0x83	; 131
     f72:	5f 4f       	sbci	r21, 0xFF	; 255
     f74:	2a f0       	brmi	.+10     	; 0xf80 <__divsf3_pse+0x6c>
     f76:	9e 3f       	cpi	r25, 0xFE	; 254
     f78:	51 05       	cpc	r21, r1
     f7a:	68 f0       	brcs	.+26     	; 0xf96 <__divsf3_pse+0x82>
     f7c:	61 c0       	rjmp	.+194    	; 0x1040 <__fp_inf>
     f7e:	ab c0       	rjmp	.+342    	; 0x10d6 <__fp_szero>
     f80:	5f 3f       	cpi	r21, 0xFF	; 255
     f82:	ec f3       	brlt	.-6      	; 0xf7e <__divsf3_pse+0x6a>
     f84:	98 3e       	cpi	r25, 0xE8	; 232
     f86:	dc f3       	brlt	.-10     	; 0xf7e <__divsf3_pse+0x6a>
     f88:	86 95       	lsr	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b7 95       	ror	r27
     f90:	f7 95       	ror	r31
     f92:	9f 5f       	subi	r25, 0xFF	; 255
     f94:	c9 f7       	brne	.-14     	; 0xf88 <__divsf3_pse+0x74>
     f96:	88 0f       	add	r24, r24
     f98:	91 1d       	adc	r25, r1
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret
     fa2:	e1 e0       	ldi	r30, 0x01	; 1
     fa4:	66 0f       	add	r22, r22
     fa6:	77 1f       	adc	r23, r23
     fa8:	88 1f       	adc	r24, r24
     faa:	bb 1f       	adc	r27, r27
     fac:	62 17       	cp	r22, r18
     fae:	73 07       	cpc	r23, r19
     fb0:	84 07       	cpc	r24, r20
     fb2:	ba 07       	cpc	r27, r26
     fb4:	20 f0       	brcs	.+8      	; 0xfbe <__divsf3_pse+0xaa>
     fb6:	62 1b       	sub	r22, r18
     fb8:	73 0b       	sbc	r23, r19
     fba:	84 0b       	sbc	r24, r20
     fbc:	ba 0b       	sbc	r27, r26
     fbe:	ee 1f       	adc	r30, r30
     fc0:	88 f7       	brcc	.-30     	; 0xfa4 <__divsf3_pse+0x90>
     fc2:	e0 95       	com	r30
     fc4:	08 95       	ret

00000fc6 <__floatunsisf>:
     fc6:	e8 94       	clt
     fc8:	09 c0       	rjmp	.+18     	; 0xfdc <__floatsisf+0x12>

00000fca <__floatsisf>:
     fca:	97 fb       	bst	r25, 7
     fcc:	3e f4       	brtc	.+14     	; 0xfdc <__floatsisf+0x12>
     fce:	90 95       	com	r25
     fd0:	80 95       	com	r24
     fd2:	70 95       	com	r23
     fd4:	61 95       	neg	r22
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	99 23       	and	r25, r25
     fde:	a9 f0       	breq	.+42     	; 0x100a <__floatsisf+0x40>
     fe0:	f9 2f       	mov	r31, r25
     fe2:	96 e9       	ldi	r25, 0x96	; 150
     fe4:	bb 27       	eor	r27, r27
     fe6:	93 95       	inc	r25
     fe8:	f6 95       	lsr	r31
     fea:	87 95       	ror	r24
     fec:	77 95       	ror	r23
     fee:	67 95       	ror	r22
     ff0:	b7 95       	ror	r27
     ff2:	f1 11       	cpse	r31, r1
     ff4:	f8 cf       	rjmp	.-16     	; 0xfe6 <__floatsisf+0x1c>
     ff6:	fa f4       	brpl	.+62     	; 0x1036 <__floatsisf+0x6c>
     ff8:	bb 0f       	add	r27, r27
     ffa:	11 f4       	brne	.+4      	; 0x1000 <__floatsisf+0x36>
     ffc:	60 ff       	sbrs	r22, 0
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <__floatsisf+0x6c>
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	8f 4f       	sbci	r24, 0xFF	; 255
    1006:	9f 4f       	sbci	r25, 0xFF	; 255
    1008:	16 c0       	rjmp	.+44     	; 0x1036 <__floatsisf+0x6c>
    100a:	88 23       	and	r24, r24
    100c:	11 f0       	breq	.+4      	; 0x1012 <__floatsisf+0x48>
    100e:	96 e9       	ldi	r25, 0x96	; 150
    1010:	11 c0       	rjmp	.+34     	; 0x1034 <__floatsisf+0x6a>
    1012:	77 23       	and	r23, r23
    1014:	21 f0       	breq	.+8      	; 0x101e <__floatsisf+0x54>
    1016:	9e e8       	ldi	r25, 0x8E	; 142
    1018:	87 2f       	mov	r24, r23
    101a:	76 2f       	mov	r23, r22
    101c:	05 c0       	rjmp	.+10     	; 0x1028 <__floatsisf+0x5e>
    101e:	66 23       	and	r22, r22
    1020:	71 f0       	breq	.+28     	; 0x103e <__floatsisf+0x74>
    1022:	96 e8       	ldi	r25, 0x86	; 134
    1024:	86 2f       	mov	r24, r22
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	60 e0       	ldi	r22, 0x00	; 0
    102a:	2a f0       	brmi	.+10     	; 0x1036 <__floatsisf+0x6c>
    102c:	9a 95       	dec	r25
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	da f7       	brpl	.-10     	; 0x102c <__floatsisf+0x62>
    1036:	88 0f       	add	r24, r24
    1038:	96 95       	lsr	r25
    103a:	87 95       	ror	r24
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <__fp_inf>:
    1040:	97 f9       	bld	r25, 7
    1042:	9f 67       	ori	r25, 0x7F	; 127
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	08 95       	ret

0000104c <__fp_nan>:
    104c:	9f ef       	ldi	r25, 0xFF	; 255
    104e:	80 ec       	ldi	r24, 0xC0	; 192
    1050:	08 95       	ret

00001052 <__fp_pscA>:
    1052:	00 24       	eor	r0, r0
    1054:	0a 94       	dec	r0
    1056:	16 16       	cp	r1, r22
    1058:	17 06       	cpc	r1, r23
    105a:	18 06       	cpc	r1, r24
    105c:	09 06       	cpc	r0, r25
    105e:	08 95       	ret

00001060 <__fp_pscB>:
    1060:	00 24       	eor	r0, r0
    1062:	0a 94       	dec	r0
    1064:	12 16       	cp	r1, r18
    1066:	13 06       	cpc	r1, r19
    1068:	14 06       	cpc	r1, r20
    106a:	05 06       	cpc	r0, r21
    106c:	08 95       	ret

0000106e <__fp_round>:
    106e:	09 2e       	mov	r0, r25
    1070:	03 94       	inc	r0
    1072:	00 0c       	add	r0, r0
    1074:	11 f4       	brne	.+4      	; 0x107a <__fp_round+0xc>
    1076:	88 23       	and	r24, r24
    1078:	52 f0       	brmi	.+20     	; 0x108e <__fp_round+0x20>
    107a:	bb 0f       	add	r27, r27
    107c:	40 f4       	brcc	.+16     	; 0x108e <__fp_round+0x20>
    107e:	bf 2b       	or	r27, r31
    1080:	11 f4       	brne	.+4      	; 0x1086 <__fp_round+0x18>
    1082:	60 ff       	sbrs	r22, 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__fp_round+0x20>
    1086:	6f 5f       	subi	r22, 0xFF	; 255
    1088:	7f 4f       	sbci	r23, 0xFF	; 255
    108a:	8f 4f       	sbci	r24, 0xFF	; 255
    108c:	9f 4f       	sbci	r25, 0xFF	; 255
    108e:	08 95       	ret

00001090 <__fp_split3>:
    1090:	57 fd       	sbrc	r21, 7
    1092:	90 58       	subi	r25, 0x80	; 128
    1094:	44 0f       	add	r20, r20
    1096:	55 1f       	adc	r21, r21
    1098:	59 f0       	breq	.+22     	; 0x10b0 <__fp_splitA+0x10>
    109a:	5f 3f       	cpi	r21, 0xFF	; 255
    109c:	71 f0       	breq	.+28     	; 0x10ba <__fp_splitA+0x1a>
    109e:	47 95       	ror	r20

000010a0 <__fp_splitA>:
    10a0:	88 0f       	add	r24, r24
    10a2:	97 fb       	bst	r25, 7
    10a4:	99 1f       	adc	r25, r25
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <__fp_splitA+0x20>
    10a8:	9f 3f       	cpi	r25, 0xFF	; 255
    10aa:	79 f0       	breq	.+30     	; 0x10ca <__fp_splitA+0x2a>
    10ac:	87 95       	ror	r24
    10ae:	08 95       	ret
    10b0:	12 16       	cp	r1, r18
    10b2:	13 06       	cpc	r1, r19
    10b4:	14 06       	cpc	r1, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	f2 cf       	rjmp	.-28     	; 0x109e <__fp_split3+0xe>
    10ba:	46 95       	lsr	r20
    10bc:	f1 df       	rcall	.-30     	; 0x10a0 <__fp_splitA>
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <__fp_splitA+0x30>
    10c0:	16 16       	cp	r1, r22
    10c2:	17 06       	cpc	r1, r23
    10c4:	18 06       	cpc	r1, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	f1 cf       	rjmp	.-30     	; 0x10ac <__fp_splitA+0xc>
    10ca:	86 95       	lsr	r24
    10cc:	71 05       	cpc	r23, r1
    10ce:	61 05       	cpc	r22, r1
    10d0:	08 94       	sec
    10d2:	08 95       	ret

000010d4 <__fp_zero>:
    10d4:	e8 94       	clt

000010d6 <__fp_szero>:
    10d6:	bb 27       	eor	r27, r27
    10d8:	66 27       	eor	r22, r22
    10da:	77 27       	eor	r23, r23
    10dc:	cb 01       	movw	r24, r22
    10de:	97 f9       	bld	r25, 7
    10e0:	08 95       	ret

000010e2 <__mulsf3>:
    10e2:	0b d0       	rcall	.+22     	; 0x10fa <__mulsf3x>
    10e4:	c4 cf       	rjmp	.-120    	; 0x106e <__fp_round>
    10e6:	b5 df       	rcall	.-150    	; 0x1052 <__fp_pscA>
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <__mulsf3+0x12>
    10ea:	ba df       	rcall	.-140    	; 0x1060 <__fp_pscB>
    10ec:	18 f0       	brcs	.+6      	; 0x10f4 <__mulsf3+0x12>
    10ee:	95 23       	and	r25, r21
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <__mulsf3+0x12>
    10f2:	a6 cf       	rjmp	.-180    	; 0x1040 <__fp_inf>
    10f4:	ab cf       	rjmp	.-170    	; 0x104c <__fp_nan>
    10f6:	11 24       	eor	r1, r1
    10f8:	ee cf       	rjmp	.-36     	; 0x10d6 <__fp_szero>

000010fa <__mulsf3x>:
    10fa:	ca df       	rcall	.-108    	; 0x1090 <__fp_split3>
    10fc:	a0 f3       	brcs	.-24     	; 0x10e6 <__mulsf3+0x4>

000010fe <__mulsf3_pse>:
    10fe:	95 9f       	mul	r25, r21
    1100:	d1 f3       	breq	.-12     	; 0x10f6 <__mulsf3+0x14>
    1102:	95 0f       	add	r25, r21
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	55 1f       	adc	r21, r21
    1108:	62 9f       	mul	r22, r18
    110a:	f0 01       	movw	r30, r0
    110c:	72 9f       	mul	r23, r18
    110e:	bb 27       	eor	r27, r27
    1110:	f0 0d       	add	r31, r0
    1112:	b1 1d       	adc	r27, r1
    1114:	63 9f       	mul	r22, r19
    1116:	aa 27       	eor	r26, r26
    1118:	f0 0d       	add	r31, r0
    111a:	b1 1d       	adc	r27, r1
    111c:	aa 1f       	adc	r26, r26
    111e:	64 9f       	mul	r22, r20
    1120:	66 27       	eor	r22, r22
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	66 1f       	adc	r22, r22
    1128:	82 9f       	mul	r24, r18
    112a:	22 27       	eor	r18, r18
    112c:	b0 0d       	add	r27, r0
    112e:	a1 1d       	adc	r26, r1
    1130:	62 1f       	adc	r22, r18
    1132:	73 9f       	mul	r23, r19
    1134:	b0 0d       	add	r27, r0
    1136:	a1 1d       	adc	r26, r1
    1138:	62 1f       	adc	r22, r18
    113a:	83 9f       	mul	r24, r19
    113c:	a0 0d       	add	r26, r0
    113e:	61 1d       	adc	r22, r1
    1140:	22 1f       	adc	r18, r18
    1142:	74 9f       	mul	r23, r20
    1144:	33 27       	eor	r19, r19
    1146:	a0 0d       	add	r26, r0
    1148:	61 1d       	adc	r22, r1
    114a:	23 1f       	adc	r18, r19
    114c:	84 9f       	mul	r24, r20
    114e:	60 0d       	add	r22, r0
    1150:	21 1d       	adc	r18, r1
    1152:	82 2f       	mov	r24, r18
    1154:	76 2f       	mov	r23, r22
    1156:	6a 2f       	mov	r22, r26
    1158:	11 24       	eor	r1, r1
    115a:	9f 57       	subi	r25, 0x7F	; 127
    115c:	50 40       	sbci	r21, 0x00	; 0
    115e:	8a f0       	brmi	.+34     	; 0x1182 <__mulsf3_pse+0x84>
    1160:	e1 f0       	breq	.+56     	; 0x119a <__mulsf3_pse+0x9c>
    1162:	88 23       	and	r24, r24
    1164:	4a f0       	brmi	.+18     	; 0x1178 <__mulsf3_pse+0x7a>
    1166:	ee 0f       	add	r30, r30
    1168:	ff 1f       	adc	r31, r31
    116a:	bb 1f       	adc	r27, r27
    116c:	66 1f       	adc	r22, r22
    116e:	77 1f       	adc	r23, r23
    1170:	88 1f       	adc	r24, r24
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	50 40       	sbci	r21, 0x00	; 0
    1176:	a9 f7       	brne	.-22     	; 0x1162 <__mulsf3_pse+0x64>
    1178:	9e 3f       	cpi	r25, 0xFE	; 254
    117a:	51 05       	cpc	r21, r1
    117c:	70 f0       	brcs	.+28     	; 0x119a <__mulsf3_pse+0x9c>
    117e:	60 cf       	rjmp	.-320    	; 0x1040 <__fp_inf>
    1180:	aa cf       	rjmp	.-172    	; 0x10d6 <__fp_szero>
    1182:	5f 3f       	cpi	r21, 0xFF	; 255
    1184:	ec f3       	brlt	.-6      	; 0x1180 <__mulsf3_pse+0x82>
    1186:	98 3e       	cpi	r25, 0xE8	; 232
    1188:	dc f3       	brlt	.-10     	; 0x1180 <__mulsf3_pse+0x82>
    118a:	86 95       	lsr	r24
    118c:	77 95       	ror	r23
    118e:	67 95       	ror	r22
    1190:	b7 95       	ror	r27
    1192:	f7 95       	ror	r31
    1194:	e7 95       	ror	r30
    1196:	9f 5f       	subi	r25, 0xFF	; 255
    1198:	c1 f7       	brne	.-16     	; 0x118a <__mulsf3_pse+0x8c>
    119a:	fe 2b       	or	r31, r30
    119c:	88 0f       	add	r24, r24
    119e:	91 1d       	adc	r25, r1
    11a0:	96 95       	lsr	r25
    11a2:	87 95       	ror	r24
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret

000011a8 <dtostrf>:
    11a8:	ef 92       	push	r14
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	32 2f       	mov	r19, r18
    11b2:	c0 2f       	mov	r28, r16
    11b4:	47 ff       	sbrs	r20, 7
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <dtostrf+0x14>
    11b8:	a4 e1       	ldi	r26, 0x14	; 20
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <dtostrf+0x16>
    11bc:	a4 e0       	ldi	r26, 0x04	; 4
    11be:	e4 2f       	mov	r30, r20
    11c0:	ff 27       	eor	r31, r31
    11c2:	e7 fd       	sbrc	r30, 7
    11c4:	f0 95       	com	r31
    11c6:	f7 ff       	sbrs	r31, 7
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <dtostrf+0x28>
    11ca:	f0 95       	com	r31
    11cc:	e1 95       	neg	r30
    11ce:	ff 4f       	sbci	r31, 0xFF	; 255
    11d0:	4c 2f       	mov	r20, r28
    11d2:	51 2f       	mov	r21, r17
    11d4:	2e 2f       	mov	r18, r30
    11d6:	03 2f       	mov	r16, r19
    11d8:	ea 2e       	mov	r14, r26
    11da:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <dtoa_prf>
    11de:	8c 2f       	mov	r24, r28
    11e0:	91 2f       	mov	r25, r17
    11e2:	cf 91       	pop	r28
    11e4:	1f 91       	pop	r17
    11e6:	0f 91       	pop	r16
    11e8:	ef 90       	pop	r14
    11ea:	08 95       	ret

000011ec <vfprintf>:
    11ec:	ad e0       	ldi	r26, 0x0D	; 13
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ec ef       	ldi	r30, 0xFC	; 252
    11f2:	f8 e0       	ldi	r31, 0x08	; 8
    11f4:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__prologue_saves__>
    11f8:	3c 01       	movw	r6, r24
    11fa:	7d 87       	std	Y+13, r23	; 0x0d
    11fc:	6c 87       	std	Y+12, r22	; 0x0c
    11fe:	5a 01       	movw	r10, r20
    1200:	fc 01       	movw	r30, r24
    1202:	17 82       	std	Z+7, r1	; 0x07
    1204:	16 82       	std	Z+6, r1	; 0x06
    1206:	83 81       	ldd	r24, Z+3	; 0x03
    1208:	81 ff       	sbrs	r24, 1
    120a:	c8 c1       	rjmp	.+912    	; 0x159c <vfprintf+0x3b0>
    120c:	2e 01       	movw	r4, r28
    120e:	08 94       	sec
    1210:	41 1c       	adc	r4, r1
    1212:	51 1c       	adc	r5, r1
    1214:	f3 01       	movw	r30, r6
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	ec 85       	ldd	r30, Y+12	; 0x0c
    121a:	fd 85       	ldd	r31, Y+13	; 0x0d
    121c:	93 fd       	sbrc	r25, 3
    121e:	85 91       	lpm	r24, Z+
    1220:	93 ff       	sbrs	r25, 3
    1222:	81 91       	ld	r24, Z+
    1224:	fd 87       	std	Y+13, r31	; 0x0d
    1226:	ec 87       	std	Y+12, r30	; 0x0c
    1228:	88 23       	and	r24, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <vfprintf+0x42>
    122c:	b3 c1       	rjmp	.+870    	; 0x1594 <vfprintf+0x3a8>
    122e:	85 32       	cpi	r24, 0x25	; 37
    1230:	41 f4       	brne	.+16     	; 0x1242 <vfprintf+0x56>
    1232:	93 fd       	sbrc	r25, 3
    1234:	85 91       	lpm	r24, Z+
    1236:	93 ff       	sbrs	r25, 3
    1238:	81 91       	ld	r24, Z+
    123a:	fd 87       	std	Y+13, r31	; 0x0d
    123c:	ec 87       	std	Y+12, r30	; 0x0c
    123e:	85 32       	cpi	r24, 0x25	; 37
    1240:	29 f4       	brne	.+10     	; 0x124c <vfprintf+0x60>
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	b3 01       	movw	r22, r6
    1246:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    124a:	e4 cf       	rjmp	.-56     	; 0x1214 <vfprintf+0x28>
    124c:	ff 24       	eor	r15, r15
    124e:	ee 24       	eor	r14, r14
    1250:	10 e0       	ldi	r17, 0x00	; 0
    1252:	10 32       	cpi	r17, 0x20	; 32
    1254:	b0 f4       	brcc	.+44     	; 0x1282 <vfprintf+0x96>
    1256:	8b 32       	cpi	r24, 0x2B	; 43
    1258:	69 f0       	breq	.+26     	; 0x1274 <vfprintf+0x88>
    125a:	8c 32       	cpi	r24, 0x2C	; 44
    125c:	28 f4       	brcc	.+10     	; 0x1268 <vfprintf+0x7c>
    125e:	80 32       	cpi	r24, 0x20	; 32
    1260:	51 f0       	breq	.+20     	; 0x1276 <vfprintf+0x8a>
    1262:	83 32       	cpi	r24, 0x23	; 35
    1264:	71 f4       	brne	.+28     	; 0x1282 <vfprintf+0x96>
    1266:	0b c0       	rjmp	.+22     	; 0x127e <vfprintf+0x92>
    1268:	8d 32       	cpi	r24, 0x2D	; 45
    126a:	39 f0       	breq	.+14     	; 0x127a <vfprintf+0x8e>
    126c:	80 33       	cpi	r24, 0x30	; 48
    126e:	49 f4       	brne	.+18     	; 0x1282 <vfprintf+0x96>
    1270:	11 60       	ori	r17, 0x01	; 1
    1272:	2c c0       	rjmp	.+88     	; 0x12cc <vfprintf+0xe0>
    1274:	12 60       	ori	r17, 0x02	; 2
    1276:	14 60       	ori	r17, 0x04	; 4
    1278:	29 c0       	rjmp	.+82     	; 0x12cc <vfprintf+0xe0>
    127a:	18 60       	ori	r17, 0x08	; 8
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <vfprintf+0xe0>
    127e:	10 61       	ori	r17, 0x10	; 16
    1280:	25 c0       	rjmp	.+74     	; 0x12cc <vfprintf+0xe0>
    1282:	17 fd       	sbrc	r17, 7
    1284:	2e c0       	rjmp	.+92     	; 0x12e2 <vfprintf+0xf6>
    1286:	28 2f       	mov	r18, r24
    1288:	20 53       	subi	r18, 0x30	; 48
    128a:	2a 30       	cpi	r18, 0x0A	; 10
    128c:	98 f4       	brcc	.+38     	; 0x12b4 <vfprintf+0xc8>
    128e:	16 ff       	sbrs	r17, 6
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <vfprintf+0xb6>
    1292:	8f 2d       	mov	r24, r15
    1294:	88 0f       	add	r24, r24
    1296:	f8 2e       	mov	r15, r24
    1298:	ff 0c       	add	r15, r15
    129a:	ff 0c       	add	r15, r15
    129c:	f8 0e       	add	r15, r24
    129e:	f2 0e       	add	r15, r18
    12a0:	15 c0       	rjmp	.+42     	; 0x12cc <vfprintf+0xe0>
    12a2:	8e 2d       	mov	r24, r14
    12a4:	88 0f       	add	r24, r24
    12a6:	e8 2e       	mov	r14, r24
    12a8:	ee 0c       	add	r14, r14
    12aa:	ee 0c       	add	r14, r14
    12ac:	e8 0e       	add	r14, r24
    12ae:	e2 0e       	add	r14, r18
    12b0:	10 62       	ori	r17, 0x20	; 32
    12b2:	0c c0       	rjmp	.+24     	; 0x12cc <vfprintf+0xe0>
    12b4:	8e 32       	cpi	r24, 0x2E	; 46
    12b6:	21 f4       	brne	.+8      	; 0x12c0 <vfprintf+0xd4>
    12b8:	16 fd       	sbrc	r17, 6
    12ba:	6c c1       	rjmp	.+728    	; 0x1594 <vfprintf+0x3a8>
    12bc:	10 64       	ori	r17, 0x40	; 64
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0xe0>
    12c0:	8c 36       	cpi	r24, 0x6C	; 108
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <vfprintf+0xdc>
    12c4:	10 68       	ori	r17, 0x80	; 128
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <vfprintf+0xe0>
    12c8:	88 36       	cpi	r24, 0x68	; 104
    12ca:	59 f4       	brne	.+22     	; 0x12e2 <vfprintf+0xf6>
    12cc:	ec 85       	ldd	r30, Y+12	; 0x0c
    12ce:	fd 85       	ldd	r31, Y+13	; 0x0d
    12d0:	93 fd       	sbrc	r25, 3
    12d2:	85 91       	lpm	r24, Z+
    12d4:	93 ff       	sbrs	r25, 3
    12d6:	81 91       	ld	r24, Z+
    12d8:	fd 87       	std	Y+13, r31	; 0x0d
    12da:	ec 87       	std	Y+12, r30	; 0x0c
    12dc:	88 23       	and	r24, r24
    12de:	09 f0       	breq	.+2      	; 0x12e2 <vfprintf+0xf6>
    12e0:	b8 cf       	rjmp	.-144    	; 0x1252 <vfprintf+0x66>
    12e2:	98 2f       	mov	r25, r24
    12e4:	95 54       	subi	r25, 0x45	; 69
    12e6:	93 30       	cpi	r25, 0x03	; 3
    12e8:	18 f0       	brcs	.+6      	; 0x12f0 <vfprintf+0x104>
    12ea:	90 52       	subi	r25, 0x20	; 32
    12ec:	93 30       	cpi	r25, 0x03	; 3
    12ee:	38 f4       	brcc	.+14     	; 0x12fe <vfprintf+0x112>
    12f0:	24 e0       	ldi	r18, 0x04	; 4
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	a2 0e       	add	r10, r18
    12f6:	b3 1e       	adc	r11, r19
    12f8:	3f e3       	ldi	r19, 0x3F	; 63
    12fa:	39 83       	std	Y+1, r19	; 0x01
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <vfprintf+0x130>
    12fe:	83 36       	cpi	r24, 0x63	; 99
    1300:	31 f0       	breq	.+12     	; 0x130e <vfprintf+0x122>
    1302:	83 37       	cpi	r24, 0x73	; 115
    1304:	81 f0       	breq	.+32     	; 0x1326 <vfprintf+0x13a>
    1306:	83 35       	cpi	r24, 0x53	; 83
    1308:	09 f0       	breq	.+2      	; 0x130c <vfprintf+0x120>
    130a:	5a c0       	rjmp	.+180    	; 0x13c0 <vfprintf+0x1d4>
    130c:	22 c0       	rjmp	.+68     	; 0x1352 <vfprintf+0x166>
    130e:	f5 01       	movw	r30, r10
    1310:	80 81       	ld	r24, Z
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	22 e0       	ldi	r18, 0x02	; 2
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	a2 0e       	add	r10, r18
    131a:	b3 1e       	adc	r11, r19
    131c:	21 e0       	ldi	r18, 0x01	; 1
    131e:	c2 2e       	mov	r12, r18
    1320:	d1 2c       	mov	r13, r1
    1322:	42 01       	movw	r8, r4
    1324:	14 c0       	rjmp	.+40     	; 0x134e <vfprintf+0x162>
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	29 2e       	mov	r2, r25
    132a:	31 2c       	mov	r3, r1
    132c:	2a 0c       	add	r2, r10
    132e:	3b 1c       	adc	r3, r11
    1330:	f5 01       	movw	r30, r10
    1332:	80 80       	ld	r8, Z
    1334:	91 80       	ldd	r9, Z+1	; 0x01
    1336:	16 ff       	sbrs	r17, 6
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <vfprintf+0x154>
    133a:	6f 2d       	mov	r22, r15
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0x158>
    1340:	6f ef       	ldi	r22, 0xFF	; 255
    1342:	7f ef       	ldi	r23, 0xFF	; 255
    1344:	c4 01       	movw	r24, r8
    1346:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <strnlen>
    134a:	6c 01       	movw	r12, r24
    134c:	51 01       	movw	r10, r2
    134e:	1f 77       	andi	r17, 0x7F	; 127
    1350:	15 c0       	rjmp	.+42     	; 0x137c <vfprintf+0x190>
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	28 2e       	mov	r2, r24
    1356:	31 2c       	mov	r3, r1
    1358:	2a 0c       	add	r2, r10
    135a:	3b 1c       	adc	r3, r11
    135c:	f5 01       	movw	r30, r10
    135e:	80 80       	ld	r8, Z
    1360:	91 80       	ldd	r9, Z+1	; 0x01
    1362:	16 ff       	sbrs	r17, 6
    1364:	03 c0       	rjmp	.+6      	; 0x136c <vfprintf+0x180>
    1366:	6f 2d       	mov	r22, r15
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vfprintf+0x184>
    136c:	6f ef       	ldi	r22, 0xFF	; 255
    136e:	7f ef       	ldi	r23, 0xFF	; 255
    1370:	c4 01       	movw	r24, r8
    1372:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <strnlen_P>
    1376:	6c 01       	movw	r12, r24
    1378:	10 68       	ori	r17, 0x80	; 128
    137a:	51 01       	movw	r10, r2
    137c:	13 fd       	sbrc	r17, 3
    137e:	1c c0       	rjmp	.+56     	; 0x13b8 <vfprintf+0x1cc>
    1380:	06 c0       	rjmp	.+12     	; 0x138e <vfprintf+0x1a2>
    1382:	80 e2       	ldi	r24, 0x20	; 32
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	b3 01       	movw	r22, r6
    1388:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    138c:	ea 94       	dec	r14
    138e:	8e 2d       	mov	r24, r14
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	c8 16       	cp	r12, r24
    1394:	d9 06       	cpc	r13, r25
    1396:	a8 f3       	brcs	.-22     	; 0x1382 <vfprintf+0x196>
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <vfprintf+0x1cc>
    139a:	f4 01       	movw	r30, r8
    139c:	17 fd       	sbrc	r17, 7
    139e:	85 91       	lpm	r24, Z+
    13a0:	17 ff       	sbrs	r17, 7
    13a2:	81 91       	ld	r24, Z+
    13a4:	4f 01       	movw	r8, r30
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	b3 01       	movw	r22, r6
    13aa:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    13ae:	e1 10       	cpse	r14, r1
    13b0:	ea 94       	dec	r14
    13b2:	08 94       	sec
    13b4:	c1 08       	sbc	r12, r1
    13b6:	d1 08       	sbc	r13, r1
    13b8:	c1 14       	cp	r12, r1
    13ba:	d1 04       	cpc	r13, r1
    13bc:	71 f7       	brne	.-36     	; 0x139a <vfprintf+0x1ae>
    13be:	e7 c0       	rjmp	.+462    	; 0x158e <vfprintf+0x3a2>
    13c0:	84 36       	cpi	r24, 0x64	; 100
    13c2:	11 f0       	breq	.+4      	; 0x13c8 <vfprintf+0x1dc>
    13c4:	89 36       	cpi	r24, 0x69	; 105
    13c6:	51 f5       	brne	.+84     	; 0x141c <vfprintf+0x230>
    13c8:	f5 01       	movw	r30, r10
    13ca:	17 ff       	sbrs	r17, 7
    13cc:	07 c0       	rjmp	.+14     	; 0x13dc <vfprintf+0x1f0>
    13ce:	80 81       	ld	r24, Z
    13d0:	91 81       	ldd	r25, Z+1	; 0x01
    13d2:	a2 81       	ldd	r26, Z+2	; 0x02
    13d4:	b3 81       	ldd	r27, Z+3	; 0x03
    13d6:	24 e0       	ldi	r18, 0x04	; 4
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <vfprintf+0x200>
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	aa 27       	eor	r26, r26
    13e2:	97 fd       	sbrc	r25, 7
    13e4:	a0 95       	com	r26
    13e6:	ba 2f       	mov	r27, r26
    13e8:	22 e0       	ldi	r18, 0x02	; 2
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	a2 0e       	add	r10, r18
    13ee:	b3 1e       	adc	r11, r19
    13f0:	01 2f       	mov	r16, r17
    13f2:	0f 76       	andi	r16, 0x6F	; 111
    13f4:	b7 ff       	sbrs	r27, 7
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <vfprintf+0x21c>
    13f8:	b0 95       	com	r27
    13fa:	a0 95       	com	r26
    13fc:	90 95       	com	r25
    13fe:	81 95       	neg	r24
    1400:	9f 4f       	sbci	r25, 0xFF	; 255
    1402:	af 4f       	sbci	r26, 0xFF	; 255
    1404:	bf 4f       	sbci	r27, 0xFF	; 255
    1406:	00 68       	ori	r16, 0x80	; 128
    1408:	bc 01       	movw	r22, r24
    140a:	cd 01       	movw	r24, r26
    140c:	a2 01       	movw	r20, r4
    140e:	2a e0       	ldi	r18, 0x0A	; 10
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__ultoa_invert>
    1416:	d8 2e       	mov	r13, r24
    1418:	d4 18       	sub	r13, r4
    141a:	3f c0       	rjmp	.+126    	; 0x149a <vfprintf+0x2ae>
    141c:	85 37       	cpi	r24, 0x75	; 117
    141e:	21 f4       	brne	.+8      	; 0x1428 <vfprintf+0x23c>
    1420:	1f 7e       	andi	r17, 0xEF	; 239
    1422:	2a e0       	ldi	r18, 0x0A	; 10
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	20 c0       	rjmp	.+64     	; 0x1468 <vfprintf+0x27c>
    1428:	19 7f       	andi	r17, 0xF9	; 249
    142a:	8f 36       	cpi	r24, 0x6F	; 111
    142c:	a9 f0       	breq	.+42     	; 0x1458 <vfprintf+0x26c>
    142e:	80 37       	cpi	r24, 0x70	; 112
    1430:	20 f4       	brcc	.+8      	; 0x143a <vfprintf+0x24e>
    1432:	88 35       	cpi	r24, 0x58	; 88
    1434:	09 f0       	breq	.+2      	; 0x1438 <vfprintf+0x24c>
    1436:	ae c0       	rjmp	.+348    	; 0x1594 <vfprintf+0x3a8>
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <vfprintf+0x264>
    143a:	80 37       	cpi	r24, 0x70	; 112
    143c:	21 f0       	breq	.+8      	; 0x1446 <vfprintf+0x25a>
    143e:	88 37       	cpi	r24, 0x78	; 120
    1440:	09 f0       	breq	.+2      	; 0x1444 <vfprintf+0x258>
    1442:	a8 c0       	rjmp	.+336    	; 0x1594 <vfprintf+0x3a8>
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <vfprintf+0x25c>
    1446:	10 61       	ori	r17, 0x10	; 16
    1448:	14 ff       	sbrs	r17, 4
    144a:	09 c0       	rjmp	.+18     	; 0x145e <vfprintf+0x272>
    144c:	14 60       	ori	r17, 0x04	; 4
    144e:	07 c0       	rjmp	.+14     	; 0x145e <vfprintf+0x272>
    1450:	14 ff       	sbrs	r17, 4
    1452:	08 c0       	rjmp	.+16     	; 0x1464 <vfprintf+0x278>
    1454:	16 60       	ori	r17, 0x06	; 6
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <vfprintf+0x278>
    1458:	28 e0       	ldi	r18, 0x08	; 8
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	05 c0       	rjmp	.+10     	; 0x1468 <vfprintf+0x27c>
    145e:	20 e1       	ldi	r18, 0x10	; 16
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <vfprintf+0x27c>
    1464:	20 e1       	ldi	r18, 0x10	; 16
    1466:	32 e0       	ldi	r19, 0x02	; 2
    1468:	f5 01       	movw	r30, r10
    146a:	17 ff       	sbrs	r17, 7
    146c:	07 c0       	rjmp	.+14     	; 0x147c <vfprintf+0x290>
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	44 e0       	ldi	r20, 0x04	; 4
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	06 c0       	rjmp	.+12     	; 0x1488 <vfprintf+0x29c>
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	42 e0       	ldi	r20, 0x02	; 2
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	a4 0e       	add	r10, r20
    148a:	b5 1e       	adc	r11, r21
    148c:	a2 01       	movw	r20, r4
    148e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <__ultoa_invert>
    1492:	d8 2e       	mov	r13, r24
    1494:	d4 18       	sub	r13, r4
    1496:	01 2f       	mov	r16, r17
    1498:	0f 77       	andi	r16, 0x7F	; 127
    149a:	06 ff       	sbrs	r16, 6
    149c:	09 c0       	rjmp	.+18     	; 0x14b0 <vfprintf+0x2c4>
    149e:	0e 7f       	andi	r16, 0xFE	; 254
    14a0:	df 14       	cp	r13, r15
    14a2:	30 f4       	brcc	.+12     	; 0x14b0 <vfprintf+0x2c4>
    14a4:	04 ff       	sbrs	r16, 4
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <vfprintf+0x2c8>
    14a8:	02 fd       	sbrc	r16, 2
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <vfprintf+0x2c8>
    14ac:	0f 7e       	andi	r16, 0xEF	; 239
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <vfprintf+0x2c8>
    14b0:	1d 2d       	mov	r17, r13
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <vfprintf+0x2ca>
    14b4:	1f 2d       	mov	r17, r15
    14b6:	80 2f       	mov	r24, r16
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	04 ff       	sbrs	r16, 4
    14bc:	0c c0       	rjmp	.+24     	; 0x14d6 <vfprintf+0x2ea>
    14be:	fe 01       	movw	r30, r28
    14c0:	ed 0d       	add	r30, r13
    14c2:	f1 1d       	adc	r31, r1
    14c4:	20 81       	ld	r18, Z
    14c6:	20 33       	cpi	r18, 0x30	; 48
    14c8:	11 f4       	brne	.+4      	; 0x14ce <vfprintf+0x2e2>
    14ca:	09 7e       	andi	r16, 0xE9	; 233
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <vfprintf+0x2f4>
    14ce:	02 ff       	sbrs	r16, 2
    14d0:	06 c0       	rjmp	.+12     	; 0x14de <vfprintf+0x2f2>
    14d2:	1e 5f       	subi	r17, 0xFE	; 254
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <vfprintf+0x2f4>
    14d6:	86 78       	andi	r24, 0x86	; 134
    14d8:	90 70       	andi	r25, 0x00	; 0
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <vfprintf+0x2f4>
    14de:	1f 5f       	subi	r17, 0xFF	; 255
    14e0:	80 2e       	mov	r8, r16
    14e2:	99 24       	eor	r9, r9
    14e4:	03 fd       	sbrc	r16, 3
    14e6:	12 c0       	rjmp	.+36     	; 0x150c <vfprintf+0x320>
    14e8:	00 ff       	sbrs	r16, 0
    14ea:	0d c0       	rjmp	.+26     	; 0x1506 <vfprintf+0x31a>
    14ec:	fd 2c       	mov	r15, r13
    14ee:	1e 15       	cp	r17, r14
    14f0:	50 f4       	brcc	.+20     	; 0x1506 <vfprintf+0x31a>
    14f2:	fe 0c       	add	r15, r14
    14f4:	f1 1a       	sub	r15, r17
    14f6:	1e 2d       	mov	r17, r14
    14f8:	06 c0       	rjmp	.+12     	; 0x1506 <vfprintf+0x31a>
    14fa:	80 e2       	ldi	r24, 0x20	; 32
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	b3 01       	movw	r22, r6
    1500:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    1504:	1f 5f       	subi	r17, 0xFF	; 255
    1506:	1e 15       	cp	r17, r14
    1508:	c0 f3       	brcs	.-16     	; 0x14fa <vfprintf+0x30e>
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <vfprintf+0x328>
    150c:	1e 15       	cp	r17, r14
    150e:	10 f4       	brcc	.+4      	; 0x1514 <vfprintf+0x328>
    1510:	e1 1a       	sub	r14, r17
    1512:	01 c0       	rjmp	.+2      	; 0x1516 <vfprintf+0x32a>
    1514:	ee 24       	eor	r14, r14
    1516:	84 fe       	sbrs	r8, 4
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <vfprintf+0x34c>
    151a:	80 e3       	ldi	r24, 0x30	; 48
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	b3 01       	movw	r22, r6
    1520:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    1524:	82 fe       	sbrs	r8, 2
    1526:	1f c0       	rjmp	.+62     	; 0x1566 <vfprintf+0x37a>
    1528:	81 fe       	sbrs	r8, 1
    152a:	03 c0       	rjmp	.+6      	; 0x1532 <vfprintf+0x346>
    152c:	88 e5       	ldi	r24, 0x58	; 88
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	10 c0       	rjmp	.+32     	; 0x1552 <vfprintf+0x366>
    1532:	88 e7       	ldi	r24, 0x78	; 120
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <vfprintf+0x366>
    1538:	c4 01       	movw	r24, r8
    153a:	86 78       	andi	r24, 0x86	; 134
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	91 f0       	breq	.+36     	; 0x1566 <vfprintf+0x37a>
    1542:	81 fc       	sbrc	r8, 1
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x35e>
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	01 c0       	rjmp	.+2      	; 0x154c <vfprintf+0x360>
    154a:	8b e2       	ldi	r24, 0x2B	; 43
    154c:	07 fd       	sbrc	r16, 7
    154e:	8d e2       	ldi	r24, 0x2D	; 45
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	b3 01       	movw	r22, r6
    1554:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    1558:	06 c0       	rjmp	.+12     	; 0x1566 <vfprintf+0x37a>
    155a:	80 e3       	ldi	r24, 0x30	; 48
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	b3 01       	movw	r22, r6
    1560:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    1564:	fa 94       	dec	r15
    1566:	df 14       	cp	r13, r15
    1568:	c0 f3       	brcs	.-16     	; 0x155a <vfprintf+0x36e>
    156a:	da 94       	dec	r13
    156c:	f2 01       	movw	r30, r4
    156e:	ed 0d       	add	r30, r13
    1570:	f1 1d       	adc	r31, r1
    1572:	80 81       	ld	r24, Z
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	b3 01       	movw	r22, r6
    1578:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    157c:	dd 20       	and	r13, r13
    157e:	a9 f7       	brne	.-22     	; 0x156a <vfprintf+0x37e>
    1580:	06 c0       	rjmp	.+12     	; 0x158e <vfprintf+0x3a2>
    1582:	80 e2       	ldi	r24, 0x20	; 32
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	b3 01       	movw	r22, r6
    1588:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <fputc>
    158c:	ea 94       	dec	r14
    158e:	ee 20       	and	r14, r14
    1590:	c1 f7       	brne	.-16     	; 0x1582 <vfprintf+0x396>
    1592:	40 ce       	rjmp	.-896    	; 0x1214 <vfprintf+0x28>
    1594:	f3 01       	movw	r30, r6
    1596:	86 81       	ldd	r24, Z+6	; 0x06
    1598:	97 81       	ldd	r25, Z+7	; 0x07
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x3b4>
    159c:	8f ef       	ldi	r24, 0xFF	; 255
    159e:	9f ef       	ldi	r25, 0xFF	; 255
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	e2 e1       	ldi	r30, 0x12	; 18
    15a4:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__epilogue_restores__>

000015a8 <dtoa_prf>:
    15a8:	a9 e0       	ldi	r26, 0x09	; 9
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea ed       	ldi	r30, 0xDA	; 218
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	0c 94 a8 0d 	jmp	0x1b50	; 0x1b50 <__prologue_saves__+0x8>
    15b4:	6a 01       	movw	r12, r20
    15b6:	12 2f       	mov	r17, r18
    15b8:	f0 2e       	mov	r15, r16
    15ba:	2b e3       	ldi	r18, 0x3B	; 59
    15bc:	20 17       	cp	r18, r16
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <dtoa_prf+0x1e>
    15c0:	b0 2e       	mov	r11, r16
    15c2:	b3 94       	inc	r11
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <dtoa_prf+0x22>
    15c6:	3c e3       	ldi	r19, 0x3C	; 60
    15c8:	b3 2e       	mov	r11, r19
    15ca:	ae 01       	movw	r20, r28
    15cc:	4f 5f       	subi	r20, 0xFF	; 255
    15ce:	5f 4f       	sbci	r21, 0xFF	; 255
    15d0:	27 e0       	ldi	r18, 0x07	; 7
    15d2:	0b 2d       	mov	r16, r11
    15d4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__ftoa_engine>
    15d8:	bc 01       	movw	r22, r24
    15da:	a9 81       	ldd	r26, Y+1	; 0x01
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	cd 01       	movw	r24, r26
    15e0:	89 70       	andi	r24, 0x09	; 9
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <dtoa_prf+0x4e>
    15ea:	e1 fc       	sbrc	r14, 1
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <dtoa_prf+0x52>
    15ee:	e0 fe       	sbrs	r14, 0
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <dtoa_prf+0x56>
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <dtoa_prf+0x58>
    15f6:	4d e2       	ldi	r20, 0x2D	; 45
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <dtoa_prf+0x58>
    15fa:	4b e2       	ldi	r20, 0x2B	; 43
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <dtoa_prf+0x58>
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	a3 ff       	sbrs	r26, 3
    1602:	36 c0       	rjmp	.+108    	; 0x1670 <dtoa_prf+0xc8>
    1604:	44 23       	and	r20, r20
    1606:	11 f0       	breq	.+4      	; 0x160c <dtoa_prf+0x64>
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	01 c0       	rjmp	.+2      	; 0x160e <dtoa_prf+0x66>
    160c:	83 e0       	ldi	r24, 0x03	; 3
    160e:	81 17       	cp	r24, r17
    1610:	10 f4       	brcc	.+4      	; 0x1616 <dtoa_prf+0x6e>
    1612:	18 1b       	sub	r17, r24
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <dtoa_prf+0x70>
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	e4 fc       	sbrc	r14, 4
    161a:	0b c0       	rjmp	.+22     	; 0x1632 <dtoa_prf+0x8a>
    161c:	91 2f       	mov	r25, r17
    161e:	f6 01       	movw	r30, r12
    1620:	80 e2       	ldi	r24, 0x20	; 32
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <dtoa_prf+0x80>
    1624:	81 93       	st	Z+, r24
    1626:	91 50       	subi	r25, 0x01	; 1
    1628:	99 23       	and	r25, r25
    162a:	e1 f7       	brne	.-8      	; 0x1624 <dtoa_prf+0x7c>
    162c:	c1 0e       	add	r12, r17
    162e:	d1 1c       	adc	r13, r1
    1630:	10 e0       	ldi	r17, 0x00	; 0
    1632:	44 23       	and	r20, r20
    1634:	19 f0       	breq	.+6      	; 0x163c <dtoa_prf+0x94>
    1636:	f6 01       	movw	r30, r12
    1638:	41 93       	st	Z+, r20
    163a:	6f 01       	movw	r12, r30
    163c:	e2 fe       	sbrs	r14, 2
    163e:	05 c0       	rjmp	.+10     	; 0x164a <dtoa_prf+0xa2>
    1640:	8e e4       	ldi	r24, 0x4E	; 78
    1642:	f6 01       	movw	r30, r12
    1644:	80 83       	st	Z, r24
    1646:	91 e4       	ldi	r25, 0x41	; 65
    1648:	04 c0       	rjmp	.+8      	; 0x1652 <dtoa_prf+0xaa>
    164a:	8e e6       	ldi	r24, 0x6E	; 110
    164c:	f6 01       	movw	r30, r12
    164e:	80 83       	st	Z, r24
    1650:	91 e6       	ldi	r25, 0x61	; 97
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	82 83       	std	Z+2, r24	; 0x02
    1656:	83 e0       	ldi	r24, 0x03	; 3
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	c8 0e       	add	r12, r24
    165c:	d9 1e       	adc	r13, r25
    165e:	81 2f       	mov	r24, r17
    1660:	f6 01       	movw	r30, r12
    1662:	90 e2       	ldi	r25, 0x20	; 32
    1664:	02 c0       	rjmp	.+4      	; 0x166a <dtoa_prf+0xc2>
    1666:	91 93       	st	Z+, r25
    1668:	81 50       	subi	r24, 0x01	; 1
    166a:	88 23       	and	r24, r24
    166c:	e1 f7       	brne	.-8      	; 0x1666 <dtoa_prf+0xbe>
    166e:	3a c0       	rjmp	.+116    	; 0x16e4 <dtoa_prf+0x13c>
    1670:	a2 ff       	sbrs	r26, 2
    1672:	3f c0       	rjmp	.+126    	; 0x16f2 <dtoa_prf+0x14a>
    1674:	44 23       	and	r20, r20
    1676:	11 f0       	breq	.+4      	; 0x167c <dtoa_prf+0xd4>
    1678:	84 e0       	ldi	r24, 0x04	; 4
    167a:	01 c0       	rjmp	.+2      	; 0x167e <dtoa_prf+0xd6>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	81 17       	cp	r24, r17
    1680:	10 f4       	brcc	.+4      	; 0x1686 <dtoa_prf+0xde>
    1682:	18 1b       	sub	r17, r24
    1684:	01 c0       	rjmp	.+2      	; 0x1688 <dtoa_prf+0xe0>
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	e4 fc       	sbrc	r14, 4
    168a:	0b c0       	rjmp	.+22     	; 0x16a2 <dtoa_prf+0xfa>
    168c:	91 2f       	mov	r25, r17
    168e:	f6 01       	movw	r30, r12
    1690:	80 e2       	ldi	r24, 0x20	; 32
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <dtoa_prf+0xf0>
    1694:	81 93       	st	Z+, r24
    1696:	91 50       	subi	r25, 0x01	; 1
    1698:	99 23       	and	r25, r25
    169a:	e1 f7       	brne	.-8      	; 0x1694 <dtoa_prf+0xec>
    169c:	c1 0e       	add	r12, r17
    169e:	d1 1c       	adc	r13, r1
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	44 23       	and	r20, r20
    16a4:	19 f0       	breq	.+6      	; 0x16ac <dtoa_prf+0x104>
    16a6:	f6 01       	movw	r30, r12
    16a8:	41 93       	st	Z+, r20
    16aa:	6f 01       	movw	r12, r30
    16ac:	e2 fe       	sbrs	r14, 2
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <dtoa_prf+0x116>
    16b0:	89 e4       	ldi	r24, 0x49	; 73
    16b2:	f6 01       	movw	r30, r12
    16b4:	80 83       	st	Z, r24
    16b6:	8e e4       	ldi	r24, 0x4E	; 78
    16b8:	81 83       	std	Z+1, r24	; 0x01
    16ba:	86 e4       	ldi	r24, 0x46	; 70
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <dtoa_prf+0x122>
    16be:	89 e6       	ldi	r24, 0x69	; 105
    16c0:	f6 01       	movw	r30, r12
    16c2:	80 83       	st	Z, r24
    16c4:	8e e6       	ldi	r24, 0x6E	; 110
    16c6:	81 83       	std	Z+1, r24	; 0x01
    16c8:	86 e6       	ldi	r24, 0x66	; 102
    16ca:	82 83       	std	Z+2, r24	; 0x02
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	c8 0e       	add	r12, r24
    16d2:	d9 1e       	adc	r13, r25
    16d4:	81 2f       	mov	r24, r17
    16d6:	f6 01       	movw	r30, r12
    16d8:	90 e2       	ldi	r25, 0x20	; 32
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <dtoa_prf+0x138>
    16dc:	91 93       	st	Z+, r25
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	88 23       	and	r24, r24
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <dtoa_prf+0x134>
    16e4:	c1 0e       	add	r12, r17
    16e6:	d1 1c       	adc	r13, r1
    16e8:	f6 01       	movw	r30, r12
    16ea:	10 82       	st	Z, r1
    16ec:	8e ef       	ldi	r24, 0xFE	; 254
    16ee:	9f ef       	ldi	r25, 0xFF	; 255
    16f0:	af c0       	rjmp	.+350    	; 0x1850 <dtoa_prf+0x2a8>
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	44 23       	and	r20, r20
    16f8:	11 f4       	brne	.+4      	; 0x16fe <dtoa_prf+0x156>
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	16 16       	cp	r1, r22
    1700:	17 06       	cpc	r1, r23
    1702:	1c f4       	brge	.+6      	; 0x170a <dtoa_prf+0x162>
    1704:	cb 01       	movw	r24, r22
    1706:	01 96       	adiw	r24, 0x01	; 1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <dtoa_prf+0x166>
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	28 0f       	add	r18, r24
    1710:	39 1f       	adc	r19, r25
    1712:	ff 20       	and	r15, r15
    1714:	21 f0       	breq	.+8      	; 0x171e <dtoa_prf+0x176>
    1716:	8f 2d       	mov	r24, r15
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	01 96       	adiw	r24, 0x01	; 1
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <dtoa_prf+0x17a>
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	82 0f       	add	r24, r18
    1724:	93 1f       	adc	r25, r19
    1726:	21 2f       	mov	r18, r17
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	82 17       	cp	r24, r18
    172c:	93 07       	cpc	r25, r19
    172e:	1c f4       	brge	.+6      	; 0x1736 <dtoa_prf+0x18e>
    1730:	51 2f       	mov	r21, r17
    1732:	58 1b       	sub	r21, r24
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <dtoa_prf+0x190>
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	8e 2d       	mov	r24, r14
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	9c 01       	movw	r18, r24
    173e:	20 71       	andi	r18, 0x10	; 16
    1740:	30 70       	andi	r19, 0x00	; 0
    1742:	e4 fc       	sbrc	r14, 4
    1744:	0d c0       	rjmp	.+26     	; 0x1760 <dtoa_prf+0x1b8>
    1746:	e3 fc       	sbrc	r14, 3
    1748:	0b c0       	rjmp	.+22     	; 0x1760 <dtoa_prf+0x1b8>
    174a:	85 2f       	mov	r24, r21
    174c:	f6 01       	movw	r30, r12
    174e:	90 e2       	ldi	r25, 0x20	; 32
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <dtoa_prf+0x1ae>
    1752:	91 93       	st	Z+, r25
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	88 23       	and	r24, r24
    1758:	e1 f7       	brne	.-8      	; 0x1752 <dtoa_prf+0x1aa>
    175a:	c5 0e       	add	r12, r21
    175c:	d1 1c       	adc	r13, r1
    175e:	50 e0       	ldi	r21, 0x00	; 0
    1760:	44 23       	and	r20, r20
    1762:	19 f0       	breq	.+6      	; 0x176a <dtoa_prf+0x1c2>
    1764:	f6 01       	movw	r30, r12
    1766:	41 93       	st	Z+, r20
    1768:	6f 01       	movw	r12, r30
    176a:	21 15       	cp	r18, r1
    176c:	31 05       	cpc	r19, r1
    176e:	59 f4       	brne	.+22     	; 0x1786 <dtoa_prf+0x1de>
    1770:	85 2f       	mov	r24, r21
    1772:	f6 01       	movw	r30, r12
    1774:	90 e3       	ldi	r25, 0x30	; 48
    1776:	02 c0       	rjmp	.+4      	; 0x177c <dtoa_prf+0x1d4>
    1778:	91 93       	st	Z+, r25
    177a:	81 50       	subi	r24, 0x01	; 1
    177c:	88 23       	and	r24, r24
    177e:	e1 f7       	brne	.-8      	; 0x1778 <dtoa_prf+0x1d0>
    1780:	c5 0e       	add	r12, r21
    1782:	d1 1c       	adc	r13, r1
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	b6 0e       	add	r11, r22
    1788:	4a 81       	ldd	r20, Y+2	; 0x02
    178a:	20 e1       	ldi	r18, 0x10	; 16
    178c:	62 2e       	mov	r6, r18
    178e:	71 2c       	mov	r7, r1
    1790:	6a 22       	and	r6, r26
    1792:	7b 22       	and	r7, r27
    1794:	a4 ff       	sbrs	r26, 4
    1796:	03 c0       	rjmp	.+6      	; 0x179e <dtoa_prf+0x1f6>
    1798:	41 33       	cpi	r20, 0x31	; 49
    179a:	09 f4       	brne	.+2      	; 0x179e <dtoa_prf+0x1f6>
    179c:	ba 94       	dec	r11
    179e:	1b 14       	cp	r1, r11
    17a0:	2c f4       	brge	.+10     	; 0x17ac <dtoa_prf+0x204>
    17a2:	8b 2d       	mov	r24, r11
    17a4:	89 30       	cpi	r24, 0x09	; 9
    17a6:	18 f0       	brcs	.+6      	; 0x17ae <dtoa_prf+0x206>
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <dtoa_prf+0x206>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	9b 01       	movw	r18, r22
    17b0:	77 ff       	sbrs	r23, 7
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <dtoa_prf+0x210>
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	a0 e0       	ldi	r26, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	9e e2       	ldi	r25, 0x2E	; 46
    17be:	e9 2e       	mov	r14, r25
    17c0:	4b 01       	movw	r8, r22
    17c2:	88 1a       	sub	r8, r24
    17c4:	91 08       	sbc	r9, r1
    17c6:	cb 01       	movw	r24, r22
    17c8:	82 1b       	sub	r24, r18
    17ca:	93 0b       	sbc	r25, r19
    17cc:	8e 01       	movw	r16, r28
    17ce:	0f 5f       	subi	r16, 0xFF	; 255
    17d0:	1f 4f       	sbci	r17, 0xFF	; 255
    17d2:	08 0f       	add	r16, r24
    17d4:	19 1f       	adc	r17, r25
    17d6:	8f 2d       	mov	r24, r15
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	aa 24       	eor	r10, r10
    17dc:	bb 24       	eor	r11, r11
    17de:	a8 1a       	sub	r10, r24
    17e0:	b9 0a       	sbc	r11, r25
    17e2:	ff ef       	ldi	r31, 0xFF	; 255
    17e4:	2f 3f       	cpi	r18, 0xFF	; 255
    17e6:	3f 07       	cpc	r19, r31
    17e8:	19 f4       	brne	.+6      	; 0x17f0 <dtoa_prf+0x248>
    17ea:	f6 01       	movw	r30, r12
    17ec:	e1 92       	st	Z+, r14
    17ee:	6f 01       	movw	r12, r30
    17f0:	62 17       	cp	r22, r18
    17f2:	73 07       	cpc	r23, r19
    17f4:	44 f0       	brlt	.+16     	; 0x1806 <dtoa_prf+0x25e>
    17f6:	82 16       	cp	r8, r18
    17f8:	93 06       	cpc	r9, r19
    17fa:	2c f4       	brge	.+10     	; 0x1806 <dtoa_prf+0x25e>
    17fc:	f8 01       	movw	r30, r16
    17fe:	ea 0f       	add	r30, r26
    1800:	fb 1f       	adc	r31, r27
    1802:	81 81       	ldd	r24, Z+1	; 0x01
    1804:	01 c0       	rjmp	.+2      	; 0x1808 <dtoa_prf+0x260>
    1806:	80 e3       	ldi	r24, 0x30	; 48
    1808:	21 50       	subi	r18, 0x01	; 1
    180a:	30 40       	sbci	r19, 0x00	; 0
    180c:	11 96       	adiw	r26, 0x01	; 1
    180e:	2a 15       	cp	r18, r10
    1810:	3b 05       	cpc	r19, r11
    1812:	24 f0       	brlt	.+8      	; 0x181c <dtoa_prf+0x274>
    1814:	f6 01       	movw	r30, r12
    1816:	81 93       	st	Z+, r24
    1818:	6f 01       	movw	r12, r30
    181a:	e3 cf       	rjmp	.-58     	; 0x17e2 <dtoa_prf+0x23a>
    181c:	26 17       	cp	r18, r22
    181e:	37 07       	cpc	r19, r23
    1820:	41 f4       	brne	.+16     	; 0x1832 <dtoa_prf+0x28a>
    1822:	46 33       	cpi	r20, 0x36	; 54
    1824:	28 f4       	brcc	.+10     	; 0x1830 <dtoa_prf+0x288>
    1826:	45 33       	cpi	r20, 0x35	; 53
    1828:	21 f4       	brne	.+8      	; 0x1832 <dtoa_prf+0x28a>
    182a:	61 14       	cp	r6, r1
    182c:	71 04       	cpc	r7, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <dtoa_prf+0x28a>
    1830:	81 e3       	ldi	r24, 0x31	; 49
    1832:	f6 01       	movw	r30, r12
    1834:	81 93       	st	Z+, r24
    1836:	85 2f       	mov	r24, r21
    1838:	df 01       	movw	r26, r30
    183a:	90 e2       	ldi	r25, 0x20	; 32
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <dtoa_prf+0x29a>
    183e:	9d 93       	st	X+, r25
    1840:	81 50       	subi	r24, 0x01	; 1
    1842:	88 23       	and	r24, r24
    1844:	e1 f7       	brne	.-8      	; 0x183e <dtoa_prf+0x296>
    1846:	e5 0f       	add	r30, r21
    1848:	f1 1d       	adc	r31, r1
    184a:	10 82       	st	Z, r1
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	29 96       	adiw	r28, 0x09	; 9
    1852:	ee e0       	ldi	r30, 0x0E	; 14
    1854:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <__epilogue_restores__+0x8>

00001858 <__ftoa_engine>:
    1858:	28 30       	cpi	r18, 0x08	; 8
    185a:	08 f0       	brcs	.+2      	; 0x185e <__ftoa_engine+0x6>
    185c:	27 e0       	ldi	r18, 0x07	; 7
    185e:	33 27       	eor	r19, r19
    1860:	da 01       	movw	r26, r20
    1862:	99 0f       	add	r25, r25
    1864:	31 1d       	adc	r19, r1
    1866:	87 fd       	sbrc	r24, 7
    1868:	91 60       	ori	r25, 0x01	; 1
    186a:	00 96       	adiw	r24, 0x00	; 0
    186c:	61 05       	cpc	r22, r1
    186e:	71 05       	cpc	r23, r1
    1870:	39 f4       	brne	.+14     	; 0x1880 <__ftoa_engine+0x28>
    1872:	32 60       	ori	r19, 0x02	; 2
    1874:	2e 5f       	subi	r18, 0xFE	; 254
    1876:	3d 93       	st	X+, r19
    1878:	30 e3       	ldi	r19, 0x30	; 48
    187a:	2a 95       	dec	r18
    187c:	e1 f7       	brne	.-8      	; 0x1876 <__ftoa_engine+0x1e>
    187e:	08 95       	ret
    1880:	9f 3f       	cpi	r25, 0xFF	; 255
    1882:	30 f0       	brcs	.+12     	; 0x1890 <__ftoa_engine+0x38>
    1884:	80 38       	cpi	r24, 0x80	; 128
    1886:	71 05       	cpc	r23, r1
    1888:	61 05       	cpc	r22, r1
    188a:	09 f0       	breq	.+2      	; 0x188e <__ftoa_engine+0x36>
    188c:	3c 5f       	subi	r19, 0xFC	; 252
    188e:	3c 5f       	subi	r19, 0xFC	; 252
    1890:	3d 93       	st	X+, r19
    1892:	91 30       	cpi	r25, 0x01	; 1
    1894:	08 f0       	brcs	.+2      	; 0x1898 <__ftoa_engine+0x40>
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	91 1d       	adc	r25, r1
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	1f 93       	push	r17
    18a0:	0f 93       	push	r16
    18a2:	ff 92       	push	r15
    18a4:	ef 92       	push	r14
    18a6:	19 2f       	mov	r17, r25
    18a8:	98 7f       	andi	r25, 0xF8	; 248
    18aa:	96 95       	lsr	r25
    18ac:	e9 2f       	mov	r30, r25
    18ae:	96 95       	lsr	r25
    18b0:	96 95       	lsr	r25
    18b2:	e9 0f       	add	r30, r25
    18b4:	ff 27       	eor	r31, r31
    18b6:	ea 52       	subi	r30, 0x2A	; 42
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	99 27       	eor	r25, r25
    18bc:	33 27       	eor	r19, r19
    18be:	ee 24       	eor	r14, r14
    18c0:	ff 24       	eor	r15, r15
    18c2:	a7 01       	movw	r20, r14
    18c4:	e7 01       	movw	r28, r14
    18c6:	05 90       	lpm	r0, Z+
    18c8:	08 94       	sec
    18ca:	07 94       	ror	r0
    18cc:	28 f4       	brcc	.+10     	; 0x18d8 <__ftoa_engine+0x80>
    18ce:	36 0f       	add	r19, r22
    18d0:	e7 1e       	adc	r14, r23
    18d2:	f8 1e       	adc	r15, r24
    18d4:	49 1f       	adc	r20, r25
    18d6:	51 1d       	adc	r21, r1
    18d8:	66 0f       	add	r22, r22
    18da:	77 1f       	adc	r23, r23
    18dc:	88 1f       	adc	r24, r24
    18de:	99 1f       	adc	r25, r25
    18e0:	06 94       	lsr	r0
    18e2:	a1 f7       	brne	.-24     	; 0x18cc <__ftoa_engine+0x74>
    18e4:	05 90       	lpm	r0, Z+
    18e6:	07 94       	ror	r0
    18e8:	28 f4       	brcc	.+10     	; 0x18f4 <__ftoa_engine+0x9c>
    18ea:	e7 0e       	add	r14, r23
    18ec:	f8 1e       	adc	r15, r24
    18ee:	49 1f       	adc	r20, r25
    18f0:	56 1f       	adc	r21, r22
    18f2:	c1 1d       	adc	r28, r1
    18f4:	77 0f       	add	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	66 1f       	adc	r22, r22
    18fc:	06 94       	lsr	r0
    18fe:	a1 f7       	brne	.-24     	; 0x18e8 <__ftoa_engine+0x90>
    1900:	05 90       	lpm	r0, Z+
    1902:	07 94       	ror	r0
    1904:	28 f4       	brcc	.+10     	; 0x1910 <__ftoa_engine+0xb8>
    1906:	f8 0e       	add	r15, r24
    1908:	49 1f       	adc	r20, r25
    190a:	56 1f       	adc	r21, r22
    190c:	c7 1f       	adc	r28, r23
    190e:	d1 1d       	adc	r29, r1
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	66 1f       	adc	r22, r22
    1916:	77 1f       	adc	r23, r23
    1918:	06 94       	lsr	r0
    191a:	a1 f7       	brne	.-24     	; 0x1904 <__ftoa_engine+0xac>
    191c:	05 90       	lpm	r0, Z+
    191e:	07 94       	ror	r0
    1920:	20 f4       	brcc	.+8      	; 0x192a <__ftoa_engine+0xd2>
    1922:	49 0f       	add	r20, r25
    1924:	56 1f       	adc	r21, r22
    1926:	c7 1f       	adc	r28, r23
    1928:	d8 1f       	adc	r29, r24
    192a:	99 0f       	add	r25, r25
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	06 94       	lsr	r0
    1934:	a9 f7       	brne	.-22     	; 0x1920 <__ftoa_engine+0xc8>
    1936:	84 91       	lpm	r24, Z
    1938:	10 95       	com	r17
    193a:	17 70       	andi	r17, 0x07	; 7
    193c:	41 f0       	breq	.+16     	; 0x194e <__ftoa_engine+0xf6>
    193e:	d6 95       	lsr	r29
    1940:	c7 95       	ror	r28
    1942:	57 95       	ror	r21
    1944:	47 95       	ror	r20
    1946:	f7 94       	ror	r15
    1948:	e7 94       	ror	r14
    194a:	1a 95       	dec	r17
    194c:	c1 f7       	brne	.-16     	; 0x193e <__ftoa_engine+0xe6>
    194e:	ec e7       	ldi	r30, 0x7C	; 124
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	68 94       	set
    1954:	15 90       	lpm	r1, Z+
    1956:	15 91       	lpm	r17, Z+
    1958:	35 91       	lpm	r19, Z+
    195a:	65 91       	lpm	r22, Z+
    195c:	95 91       	lpm	r25, Z+
    195e:	05 90       	lpm	r0, Z+
    1960:	7f e2       	ldi	r23, 0x2F	; 47
    1962:	73 95       	inc	r23
    1964:	e1 18       	sub	r14, r1
    1966:	f1 0a       	sbc	r15, r17
    1968:	43 0b       	sbc	r20, r19
    196a:	56 0b       	sbc	r21, r22
    196c:	c9 0b       	sbc	r28, r25
    196e:	d0 09       	sbc	r29, r0
    1970:	c0 f7       	brcc	.-16     	; 0x1962 <__ftoa_engine+0x10a>
    1972:	e1 0c       	add	r14, r1
    1974:	f1 1e       	adc	r15, r17
    1976:	43 1f       	adc	r20, r19
    1978:	56 1f       	adc	r21, r22
    197a:	c9 1f       	adc	r28, r25
    197c:	d0 1d       	adc	r29, r0
    197e:	7e f4       	brtc	.+30     	; 0x199e <__ftoa_engine+0x146>
    1980:	70 33       	cpi	r23, 0x30	; 48
    1982:	11 f4       	brne	.+4      	; 0x1988 <__ftoa_engine+0x130>
    1984:	8a 95       	dec	r24
    1986:	e6 cf       	rjmp	.-52     	; 0x1954 <__ftoa_engine+0xfc>
    1988:	e8 94       	clt
    198a:	01 50       	subi	r16, 0x01	; 1
    198c:	30 f0       	brcs	.+12     	; 0x199a <__ftoa_engine+0x142>
    198e:	08 0f       	add	r16, r24
    1990:	0a f4       	brpl	.+2      	; 0x1994 <__ftoa_engine+0x13c>
    1992:	00 27       	eor	r16, r16
    1994:	02 17       	cp	r16, r18
    1996:	08 f4       	brcc	.+2      	; 0x199a <__ftoa_engine+0x142>
    1998:	20 2f       	mov	r18, r16
    199a:	23 95       	inc	r18
    199c:	02 2f       	mov	r16, r18
    199e:	7a 33       	cpi	r23, 0x3A	; 58
    19a0:	28 f0       	brcs	.+10     	; 0x19ac <__ftoa_engine+0x154>
    19a2:	79 e3       	ldi	r23, 0x39	; 57
    19a4:	7d 93       	st	X+, r23
    19a6:	2a 95       	dec	r18
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <__ftoa_engine+0x14c>
    19aa:	10 c0       	rjmp	.+32     	; 0x19cc <__ftoa_engine+0x174>
    19ac:	7d 93       	st	X+, r23
    19ae:	2a 95       	dec	r18
    19b0:	89 f6       	brne	.-94     	; 0x1954 <__ftoa_engine+0xfc>
    19b2:	06 94       	lsr	r0
    19b4:	97 95       	ror	r25
    19b6:	67 95       	ror	r22
    19b8:	37 95       	ror	r19
    19ba:	17 95       	ror	r17
    19bc:	17 94       	ror	r1
    19be:	e1 18       	sub	r14, r1
    19c0:	f1 0a       	sbc	r15, r17
    19c2:	43 0b       	sbc	r20, r19
    19c4:	56 0b       	sbc	r21, r22
    19c6:	c9 0b       	sbc	r28, r25
    19c8:	d0 09       	sbc	r29, r0
    19ca:	98 f0       	brcs	.+38     	; 0x19f2 <__ftoa_engine+0x19a>
    19cc:	23 95       	inc	r18
    19ce:	7e 91       	ld	r23, -X
    19d0:	73 95       	inc	r23
    19d2:	7a 33       	cpi	r23, 0x3A	; 58
    19d4:	08 f0       	brcs	.+2      	; 0x19d8 <__ftoa_engine+0x180>
    19d6:	70 e3       	ldi	r23, 0x30	; 48
    19d8:	7c 93       	st	X, r23
    19da:	20 13       	cpse	r18, r16
    19dc:	b8 f7       	brcc	.-18     	; 0x19cc <__ftoa_engine+0x174>
    19de:	7e 91       	ld	r23, -X
    19e0:	70 61       	ori	r23, 0x10	; 16
    19e2:	7d 93       	st	X+, r23
    19e4:	30 f0       	brcs	.+12     	; 0x19f2 <__ftoa_engine+0x19a>
    19e6:	83 95       	inc	r24
    19e8:	71 e3       	ldi	r23, 0x31	; 49
    19ea:	7d 93       	st	X+, r23
    19ec:	70 e3       	ldi	r23, 0x30	; 48
    19ee:	2a 95       	dec	r18
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <__ftoa_engine+0x192>
    19f2:	11 24       	eor	r1, r1
    19f4:	ef 90       	pop	r14
    19f6:	ff 90       	pop	r15
    19f8:	0f 91       	pop	r16
    19fa:	1f 91       	pop	r17
    19fc:	cf 91       	pop	r28
    19fe:	df 91       	pop	r29
    1a00:	99 27       	eor	r25, r25
    1a02:	87 fd       	sbrc	r24, 7
    1a04:	90 95       	com	r25
    1a06:	08 95       	ret

00001a08 <strnlen_P>:
    1a08:	fc 01       	movw	r30, r24
    1a0a:	05 90       	lpm	r0, Z+
    1a0c:	61 50       	subi	r22, 0x01	; 1
    1a0e:	70 40       	sbci	r23, 0x00	; 0
    1a10:	01 10       	cpse	r0, r1
    1a12:	d8 f7       	brcc	.-10     	; 0x1a0a <strnlen_P+0x2>
    1a14:	80 95       	com	r24
    1a16:	90 95       	com	r25
    1a18:	8e 0f       	add	r24, r30
    1a1a:	9f 1f       	adc	r25, r31
    1a1c:	08 95       	ret

00001a1e <strnlen>:
    1a1e:	fc 01       	movw	r30, r24
    1a20:	61 50       	subi	r22, 0x01	; 1
    1a22:	70 40       	sbci	r23, 0x00	; 0
    1a24:	01 90       	ld	r0, Z+
    1a26:	01 10       	cpse	r0, r1
    1a28:	d8 f7       	brcc	.-10     	; 0x1a20 <strnlen+0x2>
    1a2a:	80 95       	com	r24
    1a2c:	90 95       	com	r25
    1a2e:	8e 0f       	add	r24, r30
    1a30:	9f 1f       	adc	r25, r31
    1a32:	08 95       	ret

00001a34 <fputc>:
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	8c 01       	movw	r16, r24
    1a3e:	eb 01       	movw	r28, r22
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	81 ff       	sbrs	r24, 1
    1a44:	1b c0       	rjmp	.+54     	; 0x1a7c <fputc+0x48>
    1a46:	82 ff       	sbrs	r24, 2
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <fputc+0x30>
    1a4a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	28 17       	cp	r18, r24
    1a54:	39 07       	cpc	r19, r25
    1a56:	64 f4       	brge	.+24     	; 0x1a70 <fputc+0x3c>
    1a58:	e8 81       	ld	r30, Y
    1a5a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5c:	01 93       	st	Z+, r16
    1a5e:	f9 83       	std	Y+1, r31	; 0x01
    1a60:	e8 83       	st	Y, r30
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <fputc+0x3c>
    1a64:	e8 85       	ldd	r30, Y+8	; 0x08
    1a66:	f9 85       	ldd	r31, Y+9	; 0x09
    1a68:	80 2f       	mov	r24, r16
    1a6a:	09 95       	icall
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <fputc+0x48>
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	9f 83       	std	Y+7, r25	; 0x07
    1a78:	8e 83       	std	Y+6, r24	; 0x06
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <fputc+0x4c>
    1a7c:	0f ef       	ldi	r16, 0xFF	; 255
    1a7e:	1f ef       	ldi	r17, 0xFF	; 255
    1a80:	c8 01       	movw	r24, r16
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	08 95       	ret

00001a8c <__ultoa_invert>:
    1a8c:	fa 01       	movw	r30, r20
    1a8e:	aa 27       	eor	r26, r26
    1a90:	28 30       	cpi	r18, 0x08	; 8
    1a92:	51 f1       	breq	.+84     	; 0x1ae8 <__ultoa_invert+0x5c>
    1a94:	20 31       	cpi	r18, 0x10	; 16
    1a96:	81 f1       	breq	.+96     	; 0x1af8 <__ultoa_invert+0x6c>
    1a98:	e8 94       	clt
    1a9a:	6f 93       	push	r22
    1a9c:	6e 7f       	andi	r22, 0xFE	; 254
    1a9e:	6e 5f       	subi	r22, 0xFE	; 254
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa6:	af 4f       	sbci	r26, 0xFF	; 255
    1aa8:	b1 e0       	ldi	r27, 0x01	; 1
    1aaa:	3e d0       	rcall	.+124    	; 0x1b28 <__ultoa_invert+0x9c>
    1aac:	b4 e0       	ldi	r27, 0x04	; 4
    1aae:	3c d0       	rcall	.+120    	; 0x1b28 <__ultoa_invert+0x9c>
    1ab0:	67 0f       	add	r22, r23
    1ab2:	78 1f       	adc	r23, r24
    1ab4:	89 1f       	adc	r24, r25
    1ab6:	9a 1f       	adc	r25, r26
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	68 0f       	add	r22, r24
    1abc:	79 1f       	adc	r23, r25
    1abe:	8a 1f       	adc	r24, r26
    1ac0:	91 1d       	adc	r25, r1
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	6a 0f       	add	r22, r26
    1ac6:	71 1d       	adc	r23, r1
    1ac8:	81 1d       	adc	r24, r1
    1aca:	91 1d       	adc	r25, r1
    1acc:	a1 1d       	adc	r26, r1
    1ace:	20 d0       	rcall	.+64     	; 0x1b10 <__ultoa_invert+0x84>
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <__ultoa_invert+0x48>
    1ad2:	68 94       	set
    1ad4:	3f 91       	pop	r19
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	26 9f       	mul	r18, r22
    1ada:	11 24       	eor	r1, r1
    1adc:	30 19       	sub	r19, r0
    1ade:	30 5d       	subi	r19, 0xD0	; 208
    1ae0:	31 93       	st	Z+, r19
    1ae2:	de f6       	brtc	.-74     	; 0x1a9a <__ultoa_invert+0xe>
    1ae4:	cf 01       	movw	r24, r30
    1ae6:	08 95       	ret
    1ae8:	46 2f       	mov	r20, r22
    1aea:	47 70       	andi	r20, 0x07	; 7
    1aec:	40 5d       	subi	r20, 0xD0	; 208
    1aee:	41 93       	st	Z+, r20
    1af0:	b3 e0       	ldi	r27, 0x03	; 3
    1af2:	0f d0       	rcall	.+30     	; 0x1b12 <__ultoa_invert+0x86>
    1af4:	c9 f7       	brne	.-14     	; 0x1ae8 <__ultoa_invert+0x5c>
    1af6:	f6 cf       	rjmp	.-20     	; 0x1ae4 <__ultoa_invert+0x58>
    1af8:	46 2f       	mov	r20, r22
    1afa:	4f 70       	andi	r20, 0x0F	; 15
    1afc:	40 5d       	subi	r20, 0xD0	; 208
    1afe:	4a 33       	cpi	r20, 0x3A	; 58
    1b00:	18 f0       	brcs	.+6      	; 0x1b08 <__ultoa_invert+0x7c>
    1b02:	49 5d       	subi	r20, 0xD9	; 217
    1b04:	31 fd       	sbrc	r19, 1
    1b06:	40 52       	subi	r20, 0x20	; 32
    1b08:	41 93       	st	Z+, r20
    1b0a:	02 d0       	rcall	.+4      	; 0x1b10 <__ultoa_invert+0x84>
    1b0c:	a9 f7       	brne	.-22     	; 0x1af8 <__ultoa_invert+0x6c>
    1b0e:	ea cf       	rjmp	.-44     	; 0x1ae4 <__ultoa_invert+0x58>
    1b10:	b4 e0       	ldi	r27, 0x04	; 4
    1b12:	a6 95       	lsr	r26
    1b14:	97 95       	ror	r25
    1b16:	87 95       	ror	r24
    1b18:	77 95       	ror	r23
    1b1a:	67 95       	ror	r22
    1b1c:	ba 95       	dec	r27
    1b1e:	c9 f7       	brne	.-14     	; 0x1b12 <__ultoa_invert+0x86>
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	61 05       	cpc	r22, r1
    1b24:	71 05       	cpc	r23, r1
    1b26:	08 95       	ret
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	0a 2e       	mov	r0, r26
    1b2e:	06 94       	lsr	r0
    1b30:	57 95       	ror	r21
    1b32:	47 95       	ror	r20
    1b34:	37 95       	ror	r19
    1b36:	27 95       	ror	r18
    1b38:	ba 95       	dec	r27
    1b3a:	c9 f7       	brne	.-14     	; 0x1b2e <__ultoa_invert+0xa2>
    1b3c:	62 0f       	add	r22, r18
    1b3e:	73 1f       	adc	r23, r19
    1b40:	84 1f       	adc	r24, r20
    1b42:	95 1f       	adc	r25, r21
    1b44:	a0 1d       	adc	r26, r0
    1b46:	08 95       	ret

00001b48 <__prologue_saves__>:
    1b48:	2f 92       	push	r2
    1b4a:	3f 92       	push	r3
    1b4c:	4f 92       	push	r4
    1b4e:	5f 92       	push	r5
    1b50:	6f 92       	push	r6
    1b52:	7f 92       	push	r7
    1b54:	8f 92       	push	r8
    1b56:	9f 92       	push	r9
    1b58:	af 92       	push	r10
    1b5a:	bf 92       	push	r11
    1b5c:	cf 92       	push	r12
    1b5e:	df 92       	push	r13
    1b60:	ef 92       	push	r14
    1b62:	ff 92       	push	r15
    1b64:	0f 93       	push	r16
    1b66:	1f 93       	push	r17
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	ca 1b       	sub	r28, r26
    1b72:	db 0b       	sbc	r29, r27
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	de bf       	out	0x3e, r29	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	cd bf       	out	0x3d, r28	; 61
    1b7e:	09 94       	ijmp

00001b80 <__epilogue_restores__>:
    1b80:	2a 88       	ldd	r2, Y+18	; 0x12
    1b82:	39 88       	ldd	r3, Y+17	; 0x11
    1b84:	48 88       	ldd	r4, Y+16	; 0x10
    1b86:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b88:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b90:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b92:	b9 84       	ldd	r11, Y+9	; 0x09
    1b94:	c8 84       	ldd	r12, Y+8	; 0x08
    1b96:	df 80       	ldd	r13, Y+7	; 0x07
    1b98:	ee 80       	ldd	r14, Y+6	; 0x06
    1b9a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b9c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9e:	1b 81       	ldd	r17, Y+3	; 0x03
    1ba0:	aa 81       	ldd	r26, Y+2	; 0x02
    1ba2:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba4:	ce 0f       	add	r28, r30
    1ba6:	d1 1d       	adc	r29, r1
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	ed 01       	movw	r28, r26
    1bb4:	08 95       	ret

00001bb6 <_exit>:
    1bb6:	f8 94       	cli

00001bb8 <__stop_program>:
    1bb8:	ff cf       	rjmp	.-2      	; 0x1bb8 <__stop_program>

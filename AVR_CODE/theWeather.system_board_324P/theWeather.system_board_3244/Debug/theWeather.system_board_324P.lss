
theWeather.system_board_324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001fd8  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800152  00800152  000020be  2**0
                  ALLOC
  3 .stab         0000300c  00000000  00000000  000020c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000083e  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005910  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001072  00000000  00000000  00005a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000578  00000000  00000000  00006ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c1a  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00007c54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d2  00000000  00000000  00007fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f71  00000000  00000000  0000848e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000093ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_3>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_11>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <AppInit+0x8e>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <main+0x16c>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <ReceivePi+0x1ba>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <PutUart0Ch+0x2e>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e8 ed       	ldi	r30, 0xD8	; 216
     18a:	ff e1       	ldi	r31, 0x1F	; 31
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a2 35       	cpi	r26, 0x52	; 82
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	11 e0       	ldi	r17, 0x01	; 1
     19a:	a2 e5       	ldi	r26, 0x52	; 82
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	ad 35       	cpi	r26, 0x5D	; 93
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 ab 02 	call	0x556	; 0x556 <main>
     1ac:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <PutUart0Ch>:
void PutUart0Ch(char ch);
void Print0(char string[]);

/**********************************************************************************************************************************/
void PutUart0Ch(char ch)
{
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	0f 92       	push	r0
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
     1c0:	00 00       	nop
     1c2:	80 ec       	ldi	r24, 0xC0	; 192
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	fc 01       	movw	r30, r24
     1c8:	80 81       	ld	r24, Z
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	80 72       	andi	r24, 0x20	; 32
     1d0:	90 70       	andi	r25, 0x00	; 0
     1d2:	00 97       	sbiw	r24, 0x00	; 0
     1d4:	b1 f3       	breq	.-20     	; 0x1c2 <PutUart0Ch+0xe>
	UDR0 = ch;
     1d6:	86 ec       	ldi	r24, 0xC6	; 198
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	29 81       	ldd	r18, Y+1	; 0x01
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
}
     1e0:	0f 90       	pop	r0
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <Print0>:
/**********************************************************************************************************************************/
void Print0(char string[])
{
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	00 d0       	rcall	.+0      	; 0x1ee <Print0+0x6>
     1ee:	0f 92       	push	r0
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	9b 83       	std	Y+3, r25	; 0x03
     1f6:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     1f8:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     1fa:	0e c0       	rjmp	.+28     	; 0x218 <Print0+0x30>
		PutUart0Ch(string[i]);  //send byte
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	2a 81       	ldd	r18, Y+2	; 0x02
     204:	3b 81       	ldd	r19, Y+3	; 0x03
     206:	82 0f       	add	r24, r18
     208:	93 1f       	adc	r25, r19
     20a:	fc 01       	movw	r30, r24
     20c:	80 81       	ld	r24, Z
     20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <PutUart0Ch>
		i += 1;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{
	BYTE i;
	i = 0;

	while (string[i]) {
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	2a 81       	ldd	r18, Y+2	; 0x02
     220:	3b 81       	ldd	r19, Y+3	; 0x03
     222:	82 0f       	add	r24, r18
     224:	93 1f       	adc	r25, r19
     226:	fc 01       	movw	r30, r24
     228:	80 81       	ld	r24, Z
     22a:	88 23       	and	r24, r24
     22c:	39 f7       	brne	.-50     	; 0x1fc <Print0+0x14>
		PutUart0Ch(string[i]);  //send byte
		i += 1;
	}
}
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	df 91       	pop	r29
     236:	cf 91       	pop	r28
     238:	08 95       	ret

0000023a <ReceivePi>:
/**********************************************************************************************************************************/
void ReceivePi(){
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	60 97       	sbiw	r28, 0x10	; 16
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
     24e:	19 82       	std	Y+1, r1	; 0x01
     250:	1a 82       	std	Y+2, r1	; 0x02
	BOOL noDelimiter=fTrue;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	8b 83       	std	Y+3, r24	; 0x03
	
	while (flagReceivePi){
     256:	c9 c0       	rjmp	.+402    	; 0x3ea <ReceivePi+0x1b0>
		switch (state) {
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	82 30       	cpi	r24, 0x02	; 2
     260:	91 05       	cpc	r25, r1
     262:	09 f4       	brne	.+2      	; 0x266 <ReceivePi+0x2c>
     264:	62 c0       	rjmp	.+196    	; 0x32a <ReceivePi+0xf0>
     266:	83 30       	cpi	r24, 0x03	; 3
     268:	91 05       	cpc	r25, r1
     26a:	3c f4       	brge	.+14     	; 0x27a <ReceivePi+0x40>
     26c:	00 97       	sbiw	r24, 0x00	; 0
     26e:	71 f0       	breq	.+28     	; 0x28c <ReceivePi+0x52>
     270:	81 30       	cpi	r24, 0x01	; 1
     272:	91 05       	cpc	r25, r1
     274:	09 f4       	brne	.+2      	; 0x278 <ReceivePi+0x3e>
     276:	4d c0       	rjmp	.+154    	; 0x312 <ReceivePi+0xd8>
     278:	b4 c0       	rjmp	.+360    	; 0x3e2 <ReceivePi+0x1a8>
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	91 05       	cpc	r25, r1
     27e:	09 f4       	brne	.+2      	; 0x282 <ReceivePi+0x48>
     280:	8a c0       	rjmp	.+276    	; 0x396 <ReceivePi+0x15c>
     282:	84 30       	cpi	r24, 0x04	; 4
     284:	91 05       	cpc	r25, r1
     286:	09 f4       	brne	.+2      	; 0x28a <ReceivePi+0x50>
     288:	a5 c0       	rjmp	.+330    	; 0x3d4 <ReceivePi+0x19a>
     28a:	ab c0       	rjmp	.+342    	; 0x3e2 <ReceivePi+0x1a8>
			case 0:{
				//Send ACK
				Print0("ACK.");
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Print0>
				state=1;
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	8a 83       	std	Y+2, r24	; 0x02
				break;
     298:	a8 c0       	rjmp	.+336    	; 0x3ea <ReceivePi+0x1b0>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
     29a:	00 00       	nop
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	90 e0       	ldi	r25, 0x00	; 0
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	88 23       	and	r24, r24
     2a6:	24 f0       	brlt	.+8      	; 0x2b0 <ReceivePi+0x76>
     2a8:	80 91 5a 01 	lds	r24, 0x015A
     2ac:	88 23       	and	r24, r24
     2ae:	b1 f7       	brne	.-20     	; 0x29c <ReceivePi+0x62>
					if (!flagReceivePi){break;}//had a timeout
     2b0:	80 91 5a 01 	lds	r24, 0x015A
     2b4:	88 23       	and	r24, r24
     2b6:	b9 f1       	breq	.+110    	; 0x326 <ReceivePi+0xec>
					recChar=UDR0;
     2b8:	86 ec       	ldi	r24, 0xC6	; 198
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	fc 01       	movw	r30, r24
     2be:	80 81       	ld	r24, Z
     2c0:	8e 83       	std	Y+6, r24	; 0x06
					recString[strLoc++]=recChar;
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	88 2f       	mov	r24, r24
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	9e 01       	movw	r18, r28
     2ca:	29 5f       	subi	r18, 0xF9	; 249
     2cc:	3f 4f       	sbci	r19, 0xFF	; 255
     2ce:	82 0f       	add	r24, r18
     2d0:	93 1f       	adc	r25, r19
     2d2:	2e 81       	ldd	r18, Y+6	; 0x06
     2d4:	fc 01       	movw	r30, r24
     2d6:	20 83       	st	Z, r18
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	8f 5f       	subi	r24, 0xFF	; 255
     2dc:	89 83       	std	Y+1, r24	; 0x01
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
     2de:	8e 81       	ldd	r24, Y+6	; 0x06
     2e0:	8e 32       	cpi	r24, 0x2E	; 46
     2e2:	19 f0       	breq	.+6      	; 0x2ea <ReceivePi+0xb0>
     2e4:	8e 81       	ldd	r24, Y+6	; 0x06
     2e6:	88 23       	and	r24, r24
     2e8:	71 f4       	brne	.+28     	; 0x306 <ReceivePi+0xcc>
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	9e 01       	movw	r18, r28
     2f2:	29 5f       	subi	r18, 0xF9	; 249
     2f4:	3f 4f       	sbci	r19, 0xFF	; 255
     2f6:	82 0f       	add	r24, r18
     2f8:	93 1f       	adc	r25, r19
     2fa:	fc 01       	movw	r30, r24
     2fc:	10 82       	st	Z, r1
     2fe:	1b 82       	std	Y+3, r1	; 0x03
     300:	82 e0       	ldi	r24, 0x02	; 2
     302:	8a 83       	std	Y+2, r24	; 0x02
     304:	06 c0       	rjmp	.+12     	; 0x312 <ReceivePi+0xd8>
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	8a 30       	cpi	r24, 0x0A	; 10
     30a:	18 f0       	brcs	.+6      	; 0x312 <ReceivePi+0xd8>
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	1b 82       	std	Y+3, r1	; 0x03
				state=1;
				break;
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	88 23       	and	r24, r24
     316:	09 f4       	brne	.+2      	; 0x31a <ReceivePi+0xe0>
     318:	67 c0       	rjmp	.+206    	; 0x3e8 <ReceivePi+0x1ae>
     31a:	80 91 5a 01 	lds	r24, 0x015A
     31e:	88 23       	and	r24, r24
     320:	09 f0       	breq	.+2      	; 0x324 <ReceivePi+0xea>
     322:	bb cf       	rjmp	.-138    	; 0x29a <ReceivePi+0x60>
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
     324:	61 c0       	rjmp	.+194    	; 0x3e8 <ReceivePi+0x1ae>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
					if (!flagReceivePi){break;}//had a timeout
     326:	00 00       	nop
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
     328:	5f c0       	rjmp	.+190    	; 0x3e8 <ReceivePi+0x1ae>
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
     32a:	ce 01       	movw	r24, r28
     32c:	07 96       	adiw	r24, 0x07	; 7
     32e:	25 e0       	ldi	r18, 0x05	; 5
     330:	31 e0       	ldi	r19, 0x01	; 1
     332:	b9 01       	movw	r22, r18
     334:	46 e0       	ldi	r20, 0x06	; 6
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncmp>
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	31 f4       	brne	.+12     	; 0x34c <ReceivePi+0x112>
     340:	81 e0       	ldi	r24, 0x01	; 1
     342:	80 93 58 01 	sts	0x0158, r24
     346:	83 e0       	ldi	r24, 0x03	; 3
     348:	8a 83       	std	Y+2, r24	; 0x02
				else if (!strncmp(recString,"TEMP.",5)){flagTemp=fTrue;state=3;}
				else if (!strncmp(recString,"HUMIDITY.",9)){flagHumidity=fTrue;state=3;}
				else {state=4;}
				break;
     34a:	4f c0       	rjmp	.+158    	; 0x3ea <ReceivePi+0x1b0>
				}//end while noDelimiter and receiving 
				break;
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"TEMP.",5)){flagTemp=fTrue;state=3;}
     34c:	ce 01       	movw	r24, r28
     34e:	07 96       	adiw	r24, 0x07	; 7
     350:	2c e0       	ldi	r18, 0x0C	; 12
     352:	31 e0       	ldi	r19, 0x01	; 1
     354:	b9 01       	movw	r22, r18
     356:	45 e0       	ldi	r20, 0x05	; 5
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncmp>
     35e:	00 97       	sbiw	r24, 0x00	; 0
     360:	31 f4       	brne	.+12     	; 0x36e <ReceivePi+0x134>
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	80 93 59 01 	sts	0x0159, r24
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	8a 83       	std	Y+2, r24	; 0x02
				else if (!strncmp(recString,"HUMIDITY.",9)){flagHumidity=fTrue;state=3;}
				else {state=4;}
				break;
     36c:	3e c0       	rjmp	.+124    	; 0x3ea <ReceivePi+0x1b0>
				break;
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"TEMP.",5)){flagTemp=fTrue;state=3;}
				else if (!strncmp(recString,"HUMIDITY.",9)){flagHumidity=fTrue;state=3;}
     36e:	ce 01       	movw	r24, r28
     370:	07 96       	adiw	r24, 0x07	; 7
     372:	22 e1       	ldi	r18, 0x12	; 18
     374:	31 e0       	ldi	r19, 0x01	; 1
     376:	b9 01       	movw	r22, r18
     378:	49 e0       	ldi	r20, 0x09	; 9
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <strncmp>
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	31 f4       	brne	.+12     	; 0x390 <ReceivePi+0x156>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	80 93 5c 01 	sts	0x015C, r24
     38a:	83 e0       	ldi	r24, 0x03	; 3
     38c:	8a 83       	std	Y+2, r24	; 0x02
				else {state=4;}
				break;
     38e:	2d c0       	rjmp	.+90     	; 0x3ea <ReceivePi+0x1b0>
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"TEMP.",5)){flagTemp=fTrue;state=3;}
				else if (!strncmp(recString,"HUMIDITY.",9)){flagHumidity=fTrue;state=3;}
				else {state=4;}
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	8a 83       	std	Y+2, r24	; 0x02
				break;
     394:	2a c0       	rjmp	.+84     	; 0x3ea <ReceivePi+0x1b0>
			}//end case 2
			case 3:{
				//Graceful exit
				int i=0;
     396:	1d 82       	std	Y+5, r1	; 0x05
     398:	1c 82       	std	Y+4, r1	; 0x04
				for (i=0;i<strLoc;i++){recString[strLoc]=NULL;}	//clear string memory
     39a:	1d 82       	std	Y+5, r1	; 0x05
     39c:	1c 82       	std	Y+4, r1	; 0x04
     39e:	0f c0       	rjmp	.+30     	; 0x3be <ReceivePi+0x184>
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	9e 01       	movw	r18, r28
     3a8:	29 5f       	subi	r18, 0xF9	; 249
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	10 82       	st	Z, r1
     3b4:	8c 81       	ldd	r24, Y+4	; 0x04
     3b6:	9d 81       	ldd	r25, Y+5	; 0x05
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	9d 83       	std	Y+5, r25	; 0x05
     3bc:	8c 83       	std	Y+4, r24	; 0x04
     3be:	89 81       	ldd	r24, Y+1	; 0x01
     3c0:	28 2f       	mov	r18, r24
     3c2:	30 e0       	ldi	r19, 0x00	; 0
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	9d 81       	ldd	r25, Y+5	; 0x05
     3c8:	82 17       	cp	r24, r18
     3ca:	93 07       	cpc	r25, r19
     3cc:	4c f3       	brlt	.-46     	; 0x3a0 <ReceivePi+0x166>
				flagReceivePi=fFalse;
     3ce:	10 92 5a 01 	sts	0x015A, r1
				break;
     3d2:	0b c0       	rjmp	.+22     	; 0x3ea <ReceivePi+0x1b0>
			}//end case 3
			case 4:{
				//Bad ACK or ask string
				Print0("Unknown query.");
     3d4:	8c e1       	ldi	r24, 0x1C	; 28
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Print0>
				state=3;
     3dc:	83 e0       	ldi	r24, 0x03	; 3
     3de:	8a 83       	std	Y+2, r24	; 0x02
				break;
     3e0:	04 c0       	rjmp	.+8      	; 0x3ea <ReceivePi+0x1b0>
			}//end case 4
			default:{flagReceivePi=fFalse;break;}			
     3e2:	10 92 5a 01 	sts	0x015A, r1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <ReceivePi+0x1b0>
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
     3e8:	00 00       	nop
void ReceivePi(){
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
	BOOL noDelimiter=fTrue;
	
	while (flagReceivePi){
     3ea:	80 91 5a 01 	lds	r24, 0x015A
     3ee:	88 23       	and	r24, r24
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <ReceivePi+0x1ba>
     3f2:	32 cf       	rjmp	.-412    	; 0x258 <ReceivePi+0x1e>
				break;
			}//end case 4
			default:{flagReceivePi=fFalse;break;}			
		}//end switch
	}//end while ReceivePi	
     3f4:	60 96       	adiw	r28, 0x10	; 16
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	2f 93       	push	r18
     412:	3f 93       	push	r19
     414:	4f 93       	push	r20
     416:	5f 93       	push	r21
     418:	6f 93       	push	r22
     41a:	7f 93       	push	r23
     41c:	8f 93       	push	r24
     41e:	9f 93       	push	r25
     420:	af 93       	push	r26
     422:	bf 93       	push	r27
     424:	ef 93       	push	r30
     426:	ff 93       	push	r31
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
	cli();
     430:	f8 94       	cli
	prtDebug |= (1 << bnD1);	//should toggle amber LED on. 
     432:	88 e2       	ldi	r24, 0x28	; 40
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	28 e2       	ldi	r18, 0x28	; 40
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	20 61       	ori	r18, 0x10	; 16
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
	Wait_ms(10);
     444:	8a e0       	ldi	r24, 0x0A	; 10
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	flagReceivePi=fTrue;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 5a 01 	sts	0x015A, r24
	prtDebug &= ~(1 << bnD1);
     452:	88 e2       	ldi	r24, 0x28	; 40
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	28 e2       	ldi	r18, 0x28	; 40
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	20 81       	ld	r18, Z
     45e:	2f 7e       	andi	r18, 0xEF	; 239
     460:	fc 01       	movw	r30, r24
     462:	20 83       	st	Z, r18
	sei();
     464:	78 94       	sei
}
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	ff 91       	pop	r31
     46c:	ef 91       	pop	r30
     46e:	bf 91       	pop	r27
     470:	af 91       	pop	r26
     472:	9f 91       	pop	r25
     474:	8f 91       	pop	r24
     476:	7f 91       	pop	r23
     478:	6f 91       	pop	r22
     47a:	5f 91       	pop	r21
     47c:	4f 91       	pop	r20
     47e:	3f 91       	pop	r19
     480:	2f 91       	pop	r18
     482:	0f 90       	pop	r0
     484:	0f be       	out	0x3f, r0	; 63
     486:	0f 90       	pop	r0
     488:	1f 90       	pop	r1
     48a:	18 95       	reti

0000048c <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
     48c:	1f 92       	push	r1
     48e:	0f 92       	push	r0
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	0f 92       	push	r0
     494:	11 24       	eor	r1, r1
     496:	2f 93       	push	r18
     498:	3f 93       	push	r19
     49a:	8f 93       	push	r24
     49c:	9f 93       	push	r25
     49e:	ef 93       	push	r30
     4a0:	ff 93       	push	r31
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	cd b7       	in	r28, 0x3d	; 61
     4a8:	de b7       	in	r29, 0x3e	; 62
	cli();
     4aa:	f8 94       	cli
	static WORD timerTwoCount=0,receivePiTimer=0;
	
	if (timerTwoCount++ >=PULSE_TIME) {pinDebug = (1 << bnD0); timerTwoCount = 0;}		//toggles green, left LED. Should be on half second.
     4ac:	80 91 54 01 	lds	r24, 0x0154
     4b0:	90 91 55 01 	lds	r25, 0x0155
     4b4:	21 e0       	ldi	r18, 0x01	; 1
     4b6:	31 e0       	ldi	r19, 0x01	; 1
     4b8:	88 3e       	cpi	r24, 0xE8	; 232
     4ba:	93 07       	cpc	r25, r19
     4bc:	08 f4       	brcc	.+2      	; 0x4c0 <__vector_11+0x34>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	01 96       	adiw	r24, 0x01	; 1
     4c2:	90 93 55 01 	sts	0x0155, r25
     4c6:	80 93 54 01 	sts	0x0154, r24
     4ca:	22 23       	and	r18, r18
     4cc:	49 f0       	breq	.+18     	; 0x4e0 <__vector_11+0x54>
     4ce:	86 e2       	ldi	r24, 0x26	; 38
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	28 e0       	ldi	r18, 0x08	; 8
     4d4:	fc 01       	movw	r30, r24
     4d6:	20 83       	st	Z, r18
     4d8:	10 92 55 01 	sts	0x0155, r1
     4dc:	10 92 54 01 	sts	0x0154, r1
	
	//Receive Timeout	
	if (flagReceivePi && receivePiTimer<TIMEOUT){receivePiTimer++;}								//no timteout yet
     4e0:	80 91 5a 01 	lds	r24, 0x015A
     4e4:	88 23       	and	r24, r24
     4e6:	91 f0       	breq	.+36     	; 0x50c <__vector_11+0x80>
     4e8:	80 91 56 01 	lds	r24, 0x0156
     4ec:	90 91 57 01 	lds	r25, 0x0157
     4f0:	f3 e1       	ldi	r31, 0x13	; 19
     4f2:	80 31       	cpi	r24, 0x10	; 16
     4f4:	9f 07       	cpc	r25, r31
     4f6:	50 f4       	brcc	.+20     	; 0x50c <__vector_11+0x80>
     4f8:	80 91 56 01 	lds	r24, 0x0156
     4fc:	90 91 57 01 	lds	r25, 0x0157
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	90 93 57 01 	sts	0x0157, r25
     506:	80 93 56 01 	sts	0x0156, r24
     50a:	17 c0       	rjmp	.+46     	; 0x53a <__vector_11+0xae>
	else if (flagReceivePi && receivePiTimer>=TIMEOUT){receivePiTimer=0;flagReceivePi=fFalse;}	//timeout
     50c:	80 91 5a 01 	lds	r24, 0x015A
     510:	88 23       	and	r24, r24
     512:	79 f0       	breq	.+30     	; 0x532 <__vector_11+0xa6>
     514:	80 91 56 01 	lds	r24, 0x0156
     518:	90 91 57 01 	lds	r25, 0x0157
     51c:	23 e1       	ldi	r18, 0x13	; 19
     51e:	80 31       	cpi	r24, 0x10	; 16
     520:	92 07       	cpc	r25, r18
     522:	38 f0       	brcs	.+14     	; 0x532 <__vector_11+0xa6>
     524:	10 92 57 01 	sts	0x0157, r1
     528:	10 92 56 01 	sts	0x0156, r1
     52c:	10 92 5a 01 	sts	0x015A, r1
     530:	04 c0       	rjmp	.+8      	; 0x53a <__vector_11+0xae>
	else {receivePiTimer=0;}																	//make sure this statys at 0 and is reset if a successful receive happens		
     532:	10 92 57 01 	sts	0x0157, r1
     536:	10 92 56 01 	sts	0x0156, r1
	sei();
     53a:	78 94       	sei
}
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	ff 91       	pop	r31
     542:	ef 91       	pop	r30
     544:	9f 91       	pop	r25
     546:	8f 91       	pop	r24
     548:	3f 91       	pop	r19
     54a:	2f 91       	pop	r18
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <main>:


/*****************************************************************************************************************/
int main(void)
{	
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	cc 54       	subi	r28, 0x4C	; 76
     564:	d0 40       	sbci	r29, 0x00	; 0
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
     570:	0e 94 7d 04 	call	0x8fa	; 0x8fa <DeviceInit>
	AppInit(MYUBRR);
     574:	85 e0       	ldi	r24, 0x05	; 5
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 a4 04 	call	0x948	; 0x948 <AppInit>
	Wait_ms(40);
     57c:	88 e2       	ldi	r24, 0x28	; 40
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	ResetDebug();	//clear LED's
     584:	0e 94 c6 08 	call	0x118c	; 0x118c <ResetDebug>
	InitTimer2();
     588:	0e 94 71 05 	call	0xae2	; 0xae2 <InitTimer2>
	sei();
     58c:	78 94       	sei
	// main program loop
	while (fTrue) {	
		
		//IF receiving from the Pi
		if (flagReceivePi){
     58e:	80 91 5a 01 	lds	r24, 0x015A
     592:	88 23       	and	r24, r24
     594:	a1 f0       	breq	.+40     	; 0x5be <main+0x68>
			prtDebug |= (1 << bnD1);
     596:	88 e2       	ldi	r24, 0x28	; 40
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	28 e2       	ldi	r18, 0x28	; 40
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 61       	ori	r18, 0x10	; 16
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
			ReceivePi();
     5a8:	0e 94 1d 01 	call	0x23a	; 0x23a <ReceivePi>
			prtDebug &= ~(1 << bnD1);
     5ac:	88 e2       	ldi	r24, 0x28	; 40
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	28 e2       	ldi	r18, 0x28	; 40
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	f9 01       	movw	r30, r18
     5b6:	20 81       	ld	r18, Z
     5b8:	2f 7e       	andi	r18, 0xEF	; 239
     5ba:	fc 01       	movw	r30, r24
     5bc:	20 83       	st	Z, r18
		}
		
		//If we are suposed to get something, go get it
		if (flagAllStats || flagTemp || flagHumidity){
     5be:	80 91 58 01 	lds	r24, 0x0158
     5c2:	88 23       	and	r24, r24
     5c4:	49 f4       	brne	.+18     	; 0x5d8 <main+0x82>
     5c6:	80 91 59 01 	lds	r24, 0x0159
     5ca:	88 23       	and	r24, r24
     5cc:	29 f4       	brne	.+10     	; 0x5d8 <main+0x82>
     5ce:	80 91 5c 01 	lds	r24, 0x015C
     5d2:	88 23       	and	r24, r24
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <main+0x82>
     5d6:	50 c1       	rjmp	.+672    	; 0x878 <main+0x322>
			cli();
     5d8:	f8 94       	cli
			prtDebug |= (1 << bnD2);
     5da:	88 e2       	ldi	r24, 0x28	; 40
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	28 e2       	ldi	r18, 0x28	; 40
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	f9 01       	movw	r30, r18
     5e4:	20 81       	ld	r18, Z
     5e6:	20 62       	ori	r18, 0x20	; 32
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			char printString[40];
			//If we are supposed to get a temperature, get the three temps
			if (flagAllStats || flagTemp){
     5ec:	80 91 58 01 	lds	r24, 0x0158
     5f0:	88 23       	and	r24, r24
     5f2:	29 f4       	brne	.+10     	; 0x5fe <main+0xa8>
     5f4:	80 91 59 01 	lds	r24, 0x0159
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <main+0xa8>
     5fc:	a9 c0       	rjmp	.+338    	; 0x750 <main+0x1fa>
				prtDebug |= (1 << bnD3);
     5fe:	88 e2       	ldi	r24, 0x28	; 40
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	28 e2       	ldi	r18, 0x28	; 40
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	f9 01       	movw	r30, r18
     608:	20 81       	ld	r18, Z
     60a:	20 64       	ori	r18, 0x40	; 64
     60c:	fc 01       	movw	r30, r24
     60e:	20 83       	st	Z, r18
				double adtTemp=GetTempADT();
     610:	0e 94 29 08 	call	0x1052	; 0x1052 <GetTempADT>
     614:	dc 01       	movw	r26, r24
     616:	cb 01       	movw	r24, r22
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	9a 83       	std	Y+2, r25	; 0x02
     61c:	ab 83       	std	Y+3, r26	; 0x03
     61e:	bc 83       	std	Y+4, r27	; 0x04
				double tiTemp=GetTempTI(MYUBRR);
     620:	85 e0       	ldi	r24, 0x05	; 5
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	0e 94 a5 05 	call	0xb4a	; 0xb4a <GetTempTI>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	8d 83       	std	Y+5, r24	; 0x05
     62e:	9e 83       	std	Y+6, r25	; 0x06
     630:	af 83       	std	Y+7, r26	; 0x07
     632:	b8 87       	std	Y+8, r27	; 0x08
				double thermTemp=GetTempTherm();
     634:	0e 94 94 06 	call	0xd28	; 0xd28 <GetTempTherm>
     638:	dc 01       	movw	r26, r24
     63a:	cb 01       	movw	r24, r22
     63c:	89 87       	std	Y+9, r24	; 0x09
     63e:	9a 87       	std	Y+10, r25	; 0x0a
     640:	ab 87       	std	Y+11, r26	; 0x0b
     642:	bc 87       	std	Y+12, r27	; 0x0c
				char adtStr[5],tiStr[5],thermStr[5];
				dtostrf(adtTemp,0,2,adtStr);
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	ab 81       	ldd	r26, Y+3	; 0x03
     64a:	bc 81       	ldd	r27, Y+4	; 0x04
     64c:	fe 01       	movw	r30, r28
     64e:	71 96       	adiw	r30, 0x11	; 17
     650:	bc 01       	movw	r22, r24
     652:	cd 01       	movw	r24, r26
     654:	40 e0       	ldi	r20, 0x00	; 0
     656:	22 e0       	ldi	r18, 0x02	; 2
     658:	8f 01       	movw	r16, r30
     65a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <dtostrf>
				dtostrf(thermTemp,0,2,thermStr);
     65e:	89 85       	ldd	r24, Y+9	; 0x09
     660:	9a 85       	ldd	r25, Y+10	; 0x0a
     662:	ab 85       	ldd	r26, Y+11	; 0x0b
     664:	bc 85       	ldd	r27, Y+12	; 0x0c
     666:	fe 01       	movw	r30, r28
     668:	7b 96       	adiw	r30, 0x1b	; 27
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	22 e0       	ldi	r18, 0x02	; 2
     672:	8f 01       	movw	r16, r30
     674:	0e 94 ca 0a 	call	0x1594	; 0x1594 <dtostrf>
				dtostrf(tiTemp,0,2,tiStr);
     678:	8d 81       	ldd	r24, Y+5	; 0x05
     67a:	9e 81       	ldd	r25, Y+6	; 0x06
     67c:	af 81       	ldd	r26, Y+7	; 0x07
     67e:	b8 85       	ldd	r27, Y+8	; 0x08
     680:	fe 01       	movw	r30, r28
     682:	76 96       	adiw	r30, 0x16	; 22
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	8f 01       	movw	r16, r30
     68e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <dtostrf>
				strcpy(printString,"ADT");
     692:	9e 01       	movw	r18, r28
     694:	2b 5d       	subi	r18, 0xDB	; 219
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	81 e4       	ldi	r24, 0x41	; 65
     69a:	94 e4       	ldi	r25, 0x44	; 68
     69c:	a4 e5       	ldi	r26, 0x54	; 84
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	f9 01       	movw	r30, r18
     6a2:	80 83       	st	Z, r24
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	a2 83       	std	Z+2, r26	; 0x02
     6a8:	b3 83       	std	Z+3, r27	; 0x03
				strcat(printString,adtStr);
     6aa:	ce 01       	movw	r24, r28
     6ac:	85 96       	adiw	r24, 0x25	; 37
     6ae:	9e 01       	movw	r18, r28
     6b0:	2f 5e       	subi	r18, 0xEF	; 239
     6b2:	3f 4f       	sbci	r19, 0xFF	; 255
     6b4:	b9 01       	movw	r22, r18
     6b6:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
				strcat(printString,"/TI");
     6ba:	ce 01       	movw	r24, r28
     6bc:	85 96       	adiw	r24, 0x25	; 37
     6be:	9c 01       	movw	r18, r24
     6c0:	f9 01       	movw	r30, r18
     6c2:	01 90       	ld	r0, Z+
     6c4:	00 20       	and	r0, r0
     6c6:	e9 f7       	brne	.-6      	; 0x6c2 <main+0x16c>
     6c8:	cf 01       	movw	r24, r30
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	82 1b       	sub	r24, r18
     6ce:	93 0b       	sbc	r25, r19
     6d0:	9e 01       	movw	r18, r28
     6d2:	2b 5d       	subi	r18, 0xDB	; 219
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	28 0f       	add	r18, r24
     6d8:	39 1f       	adc	r19, r25
     6da:	8f e2       	ldi	r24, 0x2F	; 47
     6dc:	94 e5       	ldi	r25, 0x54	; 84
     6de:	a9 e4       	ldi	r26, 0x49	; 73
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	f9 01       	movw	r30, r18
     6e4:	80 83       	st	Z, r24
     6e6:	91 83       	std	Z+1, r25	; 0x01
     6e8:	a2 83       	std	Z+2, r26	; 0x02
     6ea:	b3 83       	std	Z+3, r27	; 0x03
				strcat(printString,tiStr);
     6ec:	ce 01       	movw	r24, r28
     6ee:	85 96       	adiw	r24, 0x25	; 37
     6f0:	9e 01       	movw	r18, r28
     6f2:	2a 5e       	subi	r18, 0xEA	; 234
     6f4:	3f 4f       	sbci	r19, 0xFF	; 255
     6f6:	b9 01       	movw	r22, r18
     6f8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
				strcat(printString,"/TH");
     6fc:	ce 01       	movw	r24, r28
     6fe:	85 96       	adiw	r24, 0x25	; 37
     700:	9c 01       	movw	r18, r24
     702:	f9 01       	movw	r30, r18
     704:	01 90       	ld	r0, Z+
     706:	00 20       	and	r0, r0
     708:	e9 f7       	brne	.-6      	; 0x704 <main+0x1ae>
     70a:	cf 01       	movw	r24, r30
     70c:	01 97       	sbiw	r24, 0x01	; 1
     70e:	82 1b       	sub	r24, r18
     710:	93 0b       	sbc	r25, r19
     712:	9e 01       	movw	r18, r28
     714:	2b 5d       	subi	r18, 0xDB	; 219
     716:	3f 4f       	sbci	r19, 0xFF	; 255
     718:	28 0f       	add	r18, r24
     71a:	39 1f       	adc	r19, r25
     71c:	8f e2       	ldi	r24, 0x2F	; 47
     71e:	94 e5       	ldi	r25, 0x54	; 84
     720:	a8 e4       	ldi	r26, 0x48	; 72
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	80 83       	st	Z, r24
     728:	91 83       	std	Z+1, r25	; 0x01
     72a:	a2 83       	std	Z+2, r26	; 0x02
     72c:	b3 83       	std	Z+3, r27	; 0x03
				strcat(printString,thermStr);
     72e:	ce 01       	movw	r24, r28
     730:	85 96       	adiw	r24, 0x25	; 37
     732:	9e 01       	movw	r18, r28
     734:	25 5e       	subi	r18, 0xE5	; 229
     736:	3f 4f       	sbci	r19, 0xFF	; 255
     738:	b9 01       	movw	r22, r18
     73a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
				prtDebug &= ~(1 << bnD3);
     73e:	88 e2       	ldi	r24, 0x28	; 40
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	28 e2       	ldi	r18, 0x28	; 40
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	2f 7b       	andi	r18, 0xBF	; 191
     74c:	fc 01       	movw	r30, r24
     74e:	20 83       	st	Z, r18
			}
			//If we should be getting humidity, get it.
			if (flagAllStats || flagHumidity){
     750:	80 91 58 01 	lds	r24, 0x0158
     754:	88 23       	and	r24, r24
     756:	29 f4       	brne	.+10     	; 0x762 <main+0x20c>
     758:	80 91 5c 01 	lds	r24, 0x015C
     75c:	88 23       	and	r24, r24
     75e:	09 f4       	brne	.+2      	; 0x762 <main+0x20c>
     760:	68 c0       	rjmp	.+208    	; 0x832 <main+0x2dc>
				prtDebug |= (1 << bnD4);
     762:	88 e2       	ldi	r24, 0x28	; 40
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	28 e2       	ldi	r18, 0x28	; 40
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	20 68       	ori	r18, 0x80	; 128
     770:	fc 01       	movw	r30, r24
     772:	20 83       	st	Z, r18
				double humidity=GetHumidity();
     774:	0e 94 68 07 	call	0xed0	; 0xed0 <GetHumidity>
     778:	dc 01       	movw	r26, r24
     77a:	cb 01       	movw	r24, r22
     77c:	8d 87       	std	Y+13, r24	; 0x0d
     77e:	9e 87       	std	Y+14, r25	; 0x0e
     780:	af 87       	std	Y+15, r26	; 0x0f
     782:	b8 8b       	std	Y+16, r27	; 0x10
				char humidityStr[5];
				dtostrf(humidity,0,2,humidityStr);
     784:	8d 85       	ldd	r24, Y+13	; 0x0d
     786:	9e 85       	ldd	r25, Y+14	; 0x0e
     788:	af 85       	ldd	r26, Y+15	; 0x0f
     78a:	b8 89       	ldd	r27, Y+16	; 0x10
     78c:	fe 01       	movw	r30, r28
     78e:	b0 96       	adiw	r30, 0x20	; 32
     790:	bc 01       	movw	r22, r24
     792:	cd 01       	movw	r24, r26
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	22 e0       	ldi	r18, 0x02	; 2
     798:	8f 01       	movw	r16, r30
     79a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <dtostrf>
				//If we are only getting humidity, copy the string into the buffer
				if (!flagAllStats && !flagTemp){
     79e:	80 91 58 01 	lds	r24, 0x0158
     7a2:	88 23       	and	r24, r24
     7a4:	e1 f4       	brne	.+56     	; 0x7de <main+0x288>
     7a6:	80 91 59 01 	lds	r24, 0x0159
     7aa:	88 23       	and	r24, r24
     7ac:	c1 f4       	brne	.+48     	; 0x7de <main+0x288>
					strcpy(printString,"HU");
     7ae:	ce 01       	movw	r24, r28
     7b0:	85 96       	adiw	r24, 0x25	; 37
     7b2:	2b e2       	ldi	r18, 0x2B	; 43
     7b4:	31 e0       	ldi	r19, 0x01	; 1
     7b6:	43 e0       	ldi	r20, 0x03	; 3
     7b8:	f9 01       	movw	r30, r18
     7ba:	00 80       	ld	r0, Z
     7bc:	2f 5f       	subi	r18, 0xFF	; 255
     7be:	3f 4f       	sbci	r19, 0xFF	; 255
     7c0:	fc 01       	movw	r30, r24
     7c2:	00 82       	st	Z, r0
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	41 50       	subi	r20, 0x01	; 1
     7c8:	44 23       	and	r20, r20
     7ca:	b1 f7       	brne	.-20     	; 0x7b8 <main+0x262>
					strcat(printString,humidityStr);
     7cc:	ce 01       	movw	r24, r28
     7ce:	85 96       	adiw	r24, 0x25	; 37
     7d0:	9e 01       	movw	r18, r28
     7d2:	20 5e       	subi	r18, 0xE0	; 224
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	b9 01       	movw	r22, r18
     7d8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
     7dc:	21 c0       	rjmp	.+66     	; 0x820 <main+0x2ca>
				//If temp was gotten as well, append to the buffer	
				} else {
					strcat(printString,"/HU");
     7de:	ce 01       	movw	r24, r28
     7e0:	85 96       	adiw	r24, 0x25	; 37
     7e2:	9c 01       	movw	r18, r24
     7e4:	f9 01       	movw	r30, r18
     7e6:	01 90       	ld	r0, Z+
     7e8:	00 20       	and	r0, r0
     7ea:	e9 f7       	brne	.-6      	; 0x7e6 <main+0x290>
     7ec:	cf 01       	movw	r24, r30
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	82 1b       	sub	r24, r18
     7f2:	93 0b       	sbc	r25, r19
     7f4:	9e 01       	movw	r18, r28
     7f6:	2b 5d       	subi	r18, 0xDB	; 219
     7f8:	3f 4f       	sbci	r19, 0xFF	; 255
     7fa:	28 0f       	add	r18, r24
     7fc:	39 1f       	adc	r19, r25
     7fe:	8f e2       	ldi	r24, 0x2F	; 47
     800:	98 e4       	ldi	r25, 0x48	; 72
     802:	a5 e5       	ldi	r26, 0x55	; 85
     804:	b0 e0       	ldi	r27, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	80 83       	st	Z, r24
     80a:	91 83       	std	Z+1, r25	; 0x01
     80c:	a2 83       	std	Z+2, r26	; 0x02
     80e:	b3 83       	std	Z+3, r27	; 0x03
					strcat(printString,humidityStr);
     810:	ce 01       	movw	r24, r28
     812:	85 96       	adiw	r24, 0x25	; 37
     814:	9e 01       	movw	r18, r28
     816:	20 5e       	subi	r18, 0xE0	; 224
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	b9 01       	movw	r22, r18
     81c:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
				}//end if only flagHumidity
				prtDebug &= ~(1 << bnD4);
     820:	88 e2       	ldi	r24, 0x28	; 40
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	28 e2       	ldi	r18, 0x28	; 40
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	f9 01       	movw	r30, r18
     82a:	20 81       	ld	r18, Z
     82c:	2f 77       	andi	r18, 0x7F	; 127
     82e:	fc 01       	movw	r30, r24
     830:	20 83       	st	Z, r18
			}//end if humidity needs to be gotten
			
			//Add end of line, X
			strcat(printString,"X\0");
     832:	ce 01       	movw	r24, r28
     834:	85 96       	adiw	r24, 0x25	; 37
     836:	9c 01       	movw	r18, r24
     838:	f9 01       	movw	r30, r18
     83a:	01 90       	ld	r0, Z+
     83c:	00 20       	and	r0, r0
     83e:	e9 f7       	brne	.-6      	; 0x83a <main+0x2e4>
     840:	cf 01       	movw	r24, r30
     842:	01 97       	sbiw	r24, 0x01	; 1
     844:	82 1b       	sub	r24, r18
     846:	93 0b       	sbc	r25, r19
     848:	9e 01       	movw	r18, r28
     84a:	2b 5d       	subi	r18, 0xDB	; 219
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	28 e5       	ldi	r18, 0x58	; 88
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	fc 01       	movw	r30, r24
     858:	31 83       	std	Z+1, r19	; 0x01
     85a:	20 83       	st	Z, r18
			//Print the string to the RasberryPi
			Print0(printString);
     85c:	ce 01       	movw	r24, r28
     85e:	85 96       	adiw	r24, 0x25	; 37
     860:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Print0>
			prtDebug &= ~(1 << bnD2);
     864:	88 e2       	ldi	r24, 0x28	; 40
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	28 e2       	ldi	r18, 0x28	; 40
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	f9 01       	movw	r30, r18
     86e:	20 81       	ld	r18, Z
     870:	2f 7d       	andi	r18, 0xDF	; 223
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
			sei();
     876:	78 94       	sei
		}
		
		//Power save. Should sleep for ~10 seconds
		Print0(" Going to sleep... ");
     878:	8e e2       	ldi	r24, 0x2E	; 46
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Print0>
		ResetDebug();						//Clear the LED's
     880:	0e 94 c6 08 	call	0x118c	; 0x118c <ResetDebug>
		flagGoToSleep=fTrue;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 93 5b 01 	sts	0x015B, r24
		sleepCnt=0;
     88a:	10 92 53 01 	sts	0x0153, r1
     88e:	10 92 52 01 	sts	0x0152, r1
		SMCR = (1 << SM1)|(1 << SM0);
     892:	83 e5       	ldi	r24, 0x53	; 83
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	26 e0       	ldi	r18, 0x06	; 6
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
     89c:	83 e5       	ldi	r24, 0x53	; 83
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	23 e5       	ldi	r18, 0x53	; 83
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	f9 01       	movw	r30, r18
     8a6:	20 81       	ld	r18, Z
     8a8:	21 60       	ori	r18, 0x01	; 1
     8aa:	fc 01       	movw	r30, r24
     8ac:	20 83       	st	Z, r18
		while (sleepCnt<SLEEP_TIME && !flagReceivePi){
     8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <main+0x36e>
			asm volatile("SLEEP");
     8b0:	88 95       	sleep
			sleepCnt++;
     8b2:	80 91 52 01 	lds	r24, 0x0152
     8b6:	90 91 53 01 	lds	r25, 0x0153
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	90 93 53 01 	sts	0x0153, r25
     8c0:	80 93 52 01 	sts	0x0152, r24
		ResetDebug();						//Clear the LED's
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (sleepCnt<SLEEP_TIME && !flagReceivePi){
     8c4:	80 91 52 01 	lds	r24, 0x0152
     8c8:	90 91 53 01 	lds	r25, 0x0153
     8cc:	f6 e2       	ldi	r31, 0x26	; 38
     8ce:	80 32       	cpi	r24, 0x20	; 32
     8d0:	9f 07       	cpc	r25, r31
     8d2:	20 f4       	brcc	.+8      	; 0x8dc <main+0x386>
     8d4:	80 91 5a 01 	lds	r24, 0x015A
     8d8:	88 23       	and	r24, r24
     8da:	51 f3       	breq	.-44     	; 0x8b0 <main+0x35a>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
     8dc:	83 e5       	ldi	r24, 0x53	; 83
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
     8e4:	10 92 5b 01 	sts	0x015B, r1
		Wait_ms(20);
     8e8:	84 e1       	ldi	r24, 0x14	; 20
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
		//Reset sleep register on wakeup
		Print0(" Waking up... ");
     8f0:	82 e4       	ldi	r24, 0x42	; 66
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Print0>
		
	}  //end while fTrue
     8f8:	4a ce       	rjmp	.-876    	; 0x58e <main+0x38>

000008fa <DeviceInit>:
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	cd b7       	in	r28, 0x3d	; 61
     900:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
     902:	81 e2       	ldi	r24, 0x21	; 33
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	fc 01       	movw	r30, r24
     908:	10 82       	st	Z, r1
	DDRB = 0;
     90a:	84 e2       	ldi	r24, 0x24	; 36
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	fc 01       	movw	r30, r24
     910:	10 82       	st	Z, r1
	DDRC = 0;
     912:	87 e2       	ldi	r24, 0x27	; 39
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	fc 01       	movw	r30, r24
     918:	10 82       	st	Z, r1
	DDRD = 0;
     91a:	8a e2       	ldi	r24, 0x2A	; 42
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	fc 01       	movw	r30, r24
     920:	10 82       	st	Z, r1

	PORTA = 0x00;
     922:	82 e2       	ldi	r24, 0x22	; 34
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	fc 01       	movw	r30, r24
     928:	10 82       	st	Z, r1
	PORTB = 0x00;
     92a:	85 e2       	ldi	r24, 0x25	; 37
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	10 82       	st	Z, r1
	PORTC = 0x00;
     932:	88 e2       	ldi	r24, 0x28	; 40
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	10 82       	st	Z, r1
	PORTD = 0x00;
     93a:	8b e2       	ldi	r24, 0x2B	; 43
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	fc 01       	movw	r30, r24
     940:	10 82       	st	Z, r1
}
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <AppInit>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <AppInit+0x6>
     94e:	00 d0       	rcall	.+0      	; 0x950 <AppInit+0x8>
     950:	00 d0       	rcall	.+0      	; 0x952 <AppInit+0xa>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	9e 83       	std	Y+6, r25	; 0x06
     958:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
     95a:	84 ec       	ldi	r24, 0xC4	; 196
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	2d 81       	ldd	r18, Y+5	; 0x05
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
     964:	85 ec       	ldi	r24, 0xC5	; 197
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	2d 81       	ldd	r18, Y+5	; 0x05
     96a:	3e 81       	ldd	r19, Y+6	; 0x06
     96c:	23 2f       	mov	r18, r19
     96e:	33 27       	eor	r19, r19
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
     974:	81 ec       	ldi	r24, 0xC1	; 193
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	28 e1       	ldi	r18, 0x18	; 24
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
     97e:	82 ec       	ldi	r24, 0xC2	; 194
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	26 e0       	ldi	r18, 0x06	; 6
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
     988:	87 e2       	ldi	r24, 0x27	; 39
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	27 e2       	ldi	r18, 0x27	; 39
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	f9 01       	movw	r30, r18
     992:	20 81       	ld	r18, Z
     994:	28 6f       	ori	r18, 0xF8	; 248
     996:	fc 01       	movw	r30, r24
     998:	20 83       	st	Z, r18
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
     9a2:	1d c0       	rjmp	.+58     	; 0x9de <AppInit+0x96>
		prtDebug |= (1 << i);
     9a4:	88 e2       	ldi	r24, 0x28	; 40
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	28 e2       	ldi	r18, 0x28	; 40
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	f9 01       	movw	r30, r18
     9ae:	20 81       	ld	r18, Z
     9b0:	42 2f       	mov	r20, r18
     9b2:	21 e0       	ldi	r18, 0x01	; 1
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	09 80       	ldd	r0, Y+1	; 0x01
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <AppInit+0x76>
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	0a 94       	dec	r0
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <AppInit+0x72>
     9c2:	24 2b       	or	r18, r20
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
		Wait_ms(10);
     9c8:	8a e0       	ldi	r24, 0x0A	; 10
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
		ResetDebug();
     9d0:	0e 94 c6 08 	call	0x118c	; 0x118c <ResetDebug>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	9a 83       	std	Y+2, r25	; 0x02
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	9a 81       	ldd	r25, Y+2	; 0x02
     9e2:	88 30       	cpi	r24, 0x08	; 8
     9e4:	91 05       	cpc	r25, r1
     9e6:	f4 f2       	brlt	.-68     	; 0x9a4 <AppInit+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	1d c0       	rjmp	.+58     	; 0xa2c <AppInit+0xe4>
		prtDebug |= (1 << j);
     9f2:	88 e2       	ldi	r24, 0x28	; 40
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	28 e2       	ldi	r18, 0x28	; 40
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	20 81       	ld	r18, Z
     9fe:	42 2f       	mov	r20, r18
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	0b 80       	ldd	r0, Y+3	; 0x03
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <AppInit+0xc4>
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	0a 94       	dec	r0
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <AppInit+0xc0>
     a10:	24 2b       	or	r18, r20
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
		Wait_ms(10);
     a16:	8a e0       	ldi	r24, 0x0A	; 10
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
		ResetDebug();
     a1e:	0e 94 c6 08 	call	0x118c	; 0x118c <ResetDebug>
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     a22:	8b 81       	ldd	r24, Y+3	; 0x03
     a24:	9c 81       	ldd	r25, Y+4	; 0x04
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9c 83       	std	Y+4, r25	; 0x04
     a2a:	8b 83       	std	Y+3, r24	; 0x03
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	99 23       	and	r25, r25
     a32:	fc f6       	brge	.-66     	; 0x9f2 <AppInit+0xaa>
		Wait_ms(10);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
     a34:	84 e2       	ldi	r24, 0x24	; 36
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	24 e2       	ldi	r18, 0x24	; 36
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	f9 01       	movw	r30, r18
     a3e:	20 81       	ld	r18, Z
     a40:	20 6b       	ori	r18, 0xB0	; 176
     a42:	fc 01       	movw	r30, r24
     a44:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
     a46:	85 e2       	ldi	r24, 0x25	; 37
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	25 e2       	ldi	r18, 0x25	; 37
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	f9 01       	movw	r30, r18
     a50:	20 81       	ld	r18, Z
     a52:	20 69       	ori	r18, 0x90	; 144
     a54:	fc 01       	movw	r30, r24
     a56:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
     a58:	85 e2       	ldi	r24, 0x25	; 37
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	25 e2       	ldi	r18, 0x25	; 37
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	f9 01       	movw	r30, r18
     a62:	20 81       	ld	r18, Z
     a64:	2f 7b       	andi	r18, 0xBF	; 191
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
     a6a:	85 e2       	ldi	r24, 0x25	; 37
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	25 e2       	ldi	r18, 0x25	; 37
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	f9 01       	movw	r30, r18
     a74:	20 81       	ld	r18, Z
     a76:	2f 7d       	andi	r18, 0xDF	; 223
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
     a7c:	8c e4       	ldi	r24, 0x4C	; 76
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2c e4       	ldi	r18, 0x4C	; 76
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	23 65       	ori	r18, 0x53	; 83
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM1)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
     a8e:	84 e6       	ldi	r24, 0x64	; 100
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	24 e6       	ldi	r18, 0x64	; 100
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	2d 6f       	ori	r18, 0xFD	; 253
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
     aa0:	89 e6       	ldi	r24, 0x69	; 105
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	29 e6       	ldi	r18, 0x69	; 105
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	20 63       	ori	r18, 0x30	; 48
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
     ab2:	8d e3       	ldi	r24, 0x3D	; 61
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	24 e0       	ldi	r18, 0x04	; 4
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
	
	//Initialize Booleans
	flagGoToSleep=fFalse;
     abc:	10 92 5b 01 	sts	0x015B, r1
	flagAllStats=fFalse;
     ac0:	10 92 58 01 	sts	0x0158, r1
	flagHumidity=fFalse;
     ac4:	10 92 5c 01 	sts	0x015C, r1
	flagTemp=fFalse;
     ac8:	10 92 59 01 	sts	0x0159, r1
	flagReceivePi=fFalse;
     acc:	10 92 5a 01 	sts	0x015A, r1
}
     ad0:	26 96       	adiw	r28, 0x06	; 6
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <InitTimer2>:

/**********************************************************************************************************************************/
void InitTimer2(){
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
     aea:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
     aec:	84 e6       	ldi	r24, 0x64	; 100
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	24 e6       	ldi	r18, 0x64	; 100
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	2f 7b       	andi	r18, 0xBF	; 191
     afa:	fc 01       	movw	r30, r24
     afc:	20 83       	st	Z, r18
	Wait_ms(1);	
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
     b06:	81 eb       	ldi	r24, 0xB1	; 177
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	21 eb       	ldi	r18, 0xB1	; 177
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	27 60       	ori	r18, 0x07	; 7
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
     b18:	00 00       	nop
     b1a:	86 eb       	ldi	r24, 0xB6	; 182
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	fc 01       	movw	r30, r24
     b20:	80 81       	ld	r24, Z
     b22:	88 2f       	mov	r24, r24
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	81 71       	andi	r24, 0x11	; 17
     b28:	90 70       	andi	r25, 0x00	; 0
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	b1 f7       	brne	.-20     	; 0xb1a <InitTimer2+0x38>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
     b2e:	87 e3       	ldi	r24, 0x37	; 55
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	21 e0       	ldi	r18, 0x01	; 1
     b34:	fc 01       	movw	r30, r24
     b36:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
     b38:	80 e7       	ldi	r24, 0x70	; 112
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	21 e0       	ldi	r18, 0x01	; 1
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
     b42:	78 94       	sei
}
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <GetTempTI>:
/**********************************************************************************************************************************/

double GetTempTI(unsigned int ubrr)
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	28 97       	sbiw	r28, 0x08	; 8
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	98 87       	std	Y+8, r25	; 0x08
     b60:	8f 83       	std	Y+7, r24	; 0x07
	WORD tempDataTI = 0;
     b62:	1a 82       	std	Y+2, r1	; 0x02
     b64:	19 82       	std	Y+1, r1	; 0x01
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
     b66:	84 e6       	ldi	r24, 0x64	; 100
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	24 e6       	ldi	r18, 0x64	; 100
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	2f 7e       	andi	r18, 0xEF	; 239
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
     b78:	8a e0       	ldi	r24, 0x0A	; 10
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	UBRR1 = 0;
     b80:	8c ec       	ldi	r24, 0xCC	; 204
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	fc 01       	movw	r30, r24
     b86:	11 82       	std	Z+1, r1	; 0x01
     b88:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	2a e2       	ldi	r18, 0x2A	; 42
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	f9 01       	movw	r30, r18
     b94:	20 81       	ld	r18, Z
     b96:	20 63       	ori	r18, 0x30	; 48
     b98:	fc 01       	movw	r30, r24
     b9a:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
     b9c:	8b e2       	ldi	r24, 0x2B	; 43
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	2b e2       	ldi	r18, 0x2B	; 43
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	f9 01       	movw	r30, r18
     ba6:	20 81       	ld	r18, Z
     ba8:	20 63       	ori	r18, 0x30	; 48
     baa:	fc 01       	movw	r30, r24
     bac:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
     bae:	8a ec       	ldi	r24, 0xCA	; 202
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	20 ec       	ldi	r18, 0xC0	; 192
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
     bb8:	89 ec       	ldi	r24, 0xC9	; 201
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	28 e1       	ldi	r18, 0x18	; 24
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
     bc2:	8c ec       	ldi	r24, 0xCC	; 204
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2f 81       	ldd	r18, Y+7	; 0x07
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
     bcc:	8d ec       	ldi	r24, 0xCD	; 205
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	2f 81       	ldd	r18, Y+7	; 0x07
     bd2:	38 85       	ldd	r19, Y+8	; 0x08
     bd4:	23 2f       	mov	r18, r19
     bd6:	33 27       	eor	r19, r19
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
     bdc:	00 00       	nop
     bde:	88 ec       	ldi	r24, 0xC8	; 200
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	80 81       	ld	r24, Z
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 72       	andi	r24, 0x20	; 32
     bec:	90 70       	andi	r25, 0x00	; 0
     bee:	00 97       	sbiw	r24, 0x00	; 0
     bf0:	b1 f3       	breq	.-20     	; 0xbde <GetTempTI+0x94>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2b e2       	ldi	r18, 0x2B	; 43
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	f9 01       	movw	r30, r18
     bfc:	20 81       	ld	r18, Z
     bfe:	2f 7d       	andi	r18, 0xDF	; 223
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
     c04:	8e ec       	ldi	r24, 0xCE	; 206
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	fc 01       	movw	r30, r24
     c0a:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
     c0c:	00 00       	nop
     c0e:	88 ec       	ldi	r24, 0xC8	; 200
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	fc 01       	movw	r30, r24
     c14:	80 81       	ld	r24, Z
     c16:	88 23       	and	r24, r24
     c18:	d4 f7       	brge	.-12     	; 0xc0e <GetTempTI+0xc4>
	tempDataTI = (UDR1 << 8);	//first byte of data
     c1a:	8e ec       	ldi	r24, 0xCE	; 206
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	fc 01       	movw	r30, r24
     c20:	80 81       	ld	r24, Z
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	98 2f       	mov	r25, r24
     c28:	88 27       	eor	r24, r24
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
     c2e:	8e ec       	ldi	r24, 0xCE	; 206
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	fc 01       	movw	r30, r24
     c34:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
     c36:	00 00       	nop
     c38:	88 ec       	ldi	r24, 0xC8	; 200
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	88 23       	and	r24, r24
     c42:	d4 f7       	brge	.-12     	; 0xc38 <GetTempTI+0xee>
	tempDataTI |= UDR1;	
     c44:	8e ec       	ldi	r24, 0xCE	; 206
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc 01       	movw	r30, r24
     c4a:	80 81       	ld	r24, Z
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	29 81       	ldd	r18, Y+1	; 0x01
     c52:	3a 81       	ldd	r19, Y+2	; 0x02
     c54:	82 2b       	or	r24, r18
     c56:	93 2b       	or	r25, r19
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
     c5c:	8b e2       	ldi	r24, 0x2B	; 43
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	2b e2       	ldi	r18, 0x2B	; 43
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	f9 01       	movw	r30, r18
     c66:	20 81       	ld	r18, Z
     c68:	20 63       	ori	r18, 0x30	; 48
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
     c6e:	8a ec       	ldi	r24, 0xCA	; 202
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	fc 01       	movw	r30, r24
     c74:	10 82       	st	Z, r1
	UCSR1B = 0;
     c76:	89 ec       	ldi	r24, 0xC9	; 201
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	fc 01       	movw	r30, r24
     c7c:	10 82       	st	Z, r1
	UCSR1A = 0;
     c7e:	88 ec       	ldi	r24, 0xC8	; 200
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	fc 01       	movw	r30, r24
     c84:	10 82       	st	Z, r1
	UBRR1L = 0;
     c86:	8c ec       	ldi	r24, 0xCC	; 204
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	fc 01       	movw	r30, r24
     c8c:	10 82       	st	Z, r1
	UBRR1H = 0;
     c8e:	8d ec       	ldi	r24, 0xCD	; 205
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	fc 01       	movw	r30, r24
     c94:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
     c96:	84 e6       	ldi	r24, 0x64	; 100
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	20 61       	ori	r18, 0x10	; 16
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	double dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	96 95       	lsr	r25
     cae:	87 95       	ror	r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	cc 01       	movw	r24, r24
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatunsisf>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	5d e3       	ldi	r21, 0x3D	; 61
     cd2:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	bc 01       	movw	r22, r24
     cdc:	cd 01       	movw	r24, r26
     cde:	26 e6       	ldi	r18, 0x66	; 102
     ce0:	36 e6       	ldi	r19, 0x66	; 102
     ce2:	46 ee       	ldi	r20, 0xE6	; 230
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	52 e4       	ldi	r21, 0x42	; 66
     cfa:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	ad 83       	std	Y+5, r26	; 0x05
     d08:	be 83       	std	Y+6, r27	; 0x06

	return dataTI;	
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	ad 81       	ldd	r26, Y+5	; 0x05
     d10:	be 81       	ldd	r27, Y+6	; 0x06
		
}
     d12:	bc 01       	movw	r22, r24
     d14:	cd 01       	movw	r24, r26
     d16:	28 96       	adiw	r28, 0x08	; 8
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	de bf       	out	0x3e, r29	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	cd bf       	out	0x3d, r28	; 61
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	08 95       	ret

00000d28 <GetTempTherm>:

/**********************************************************************************************************************************/
double  GetTempTherm()
{
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	28 97       	sbiw	r28, 0x08	; 8
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
     d3c:	1c 82       	std	Y+4, r1	; 0x04
     d3e:	1b 82       	std	Y+3, r1	; 0x03
	double dataTherm = 0;
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	dc 01       	movw	r26, r24
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	9e 83       	std	Y+6, r25	; 0x06
     d4a:	af 83       	std	Y+7, r26	; 0x07
     d4c:	b8 87       	std	Y+8, r27	; 0x08
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
     d4e:	84 e6       	ldi	r24, 0x64	; 100
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	24 e6       	ldi	r18, 0x64	; 100
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	f9 01       	movw	r30, r18
     d58:	20 81       	ld	r18, Z
     d5a:	2e 7f       	andi	r18, 0xFE	; 254
     d5c:	fc 01       	movw	r30, r24
     d5e:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
     d60:	8c e7       	ldi	r24, 0x7C	; 124
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	2c e7       	ldi	r18, 0x7C	; 124
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	f9 01       	movw	r30, r18
     d6a:	20 81       	ld	r18, Z
     d6c:	22 64       	ori	r18, 0x42	; 66
     d6e:	fc 01       	movw	r30, r24
     d70:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
     d72:	8a e7       	ldi	r24, 0x7A	; 122
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	2a e7       	ldi	r18, 0x7A	; 122
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	f9 01       	movw	r30, r18
     d7c:	20 81       	ld	r18, Z
     d7e:	27 68       	ori	r18, 0x87	; 135
     d80:	fc 01       	movw	r30, r24
     d82:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     d84:	8e e7       	ldi	r24, 0x7E	; 126
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	2b ef       	ldi	r18, 0xFB	; 251
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
	Wait_ms(10);
     d8e:	8a e0       	ldi	r24, 0x0A	; 10
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     d96:	1a 82       	std	Y+2, r1	; 0x02
     d98:	19 82       	std	Y+1, r1	; 0x01
     d9a:	19 c0       	rjmp	.+50     	; 0xdce <GetTempTherm+0xa6>
     d9c:	8a e7       	ldi	r24, 0x7A	; 122
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2a e7       	ldi	r18, 0x7A	; 122
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	f9 01       	movw	r30, r18
     da6:	20 81       	ld	r18, Z
     da8:	20 64       	ori	r18, 0x40	; 64
     daa:	fc 01       	movw	r30, r24
     dac:	20 83       	st	Z, r18
     dae:	00 00       	nop
     db0:	8a e7       	ldi	r24, 0x7A	; 122
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	80 74       	andi	r24, 0x40	; 64
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	b1 f7       	brne	.-20     	; 0xdb0 <GetTempTherm+0x88>
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	01 96       	adiw	r24, 0x01	; 1
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	91 05       	cpc	r25, r1
     dd6:	14 f3       	brlt	.-60     	; 0xd9c <GetTempTherm+0x74>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
     dd8:	88 e7       	ldi	r24, 0x78	; 120
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	fc 01       	movw	r30, r24
     dde:	80 81       	ld	r24, Z
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
     de8:	89 e7       	ldi	r24, 0x79	; 121
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	80 81       	ld	r24, Z
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	98 2f       	mov	r25, r24
     df6:	88 27       	eor	r24, r24
     df8:	2b 81       	ldd	r18, Y+3	; 0x03
     dfa:	3c 81       	ldd	r19, Y+4	; 0x04
     dfc:	82 2b       	or	r24, r18
     dfe:	93 2b       	or	r25, r19
     e00:	9c 83       	std	Y+4, r25	; 0x04
     e02:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     e04:	8a e7       	ldi	r24, 0x7A	; 122
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	fc 01       	movw	r30, r24
     e0a:	10 82       	st	Z, r1
	ADMUX = 0;
     e0c:	8c e7       	ldi	r24, 0x7C	; 124
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	fc 01       	movw	r30, r24
     e12:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
     e14:	8e e7       	ldi	r24, 0x7E	; 126
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	2e e7       	ldi	r18, 0x7E	; 126
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	f9 01       	movw	r30, r18
     e1e:	20 81       	ld	r18, Z
     e20:	24 60       	ori	r18, 0x04	; 4
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     e26:	84 e6       	ldi	r24, 0x64	; 100
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	24 e6       	ldi	r18, 0x64	; 100
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	f9 01       	movw	r30, r18
     e30:	20 81       	ld	r18, Z
     e32:	21 60       	ori	r18, 0x01	; 1
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
     e38:	22 ef       	ldi	r18, 0xF2	; 242
     e3a:	32 e0       	ldi	r19, 0x02	; 2
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	9c 81       	ldd	r25, Y+4	; 0x04
     e40:	a9 01       	movw	r20, r18
     e42:	48 1b       	sub	r20, r24
     e44:	59 0b       	sbc	r21, r25
     e46:	ca 01       	movw	r24, r20
     e48:	9c 83       	std	Y+4, r25	; 0x04
     e4a:	8b 83       	std	Y+3, r24	; 0x03
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	cc 01       	movw	r24, r24
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	bc 01       	movw	r22, r24
     e58:	cd 01       	movw	r24, r26
     e5a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatunsisf>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	28 e4       	ldi	r18, 0x48	; 72
     e68:	31 ee       	ldi	r19, 0xE1	; 225
     e6a:	4c e1       	ldi	r20, 0x1C	; 28
     e6c:	51 e4       	ldi	r21, 0x41	; 65
     e6e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__divsf3>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	8d 83       	std	Y+5, r24	; 0x05
     e78:	9e 83       	std	Y+6, r25	; 0x06
     e7a:	af 83       	std	Y+7, r26	; 0x07
     e7c:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
     e7e:	6d 81       	ldd	r22, Y+5	; 0x05
     e80:	7e 81       	ldd	r23, Y+6	; 0x06
     e82:	8f 81       	ldd	r24, Y+7	; 0x07
     e84:	98 85       	ldd	r25, Y+8	; 0x08
     e86:	26 e6       	ldi	r18, 0x66	; 102
     e88:	36 e6       	ldi	r19, 0x66	; 102
     e8a:	46 ee       	ldi	r20, 0xE6	; 230
     e8c:	5f e3       	ldi	r21, 0x3F	; 63
     e8e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	52 e4       	ldi	r21, 0x42	; 66
     ea2:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	8d 83       	std	Y+5, r24	; 0x05
     eac:	9e 83       	std	Y+6, r25	; 0x06
     eae:	af 83       	std	Y+7, r26	; 0x07
     eb0:	b8 87       	std	Y+8, r27	; 0x08
	
	return dataTherm;
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	af 81       	ldd	r26, Y+7	; 0x07
     eb8:	b8 85       	ldd	r27, Y+8	; 0x08

		
}
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	28 96       	adiw	r28, 0x08	; 8
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	08 95       	ret

00000ed0 <GetHumidity>:

/**********************************************************************************************************************************/	
double GetHumidity()
{
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	28 97       	sbiw	r28, 0x08	; 8
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
     ee4:	84 e6       	ldi	r24, 0x64	; 100
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	24 e6       	ldi	r18, 0x64	; 100
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	f9 01       	movw	r30, r18
     eee:	20 81       	ld	r18, Z
     ef0:	2e 7f       	andi	r18, 0xFE	; 254
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
	Wait_ms(10);						
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
     efe:	8c e7       	ldi	r24, 0x7C	; 124
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	2c e7       	ldi	r18, 0x7C	; 124
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	f9 01       	movw	r30, r18
     f08:	20 81       	ld	r18, Z
     f0a:	21 64       	ori	r18, 0x41	; 65
     f0c:	fc 01       	movw	r30, r24
     f0e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
     f10:	8a e7       	ldi	r24, 0x7A	; 122
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	2a e7       	ldi	r18, 0x7A	; 122
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	f9 01       	movw	r30, r18
     f1a:	20 81       	ld	r18, Z
     f1c:	27 68       	ori	r18, 0x87	; 135
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     f22:	8e e7       	ldi	r24, 0x7E	; 126
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	2d ef       	ldi	r18, 0xFD	; 253
     f28:	fc 01       	movw	r30, r24
     f2a:	20 83       	st	Z, r18
	Wait_ms(10);
     f2c:	8a e0       	ldi	r24, 0x0A	; 10
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     f34:	1a 82       	std	Y+2, r1	; 0x02
     f36:	19 82       	std	Y+1, r1	; 0x01
     f38:	19 c0       	rjmp	.+50     	; 0xf6c <GetHumidity+0x9c>
     f3a:	8a e7       	ldi	r24, 0x7A	; 122
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	2a e7       	ldi	r18, 0x7A	; 122
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	f9 01       	movw	r30, r18
     f44:	20 81       	ld	r18, Z
     f46:	20 64       	ori	r18, 0x40	; 64
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	00 00       	nop
     f4e:	8a e7       	ldi	r24, 0x7A	; 122
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	fc 01       	movw	r30, r24
     f54:	80 81       	ld	r24, Z
     f56:	88 2f       	mov	r24, r24
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	80 74       	andi	r24, 0x40	; 64
     f5c:	90 70       	andi	r25, 0x00	; 0
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	b1 f7       	brne	.-20     	; 0xf4e <GetHumidity+0x7e>
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	91 05       	cpc	r25, r1
     f74:	14 f3       	brlt	.-60     	; 0xf3a <GetHumidity+0x6a>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
     f76:	88 e7       	ldi	r24, 0x78	; 120
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	fc 01       	movw	r30, r24
     f7c:	80 81       	ld	r24, Z
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9c 83       	std	Y+4, r25	; 0x04
     f84:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
     f86:	89 e7       	ldi	r24, 0x79	; 121
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	98 2f       	mov	r25, r24
     f94:	88 27       	eor	r24, r24
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	82 2b       	or	r24, r18
     f9c:	93 2b       	or	r25, r19
     f9e:	9c 83       	std	Y+4, r25	; 0x04
     fa0:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     fa2:	8a e7       	ldi	r24, 0x7A	; 122
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	fc 01       	movw	r30, r24
     fa8:	10 82       	st	Z, r1
	ADMUX = 0;
     faa:	8c e7       	ldi	r24, 0x7C	; 124
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
     fb2:	8e e7       	ldi	r24, 0x7E	; 126
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	2e e7       	ldi	r18, 0x7E	; 126
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	f9 01       	movw	r30, r18
     fbc:	20 81       	ld	r18, Z
     fbe:	22 60       	ori	r18, 0x02	; 2
     fc0:	fc 01       	movw	r30, r24
     fc2:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     fc4:	84 e6       	ldi	r24, 0x64	; 100
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	24 e6       	ldi	r18, 0x64	; 100
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	f9 01       	movw	r30, r18
     fce:	20 81       	ld	r18, Z
     fd0:	21 60       	ori	r18, 0x01	; 1
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18

	//Get actual humidity
	double humidityResultDouble = (double)humidityResult;
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	cc 01       	movw	r24, r24
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	bc 01       	movw	r22, r24
     fe2:	cd 01       	movw	r24, r26
     fe4:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatunsisf>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	9e 83       	std	Y+6, r25	; 0x06
     ff0:	af 83       	std	Y+7, r26	; 0x07
     ff2:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
     ff4:	6d 81       	ldd	r22, Y+5	; 0x05
     ff6:	7e 81       	ldd	r23, Y+6	; 0x06
     ff8:	8f 81       	ldd	r24, Y+7	; 0x07
     ffa:	98 85       	ldd	r25, Y+8	; 0x08
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4b e1       	ldi	r20, 0x1B	; 27
    1002:	53 e4       	ldi	r21, 0x43	; 67
    1004:	0e 94 0c 09 	call	0x1218	; 0x1218 <__subsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	8d 83       	std	Y+5, r24	; 0x05
    100e:	9e 83       	std	Y+6, r25	; 0x06
    1010:	af 83       	std	Y+7, r26	; 0x07
    1012:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble /= HUMIDITY_CONVERTER;	//get actual humidity	
    1014:	6d 81       	ldd	r22, Y+5	; 0x05
    1016:	7e 81       	ldd	r23, Y+6	; 0x06
    1018:	8f 81       	ldd	r24, Y+7	; 0x07
    101a:	98 85       	ldd	r25, Y+8	; 0x08
    101c:	23 e7       	ldi	r18, 0x73	; 115
    101e:	38 e6       	ldi	r19, 0x68	; 104
    1020:	4d e9       	ldi	r20, 0x9D	; 157
    1022:	50 e4       	ldi	r21, 0x40	; 64
    1024:	0e 94 71 09 	call	0x12e2	; 0x12e2 <__divsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8d 83       	std	Y+5, r24	; 0x05
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	af 83       	std	Y+7, r26	; 0x07
    1032:	b8 87       	std	Y+8, r27	; 0x08
	
	return humidityResultDouble;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	af 81       	ldd	r26, Y+7	; 0x07
    103a:	b8 85       	ldd	r27, Y+8	; 0x08
}
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	28 96       	adiw	r28, 0x08	; 8
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <GetTempADT>:
/**********************************************************************************************************************************/	

double GetTempADT()
{
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	00 d0       	rcall	.+0      	; 0x1058 <GetTempADT+0x6>
    1058:	00 d0       	rcall	.+0      	; 0x105a <GetTempADT+0x8>
    105a:	00 d0       	rcall	.+0      	; 0x105c <GetTempADT+0xa>
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
	WORD rawDataAD = 0;
    1060:	1a 82       	std	Y+2, r1	; 0x02
    1062:	19 82       	std	Y+1, r1	; 0x01
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
    1064:	84 e6       	ldi	r24, 0x64	; 100
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	24 e6       	ldi	r18, 0x64	; 100
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	2b 7f       	andi	r18, 0xFB	; 251
    1072:	fc 01       	movw	r30, r24
    1074:	20 83       	st	Z, r18
	Wait_ms(10);
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
    107e:	85 e2       	ldi	r24, 0x25	; 37
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	25 e2       	ldi	r18, 0x25	; 37
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	f9 01       	movw	r30, r18
    1088:	20 81       	ld	r18, Z
    108a:	2f 7e       	andi	r18, 0xEF	; 239
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
    1090:	8e e4       	ldi	r24, 0x4E	; 78
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	fc 01       	movw	r30, r24
    1096:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
    1098:	00 00       	nop
    109a:	8d e4       	ldi	r24, 0x4D	; 77
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	fc 01       	movw	r30, r24
    10a0:	80 81       	ld	r24, Z
    10a2:	88 23       	and	r24, r24
    10a4:	d4 f7       	brge	.-12     	; 0x109a <GetTempADT+0x48>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
    10a6:	8e e4       	ldi	r24, 0x4E	; 78
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	fc 01       	movw	r30, r24
    10ac:	80 81       	ld	r24, Z
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	98 2f       	mov	r25, r24
    10b4:	88 27       	eor	r24, r24
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
    10ba:	8e e4       	ldi	r24, 0x4E	; 78
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	fc 01       	movw	r30, r24
    10c0:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
    10c2:	00 00       	nop
    10c4:	8d e4       	ldi	r24, 0x4D	; 77
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	fc 01       	movw	r30, r24
    10ca:	80 81       	ld	r24, Z
    10cc:	88 23       	and	r24, r24
    10ce:	d4 f7       	brge	.-12     	; 0x10c4 <GetTempADT+0x72>
	rawDataAD |= SPDR0;					//get second byte, store in low order
    10d0:	8e e4       	ldi	r24, 0x4E	; 78
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	fc 01       	movw	r30, r24
    10d6:	80 81       	ld	r24, Z
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	29 81       	ldd	r18, Y+1	; 0x01
    10de:	3a 81       	ldd	r19, Y+2	; 0x02
    10e0:	82 2b       	or	r24, r18
    10e2:	93 2b       	or	r25, r19
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
    10e8:	84 e6       	ldi	r24, 0x64	; 100
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	24 e6       	ldi	r18, 0x64	; 100
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	24 60       	ori	r18, 0x04	; 4
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
    10fa:	85 e2       	ldi	r24, 0x25	; 37
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	25 e2       	ldi	r18, 0x25	; 37
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	20 69       	ori	r18, 0x90	; 144
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
    110c:	8a e0       	ldi	r24, 0x0A	; 10
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Wait_ms>
	
	//Convert number into Celsius, then Fahrenheit
	double dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	9a 81       	ldd	r25, Y+2	; 0x02
    1118:	cc 01       	movw	r24, r24
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatunsisf>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	5d e3       	ldi	r21, 0x3D	; 61
    1136:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	bc 01       	movw	r22, r24
    1140:	cd 01       	movw	r24, r26
    1142:	26 e6       	ldi	r18, 0x66	; 102
    1144:	36 e6       	ldi	r19, 0x66	; 102
    1146:	46 ee       	ldi	r20, 0xE6	; 230
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	52 e4       	ldi	r21, 0x42	; 66
    115e:	0e 94 0d 09 	call	0x121a	; 0x121a <__addsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	8b 83       	std	Y+3, r24	; 0x03
    1168:	9c 83       	std	Y+4, r25	; 0x04
    116a:	ad 83       	std	Y+5, r26	; 0x05
    116c:	be 83       	std	Y+6, r27	; 0x06
	
	return dataAD;
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	ad 81       	ldd	r26, Y+5	; 0x05
    1174:	be 81       	ldd	r27, Y+6	; 0x06
}
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	26 96       	adiw	r28, 0x06	; 6
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	08 95       	ret

0000118c <ResetDebug>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	00 d0       	rcall	.+0      	; 0x1192 <ResetDebug+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
    1196:	88 e2       	ldi	r24, 0x28	; 40
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	90 81       	ld	r25, Z
    119e:	88 ef       	ldi	r24, 0xF8	; 248
    11a0:	89 27       	eor	r24, r25
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
    11aa:	88 e2       	ldi	r24, 0x28	; 40
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	28 e2       	ldi	r18, 0x28	; 40
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	f9 01       	movw	r30, r18
    11b4:	30 81       	ld	r19, Z
    11b6:	29 81       	ldd	r18, Y+1	; 0x01
    11b8:	23 23       	and	r18, r19
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
}
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <Wait_ms>:

/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <Wait_ms+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <Wait_ms+0x8>
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	9c 83       	std	Y+4, r25	; 0x04
    11d6:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
    11d8:	14 c0       	rjmp	.+40     	; 0x1202 <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
    11da:	1a 82       	std	Y+2, r1	; 0x02
    11dc:	19 82       	std	Y+1, r1	; 0x01
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <Wait_ms+0x24>
			asm volatile("nop");
    11e0:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	9a 81       	ldd	r25, Y+2	; 0x02
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	21 e0       	ldi	r18, 0x01	; 1
    11f2:	80 39       	cpi	r24, 0x90	; 144
    11f4:	92 07       	cpc	r25, r18
    11f6:	a0 f3       	brcs	.-24     	; 0x11e0 <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	41 f7       	brne	.-48     	; 0x11da <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	08 95       	ret

00001218 <__subsf3>:
    1218:	50 58       	subi	r21, 0x80	; 128

0000121a <__addsf3>:
    121a:	bb 27       	eor	r27, r27
    121c:	aa 27       	eor	r26, r26
    121e:	0e d0       	rcall	.+28     	; 0x123c <__addsf3x>
    1220:	1c c1       	rjmp	.+568    	; 0x145a <__fp_round>
    1222:	0d d1       	rcall	.+538    	; 0x143e <__fp_pscA>
    1224:	30 f0       	brcs	.+12     	; 0x1232 <__addsf3+0x18>
    1226:	12 d1       	rcall	.+548    	; 0x144c <__fp_pscB>
    1228:	20 f0       	brcs	.+8      	; 0x1232 <__addsf3+0x18>
    122a:	31 f4       	brne	.+12     	; 0x1238 <__addsf3+0x1e>
    122c:	9f 3f       	cpi	r25, 0xFF	; 255
    122e:	11 f4       	brne	.+4      	; 0x1234 <__addsf3+0x1a>
    1230:	1e f4       	brtc	.+6      	; 0x1238 <__addsf3+0x1e>
    1232:	02 c1       	rjmp	.+516    	; 0x1438 <__fp_nan>
    1234:	0e f4       	brtc	.+2      	; 0x1238 <__addsf3+0x1e>
    1236:	e0 95       	com	r30
    1238:	e7 fb       	bst	r30, 7
    123a:	f8 c0       	rjmp	.+496    	; 0x142c <__fp_inf>

0000123c <__addsf3x>:
    123c:	e9 2f       	mov	r30, r25
    123e:	1e d1       	rcall	.+572    	; 0x147c <__fp_split3>
    1240:	80 f3       	brcs	.-32     	; 0x1222 <__addsf3+0x8>
    1242:	ba 17       	cp	r27, r26
    1244:	62 07       	cpc	r22, r18
    1246:	73 07       	cpc	r23, r19
    1248:	84 07       	cpc	r24, r20
    124a:	95 07       	cpc	r25, r21
    124c:	18 f0       	brcs	.+6      	; 0x1254 <__addsf3x+0x18>
    124e:	71 f4       	brne	.+28     	; 0x126c <__addsf3x+0x30>
    1250:	9e f5       	brtc	.+102    	; 0x12b8 <__addsf3x+0x7c>
    1252:	36 c1       	rjmp	.+620    	; 0x14c0 <__fp_zero>
    1254:	0e f4       	brtc	.+2      	; 0x1258 <__addsf3x+0x1c>
    1256:	e0 95       	com	r30
    1258:	0b 2e       	mov	r0, r27
    125a:	ba 2f       	mov	r27, r26
    125c:	a0 2d       	mov	r26, r0
    125e:	0b 01       	movw	r0, r22
    1260:	b9 01       	movw	r22, r18
    1262:	90 01       	movw	r18, r0
    1264:	0c 01       	movw	r0, r24
    1266:	ca 01       	movw	r24, r20
    1268:	a0 01       	movw	r20, r0
    126a:	11 24       	eor	r1, r1
    126c:	ff 27       	eor	r31, r31
    126e:	59 1b       	sub	r21, r25
    1270:	99 f0       	breq	.+38     	; 0x1298 <__addsf3x+0x5c>
    1272:	59 3f       	cpi	r21, 0xF9	; 249
    1274:	50 f4       	brcc	.+20     	; 0x128a <__addsf3x+0x4e>
    1276:	50 3e       	cpi	r21, 0xE0	; 224
    1278:	68 f1       	brcs	.+90     	; 0x12d4 <__addsf3x+0x98>
    127a:	1a 16       	cp	r1, r26
    127c:	f0 40       	sbci	r31, 0x00	; 0
    127e:	a2 2f       	mov	r26, r18
    1280:	23 2f       	mov	r18, r19
    1282:	34 2f       	mov	r19, r20
    1284:	44 27       	eor	r20, r20
    1286:	58 5f       	subi	r21, 0xF8	; 248
    1288:	f3 cf       	rjmp	.-26     	; 0x1270 <__addsf3x+0x34>
    128a:	46 95       	lsr	r20
    128c:	37 95       	ror	r19
    128e:	27 95       	ror	r18
    1290:	a7 95       	ror	r26
    1292:	f0 40       	sbci	r31, 0x00	; 0
    1294:	53 95       	inc	r21
    1296:	c9 f7       	brne	.-14     	; 0x128a <__addsf3x+0x4e>
    1298:	7e f4       	brtc	.+30     	; 0x12b8 <__addsf3x+0x7c>
    129a:	1f 16       	cp	r1, r31
    129c:	ba 0b       	sbc	r27, r26
    129e:	62 0b       	sbc	r22, r18
    12a0:	73 0b       	sbc	r23, r19
    12a2:	84 0b       	sbc	r24, r20
    12a4:	ba f0       	brmi	.+46     	; 0x12d4 <__addsf3x+0x98>
    12a6:	91 50       	subi	r25, 0x01	; 1
    12a8:	a1 f0       	breq	.+40     	; 0x12d2 <__addsf3x+0x96>
    12aa:	ff 0f       	add	r31, r31
    12ac:	bb 1f       	adc	r27, r27
    12ae:	66 1f       	adc	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	c2 f7       	brpl	.-16     	; 0x12a6 <__addsf3x+0x6a>
    12b6:	0e c0       	rjmp	.+28     	; 0x12d4 <__addsf3x+0x98>
    12b8:	ba 0f       	add	r27, r26
    12ba:	62 1f       	adc	r22, r18
    12bc:	73 1f       	adc	r23, r19
    12be:	84 1f       	adc	r24, r20
    12c0:	48 f4       	brcc	.+18     	; 0x12d4 <__addsf3x+0x98>
    12c2:	87 95       	ror	r24
    12c4:	77 95       	ror	r23
    12c6:	67 95       	ror	r22
    12c8:	b7 95       	ror	r27
    12ca:	f7 95       	ror	r31
    12cc:	9e 3f       	cpi	r25, 0xFE	; 254
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__addsf3x+0x96>
    12d0:	b3 cf       	rjmp	.-154    	; 0x1238 <__addsf3+0x1e>
    12d2:	93 95       	inc	r25
    12d4:	88 0f       	add	r24, r24
    12d6:	08 f0       	brcs	.+2      	; 0x12da <__addsf3x+0x9e>
    12d8:	99 27       	eor	r25, r25
    12da:	ee 0f       	add	r30, r30
    12dc:	97 95       	ror	r25
    12de:	87 95       	ror	r24
    12e0:	08 95       	ret

000012e2 <__divsf3>:
    12e2:	0c d0       	rcall	.+24     	; 0x12fc <__divsf3x>
    12e4:	ba c0       	rjmp	.+372    	; 0x145a <__fp_round>
    12e6:	b2 d0       	rcall	.+356    	; 0x144c <__fp_pscB>
    12e8:	40 f0       	brcs	.+16     	; 0x12fa <__divsf3+0x18>
    12ea:	a9 d0       	rcall	.+338    	; 0x143e <__fp_pscA>
    12ec:	30 f0       	brcs	.+12     	; 0x12fa <__divsf3+0x18>
    12ee:	21 f4       	brne	.+8      	; 0x12f8 <__divsf3+0x16>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	19 f0       	breq	.+6      	; 0x12fa <__divsf3+0x18>
    12f4:	9b c0       	rjmp	.+310    	; 0x142c <__fp_inf>
    12f6:	51 11       	cpse	r21, r1
    12f8:	e4 c0       	rjmp	.+456    	; 0x14c2 <__fp_szero>
    12fa:	9e c0       	rjmp	.+316    	; 0x1438 <__fp_nan>

000012fc <__divsf3x>:
    12fc:	bf d0       	rcall	.+382    	; 0x147c <__fp_split3>
    12fe:	98 f3       	brcs	.-26     	; 0x12e6 <__divsf3+0x4>

00001300 <__divsf3_pse>:
    1300:	99 23       	and	r25, r25
    1302:	c9 f3       	breq	.-14     	; 0x12f6 <__divsf3+0x14>
    1304:	55 23       	and	r21, r21
    1306:	b1 f3       	breq	.-20     	; 0x12f4 <__divsf3+0x12>
    1308:	95 1b       	sub	r25, r21
    130a:	55 0b       	sbc	r21, r21
    130c:	bb 27       	eor	r27, r27
    130e:	aa 27       	eor	r26, r26
    1310:	62 17       	cp	r22, r18
    1312:	73 07       	cpc	r23, r19
    1314:	84 07       	cpc	r24, r20
    1316:	38 f0       	brcs	.+14     	; 0x1326 <__divsf3_pse+0x26>
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	22 0f       	add	r18, r18
    131e:	33 1f       	adc	r19, r19
    1320:	44 1f       	adc	r20, r20
    1322:	aa 1f       	adc	r26, r26
    1324:	a9 f3       	breq	.-22     	; 0x1310 <__divsf3_pse+0x10>
    1326:	33 d0       	rcall	.+102    	; 0x138e <__divsf3_pse+0x8e>
    1328:	0e 2e       	mov	r0, r30
    132a:	3a f0       	brmi	.+14     	; 0x133a <__divsf3_pse+0x3a>
    132c:	e0 e8       	ldi	r30, 0x80	; 128
    132e:	30 d0       	rcall	.+96     	; 0x1390 <__divsf3_pse+0x90>
    1330:	91 50       	subi	r25, 0x01	; 1
    1332:	50 40       	sbci	r21, 0x00	; 0
    1334:	e6 95       	lsr	r30
    1336:	00 1c       	adc	r0, r0
    1338:	ca f7       	brpl	.-14     	; 0x132c <__divsf3_pse+0x2c>
    133a:	29 d0       	rcall	.+82     	; 0x138e <__divsf3_pse+0x8e>
    133c:	fe 2f       	mov	r31, r30
    133e:	27 d0       	rcall	.+78     	; 0x138e <__divsf3_pse+0x8e>
    1340:	66 0f       	add	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	bb 1f       	adc	r27, r27
    1348:	26 17       	cp	r18, r22
    134a:	37 07       	cpc	r19, r23
    134c:	48 07       	cpc	r20, r24
    134e:	ab 07       	cpc	r26, r27
    1350:	b0 e8       	ldi	r27, 0x80	; 128
    1352:	09 f0       	breq	.+2      	; 0x1356 <__divsf3_pse+0x56>
    1354:	bb 0b       	sbc	r27, r27
    1356:	80 2d       	mov	r24, r0
    1358:	bf 01       	movw	r22, r30
    135a:	ff 27       	eor	r31, r31
    135c:	93 58       	subi	r25, 0x83	; 131
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	2a f0       	brmi	.+10     	; 0x136c <__divsf3_pse+0x6c>
    1362:	9e 3f       	cpi	r25, 0xFE	; 254
    1364:	51 05       	cpc	r21, r1
    1366:	68 f0       	brcs	.+26     	; 0x1382 <__divsf3_pse+0x82>
    1368:	61 c0       	rjmp	.+194    	; 0x142c <__fp_inf>
    136a:	ab c0       	rjmp	.+342    	; 0x14c2 <__fp_szero>
    136c:	5f 3f       	cpi	r21, 0xFF	; 255
    136e:	ec f3       	brlt	.-6      	; 0x136a <__divsf3_pse+0x6a>
    1370:	98 3e       	cpi	r25, 0xE8	; 232
    1372:	dc f3       	brlt	.-10     	; 0x136a <__divsf3_pse+0x6a>
    1374:	86 95       	lsr	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b7 95       	ror	r27
    137c:	f7 95       	ror	r31
    137e:	9f 5f       	subi	r25, 0xFF	; 255
    1380:	c9 f7       	brne	.-14     	; 0x1374 <__divsf3_pse+0x74>
    1382:	88 0f       	add	r24, r24
    1384:	91 1d       	adc	r25, r1
    1386:	96 95       	lsr	r25
    1388:	87 95       	ror	r24
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret
    138e:	e1 e0       	ldi	r30, 0x01	; 1
    1390:	66 0f       	add	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	88 1f       	adc	r24, r24
    1396:	bb 1f       	adc	r27, r27
    1398:	62 17       	cp	r22, r18
    139a:	73 07       	cpc	r23, r19
    139c:	84 07       	cpc	r24, r20
    139e:	ba 07       	cpc	r27, r26
    13a0:	20 f0       	brcs	.+8      	; 0x13aa <__divsf3_pse+0xaa>
    13a2:	62 1b       	sub	r22, r18
    13a4:	73 0b       	sbc	r23, r19
    13a6:	84 0b       	sbc	r24, r20
    13a8:	ba 0b       	sbc	r27, r26
    13aa:	ee 1f       	adc	r30, r30
    13ac:	88 f7       	brcc	.-30     	; 0x1390 <__divsf3_pse+0x90>
    13ae:	e0 95       	com	r30
    13b0:	08 95       	ret

000013b2 <__floatunsisf>:
    13b2:	e8 94       	clt
    13b4:	09 c0       	rjmp	.+18     	; 0x13c8 <__floatsisf+0x12>

000013b6 <__floatsisf>:
    13b6:	97 fb       	bst	r25, 7
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__floatsisf+0x12>
    13ba:	90 95       	com	r25
    13bc:	80 95       	com	r24
    13be:	70 95       	com	r23
    13c0:	61 95       	neg	r22
    13c2:	7f 4f       	sbci	r23, 0xFF	; 255
    13c4:	8f 4f       	sbci	r24, 0xFF	; 255
    13c6:	9f 4f       	sbci	r25, 0xFF	; 255
    13c8:	99 23       	and	r25, r25
    13ca:	a9 f0       	breq	.+42     	; 0x13f6 <__floatsisf+0x40>
    13cc:	f9 2f       	mov	r31, r25
    13ce:	96 e9       	ldi	r25, 0x96	; 150
    13d0:	bb 27       	eor	r27, r27
    13d2:	93 95       	inc	r25
    13d4:	f6 95       	lsr	r31
    13d6:	87 95       	ror	r24
    13d8:	77 95       	ror	r23
    13da:	67 95       	ror	r22
    13dc:	b7 95       	ror	r27
    13de:	f1 11       	cpse	r31, r1
    13e0:	f8 cf       	rjmp	.-16     	; 0x13d2 <__floatsisf+0x1c>
    13e2:	fa f4       	brpl	.+62     	; 0x1422 <__floatsisf+0x6c>
    13e4:	bb 0f       	add	r27, r27
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__floatsisf+0x36>
    13e8:	60 ff       	sbrs	r22, 0
    13ea:	1b c0       	rjmp	.+54     	; 0x1422 <__floatsisf+0x6c>
    13ec:	6f 5f       	subi	r22, 0xFF	; 255
    13ee:	7f 4f       	sbci	r23, 0xFF	; 255
    13f0:	8f 4f       	sbci	r24, 0xFF	; 255
    13f2:	9f 4f       	sbci	r25, 0xFF	; 255
    13f4:	16 c0       	rjmp	.+44     	; 0x1422 <__floatsisf+0x6c>
    13f6:	88 23       	and	r24, r24
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__floatsisf+0x48>
    13fa:	96 e9       	ldi	r25, 0x96	; 150
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <__floatsisf+0x6a>
    13fe:	77 23       	and	r23, r23
    1400:	21 f0       	breq	.+8      	; 0x140a <__floatsisf+0x54>
    1402:	9e e8       	ldi	r25, 0x8E	; 142
    1404:	87 2f       	mov	r24, r23
    1406:	76 2f       	mov	r23, r22
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <__floatsisf+0x5e>
    140a:	66 23       	and	r22, r22
    140c:	71 f0       	breq	.+28     	; 0x142a <__floatsisf+0x74>
    140e:	96 e8       	ldi	r25, 0x86	; 134
    1410:	86 2f       	mov	r24, r22
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	2a f0       	brmi	.+10     	; 0x1422 <__floatsisf+0x6c>
    1418:	9a 95       	dec	r25
    141a:	66 0f       	add	r22, r22
    141c:	77 1f       	adc	r23, r23
    141e:	88 1f       	adc	r24, r24
    1420:	da f7       	brpl	.-10     	; 0x1418 <__floatsisf+0x62>
    1422:	88 0f       	add	r24, r24
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	97 f9       	bld	r25, 7
    142a:	08 95       	ret

0000142c <__fp_inf>:
    142c:	97 f9       	bld	r25, 7
    142e:	9f 67       	ori	r25, 0x7F	; 127
    1430:	80 e8       	ldi	r24, 0x80	; 128
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	08 95       	ret

00001438 <__fp_nan>:
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	80 ec       	ldi	r24, 0xC0	; 192
    143c:	08 95       	ret

0000143e <__fp_pscA>:
    143e:	00 24       	eor	r0, r0
    1440:	0a 94       	dec	r0
    1442:	16 16       	cp	r1, r22
    1444:	17 06       	cpc	r1, r23
    1446:	18 06       	cpc	r1, r24
    1448:	09 06       	cpc	r0, r25
    144a:	08 95       	ret

0000144c <__fp_pscB>:
    144c:	00 24       	eor	r0, r0
    144e:	0a 94       	dec	r0
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	14 06       	cpc	r1, r20
    1456:	05 06       	cpc	r0, r21
    1458:	08 95       	ret

0000145a <__fp_round>:
    145a:	09 2e       	mov	r0, r25
    145c:	03 94       	inc	r0
    145e:	00 0c       	add	r0, r0
    1460:	11 f4       	brne	.+4      	; 0x1466 <__fp_round+0xc>
    1462:	88 23       	and	r24, r24
    1464:	52 f0       	brmi	.+20     	; 0x147a <__fp_round+0x20>
    1466:	bb 0f       	add	r27, r27
    1468:	40 f4       	brcc	.+16     	; 0x147a <__fp_round+0x20>
    146a:	bf 2b       	or	r27, r31
    146c:	11 f4       	brne	.+4      	; 0x1472 <__fp_round+0x18>
    146e:	60 ff       	sbrs	r22, 0
    1470:	04 c0       	rjmp	.+8      	; 0x147a <__fp_round+0x20>
    1472:	6f 5f       	subi	r22, 0xFF	; 255
    1474:	7f 4f       	sbci	r23, 0xFF	; 255
    1476:	8f 4f       	sbci	r24, 0xFF	; 255
    1478:	9f 4f       	sbci	r25, 0xFF	; 255
    147a:	08 95       	ret

0000147c <__fp_split3>:
    147c:	57 fd       	sbrc	r21, 7
    147e:	90 58       	subi	r25, 0x80	; 128
    1480:	44 0f       	add	r20, r20
    1482:	55 1f       	adc	r21, r21
    1484:	59 f0       	breq	.+22     	; 0x149c <__fp_splitA+0x10>
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	71 f0       	breq	.+28     	; 0x14a6 <__fp_splitA+0x1a>
    148a:	47 95       	ror	r20

0000148c <__fp_splitA>:
    148c:	88 0f       	add	r24, r24
    148e:	97 fb       	bst	r25, 7
    1490:	99 1f       	adc	r25, r25
    1492:	61 f0       	breq	.+24     	; 0x14ac <__fp_splitA+0x20>
    1494:	9f 3f       	cpi	r25, 0xFF	; 255
    1496:	79 f0       	breq	.+30     	; 0x14b6 <__fp_splitA+0x2a>
    1498:	87 95       	ror	r24
    149a:	08 95       	ret
    149c:	12 16       	cp	r1, r18
    149e:	13 06       	cpc	r1, r19
    14a0:	14 06       	cpc	r1, r20
    14a2:	55 1f       	adc	r21, r21
    14a4:	f2 cf       	rjmp	.-28     	; 0x148a <__fp_split3+0xe>
    14a6:	46 95       	lsr	r20
    14a8:	f1 df       	rcall	.-30     	; 0x148c <__fp_splitA>
    14aa:	08 c0       	rjmp	.+16     	; 0x14bc <__fp_splitA+0x30>
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	18 06       	cpc	r1, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	f1 cf       	rjmp	.-30     	; 0x1498 <__fp_splitA+0xc>
    14b6:	86 95       	lsr	r24
    14b8:	71 05       	cpc	r23, r1
    14ba:	61 05       	cpc	r22, r1
    14bc:	08 94       	sec
    14be:	08 95       	ret

000014c0 <__fp_zero>:
    14c0:	e8 94       	clt

000014c2 <__fp_szero>:
    14c2:	bb 27       	eor	r27, r27
    14c4:	66 27       	eor	r22, r22
    14c6:	77 27       	eor	r23, r23
    14c8:	cb 01       	movw	r24, r22
    14ca:	97 f9       	bld	r25, 7
    14cc:	08 95       	ret

000014ce <__mulsf3>:
    14ce:	0b d0       	rcall	.+22     	; 0x14e6 <__mulsf3x>
    14d0:	c4 cf       	rjmp	.-120    	; 0x145a <__fp_round>
    14d2:	b5 df       	rcall	.-150    	; 0x143e <__fp_pscA>
    14d4:	28 f0       	brcs	.+10     	; 0x14e0 <__mulsf3+0x12>
    14d6:	ba df       	rcall	.-140    	; 0x144c <__fp_pscB>
    14d8:	18 f0       	brcs	.+6      	; 0x14e0 <__mulsf3+0x12>
    14da:	95 23       	and	r25, r21
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <__mulsf3+0x12>
    14de:	a6 cf       	rjmp	.-180    	; 0x142c <__fp_inf>
    14e0:	ab cf       	rjmp	.-170    	; 0x1438 <__fp_nan>
    14e2:	11 24       	eor	r1, r1
    14e4:	ee cf       	rjmp	.-36     	; 0x14c2 <__fp_szero>

000014e6 <__mulsf3x>:
    14e6:	ca df       	rcall	.-108    	; 0x147c <__fp_split3>
    14e8:	a0 f3       	brcs	.-24     	; 0x14d2 <__mulsf3+0x4>

000014ea <__mulsf3_pse>:
    14ea:	95 9f       	mul	r25, r21
    14ec:	d1 f3       	breq	.-12     	; 0x14e2 <__mulsf3+0x14>
    14ee:	95 0f       	add	r25, r21
    14f0:	50 e0       	ldi	r21, 0x00	; 0
    14f2:	55 1f       	adc	r21, r21
    14f4:	62 9f       	mul	r22, r18
    14f6:	f0 01       	movw	r30, r0
    14f8:	72 9f       	mul	r23, r18
    14fa:	bb 27       	eor	r27, r27
    14fc:	f0 0d       	add	r31, r0
    14fe:	b1 1d       	adc	r27, r1
    1500:	63 9f       	mul	r22, r19
    1502:	aa 27       	eor	r26, r26
    1504:	f0 0d       	add	r31, r0
    1506:	b1 1d       	adc	r27, r1
    1508:	aa 1f       	adc	r26, r26
    150a:	64 9f       	mul	r22, r20
    150c:	66 27       	eor	r22, r22
    150e:	b0 0d       	add	r27, r0
    1510:	a1 1d       	adc	r26, r1
    1512:	66 1f       	adc	r22, r22
    1514:	82 9f       	mul	r24, r18
    1516:	22 27       	eor	r18, r18
    1518:	b0 0d       	add	r27, r0
    151a:	a1 1d       	adc	r26, r1
    151c:	62 1f       	adc	r22, r18
    151e:	73 9f       	mul	r23, r19
    1520:	b0 0d       	add	r27, r0
    1522:	a1 1d       	adc	r26, r1
    1524:	62 1f       	adc	r22, r18
    1526:	83 9f       	mul	r24, r19
    1528:	a0 0d       	add	r26, r0
    152a:	61 1d       	adc	r22, r1
    152c:	22 1f       	adc	r18, r18
    152e:	74 9f       	mul	r23, r20
    1530:	33 27       	eor	r19, r19
    1532:	a0 0d       	add	r26, r0
    1534:	61 1d       	adc	r22, r1
    1536:	23 1f       	adc	r18, r19
    1538:	84 9f       	mul	r24, r20
    153a:	60 0d       	add	r22, r0
    153c:	21 1d       	adc	r18, r1
    153e:	82 2f       	mov	r24, r18
    1540:	76 2f       	mov	r23, r22
    1542:	6a 2f       	mov	r22, r26
    1544:	11 24       	eor	r1, r1
    1546:	9f 57       	subi	r25, 0x7F	; 127
    1548:	50 40       	sbci	r21, 0x00	; 0
    154a:	8a f0       	brmi	.+34     	; 0x156e <__mulsf3_pse+0x84>
    154c:	e1 f0       	breq	.+56     	; 0x1586 <__mulsf3_pse+0x9c>
    154e:	88 23       	and	r24, r24
    1550:	4a f0       	brmi	.+18     	; 0x1564 <__mulsf3_pse+0x7a>
    1552:	ee 0f       	add	r30, r30
    1554:	ff 1f       	adc	r31, r31
    1556:	bb 1f       	adc	r27, r27
    1558:	66 1f       	adc	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	88 1f       	adc	r24, r24
    155e:	91 50       	subi	r25, 0x01	; 1
    1560:	50 40       	sbci	r21, 0x00	; 0
    1562:	a9 f7       	brne	.-22     	; 0x154e <__mulsf3_pse+0x64>
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	51 05       	cpc	r21, r1
    1568:	70 f0       	brcs	.+28     	; 0x1586 <__mulsf3_pse+0x9c>
    156a:	60 cf       	rjmp	.-320    	; 0x142c <__fp_inf>
    156c:	aa cf       	rjmp	.-172    	; 0x14c2 <__fp_szero>
    156e:	5f 3f       	cpi	r21, 0xFF	; 255
    1570:	ec f3       	brlt	.-6      	; 0x156c <__mulsf3_pse+0x82>
    1572:	98 3e       	cpi	r25, 0xE8	; 232
    1574:	dc f3       	brlt	.-10     	; 0x156c <__mulsf3_pse+0x82>
    1576:	86 95       	lsr	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	b7 95       	ror	r27
    157e:	f7 95       	ror	r31
    1580:	e7 95       	ror	r30
    1582:	9f 5f       	subi	r25, 0xFF	; 255
    1584:	c1 f7       	brne	.-16     	; 0x1576 <__mulsf3_pse+0x8c>
    1586:	fe 2b       	or	r31, r30
    1588:	88 0f       	add	r24, r24
    158a:	91 1d       	adc	r25, r1
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret

00001594 <dtostrf>:
    1594:	ef 92       	push	r14
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	32 2f       	mov	r19, r18
    159e:	c0 2f       	mov	r28, r16
    15a0:	47 ff       	sbrs	r20, 7
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <dtostrf+0x14>
    15a4:	a4 e1       	ldi	r26, 0x14	; 20
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <dtostrf+0x16>
    15a8:	a4 e0       	ldi	r26, 0x04	; 4
    15aa:	e4 2f       	mov	r30, r20
    15ac:	ff 27       	eor	r31, r31
    15ae:	e7 fd       	sbrc	r30, 7
    15b0:	f0 95       	com	r31
    15b2:	f7 ff       	sbrs	r31, 7
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <dtostrf+0x28>
    15b6:	f0 95       	com	r31
    15b8:	e1 95       	neg	r30
    15ba:	ff 4f       	sbci	r31, 0xFF	; 255
    15bc:	4c 2f       	mov	r20, r28
    15be:	51 2f       	mov	r21, r17
    15c0:	2e 2f       	mov	r18, r30
    15c2:	03 2f       	mov	r16, r19
    15c4:	ea 2e       	mov	r14, r26
    15c6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <dtoa_prf>
    15ca:	8c 2f       	mov	r24, r28
    15cc:	91 2f       	mov	r25, r17
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ef 90       	pop	r14
    15d6:	08 95       	ret

000015d8 <strcat>:
    15d8:	fb 01       	movw	r30, r22
    15da:	dc 01       	movw	r26, r24
    15dc:	0d 90       	ld	r0, X+
    15de:	00 20       	and	r0, r0
    15e0:	e9 f7       	brne	.-6      	; 0x15dc <strcat+0x4>
    15e2:	11 97       	sbiw	r26, 0x01	; 1
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	00 20       	and	r0, r0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <strcat+0xc>
    15ec:	08 95       	ret

000015ee <strncmp>:
    15ee:	fb 01       	movw	r30, r22
    15f0:	dc 01       	movw	r26, r24
    15f2:	41 50       	subi	r20, 0x01	; 1
    15f4:	50 40       	sbci	r21, 0x00	; 0
    15f6:	30 f0       	brcs	.+12     	; 0x1604 <strncmp+0x16>
    15f8:	8d 91       	ld	r24, X+
    15fa:	01 90       	ld	r0, Z+
    15fc:	80 19       	sub	r24, r0
    15fe:	19 f4       	brne	.+6      	; 0x1606 <strncmp+0x18>
    1600:	00 20       	and	r0, r0
    1602:	b9 f7       	brne	.-18     	; 0x15f2 <strncmp+0x4>
    1604:	88 1b       	sub	r24, r24
    1606:	99 0b       	sbc	r25, r25
    1608:	08 95       	ret

0000160a <vfprintf>:
    160a:	ad e0       	ldi	r26, 0x0D	; 13
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e0       	ldi	r30, 0x0B	; 11
    1610:	fb e0       	ldi	r31, 0x0B	; 11
    1612:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__>
    1616:	3c 01       	movw	r6, r24
    1618:	7d 87       	std	Y+13, r23	; 0x0d
    161a:	6c 87       	std	Y+12, r22	; 0x0c
    161c:	5a 01       	movw	r10, r20
    161e:	fc 01       	movw	r30, r24
    1620:	17 82       	std	Z+7, r1	; 0x07
    1622:	16 82       	std	Z+6, r1	; 0x06
    1624:	83 81       	ldd	r24, Z+3	; 0x03
    1626:	81 ff       	sbrs	r24, 1
    1628:	c8 c1       	rjmp	.+912    	; 0x19ba <vfprintf+0x3b0>
    162a:	2e 01       	movw	r4, r28
    162c:	08 94       	sec
    162e:	41 1c       	adc	r4, r1
    1630:	51 1c       	adc	r5, r1
    1632:	f3 01       	movw	r30, r6
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	ec 85       	ldd	r30, Y+12	; 0x0c
    1638:	fd 85       	ldd	r31, Y+13	; 0x0d
    163a:	93 fd       	sbrc	r25, 3
    163c:	85 91       	lpm	r24, Z+
    163e:	93 ff       	sbrs	r25, 3
    1640:	81 91       	ld	r24, Z+
    1642:	fd 87       	std	Y+13, r31	; 0x0d
    1644:	ec 87       	std	Y+12, r30	; 0x0c
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <vfprintf+0x42>
    164a:	b3 c1       	rjmp	.+870    	; 0x19b2 <vfprintf+0x3a8>
    164c:	85 32       	cpi	r24, 0x25	; 37
    164e:	41 f4       	brne	.+16     	; 0x1660 <vfprintf+0x56>
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	fd 87       	std	Y+13, r31	; 0x0d
    165a:	ec 87       	std	Y+12, r30	; 0x0c
    165c:	85 32       	cpi	r24, 0x25	; 37
    165e:	29 f4       	brne	.+10     	; 0x166a <vfprintf+0x60>
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	b3 01       	movw	r22, r6
    1664:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    1668:	e4 cf       	rjmp	.-56     	; 0x1632 <vfprintf+0x28>
    166a:	ff 24       	eor	r15, r15
    166c:	ee 24       	eor	r14, r14
    166e:	10 e0       	ldi	r17, 0x00	; 0
    1670:	10 32       	cpi	r17, 0x20	; 32
    1672:	b0 f4       	brcc	.+44     	; 0x16a0 <vfprintf+0x96>
    1674:	8b 32       	cpi	r24, 0x2B	; 43
    1676:	69 f0       	breq	.+26     	; 0x1692 <vfprintf+0x88>
    1678:	8c 32       	cpi	r24, 0x2C	; 44
    167a:	28 f4       	brcc	.+10     	; 0x1686 <vfprintf+0x7c>
    167c:	80 32       	cpi	r24, 0x20	; 32
    167e:	51 f0       	breq	.+20     	; 0x1694 <vfprintf+0x8a>
    1680:	83 32       	cpi	r24, 0x23	; 35
    1682:	71 f4       	brne	.+28     	; 0x16a0 <vfprintf+0x96>
    1684:	0b c0       	rjmp	.+22     	; 0x169c <vfprintf+0x92>
    1686:	8d 32       	cpi	r24, 0x2D	; 45
    1688:	39 f0       	breq	.+14     	; 0x1698 <vfprintf+0x8e>
    168a:	80 33       	cpi	r24, 0x30	; 48
    168c:	49 f4       	brne	.+18     	; 0x16a0 <vfprintf+0x96>
    168e:	11 60       	ori	r17, 0x01	; 1
    1690:	2c c0       	rjmp	.+88     	; 0x16ea <vfprintf+0xe0>
    1692:	12 60       	ori	r17, 0x02	; 2
    1694:	14 60       	ori	r17, 0x04	; 4
    1696:	29 c0       	rjmp	.+82     	; 0x16ea <vfprintf+0xe0>
    1698:	18 60       	ori	r17, 0x08	; 8
    169a:	27 c0       	rjmp	.+78     	; 0x16ea <vfprintf+0xe0>
    169c:	10 61       	ori	r17, 0x10	; 16
    169e:	25 c0       	rjmp	.+74     	; 0x16ea <vfprintf+0xe0>
    16a0:	17 fd       	sbrc	r17, 7
    16a2:	2e c0       	rjmp	.+92     	; 0x1700 <vfprintf+0xf6>
    16a4:	28 2f       	mov	r18, r24
    16a6:	20 53       	subi	r18, 0x30	; 48
    16a8:	2a 30       	cpi	r18, 0x0A	; 10
    16aa:	98 f4       	brcc	.+38     	; 0x16d2 <vfprintf+0xc8>
    16ac:	16 ff       	sbrs	r17, 6
    16ae:	08 c0       	rjmp	.+16     	; 0x16c0 <vfprintf+0xb6>
    16b0:	8f 2d       	mov	r24, r15
    16b2:	88 0f       	add	r24, r24
    16b4:	f8 2e       	mov	r15, r24
    16b6:	ff 0c       	add	r15, r15
    16b8:	ff 0c       	add	r15, r15
    16ba:	f8 0e       	add	r15, r24
    16bc:	f2 0e       	add	r15, r18
    16be:	15 c0       	rjmp	.+42     	; 0x16ea <vfprintf+0xe0>
    16c0:	8e 2d       	mov	r24, r14
    16c2:	88 0f       	add	r24, r24
    16c4:	e8 2e       	mov	r14, r24
    16c6:	ee 0c       	add	r14, r14
    16c8:	ee 0c       	add	r14, r14
    16ca:	e8 0e       	add	r14, r24
    16cc:	e2 0e       	add	r14, r18
    16ce:	10 62       	ori	r17, 0x20	; 32
    16d0:	0c c0       	rjmp	.+24     	; 0x16ea <vfprintf+0xe0>
    16d2:	8e 32       	cpi	r24, 0x2E	; 46
    16d4:	21 f4       	brne	.+8      	; 0x16de <vfprintf+0xd4>
    16d6:	16 fd       	sbrc	r17, 6
    16d8:	6c c1       	rjmp	.+728    	; 0x19b2 <vfprintf+0x3a8>
    16da:	10 64       	ori	r17, 0x40	; 64
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <vfprintf+0xe0>
    16de:	8c 36       	cpi	r24, 0x6C	; 108
    16e0:	11 f4       	brne	.+4      	; 0x16e6 <vfprintf+0xdc>
    16e2:	10 68       	ori	r17, 0x80	; 128
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <vfprintf+0xe0>
    16e6:	88 36       	cpi	r24, 0x68	; 104
    16e8:	59 f4       	brne	.+22     	; 0x1700 <vfprintf+0xf6>
    16ea:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ec:	fd 85       	ldd	r31, Y+13	; 0x0d
    16ee:	93 fd       	sbrc	r25, 3
    16f0:	85 91       	lpm	r24, Z+
    16f2:	93 ff       	sbrs	r25, 3
    16f4:	81 91       	ld	r24, Z+
    16f6:	fd 87       	std	Y+13, r31	; 0x0d
    16f8:	ec 87       	std	Y+12, r30	; 0x0c
    16fa:	88 23       	and	r24, r24
    16fc:	09 f0       	breq	.+2      	; 0x1700 <vfprintf+0xf6>
    16fe:	b8 cf       	rjmp	.-144    	; 0x1670 <vfprintf+0x66>
    1700:	98 2f       	mov	r25, r24
    1702:	95 54       	subi	r25, 0x45	; 69
    1704:	93 30       	cpi	r25, 0x03	; 3
    1706:	18 f0       	brcs	.+6      	; 0x170e <vfprintf+0x104>
    1708:	90 52       	subi	r25, 0x20	; 32
    170a:	93 30       	cpi	r25, 0x03	; 3
    170c:	38 f4       	brcc	.+14     	; 0x171c <vfprintf+0x112>
    170e:	24 e0       	ldi	r18, 0x04	; 4
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	a2 0e       	add	r10, r18
    1714:	b3 1e       	adc	r11, r19
    1716:	3f e3       	ldi	r19, 0x3F	; 63
    1718:	39 83       	std	Y+1, r19	; 0x01
    171a:	0f c0       	rjmp	.+30     	; 0x173a <vfprintf+0x130>
    171c:	83 36       	cpi	r24, 0x63	; 99
    171e:	31 f0       	breq	.+12     	; 0x172c <vfprintf+0x122>
    1720:	83 37       	cpi	r24, 0x73	; 115
    1722:	81 f0       	breq	.+32     	; 0x1744 <vfprintf+0x13a>
    1724:	83 35       	cpi	r24, 0x53	; 83
    1726:	09 f0       	breq	.+2      	; 0x172a <vfprintf+0x120>
    1728:	5a c0       	rjmp	.+180    	; 0x17de <vfprintf+0x1d4>
    172a:	22 c0       	rjmp	.+68     	; 0x1770 <vfprintf+0x166>
    172c:	f5 01       	movw	r30, r10
    172e:	80 81       	ld	r24, Z
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	22 e0       	ldi	r18, 0x02	; 2
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	a2 0e       	add	r10, r18
    1738:	b3 1e       	adc	r11, r19
    173a:	21 e0       	ldi	r18, 0x01	; 1
    173c:	c2 2e       	mov	r12, r18
    173e:	d1 2c       	mov	r13, r1
    1740:	42 01       	movw	r8, r4
    1742:	14 c0       	rjmp	.+40     	; 0x176c <vfprintf+0x162>
    1744:	92 e0       	ldi	r25, 0x02	; 2
    1746:	29 2e       	mov	r2, r25
    1748:	31 2c       	mov	r3, r1
    174a:	2a 0c       	add	r2, r10
    174c:	3b 1c       	adc	r3, r11
    174e:	f5 01       	movw	r30, r10
    1750:	80 80       	ld	r8, Z
    1752:	91 80       	ldd	r9, Z+1	; 0x01
    1754:	16 ff       	sbrs	r17, 6
    1756:	03 c0       	rjmp	.+6      	; 0x175e <vfprintf+0x154>
    1758:	6f 2d       	mov	r22, r15
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <vfprintf+0x158>
    175e:	6f ef       	ldi	r22, 0xFF	; 255
    1760:	7f ef       	ldi	r23, 0xFF	; 255
    1762:	c4 01       	movw	r24, r8
    1764:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <strnlen>
    1768:	6c 01       	movw	r12, r24
    176a:	51 01       	movw	r10, r2
    176c:	1f 77       	andi	r17, 0x7F	; 127
    176e:	15 c0       	rjmp	.+42     	; 0x179a <vfprintf+0x190>
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	28 2e       	mov	r2, r24
    1774:	31 2c       	mov	r3, r1
    1776:	2a 0c       	add	r2, r10
    1778:	3b 1c       	adc	r3, r11
    177a:	f5 01       	movw	r30, r10
    177c:	80 80       	ld	r8, Z
    177e:	91 80       	ldd	r9, Z+1	; 0x01
    1780:	16 ff       	sbrs	r17, 6
    1782:	03 c0       	rjmp	.+6      	; 0x178a <vfprintf+0x180>
    1784:	6f 2d       	mov	r22, r15
    1786:	70 e0       	ldi	r23, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x184>
    178a:	6f ef       	ldi	r22, 0xFF	; 255
    178c:	7f ef       	ldi	r23, 0xFF	; 255
    178e:	c4 01       	movw	r24, r8
    1790:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <strnlen_P>
    1794:	6c 01       	movw	r12, r24
    1796:	10 68       	ori	r17, 0x80	; 128
    1798:	51 01       	movw	r10, r2
    179a:	13 fd       	sbrc	r17, 3
    179c:	1c c0       	rjmp	.+56     	; 0x17d6 <vfprintf+0x1cc>
    179e:	06 c0       	rjmp	.+12     	; 0x17ac <vfprintf+0x1a2>
    17a0:	80 e2       	ldi	r24, 0x20	; 32
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b3 01       	movw	r22, r6
    17a6:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    17aa:	ea 94       	dec	r14
    17ac:	8e 2d       	mov	r24, r14
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	c8 16       	cp	r12, r24
    17b2:	d9 06       	cpc	r13, r25
    17b4:	a8 f3       	brcs	.-22     	; 0x17a0 <vfprintf+0x196>
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <vfprintf+0x1cc>
    17b8:	f4 01       	movw	r30, r8
    17ba:	17 fd       	sbrc	r17, 7
    17bc:	85 91       	lpm	r24, Z+
    17be:	17 ff       	sbrs	r17, 7
    17c0:	81 91       	ld	r24, Z+
    17c2:	4f 01       	movw	r8, r30
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	b3 01       	movw	r22, r6
    17c8:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    17cc:	e1 10       	cpse	r14, r1
    17ce:	ea 94       	dec	r14
    17d0:	08 94       	sec
    17d2:	c1 08       	sbc	r12, r1
    17d4:	d1 08       	sbc	r13, r1
    17d6:	c1 14       	cp	r12, r1
    17d8:	d1 04       	cpc	r13, r1
    17da:	71 f7       	brne	.-36     	; 0x17b8 <vfprintf+0x1ae>
    17dc:	e7 c0       	rjmp	.+462    	; 0x19ac <vfprintf+0x3a2>
    17de:	84 36       	cpi	r24, 0x64	; 100
    17e0:	11 f0       	breq	.+4      	; 0x17e6 <vfprintf+0x1dc>
    17e2:	89 36       	cpi	r24, 0x69	; 105
    17e4:	51 f5       	brne	.+84     	; 0x183a <vfprintf+0x230>
    17e6:	f5 01       	movw	r30, r10
    17e8:	17 ff       	sbrs	r17, 7
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <vfprintf+0x1f0>
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	a2 81       	ldd	r26, Z+2	; 0x02
    17f2:	b3 81       	ldd	r27, Z+3	; 0x03
    17f4:	24 e0       	ldi	r18, 0x04	; 4
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <vfprintf+0x200>
    17fa:	80 81       	ld	r24, Z
    17fc:	91 81       	ldd	r25, Z+1	; 0x01
    17fe:	aa 27       	eor	r26, r26
    1800:	97 fd       	sbrc	r25, 7
    1802:	a0 95       	com	r26
    1804:	ba 2f       	mov	r27, r26
    1806:	22 e0       	ldi	r18, 0x02	; 2
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a2 0e       	add	r10, r18
    180c:	b3 1e       	adc	r11, r19
    180e:	01 2f       	mov	r16, r17
    1810:	0f 76       	andi	r16, 0x6F	; 111
    1812:	b7 ff       	sbrs	r27, 7
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <vfprintf+0x21c>
    1816:	b0 95       	com	r27
    1818:	a0 95       	com	r26
    181a:	90 95       	com	r25
    181c:	81 95       	neg	r24
    181e:	9f 4f       	sbci	r25, 0xFF	; 255
    1820:	af 4f       	sbci	r26, 0xFF	; 255
    1822:	bf 4f       	sbci	r27, 0xFF	; 255
    1824:	00 68       	ori	r16, 0x80	; 128
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	a2 01       	movw	r20, r4
    182c:	2a e0       	ldi	r18, 0x0A	; 10
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__ultoa_invert>
    1834:	d8 2e       	mov	r13, r24
    1836:	d4 18       	sub	r13, r4
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <vfprintf+0x2ae>
    183a:	85 37       	cpi	r24, 0x75	; 117
    183c:	21 f4       	brne	.+8      	; 0x1846 <vfprintf+0x23c>
    183e:	1f 7e       	andi	r17, 0xEF	; 239
    1840:	2a e0       	ldi	r18, 0x0A	; 10
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	20 c0       	rjmp	.+64     	; 0x1886 <vfprintf+0x27c>
    1846:	19 7f       	andi	r17, 0xF9	; 249
    1848:	8f 36       	cpi	r24, 0x6F	; 111
    184a:	a9 f0       	breq	.+42     	; 0x1876 <vfprintf+0x26c>
    184c:	80 37       	cpi	r24, 0x70	; 112
    184e:	20 f4       	brcc	.+8      	; 0x1858 <vfprintf+0x24e>
    1850:	88 35       	cpi	r24, 0x58	; 88
    1852:	09 f0       	breq	.+2      	; 0x1856 <vfprintf+0x24c>
    1854:	ae c0       	rjmp	.+348    	; 0x19b2 <vfprintf+0x3a8>
    1856:	0b c0       	rjmp	.+22     	; 0x186e <vfprintf+0x264>
    1858:	80 37       	cpi	r24, 0x70	; 112
    185a:	21 f0       	breq	.+8      	; 0x1864 <vfprintf+0x25a>
    185c:	88 37       	cpi	r24, 0x78	; 120
    185e:	09 f0       	breq	.+2      	; 0x1862 <vfprintf+0x258>
    1860:	a8 c0       	rjmp	.+336    	; 0x19b2 <vfprintf+0x3a8>
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <vfprintf+0x25c>
    1864:	10 61       	ori	r17, 0x10	; 16
    1866:	14 ff       	sbrs	r17, 4
    1868:	09 c0       	rjmp	.+18     	; 0x187c <vfprintf+0x272>
    186a:	14 60       	ori	r17, 0x04	; 4
    186c:	07 c0       	rjmp	.+14     	; 0x187c <vfprintf+0x272>
    186e:	14 ff       	sbrs	r17, 4
    1870:	08 c0       	rjmp	.+16     	; 0x1882 <vfprintf+0x278>
    1872:	16 60       	ori	r17, 0x06	; 6
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <vfprintf+0x278>
    1876:	28 e0       	ldi	r18, 0x08	; 8
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	05 c0       	rjmp	.+10     	; 0x1886 <vfprintf+0x27c>
    187c:	20 e1       	ldi	r18, 0x10	; 16
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x27c>
    1882:	20 e1       	ldi	r18, 0x10	; 16
    1884:	32 e0       	ldi	r19, 0x02	; 2
    1886:	f5 01       	movw	r30, r10
    1888:	17 ff       	sbrs	r17, 7
    188a:	07 c0       	rjmp	.+14     	; 0x189a <vfprintf+0x290>
    188c:	60 81       	ld	r22, Z
    188e:	71 81       	ldd	r23, Z+1	; 0x01
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	44 e0       	ldi	r20, 0x04	; 4
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	06 c0       	rjmp	.+12     	; 0x18a6 <vfprintf+0x29c>
    189a:	60 81       	ld	r22, Z
    189c:	71 81       	ldd	r23, Z+1	; 0x01
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	42 e0       	ldi	r20, 0x02	; 2
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	a4 0e       	add	r10, r20
    18a8:	b5 1e       	adc	r11, r21
    18aa:	a2 01       	movw	r20, r4
    18ac:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <__ultoa_invert>
    18b0:	d8 2e       	mov	r13, r24
    18b2:	d4 18       	sub	r13, r4
    18b4:	01 2f       	mov	r16, r17
    18b6:	0f 77       	andi	r16, 0x7F	; 127
    18b8:	06 ff       	sbrs	r16, 6
    18ba:	09 c0       	rjmp	.+18     	; 0x18ce <vfprintf+0x2c4>
    18bc:	0e 7f       	andi	r16, 0xFE	; 254
    18be:	df 14       	cp	r13, r15
    18c0:	30 f4       	brcc	.+12     	; 0x18ce <vfprintf+0x2c4>
    18c2:	04 ff       	sbrs	r16, 4
    18c4:	06 c0       	rjmp	.+12     	; 0x18d2 <vfprintf+0x2c8>
    18c6:	02 fd       	sbrc	r16, 2
    18c8:	04 c0       	rjmp	.+8      	; 0x18d2 <vfprintf+0x2c8>
    18ca:	0f 7e       	andi	r16, 0xEF	; 239
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x2c8>
    18ce:	1d 2d       	mov	r17, r13
    18d0:	01 c0       	rjmp	.+2      	; 0x18d4 <vfprintf+0x2ca>
    18d2:	1f 2d       	mov	r17, r15
    18d4:	80 2f       	mov	r24, r16
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	04 ff       	sbrs	r16, 4
    18da:	0c c0       	rjmp	.+24     	; 0x18f4 <vfprintf+0x2ea>
    18dc:	fe 01       	movw	r30, r28
    18de:	ed 0d       	add	r30, r13
    18e0:	f1 1d       	adc	r31, r1
    18e2:	20 81       	ld	r18, Z
    18e4:	20 33       	cpi	r18, 0x30	; 48
    18e6:	11 f4       	brne	.+4      	; 0x18ec <vfprintf+0x2e2>
    18e8:	09 7e       	andi	r16, 0xE9	; 233
    18ea:	09 c0       	rjmp	.+18     	; 0x18fe <vfprintf+0x2f4>
    18ec:	02 ff       	sbrs	r16, 2
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0x2f2>
    18f0:	1e 5f       	subi	r17, 0xFE	; 254
    18f2:	05 c0       	rjmp	.+10     	; 0x18fe <vfprintf+0x2f4>
    18f4:	86 78       	andi	r24, 0x86	; 134
    18f6:	90 70       	andi	r25, 0x00	; 0
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	09 f0       	breq	.+2      	; 0x18fe <vfprintf+0x2f4>
    18fc:	1f 5f       	subi	r17, 0xFF	; 255
    18fe:	80 2e       	mov	r8, r16
    1900:	99 24       	eor	r9, r9
    1902:	03 fd       	sbrc	r16, 3
    1904:	12 c0       	rjmp	.+36     	; 0x192a <vfprintf+0x320>
    1906:	00 ff       	sbrs	r16, 0
    1908:	0d c0       	rjmp	.+26     	; 0x1924 <vfprintf+0x31a>
    190a:	fd 2c       	mov	r15, r13
    190c:	1e 15       	cp	r17, r14
    190e:	50 f4       	brcc	.+20     	; 0x1924 <vfprintf+0x31a>
    1910:	fe 0c       	add	r15, r14
    1912:	f1 1a       	sub	r15, r17
    1914:	1e 2d       	mov	r17, r14
    1916:	06 c0       	rjmp	.+12     	; 0x1924 <vfprintf+0x31a>
    1918:	80 e2       	ldi	r24, 0x20	; 32
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	b3 01       	movw	r22, r6
    191e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    1922:	1f 5f       	subi	r17, 0xFF	; 255
    1924:	1e 15       	cp	r17, r14
    1926:	c0 f3       	brcs	.-16     	; 0x1918 <vfprintf+0x30e>
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <vfprintf+0x328>
    192a:	1e 15       	cp	r17, r14
    192c:	10 f4       	brcc	.+4      	; 0x1932 <vfprintf+0x328>
    192e:	e1 1a       	sub	r14, r17
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vfprintf+0x32a>
    1932:	ee 24       	eor	r14, r14
    1934:	84 fe       	sbrs	r8, 4
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <vfprintf+0x34c>
    1938:	80 e3       	ldi	r24, 0x30	; 48
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	b3 01       	movw	r22, r6
    193e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    1942:	82 fe       	sbrs	r8, 2
    1944:	1f c0       	rjmp	.+62     	; 0x1984 <vfprintf+0x37a>
    1946:	81 fe       	sbrs	r8, 1
    1948:	03 c0       	rjmp	.+6      	; 0x1950 <vfprintf+0x346>
    194a:	88 e5       	ldi	r24, 0x58	; 88
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	10 c0       	rjmp	.+32     	; 0x1970 <vfprintf+0x366>
    1950:	88 e7       	ldi	r24, 0x78	; 120
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0d c0       	rjmp	.+26     	; 0x1970 <vfprintf+0x366>
    1956:	c4 01       	movw	r24, r8
    1958:	86 78       	andi	r24, 0x86	; 134
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	91 f0       	breq	.+36     	; 0x1984 <vfprintf+0x37a>
    1960:	81 fc       	sbrc	r8, 1
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <vfprintf+0x35e>
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	01 c0       	rjmp	.+2      	; 0x196a <vfprintf+0x360>
    1968:	8b e2       	ldi	r24, 0x2B	; 43
    196a:	07 fd       	sbrc	r16, 7
    196c:	8d e2       	ldi	r24, 0x2D	; 45
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	b3 01       	movw	r22, r6
    1972:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    1976:	06 c0       	rjmp	.+12     	; 0x1984 <vfprintf+0x37a>
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	b3 01       	movw	r22, r6
    197e:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    1982:	fa 94       	dec	r15
    1984:	df 14       	cp	r13, r15
    1986:	c0 f3       	brcs	.-16     	; 0x1978 <vfprintf+0x36e>
    1988:	da 94       	dec	r13
    198a:	f2 01       	movw	r30, r4
    198c:	ed 0d       	add	r30, r13
    198e:	f1 1d       	adc	r31, r1
    1990:	80 81       	ld	r24, Z
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	b3 01       	movw	r22, r6
    1996:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    199a:	dd 20       	and	r13, r13
    199c:	a9 f7       	brne	.-22     	; 0x1988 <vfprintf+0x37e>
    199e:	06 c0       	rjmp	.+12     	; 0x19ac <vfprintf+0x3a2>
    19a0:	80 e2       	ldi	r24, 0x20	; 32
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	b3 01       	movw	r22, r6
    19a6:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <fputc>
    19aa:	ea 94       	dec	r14
    19ac:	ee 20       	and	r14, r14
    19ae:	c1 f7       	brne	.-16     	; 0x19a0 <vfprintf+0x396>
    19b0:	40 ce       	rjmp	.-896    	; 0x1632 <vfprintf+0x28>
    19b2:	f3 01       	movw	r30, r6
    19b4:	86 81       	ldd	r24, Z+6	; 0x06
    19b6:	97 81       	ldd	r25, Z+7	; 0x07
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <vfprintf+0x3b4>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	9f ef       	ldi	r25, 0xFF	; 255
    19be:	2d 96       	adiw	r28, 0x0d	; 13
    19c0:	e2 e1       	ldi	r30, 0x12	; 18
    19c2:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__>

000019c6 <dtoa_prf>:
    19c6:	a9 e0       	ldi	r26, 0x09	; 9
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e9 ee       	ldi	r30, 0xE9	; 233
    19cc:	fc e0       	ldi	r31, 0x0C	; 12
    19ce:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__prologue_saves__+0x8>
    19d2:	6a 01       	movw	r12, r20
    19d4:	12 2f       	mov	r17, r18
    19d6:	f0 2e       	mov	r15, r16
    19d8:	2b e3       	ldi	r18, 0x3B	; 59
    19da:	20 17       	cp	r18, r16
    19dc:	18 f0       	brcs	.+6      	; 0x19e4 <dtoa_prf+0x1e>
    19de:	b0 2e       	mov	r11, r16
    19e0:	b3 94       	inc	r11
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <dtoa_prf+0x22>
    19e4:	3c e3       	ldi	r19, 0x3C	; 60
    19e6:	b3 2e       	mov	r11, r19
    19e8:	ae 01       	movw	r20, r28
    19ea:	4f 5f       	subi	r20, 0xFF	; 255
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	27 e0       	ldi	r18, 0x07	; 7
    19f0:	0b 2d       	mov	r16, r11
    19f2:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <__ftoa_engine>
    19f6:	bc 01       	movw	r22, r24
    19f8:	a9 81       	ldd	r26, Y+1	; 0x01
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	cd 01       	movw	r24, r26
    19fe:	89 70       	andi	r24, 0x09	; 9
    1a00:	90 70       	andi	r25, 0x00	; 0
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	31 f0       	breq	.+12     	; 0x1a14 <dtoa_prf+0x4e>
    1a08:	e1 fc       	sbrc	r14, 1
    1a0a:	06 c0       	rjmp	.+12     	; 0x1a18 <dtoa_prf+0x52>
    1a0c:	e0 fe       	sbrs	r14, 0
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <dtoa_prf+0x56>
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	05 c0       	rjmp	.+10     	; 0x1a1e <dtoa_prf+0x58>
    1a14:	4d e2       	ldi	r20, 0x2D	; 45
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <dtoa_prf+0x58>
    1a18:	4b e2       	ldi	r20, 0x2B	; 43
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <dtoa_prf+0x58>
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	a3 ff       	sbrs	r26, 3
    1a20:	36 c0       	rjmp	.+108    	; 0x1a8e <dtoa_prf+0xc8>
    1a22:	44 23       	and	r20, r20
    1a24:	11 f0       	breq	.+4      	; 0x1a2a <dtoa_prf+0x64>
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <dtoa_prf+0x66>
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	81 17       	cp	r24, r17
    1a2e:	10 f4       	brcc	.+4      	; 0x1a34 <dtoa_prf+0x6e>
    1a30:	18 1b       	sub	r17, r24
    1a32:	01 c0       	rjmp	.+2      	; 0x1a36 <dtoa_prf+0x70>
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	e4 fc       	sbrc	r14, 4
    1a38:	0b c0       	rjmp	.+22     	; 0x1a50 <dtoa_prf+0x8a>
    1a3a:	91 2f       	mov	r25, r17
    1a3c:	f6 01       	movw	r30, r12
    1a3e:	80 e2       	ldi	r24, 0x20	; 32
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <dtoa_prf+0x80>
    1a42:	81 93       	st	Z+, r24
    1a44:	91 50       	subi	r25, 0x01	; 1
    1a46:	99 23       	and	r25, r25
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <dtoa_prf+0x7c>
    1a4a:	c1 0e       	add	r12, r17
    1a4c:	d1 1c       	adc	r13, r1
    1a4e:	10 e0       	ldi	r17, 0x00	; 0
    1a50:	44 23       	and	r20, r20
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <dtoa_prf+0x94>
    1a54:	f6 01       	movw	r30, r12
    1a56:	41 93       	st	Z+, r20
    1a58:	6f 01       	movw	r12, r30
    1a5a:	e2 fe       	sbrs	r14, 2
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <dtoa_prf+0xa2>
    1a5e:	8e e4       	ldi	r24, 0x4E	; 78
    1a60:	f6 01       	movw	r30, r12
    1a62:	80 83       	st	Z, r24
    1a64:	91 e4       	ldi	r25, 0x41	; 65
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <dtoa_prf+0xaa>
    1a68:	8e e6       	ldi	r24, 0x6E	; 110
    1a6a:	f6 01       	movw	r30, r12
    1a6c:	80 83       	st	Z, r24
    1a6e:	91 e6       	ldi	r25, 0x61	; 97
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	82 83       	std	Z+2, r24	; 0x02
    1a74:	83 e0       	ldi	r24, 0x03	; 3
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	c8 0e       	add	r12, r24
    1a7a:	d9 1e       	adc	r13, r25
    1a7c:	81 2f       	mov	r24, r17
    1a7e:	f6 01       	movw	r30, r12
    1a80:	90 e2       	ldi	r25, 0x20	; 32
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <dtoa_prf+0xc2>
    1a84:	91 93       	st	Z+, r25
    1a86:	81 50       	subi	r24, 0x01	; 1
    1a88:	88 23       	and	r24, r24
    1a8a:	e1 f7       	brne	.-8      	; 0x1a84 <dtoa_prf+0xbe>
    1a8c:	3a c0       	rjmp	.+116    	; 0x1b02 <dtoa_prf+0x13c>
    1a8e:	a2 ff       	sbrs	r26, 2
    1a90:	3f c0       	rjmp	.+126    	; 0x1b10 <dtoa_prf+0x14a>
    1a92:	44 23       	and	r20, r20
    1a94:	11 f0       	breq	.+4      	; 0x1a9a <dtoa_prf+0xd4>
    1a96:	84 e0       	ldi	r24, 0x04	; 4
    1a98:	01 c0       	rjmp	.+2      	; 0x1a9c <dtoa_prf+0xd6>
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	81 17       	cp	r24, r17
    1a9e:	10 f4       	brcc	.+4      	; 0x1aa4 <dtoa_prf+0xde>
    1aa0:	18 1b       	sub	r17, r24
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <dtoa_prf+0xe0>
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	e4 fc       	sbrc	r14, 4
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <dtoa_prf+0xfa>
    1aaa:	91 2f       	mov	r25, r17
    1aac:	f6 01       	movw	r30, r12
    1aae:	80 e2       	ldi	r24, 0x20	; 32
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <dtoa_prf+0xf0>
    1ab2:	81 93       	st	Z+, r24
    1ab4:	91 50       	subi	r25, 0x01	; 1
    1ab6:	99 23       	and	r25, r25
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <dtoa_prf+0xec>
    1aba:	c1 0e       	add	r12, r17
    1abc:	d1 1c       	adc	r13, r1
    1abe:	10 e0       	ldi	r17, 0x00	; 0
    1ac0:	44 23       	and	r20, r20
    1ac2:	19 f0       	breq	.+6      	; 0x1aca <dtoa_prf+0x104>
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	41 93       	st	Z+, r20
    1ac8:	6f 01       	movw	r12, r30
    1aca:	e2 fe       	sbrs	r14, 2
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <dtoa_prf+0x116>
    1ace:	89 e4       	ldi	r24, 0x49	; 73
    1ad0:	f6 01       	movw	r30, r12
    1ad2:	80 83       	st	Z, r24
    1ad4:	8e e4       	ldi	r24, 0x4E	; 78
    1ad6:	81 83       	std	Z+1, r24	; 0x01
    1ad8:	86 e4       	ldi	r24, 0x46	; 70
    1ada:	06 c0       	rjmp	.+12     	; 0x1ae8 <dtoa_prf+0x122>
    1adc:	89 e6       	ldi	r24, 0x69	; 105
    1ade:	f6 01       	movw	r30, r12
    1ae0:	80 83       	st	Z, r24
    1ae2:	8e e6       	ldi	r24, 0x6E	; 110
    1ae4:	81 83       	std	Z+1, r24	; 0x01
    1ae6:	86 e6       	ldi	r24, 0x66	; 102
    1ae8:	82 83       	std	Z+2, r24	; 0x02
    1aea:	83 e0       	ldi	r24, 0x03	; 3
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	c8 0e       	add	r12, r24
    1af0:	d9 1e       	adc	r13, r25
    1af2:	81 2f       	mov	r24, r17
    1af4:	f6 01       	movw	r30, r12
    1af6:	90 e2       	ldi	r25, 0x20	; 32
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <dtoa_prf+0x138>
    1afa:	91 93       	st	Z+, r25
    1afc:	81 50       	subi	r24, 0x01	; 1
    1afe:	88 23       	and	r24, r24
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <dtoa_prf+0x134>
    1b02:	c1 0e       	add	r12, r17
    1b04:	d1 1c       	adc	r13, r1
    1b06:	f6 01       	movw	r30, r12
    1b08:	10 82       	st	Z, r1
    1b0a:	8e ef       	ldi	r24, 0xFE	; 254
    1b0c:	9f ef       	ldi	r25, 0xFF	; 255
    1b0e:	af c0       	rjmp	.+350    	; 0x1c6e <dtoa_prf+0x2a8>
    1b10:	21 e0       	ldi	r18, 0x01	; 1
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	44 23       	and	r20, r20
    1b16:	11 f4       	brne	.+4      	; 0x1b1c <dtoa_prf+0x156>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	16 16       	cp	r1, r22
    1b1e:	17 06       	cpc	r1, r23
    1b20:	1c f4       	brge	.+6      	; 0x1b28 <dtoa_prf+0x162>
    1b22:	cb 01       	movw	r24, r22
    1b24:	01 96       	adiw	r24, 0x01	; 1
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <dtoa_prf+0x166>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	28 0f       	add	r18, r24
    1b2e:	39 1f       	adc	r19, r25
    1b30:	ff 20       	and	r15, r15
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <dtoa_prf+0x176>
    1b34:	8f 2d       	mov	r24, r15
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <dtoa_prf+0x17a>
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	82 0f       	add	r24, r18
    1b42:	93 1f       	adc	r25, r19
    1b44:	21 2f       	mov	r18, r17
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	82 17       	cp	r24, r18
    1b4a:	93 07       	cpc	r25, r19
    1b4c:	1c f4       	brge	.+6      	; 0x1b54 <dtoa_prf+0x18e>
    1b4e:	51 2f       	mov	r21, r17
    1b50:	58 1b       	sub	r21, r24
    1b52:	01 c0       	rjmp	.+2      	; 0x1b56 <dtoa_prf+0x190>
    1b54:	50 e0       	ldi	r21, 0x00	; 0
    1b56:	8e 2d       	mov	r24, r14
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	20 71       	andi	r18, 0x10	; 16
    1b5e:	30 70       	andi	r19, 0x00	; 0
    1b60:	e4 fc       	sbrc	r14, 4
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <dtoa_prf+0x1b8>
    1b64:	e3 fc       	sbrc	r14, 3
    1b66:	0b c0       	rjmp	.+22     	; 0x1b7e <dtoa_prf+0x1b8>
    1b68:	85 2f       	mov	r24, r21
    1b6a:	f6 01       	movw	r30, r12
    1b6c:	90 e2       	ldi	r25, 0x20	; 32
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <dtoa_prf+0x1ae>
    1b70:	91 93       	st	Z+, r25
    1b72:	81 50       	subi	r24, 0x01	; 1
    1b74:	88 23       	and	r24, r24
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <dtoa_prf+0x1aa>
    1b78:	c5 0e       	add	r12, r21
    1b7a:	d1 1c       	adc	r13, r1
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	44 23       	and	r20, r20
    1b80:	19 f0       	breq	.+6      	; 0x1b88 <dtoa_prf+0x1c2>
    1b82:	f6 01       	movw	r30, r12
    1b84:	41 93       	st	Z+, r20
    1b86:	6f 01       	movw	r12, r30
    1b88:	21 15       	cp	r18, r1
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	59 f4       	brne	.+22     	; 0x1ba4 <dtoa_prf+0x1de>
    1b8e:	85 2f       	mov	r24, r21
    1b90:	f6 01       	movw	r30, r12
    1b92:	90 e3       	ldi	r25, 0x30	; 48
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <dtoa_prf+0x1d4>
    1b96:	91 93       	st	Z+, r25
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	88 23       	and	r24, r24
    1b9c:	e1 f7       	brne	.-8      	; 0x1b96 <dtoa_prf+0x1d0>
    1b9e:	c5 0e       	add	r12, r21
    1ba0:	d1 1c       	adc	r13, r1
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	b6 0e       	add	r11, r22
    1ba6:	4a 81       	ldd	r20, Y+2	; 0x02
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	62 2e       	mov	r6, r18
    1bac:	71 2c       	mov	r7, r1
    1bae:	6a 22       	and	r6, r26
    1bb0:	7b 22       	and	r7, r27
    1bb2:	a4 ff       	sbrs	r26, 4
    1bb4:	03 c0       	rjmp	.+6      	; 0x1bbc <dtoa_prf+0x1f6>
    1bb6:	41 33       	cpi	r20, 0x31	; 49
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <dtoa_prf+0x1f6>
    1bba:	ba 94       	dec	r11
    1bbc:	1b 14       	cp	r1, r11
    1bbe:	2c f4       	brge	.+10     	; 0x1bca <dtoa_prf+0x204>
    1bc0:	8b 2d       	mov	r24, r11
    1bc2:	89 30       	cpi	r24, 0x09	; 9
    1bc4:	18 f0       	brcs	.+6      	; 0x1bcc <dtoa_prf+0x206>
    1bc6:	88 e0       	ldi	r24, 0x08	; 8
    1bc8:	01 c0       	rjmp	.+2      	; 0x1bcc <dtoa_prf+0x206>
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	9b 01       	movw	r18, r22
    1bce:	77 ff       	sbrs	r23, 7
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <dtoa_prf+0x210>
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	a0 e0       	ldi	r26, 0x00	; 0
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	9e e2       	ldi	r25, 0x2E	; 46
    1bdc:	e9 2e       	mov	r14, r25
    1bde:	4b 01       	movw	r8, r22
    1be0:	88 1a       	sub	r8, r24
    1be2:	91 08       	sbc	r9, r1
    1be4:	cb 01       	movw	r24, r22
    1be6:	82 1b       	sub	r24, r18
    1be8:	93 0b       	sbc	r25, r19
    1bea:	8e 01       	movw	r16, r28
    1bec:	0f 5f       	subi	r16, 0xFF	; 255
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	08 0f       	add	r16, r24
    1bf2:	19 1f       	adc	r17, r25
    1bf4:	8f 2d       	mov	r24, r15
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	aa 24       	eor	r10, r10
    1bfa:	bb 24       	eor	r11, r11
    1bfc:	a8 1a       	sub	r10, r24
    1bfe:	b9 0a       	sbc	r11, r25
    1c00:	ff ef       	ldi	r31, 0xFF	; 255
    1c02:	2f 3f       	cpi	r18, 0xFF	; 255
    1c04:	3f 07       	cpc	r19, r31
    1c06:	19 f4       	brne	.+6      	; 0x1c0e <dtoa_prf+0x248>
    1c08:	f6 01       	movw	r30, r12
    1c0a:	e1 92       	st	Z+, r14
    1c0c:	6f 01       	movw	r12, r30
    1c0e:	62 17       	cp	r22, r18
    1c10:	73 07       	cpc	r23, r19
    1c12:	44 f0       	brlt	.+16     	; 0x1c24 <dtoa_prf+0x25e>
    1c14:	82 16       	cp	r8, r18
    1c16:	93 06       	cpc	r9, r19
    1c18:	2c f4       	brge	.+10     	; 0x1c24 <dtoa_prf+0x25e>
    1c1a:	f8 01       	movw	r30, r16
    1c1c:	ea 0f       	add	r30, r26
    1c1e:	fb 1f       	adc	r31, r27
    1c20:	81 81       	ldd	r24, Z+1	; 0x01
    1c22:	01 c0       	rjmp	.+2      	; 0x1c26 <dtoa_prf+0x260>
    1c24:	80 e3       	ldi	r24, 0x30	; 48
    1c26:	21 50       	subi	r18, 0x01	; 1
    1c28:	30 40       	sbci	r19, 0x00	; 0
    1c2a:	11 96       	adiw	r26, 0x01	; 1
    1c2c:	2a 15       	cp	r18, r10
    1c2e:	3b 05       	cpc	r19, r11
    1c30:	24 f0       	brlt	.+8      	; 0x1c3a <dtoa_prf+0x274>
    1c32:	f6 01       	movw	r30, r12
    1c34:	81 93       	st	Z+, r24
    1c36:	6f 01       	movw	r12, r30
    1c38:	e3 cf       	rjmp	.-58     	; 0x1c00 <dtoa_prf+0x23a>
    1c3a:	26 17       	cp	r18, r22
    1c3c:	37 07       	cpc	r19, r23
    1c3e:	41 f4       	brne	.+16     	; 0x1c50 <dtoa_prf+0x28a>
    1c40:	46 33       	cpi	r20, 0x36	; 54
    1c42:	28 f4       	brcc	.+10     	; 0x1c4e <dtoa_prf+0x288>
    1c44:	45 33       	cpi	r20, 0x35	; 53
    1c46:	21 f4       	brne	.+8      	; 0x1c50 <dtoa_prf+0x28a>
    1c48:	61 14       	cp	r6, r1
    1c4a:	71 04       	cpc	r7, r1
    1c4c:	09 f4       	brne	.+2      	; 0x1c50 <dtoa_prf+0x28a>
    1c4e:	81 e3       	ldi	r24, 0x31	; 49
    1c50:	f6 01       	movw	r30, r12
    1c52:	81 93       	st	Z+, r24
    1c54:	85 2f       	mov	r24, r21
    1c56:	df 01       	movw	r26, r30
    1c58:	90 e2       	ldi	r25, 0x20	; 32
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <dtoa_prf+0x29a>
    1c5c:	9d 93       	st	X+, r25
    1c5e:	81 50       	subi	r24, 0x01	; 1
    1c60:	88 23       	and	r24, r24
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <dtoa_prf+0x296>
    1c64:	e5 0f       	add	r30, r21
    1c66:	f1 1d       	adc	r31, r1
    1c68:	10 82       	st	Z, r1
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	29 96       	adiw	r28, 0x09	; 9
    1c70:	ee e0       	ldi	r30, 0x0E	; 14
    1c72:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <__epilogue_restores__+0x8>

00001c76 <__ftoa_engine>:
    1c76:	28 30       	cpi	r18, 0x08	; 8
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <__ftoa_engine+0x6>
    1c7a:	27 e0       	ldi	r18, 0x07	; 7
    1c7c:	33 27       	eor	r19, r19
    1c7e:	da 01       	movw	r26, r20
    1c80:	99 0f       	add	r25, r25
    1c82:	31 1d       	adc	r19, r1
    1c84:	87 fd       	sbrc	r24, 7
    1c86:	91 60       	ori	r25, 0x01	; 1
    1c88:	00 96       	adiw	r24, 0x00	; 0
    1c8a:	61 05       	cpc	r22, r1
    1c8c:	71 05       	cpc	r23, r1
    1c8e:	39 f4       	brne	.+14     	; 0x1c9e <__ftoa_engine+0x28>
    1c90:	32 60       	ori	r19, 0x02	; 2
    1c92:	2e 5f       	subi	r18, 0xFE	; 254
    1c94:	3d 93       	st	X+, r19
    1c96:	30 e3       	ldi	r19, 0x30	; 48
    1c98:	2a 95       	dec	r18
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <__ftoa_engine+0x1e>
    1c9c:	08 95       	ret
    1c9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ca0:	30 f0       	brcs	.+12     	; 0x1cae <__ftoa_engine+0x38>
    1ca2:	80 38       	cpi	r24, 0x80	; 128
    1ca4:	71 05       	cpc	r23, r1
    1ca6:	61 05       	cpc	r22, r1
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <__ftoa_engine+0x36>
    1caa:	3c 5f       	subi	r19, 0xFC	; 252
    1cac:	3c 5f       	subi	r19, 0xFC	; 252
    1cae:	3d 93       	st	X+, r19
    1cb0:	91 30       	cpi	r25, 0x01	; 1
    1cb2:	08 f0       	brcs	.+2      	; 0x1cb6 <__ftoa_engine+0x40>
    1cb4:	80 68       	ori	r24, 0x80	; 128
    1cb6:	91 1d       	adc	r25, r1
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	1f 93       	push	r17
    1cbe:	0f 93       	push	r16
    1cc0:	ff 92       	push	r15
    1cc2:	ef 92       	push	r14
    1cc4:	19 2f       	mov	r17, r25
    1cc6:	98 7f       	andi	r25, 0xF8	; 248
    1cc8:	96 95       	lsr	r25
    1cca:	e9 2f       	mov	r30, r25
    1ccc:	96 95       	lsr	r25
    1cce:	96 95       	lsr	r25
    1cd0:	e9 0f       	add	r30, r25
    1cd2:	ff 27       	eor	r31, r31
    1cd4:	ea 52       	subi	r30, 0x2A	; 42
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	99 27       	eor	r25, r25
    1cda:	33 27       	eor	r19, r19
    1cdc:	ee 24       	eor	r14, r14
    1cde:	ff 24       	eor	r15, r15
    1ce0:	a7 01       	movw	r20, r14
    1ce2:	e7 01       	movw	r28, r14
    1ce4:	05 90       	lpm	r0, Z+
    1ce6:	08 94       	sec
    1ce8:	07 94       	ror	r0
    1cea:	28 f4       	brcc	.+10     	; 0x1cf6 <__ftoa_engine+0x80>
    1cec:	36 0f       	add	r19, r22
    1cee:	e7 1e       	adc	r14, r23
    1cf0:	f8 1e       	adc	r15, r24
    1cf2:	49 1f       	adc	r20, r25
    1cf4:	51 1d       	adc	r21, r1
    1cf6:	66 0f       	add	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	06 94       	lsr	r0
    1d00:	a1 f7       	brne	.-24     	; 0x1cea <__ftoa_engine+0x74>
    1d02:	05 90       	lpm	r0, Z+
    1d04:	07 94       	ror	r0
    1d06:	28 f4       	brcc	.+10     	; 0x1d12 <__ftoa_engine+0x9c>
    1d08:	e7 0e       	add	r14, r23
    1d0a:	f8 1e       	adc	r15, r24
    1d0c:	49 1f       	adc	r20, r25
    1d0e:	56 1f       	adc	r21, r22
    1d10:	c1 1d       	adc	r28, r1
    1d12:	77 0f       	add	r23, r23
    1d14:	88 1f       	adc	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	66 1f       	adc	r22, r22
    1d1a:	06 94       	lsr	r0
    1d1c:	a1 f7       	brne	.-24     	; 0x1d06 <__ftoa_engine+0x90>
    1d1e:	05 90       	lpm	r0, Z+
    1d20:	07 94       	ror	r0
    1d22:	28 f4       	brcc	.+10     	; 0x1d2e <__ftoa_engine+0xb8>
    1d24:	f8 0e       	add	r15, r24
    1d26:	49 1f       	adc	r20, r25
    1d28:	56 1f       	adc	r21, r22
    1d2a:	c7 1f       	adc	r28, r23
    1d2c:	d1 1d       	adc	r29, r1
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	66 1f       	adc	r22, r22
    1d34:	77 1f       	adc	r23, r23
    1d36:	06 94       	lsr	r0
    1d38:	a1 f7       	brne	.-24     	; 0x1d22 <__ftoa_engine+0xac>
    1d3a:	05 90       	lpm	r0, Z+
    1d3c:	07 94       	ror	r0
    1d3e:	20 f4       	brcc	.+8      	; 0x1d48 <__ftoa_engine+0xd2>
    1d40:	49 0f       	add	r20, r25
    1d42:	56 1f       	adc	r21, r22
    1d44:	c7 1f       	adc	r28, r23
    1d46:	d8 1f       	adc	r29, r24
    1d48:	99 0f       	add	r25, r25
    1d4a:	66 1f       	adc	r22, r22
    1d4c:	77 1f       	adc	r23, r23
    1d4e:	88 1f       	adc	r24, r24
    1d50:	06 94       	lsr	r0
    1d52:	a9 f7       	brne	.-22     	; 0x1d3e <__ftoa_engine+0xc8>
    1d54:	84 91       	lpm	r24, Z
    1d56:	10 95       	com	r17
    1d58:	17 70       	andi	r17, 0x07	; 7
    1d5a:	41 f0       	breq	.+16     	; 0x1d6c <__ftoa_engine+0xf6>
    1d5c:	d6 95       	lsr	r29
    1d5e:	c7 95       	ror	r28
    1d60:	57 95       	ror	r21
    1d62:	47 95       	ror	r20
    1d64:	f7 94       	ror	r15
    1d66:	e7 94       	ror	r14
    1d68:	1a 95       	dec	r17
    1d6a:	c1 f7       	brne	.-16     	; 0x1d5c <__ftoa_engine+0xe6>
    1d6c:	ec e7       	ldi	r30, 0x7C	; 124
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	68 94       	set
    1d72:	15 90       	lpm	r1, Z+
    1d74:	15 91       	lpm	r17, Z+
    1d76:	35 91       	lpm	r19, Z+
    1d78:	65 91       	lpm	r22, Z+
    1d7a:	95 91       	lpm	r25, Z+
    1d7c:	05 90       	lpm	r0, Z+
    1d7e:	7f e2       	ldi	r23, 0x2F	; 47
    1d80:	73 95       	inc	r23
    1d82:	e1 18       	sub	r14, r1
    1d84:	f1 0a       	sbc	r15, r17
    1d86:	43 0b       	sbc	r20, r19
    1d88:	56 0b       	sbc	r21, r22
    1d8a:	c9 0b       	sbc	r28, r25
    1d8c:	d0 09       	sbc	r29, r0
    1d8e:	c0 f7       	brcc	.-16     	; 0x1d80 <__ftoa_engine+0x10a>
    1d90:	e1 0c       	add	r14, r1
    1d92:	f1 1e       	adc	r15, r17
    1d94:	43 1f       	adc	r20, r19
    1d96:	56 1f       	adc	r21, r22
    1d98:	c9 1f       	adc	r28, r25
    1d9a:	d0 1d       	adc	r29, r0
    1d9c:	7e f4       	brtc	.+30     	; 0x1dbc <__ftoa_engine+0x146>
    1d9e:	70 33       	cpi	r23, 0x30	; 48
    1da0:	11 f4       	brne	.+4      	; 0x1da6 <__ftoa_engine+0x130>
    1da2:	8a 95       	dec	r24
    1da4:	e6 cf       	rjmp	.-52     	; 0x1d72 <__ftoa_engine+0xfc>
    1da6:	e8 94       	clt
    1da8:	01 50       	subi	r16, 0x01	; 1
    1daa:	30 f0       	brcs	.+12     	; 0x1db8 <__ftoa_engine+0x142>
    1dac:	08 0f       	add	r16, r24
    1dae:	0a f4       	brpl	.+2      	; 0x1db2 <__ftoa_engine+0x13c>
    1db0:	00 27       	eor	r16, r16
    1db2:	02 17       	cp	r16, r18
    1db4:	08 f4       	brcc	.+2      	; 0x1db8 <__ftoa_engine+0x142>
    1db6:	20 2f       	mov	r18, r16
    1db8:	23 95       	inc	r18
    1dba:	02 2f       	mov	r16, r18
    1dbc:	7a 33       	cpi	r23, 0x3A	; 58
    1dbe:	28 f0       	brcs	.+10     	; 0x1dca <__ftoa_engine+0x154>
    1dc0:	79 e3       	ldi	r23, 0x39	; 57
    1dc2:	7d 93       	st	X+, r23
    1dc4:	2a 95       	dec	r18
    1dc6:	e9 f7       	brne	.-6      	; 0x1dc2 <__ftoa_engine+0x14c>
    1dc8:	10 c0       	rjmp	.+32     	; 0x1dea <__ftoa_engine+0x174>
    1dca:	7d 93       	st	X+, r23
    1dcc:	2a 95       	dec	r18
    1dce:	89 f6       	brne	.-94     	; 0x1d72 <__ftoa_engine+0xfc>
    1dd0:	06 94       	lsr	r0
    1dd2:	97 95       	ror	r25
    1dd4:	67 95       	ror	r22
    1dd6:	37 95       	ror	r19
    1dd8:	17 95       	ror	r17
    1dda:	17 94       	ror	r1
    1ddc:	e1 18       	sub	r14, r1
    1dde:	f1 0a       	sbc	r15, r17
    1de0:	43 0b       	sbc	r20, r19
    1de2:	56 0b       	sbc	r21, r22
    1de4:	c9 0b       	sbc	r28, r25
    1de6:	d0 09       	sbc	r29, r0
    1de8:	98 f0       	brcs	.+38     	; 0x1e10 <__ftoa_engine+0x19a>
    1dea:	23 95       	inc	r18
    1dec:	7e 91       	ld	r23, -X
    1dee:	73 95       	inc	r23
    1df0:	7a 33       	cpi	r23, 0x3A	; 58
    1df2:	08 f0       	brcs	.+2      	; 0x1df6 <__ftoa_engine+0x180>
    1df4:	70 e3       	ldi	r23, 0x30	; 48
    1df6:	7c 93       	st	X, r23
    1df8:	20 13       	cpse	r18, r16
    1dfa:	b8 f7       	brcc	.-18     	; 0x1dea <__ftoa_engine+0x174>
    1dfc:	7e 91       	ld	r23, -X
    1dfe:	70 61       	ori	r23, 0x10	; 16
    1e00:	7d 93       	st	X+, r23
    1e02:	30 f0       	brcs	.+12     	; 0x1e10 <__ftoa_engine+0x19a>
    1e04:	83 95       	inc	r24
    1e06:	71 e3       	ldi	r23, 0x31	; 49
    1e08:	7d 93       	st	X+, r23
    1e0a:	70 e3       	ldi	r23, 0x30	; 48
    1e0c:	2a 95       	dec	r18
    1e0e:	e1 f7       	brne	.-8      	; 0x1e08 <__ftoa_engine+0x192>
    1e10:	11 24       	eor	r1, r1
    1e12:	ef 90       	pop	r14
    1e14:	ff 90       	pop	r15
    1e16:	0f 91       	pop	r16
    1e18:	1f 91       	pop	r17
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	99 27       	eor	r25, r25
    1e20:	87 fd       	sbrc	r24, 7
    1e22:	90 95       	com	r25
    1e24:	08 95       	ret

00001e26 <strnlen_P>:
    1e26:	fc 01       	movw	r30, r24
    1e28:	05 90       	lpm	r0, Z+
    1e2a:	61 50       	subi	r22, 0x01	; 1
    1e2c:	70 40       	sbci	r23, 0x00	; 0
    1e2e:	01 10       	cpse	r0, r1
    1e30:	d8 f7       	brcc	.-10     	; 0x1e28 <strnlen_P+0x2>
    1e32:	80 95       	com	r24
    1e34:	90 95       	com	r25
    1e36:	8e 0f       	add	r24, r30
    1e38:	9f 1f       	adc	r25, r31
    1e3a:	08 95       	ret

00001e3c <strnlen>:
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	61 50       	subi	r22, 0x01	; 1
    1e40:	70 40       	sbci	r23, 0x00	; 0
    1e42:	01 90       	ld	r0, Z+
    1e44:	01 10       	cpse	r0, r1
    1e46:	d8 f7       	brcc	.-10     	; 0x1e3e <strnlen+0x2>
    1e48:	80 95       	com	r24
    1e4a:	90 95       	com	r25
    1e4c:	8e 0f       	add	r24, r30
    1e4e:	9f 1f       	adc	r25, r31
    1e50:	08 95       	ret

00001e52 <fputc>:
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	8c 01       	movw	r16, r24
    1e5c:	eb 01       	movw	r28, r22
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	81 ff       	sbrs	r24, 1
    1e62:	1b c0       	rjmp	.+54     	; 0x1e9a <fputc+0x48>
    1e64:	82 ff       	sbrs	r24, 2
    1e66:	0d c0       	rjmp	.+26     	; 0x1e82 <fputc+0x30>
    1e68:	2e 81       	ldd	r18, Y+6	; 0x06
    1e6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e70:	28 17       	cp	r18, r24
    1e72:	39 07       	cpc	r19, r25
    1e74:	64 f4       	brge	.+24     	; 0x1e8e <fputc+0x3c>
    1e76:	e8 81       	ld	r30, Y
    1e78:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7a:	01 93       	st	Z+, r16
    1e7c:	f9 83       	std	Y+1, r31	; 0x01
    1e7e:	e8 83       	st	Y, r30
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <fputc+0x3c>
    1e82:	e8 85       	ldd	r30, Y+8	; 0x08
    1e84:	f9 85       	ldd	r31, Y+9	; 0x09
    1e86:	80 2f       	mov	r24, r16
    1e88:	09 95       	icall
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	31 f4       	brne	.+12     	; 0x1e9a <fputc+0x48>
    1e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e90:	9f 81       	ldd	r25, Y+7	; 0x07
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	9f 83       	std	Y+7, r25	; 0x07
    1e96:	8e 83       	std	Y+6, r24	; 0x06
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <fputc+0x4c>
    1e9a:	0f ef       	ldi	r16, 0xFF	; 255
    1e9c:	1f ef       	ldi	r17, 0xFF	; 255
    1e9e:	c8 01       	movw	r24, r16
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	08 95       	ret

00001eaa <__ultoa_invert>:
    1eaa:	fa 01       	movw	r30, r20
    1eac:	aa 27       	eor	r26, r26
    1eae:	28 30       	cpi	r18, 0x08	; 8
    1eb0:	51 f1       	breq	.+84     	; 0x1f06 <__ultoa_invert+0x5c>
    1eb2:	20 31       	cpi	r18, 0x10	; 16
    1eb4:	81 f1       	breq	.+96     	; 0x1f16 <__ultoa_invert+0x6c>
    1eb6:	e8 94       	clt
    1eb8:	6f 93       	push	r22
    1eba:	6e 7f       	andi	r22, 0xFE	; 254
    1ebc:	6e 5f       	subi	r22, 0xFE	; 254
    1ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec4:	af 4f       	sbci	r26, 0xFF	; 255
    1ec6:	b1 e0       	ldi	r27, 0x01	; 1
    1ec8:	3e d0       	rcall	.+124    	; 0x1f46 <__ultoa_invert+0x9c>
    1eca:	b4 e0       	ldi	r27, 0x04	; 4
    1ecc:	3c d0       	rcall	.+120    	; 0x1f46 <__ultoa_invert+0x9c>
    1ece:	67 0f       	add	r22, r23
    1ed0:	78 1f       	adc	r23, r24
    1ed2:	89 1f       	adc	r24, r25
    1ed4:	9a 1f       	adc	r25, r26
    1ed6:	a1 1d       	adc	r26, r1
    1ed8:	68 0f       	add	r22, r24
    1eda:	79 1f       	adc	r23, r25
    1edc:	8a 1f       	adc	r24, r26
    1ede:	91 1d       	adc	r25, r1
    1ee0:	a1 1d       	adc	r26, r1
    1ee2:	6a 0f       	add	r22, r26
    1ee4:	71 1d       	adc	r23, r1
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	91 1d       	adc	r25, r1
    1eea:	a1 1d       	adc	r26, r1
    1eec:	20 d0       	rcall	.+64     	; 0x1f2e <__ultoa_invert+0x84>
    1eee:	09 f4       	brne	.+2      	; 0x1ef2 <__ultoa_invert+0x48>
    1ef0:	68 94       	set
    1ef2:	3f 91       	pop	r19
    1ef4:	2a e0       	ldi	r18, 0x0A	; 10
    1ef6:	26 9f       	mul	r18, r22
    1ef8:	11 24       	eor	r1, r1
    1efa:	30 19       	sub	r19, r0
    1efc:	30 5d       	subi	r19, 0xD0	; 208
    1efe:	31 93       	st	Z+, r19
    1f00:	de f6       	brtc	.-74     	; 0x1eb8 <__ultoa_invert+0xe>
    1f02:	cf 01       	movw	r24, r30
    1f04:	08 95       	ret
    1f06:	46 2f       	mov	r20, r22
    1f08:	47 70       	andi	r20, 0x07	; 7
    1f0a:	40 5d       	subi	r20, 0xD0	; 208
    1f0c:	41 93       	st	Z+, r20
    1f0e:	b3 e0       	ldi	r27, 0x03	; 3
    1f10:	0f d0       	rcall	.+30     	; 0x1f30 <__ultoa_invert+0x86>
    1f12:	c9 f7       	brne	.-14     	; 0x1f06 <__ultoa_invert+0x5c>
    1f14:	f6 cf       	rjmp	.-20     	; 0x1f02 <__ultoa_invert+0x58>
    1f16:	46 2f       	mov	r20, r22
    1f18:	4f 70       	andi	r20, 0x0F	; 15
    1f1a:	40 5d       	subi	r20, 0xD0	; 208
    1f1c:	4a 33       	cpi	r20, 0x3A	; 58
    1f1e:	18 f0       	brcs	.+6      	; 0x1f26 <__ultoa_invert+0x7c>
    1f20:	49 5d       	subi	r20, 0xD9	; 217
    1f22:	31 fd       	sbrc	r19, 1
    1f24:	40 52       	subi	r20, 0x20	; 32
    1f26:	41 93       	st	Z+, r20
    1f28:	02 d0       	rcall	.+4      	; 0x1f2e <__ultoa_invert+0x84>
    1f2a:	a9 f7       	brne	.-22     	; 0x1f16 <__ultoa_invert+0x6c>
    1f2c:	ea cf       	rjmp	.-44     	; 0x1f02 <__ultoa_invert+0x58>
    1f2e:	b4 e0       	ldi	r27, 0x04	; 4
    1f30:	a6 95       	lsr	r26
    1f32:	97 95       	ror	r25
    1f34:	87 95       	ror	r24
    1f36:	77 95       	ror	r23
    1f38:	67 95       	ror	r22
    1f3a:	ba 95       	dec	r27
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__ultoa_invert+0x86>
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	61 05       	cpc	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	08 95       	ret
    1f46:	9b 01       	movw	r18, r22
    1f48:	ac 01       	movw	r20, r24
    1f4a:	0a 2e       	mov	r0, r26
    1f4c:	06 94       	lsr	r0
    1f4e:	57 95       	ror	r21
    1f50:	47 95       	ror	r20
    1f52:	37 95       	ror	r19
    1f54:	27 95       	ror	r18
    1f56:	ba 95       	dec	r27
    1f58:	c9 f7       	brne	.-14     	; 0x1f4c <__ultoa_invert+0xa2>
    1f5a:	62 0f       	add	r22, r18
    1f5c:	73 1f       	adc	r23, r19
    1f5e:	84 1f       	adc	r24, r20
    1f60:	95 1f       	adc	r25, r21
    1f62:	a0 1d       	adc	r26, r0
    1f64:	08 95       	ret

00001f66 <__prologue_saves__>:
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	ca 1b       	sub	r28, r26
    1f90:	db 0b       	sbc	r29, r27
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	09 94       	ijmp

00001f9e <__epilogue_restores__>:
    1f9e:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa0:	39 88       	ldd	r3, Y+17	; 0x11
    1fa2:	48 88       	ldd	r4, Y+16	; 0x10
    1fa4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fa6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fa8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1faa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fac:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fae:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb4:	df 80       	ldd	r13, Y+7	; 0x07
    1fb6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fb8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fba:	0c 81       	ldd	r16, Y+4	; 0x04
    1fbc:	1b 81       	ldd	r17, Y+3	; 0x03
    1fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc2:	ce 0f       	add	r28, r30
    1fc4:	d1 1d       	adc	r29, r1
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	ed 01       	movw	r28, r26
    1fd2:	08 95       	ret

00001fd4 <_exit>:
    1fd4:	f8 94       	cli

00001fd6 <__stop_program>:
    1fd6:	ff cf       	rjmp	.-2      	; 0x1fd6 <__stop_program>

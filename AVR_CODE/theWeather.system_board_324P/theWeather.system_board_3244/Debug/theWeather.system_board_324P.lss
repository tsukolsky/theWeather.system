
theWeather.system_board_324P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001c08  00001c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800154  00800154  00001cf0  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00001cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000779  00000000  00000000  00004ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f44  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000549  00000000  00000000  000063a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4c  00000000  00000000  000068ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  0000743c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001047  00000000  00000000  00007c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 00 	jmp	0x176	; 0x176 <__ctors_end>
       4:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       8:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
       c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_3>
      10:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      14:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      18:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      1c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      20:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      24:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      28:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      2c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_11>
      30:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      34:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      38:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      3c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      40:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      44:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      48:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_18>
      4c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      50:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      54:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      58:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      5c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      60:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      64:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      68:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      6c:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      70:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      74:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      78:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <__stack+0xd7>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49c>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff26>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <GetTempTI+0x52>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <DeviceInit+0xe>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <.do_clear_bss_loop>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13e>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <__vector_3+0x2e>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_end>:
     176:	11 24       	eor	r1, r1
     178:	1f be       	out	0x3f, r1	; 63
     17a:	cf ef       	ldi	r28, 0xFF	; 255
     17c:	d8 e0       	ldi	r29, 0x08	; 8
     17e:	de bf       	out	0x3e, r29	; 62
     180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
     182:	11 e0       	ldi	r17, 0x01	; 1
     184:	a0 e0       	ldi	r26, 0x00	; 0
     186:	b1 e0       	ldi	r27, 0x01	; 1
     188:	e8 e0       	ldi	r30, 0x08	; 8
     18a:	fc e1       	ldi	r31, 0x1C	; 28
     18c:	02 c0       	rjmp	.+4      	; 0x192 <__do_copy_data+0x10>
     18e:	05 90       	lpm	r0, Z+
     190:	0d 92       	st	X+, r0
     192:	a4 35       	cpi	r26, 0x54	; 84
     194:	b1 07       	cpc	r27, r17
     196:	d9 f7       	brne	.-10     	; 0x18e <__do_copy_data+0xc>

00000198 <__do_clear_bss>:
     198:	11 e0       	ldi	r17, 0x01	; 1
     19a:	a4 e5       	ldi	r26, 0x54	; 84
     19c:	b1 e0       	ldi	r27, 0x01	; 1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
     1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
     1a2:	a8 35       	cpi	r26, 0x58	; 88
     1a4:	b1 07       	cpc	r27, r17
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
     1a8:	0e 94 67 01 	call	0x2ce	; 0x2ce <main>
     1ac:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b4 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
     1b4:	1f 92       	push	r1
     1b6:	0f 92       	push	r0
     1b8:	0f b6       	in	r0, 0x3f	; 63
     1ba:	0f 92       	push	r0
     1bc:	11 24       	eor	r1, r1
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
	prtDebug = (1 << bnD2);	//should toggle amber LED on. 
     1de:	88 e2       	ldi	r24, 0x28	; 40
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	20 e2       	ldi	r18, 0x20	; 32
     1e4:	fc 01       	movw	r30, r24
     1e6:	20 83       	st	Z, r18
	Wait_ms(10);
     1e8:	8a e0       	ldi	r24, 0x0A	; 10
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	//Clears interrupt vector
}
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	ff 91       	pop	r31
     1f6:	ef 91       	pop	r30
     1f8:	bf 91       	pop	r27
     1fa:	af 91       	pop	r26
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	7f 91       	pop	r23
     202:	6f 91       	pop	r22
     204:	5f 91       	pop	r21
     206:	4f 91       	pop	r20
     208:	3f 91       	pop	r19
     20a:	2f 91       	pop	r18
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <__vector_18>:


ISR(TIMER0_OVF_vect){
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	2f 93       	push	r18
     222:	3f 93       	push	r19
     224:	8f 93       	push	r24
     226:	9f 93       	push	r25
     228:	ef 93       	push	r30
     22a:	ff 93       	push	r31
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
	static BYTE timerZeroCount=0;
	timerZeroCount++;;
     234:	80 91 56 01 	lds	r24, 0x0156
     238:	8f 5f       	subi	r24, 0xFF	; 255
     23a:	80 93 56 01 	sts	0x0156, r24
	if (timerZeroCount >= 20) {pinDebug |= (1 << bnD0); timerZeroCount = 0;}		//should toggle amber LED and red to left of it
     23e:	80 91 56 01 	lds	r24, 0x0156
     242:	84 31       	cpi	r24, 0x14	; 20
     244:	58 f0       	brcs	.+22     	; 0x25c <__vector_18+0x46>
     246:	86 e2       	ldi	r24, 0x26	; 38
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	26 e2       	ldi	r18, 0x26	; 38
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	20 81       	ld	r18, Z
     252:	28 60       	ori	r18, 0x08	; 8
     254:	fc 01       	movw	r30, r24
     256:	20 83       	st	Z, r18
     258:	10 92 56 01 	sts	0x0156, r1
}	
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	ff 91       	pop	r31
     262:	ef 91       	pop	r30
     264:	9f 91       	pop	r25
     266:	8f 91       	pop	r24
     268:	3f 91       	pop	r19
     26a:	2f 91       	pop	r18
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	2f 93       	push	r18
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	static BYTE timerTwoCount=0;
	if (timerTwoCount++ >=40) {pinDebug = (1 << bnD0); timerTwoCount = 0;}		//toggles green, left LED
     292:	90 91 55 01 	lds	r25, 0x0155
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	98 32       	cpi	r25, 0x28	; 40
     29a:	08 f4       	brcc	.+2      	; 0x29e <__vector_11+0x28>
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	9f 5f       	subi	r25, 0xFF	; 255
     2a0:	90 93 55 01 	sts	0x0155, r25
     2a4:	88 23       	and	r24, r24
     2a6:	39 f0       	breq	.+14     	; 0x2b6 <__vector_11+0x40>
     2a8:	86 e2       	ldi	r24, 0x26	; 38
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	28 e0       	ldi	r18, 0x08	; 8
     2ae:	fc 01       	movw	r30, r24
     2b0:	20 83       	st	Z, r18
     2b2:	10 92 55 01 	sts	0x0155, r1
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	ff 91       	pop	r31
     2bc:	ef 91       	pop	r30
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	2f 91       	pop	r18
     2c4:	0f 90       	pop	r0
     2c6:	0f be       	out	0x3f, r0	; 63
     2c8:	0f 90       	pop	r0
     2ca:	1f 90       	pop	r1
     2cc:	18 95       	reti

000002ce <main>:


/*****************************************************************************************************************/
int main(void)
{	
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	DeviceInit();
     2d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <DeviceInit>
	AppInit(MYUBRR);
     2da:	83 e3       	ldi	r24, 0x33	; 51
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 1a 02 	call	0x434	; 0x434 <AppInit>
	sei();
     2e2:	78 94       	sei
	Wait_ms(40);
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	ResetDebug();	//clear LED's
     2ec:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
	//InitTimer0();
	InitTimer2();
     2f0:	0e 94 04 03 	call	0x608	; 0x608 <InitTimer2>

	// main program loop
	while (fTrue) {	
		
		//Get Humidity from HoneyWell sensor, located on ADC1
		prtDebug |= (1 << bnD0);
     2f4:	88 e2       	ldi	r24, 0x28	; 40
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	28 e2       	ldi	r18, 0x28	; 40
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	f9 01       	movw	r30, r18
     2fe:	20 81       	ld	r18, Z
     300:	28 60       	ori	r18, 0x08	; 8
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
		GetHumidity();
     306:	0e 94 27 05 	call	0xa4e	; 0xa4e <GetHumidity>
		Wait_ms(10);
     30a:	8a e0       	ldi	r24, 0x0A	; 10
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		ResetDebug();
     312:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>

		
		//Get temp data from ADT7302 source, on SPI
		prtDebug |= (1 << bnD1);
     316:	88 e2       	ldi	r24, 0x28	; 40
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	28 e2       	ldi	r18, 0x28	; 40
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	20 61       	ori	r18, 0x10	; 16
     324:	fc 01       	movw	r30, r24
     326:	20 83       	st	Z, r18
		GetTempADT();
     328:	0e 94 fe 05 	call	0xbfc	; 0xbfc <GetTempADT>
		Wait_ms(10);
     32c:	8a e0       	ldi	r24, 0x0A	; 10
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		ResetDebug();
     334:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
		
		//Get temperature data from TI source on SPI/USART0
		prtDebug |= (1 << bnD2);
     338:	88 e2       	ldi	r24, 0x28	; 40
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	28 e2       	ldi	r18, 0x28	; 40
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	f9 01       	movw	r30, r18
     342:	20 81       	ld	r18, Z
     344:	20 62       	ori	r18, 0x20	; 32
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
		GetTempTI(MYUBRR);
     34a:	83 e3       	ldi	r24, 0x33	; 51
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 38 03 	call	0x670	; 0x670 <GetTempTI>
		Wait_ms(10);
     352:	8a e0       	ldi	r24, 0x0A	; 10
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		ResetDebug();
     35a:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
		
		//Get temperature data from Thermistor on ADC2
		prtDebug |= (1 << bnD3);
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	28 e2       	ldi	r18, 0x28	; 40
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	f9 01       	movw	r30, r18
     368:	20 81       	ld	r18, Z
     36a:	20 64       	ori	r18, 0x40	; 64
     36c:	fc 01       	movw	r30, r24
     36e:	20 83       	st	Z, r18
		GetTempTherm();
     370:	8d e3       	ldi	r24, 0x3D	; 61
     372:	94 e0       	ldi	r25, 0x04	; 4
     374:	fc 01       	movw	r30, r24
     376:	09 95       	icall
		Wait_ms(10);
     378:	8a e0       	ldi	r24, 0x0A	; 10
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
						
		//Power save. Should sleep for ~10 seconds
		Print0(" Going to sleep... ");
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
		ResetDebug();						//Clear the LED's
     388:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
		flagGoToSleep=fTrue;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 57 01 	sts	0x0157, r24
		sleepCnt=0;
     392:	10 92 54 01 	sts	0x0154, r1
		SMCR = (1 << SM1)|(1 << SM0);
     396:	83 e5       	ldi	r24, 0x53	; 83
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	26 e0       	ldi	r18, 0x06	; 6
     39c:	fc 01       	movw	r30, r24
     39e:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
     3a0:	83 e5       	ldi	r24, 0x53	; 83
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	23 e5       	ldi	r18, 0x53	; 83
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	20 81       	ld	r18, Z
     3ac:	21 60       	ori	r18, 0x01	; 1
     3ae:	fc 01       	movw	r30, r24
     3b0:	20 83       	st	Z, r18
		while (sleepCnt<SLEEP_TIME){
     3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <main+0xf2>
			asm volatile("SLEEP");
     3b4:	88 95       	sleep
			sleepCnt++;
     3b6:	80 91 54 01 	lds	r24, 0x0154
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	80 93 54 01 	sts	0x0154, r24
		ResetDebug();						//Clear the LED's
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (sleepCnt<SLEEP_TIME){
     3c0:	80 91 54 01 	lds	r24, 0x0154
     3c4:	88 37       	cpi	r24, 0x78	; 120
     3c6:	b0 f3       	brcs	.-20     	; 0x3b4 <main+0xe6>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
     3c8:	83 e5       	ldi	r24, 0x53	; 83
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
     3d0:	10 92 57 01 	sts	0x0157, r1
		Wait_ms(20);
     3d4:	84 e1       	ldi	r24, 0x14	; 20
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		//Reset sleep register on wakeup
		Print0(" Waking up... ");
     3dc:	84 e1       	ldi	r24, 0x14	; 20
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
		
	}  //end while fTrue
     3e4:	87 cf       	rjmp	.-242    	; 0x2f4 <main+0x26>

000003e6 <DeviceInit>:
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
     3ee:	81 e2       	ldi	r24, 0x21	; 33
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	fc 01       	movw	r30, r24
     3f4:	10 82       	st	Z, r1
	DDRB = 0;
     3f6:	84 e2       	ldi	r24, 0x24	; 36
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	fc 01       	movw	r30, r24
     3fc:	10 82       	st	Z, r1
	DDRC = 0;
     3fe:	87 e2       	ldi	r24, 0x27	; 39
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	fc 01       	movw	r30, r24
     404:	10 82       	st	Z, r1
	DDRD = 0;
     406:	8a e2       	ldi	r24, 0x2A	; 42
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	fc 01       	movw	r30, r24
     40c:	10 82       	st	Z, r1

	PORTA = 0x00;
     40e:	82 e2       	ldi	r24, 0x22	; 34
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	10 82       	st	Z, r1
	PORTB = 0x00;
     416:	85 e2       	ldi	r24, 0x25	; 37
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	10 82       	st	Z, r1
	PORTC = 0x00;
     41e:	88 e2       	ldi	r24, 0x28	; 40
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	fc 01       	movw	r30, r24
     424:	10 82       	st	Z, r1
	PORTD = 0x00;
     426:	8b e2       	ldi	r24, 0x2B	; 43
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	fc 01       	movw	r30, r24
     42c:	10 82       	st	Z, r1
}
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	08 95       	ret

00000434 <AppInit>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
     434:	cf 93       	push	r28
     436:	df 93       	push	r29
     438:	00 d0       	rcall	.+0      	; 0x43a <AppInit+0x6>
     43a:	00 d0       	rcall	.+0      	; 0x43c <AppInit+0x8>
     43c:	00 d0       	rcall	.+0      	; 0x43e <AppInit+0xa>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	9e 83       	std	Y+6, r25	; 0x06
     444:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
     446:	84 ec       	ldi	r24, 0xC4	; 196
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	2d 81       	ldd	r18, Y+5	; 0x05
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
     450:	85 ec       	ldi	r24, 0xC5	; 197
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	2d 81       	ldd	r18, Y+5	; 0x05
     456:	3e 81       	ldd	r19, Y+6	; 0x06
     458:	23 2f       	mov	r18, r19
     45a:	33 27       	eor	r19, r19
     45c:	fc 01       	movw	r30, r24
     45e:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
     460:	81 ec       	ldi	r24, 0xC1	; 193
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	28 e1       	ldi	r18, 0x18	; 24
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
     46a:	82 ec       	ldi	r24, 0xC2	; 194
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	26 e0       	ldi	r18, 0x06	; 6
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
     474:	87 e2       	ldi	r24, 0x27	; 39
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	27 e2       	ldi	r18, 0x27	; 39
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	28 6f       	ori	r18, 0xF8	; 248
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	9a 83       	std	Y+2, r25	; 0x02
     48c:	89 83       	std	Y+1, r24	; 0x01
     48e:	1d c0       	rjmp	.+58     	; 0x4ca <AppInit+0x96>
		prtDebug |= (1 << i);
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	28 e2       	ldi	r18, 0x28	; 40
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	f9 01       	movw	r30, r18
     49a:	20 81       	ld	r18, Z
     49c:	42 2f       	mov	r20, r18
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	09 80       	ldd	r0, Y+1	; 0x01
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <AppInit+0x76>
     4a6:	22 0f       	add	r18, r18
     4a8:	33 1f       	adc	r19, r19
     4aa:	0a 94       	dec	r0
     4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <AppInit+0x72>
     4ae:	24 2b       	or	r18, r20
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
		Wait_ms(10);
     4b4:	8a e0       	ldi	r24, 0x0A	; 10
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		ResetDebug();
     4bc:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	9a 83       	std	Y+2, r25	; 0x02
     4c8:	89 83       	std	Y+1, r24	; 0x01
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	88 30       	cpi	r24, 0x08	; 8
     4d0:	91 05       	cpc	r25, r1
     4d2:	f4 f2       	brlt	.-68     	; 0x490 <AppInit+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     4d4:	87 e0       	ldi	r24, 0x07	; 7
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	9c 83       	std	Y+4, r25	; 0x04
     4da:	8b 83       	std	Y+3, r24	; 0x03
     4dc:	1d c0       	rjmp	.+58     	; 0x518 <AppInit+0xe4>
		prtDebug |= (1 << j);
     4de:	88 e2       	ldi	r24, 0x28	; 40
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	28 e2       	ldi	r18, 0x28	; 40
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	42 2f       	mov	r20, r18
     4ec:	21 e0       	ldi	r18, 0x01	; 1
     4ee:	30 e0       	ldi	r19, 0x00	; 0
     4f0:	0b 80       	ldd	r0, Y+3	; 0x03
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <AppInit+0xc4>
     4f4:	22 0f       	add	r18, r18
     4f6:	33 1f       	adc	r19, r19
     4f8:	0a 94       	dec	r0
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <AppInit+0xc0>
     4fc:	24 2b       	or	r18, r20
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
		Wait_ms(10);
     502:	8a e0       	ldi	r24, 0x0A	; 10
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
		ResetDebug();
     50a:	0e 94 b4 06 	call	0xd68	; 0xd68 <ResetDebug>
	for (int i = 3; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(10);
		ResetDebug();
	}
	for (int j = 7; j >= 0; j--){	//Strobe from left to right
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	9c 83       	std	Y+4, r25	; 0x04
     516:	8b 83       	std	Y+3, r24	; 0x03
     518:	8b 81       	ldd	r24, Y+3	; 0x03
     51a:	9c 81       	ldd	r25, Y+4	; 0x04
     51c:	99 23       	and	r25, r25
     51e:	fc f6       	brge	.-66     	; 0x4de <AppInit+0xaa>
		Wait_ms(10);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
     520:	84 e2       	ldi	r24, 0x24	; 36
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	24 e2       	ldi	r18, 0x24	; 36
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	f9 01       	movw	r30, r18
     52a:	20 81       	ld	r18, Z
     52c:	20 6b       	ori	r18, 0xB0	; 176
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
     532:	85 e2       	ldi	r24, 0x25	; 37
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	25 e2       	ldi	r18, 0x25	; 37
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	20 69       	ori	r18, 0x90	; 144
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
     544:	85 e2       	ldi	r24, 0x25	; 37
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	25 e2       	ldi	r18, 0x25	; 37
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	f9 01       	movw	r30, r18
     54e:	20 81       	ld	r18, Z
     550:	2f 7b       	andi	r18, 0xBF	; 191
     552:	fc 01       	movw	r30, r24
     554:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
     556:	85 e2       	ldi	r24, 0x25	; 37
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	25 e2       	ldi	r18, 0x25	; 37
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	2f 7d       	andi	r18, 0xDF	; 223
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
     568:	8c e4       	ldi	r24, 0x4C	; 76
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	2c e4       	ldi	r18, 0x4C	; 76
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	23 65       	ori	r18, 0x53	; 83
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRTIM1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
     57a:	84 e6       	ldi	r24, 0x64	; 100
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	24 e6       	ldi	r18, 0x64	; 100
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	2d 6f       	ori	r18, 0xFD	; 253
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
     58c:	89 e6       	ldi	r24, 0x69	; 105
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	29 e6       	ldi	r18, 0x69	; 105
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	f9 01       	movw	r30, r18
     596:	20 81       	ld	r18, Z
     598:	20 63       	ori	r18, 0x30	; 48
     59a:	fc 01       	movw	r30, r24
     59c:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
     59e:	8d e3       	ldi	r24, 0x3D	; 61
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	24 e0       	ldi	r18, 0x04	; 4
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
	
	flagGoToSleep=fFalse;
     5a8:	10 92 57 01 	sts	0x0157, r1
}
     5ac:	26 96       	adiw	r28, 0x06	; 6
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <InitTimer0>:

/**********************************************************************************************************************************/
void InitTimer0(){
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	//Disable glbal interrupts
	cli();
     5c6:	f8 94       	cli
	//Enable TIMER0 power
	PRR0 &= ~(1 << PRTIM0);
     5c8:	84 e6       	ldi	r24, 0x64	; 100
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	24 e6       	ldi	r18, 0x64	; 100
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	f9 01       	movw	r30, r18
     5d2:	20 81       	ld	r18, Z
     5d4:	2f 7d       	andi	r18, 0xDF	; 223
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 83       	st	Z, r18
	Wait_ms(1);
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	//Set up regiterst
	TCCR0B = (1 << CS02)|(1 << CS00);			//prescaler of 256 from clkIO
     5e2:	85 e4       	ldi	r24, 0x45	; 69
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	25 e0       	ldi	r18, 0x05	; 5
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
	TIFR0 = (1 << TOV0);						//Clear TOV0/ any pending interrupts
     5ec:	85 e3       	ldi	r24, 0x35	; 53
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	21 e0       	ldi	r18, 0x01	; 1
     5f2:	fc 01       	movw	r30, r24
     5f4:	20 83       	st	Z, r18
	TIMSK0 = (1 << TOIE0);						//Enable overflow interrupt service routine
     5f6:	8e e6       	ldi	r24, 0x6E	; 110
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 83       	st	Z, r18
	//Enable global interrupts
	sei();
     600:	78 94       	sei
}	
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <InitTimer2>:
	
/**********************************************************************************************************************************/
void InitTimer2(){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
     610:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
     612:	84 e6       	ldi	r24, 0x64	; 100
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	24 e6       	ldi	r18, 0x64	; 100
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	f9 01       	movw	r30, r18
     61c:	20 81       	ld	r18, Z
     61e:	2f 7b       	andi	r18, 0xBF	; 191
     620:	fc 01       	movw	r30, r24
     622:	20 83       	st	Z, r18
	Wait_ms(1);	
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
     62c:	81 eb       	ldi	r24, 0xB1	; 177
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	21 eb       	ldi	r18, 0xB1	; 177
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	27 60       	ori	r18, 0x07	; 7
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
     63e:	00 00       	nop
     640:	86 eb       	ldi	r24, 0xB6	; 182
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	88 2f       	mov	r24, r24
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	81 71       	andi	r24, 0x11	; 17
     64e:	90 70       	andi	r25, 0x00	; 0
     650:	00 97       	sbiw	r24, 0x00	; 0
     652:	b1 f7       	brne	.-20     	; 0x640 <InitTimer2+0x38>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
     654:	87 e3       	ldi	r24, 0x37	; 55
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	21 e0       	ldi	r18, 0x01	; 1
     65a:	fc 01       	movw	r30, r24
     65c:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
     65e:	80 e7       	ldi	r24, 0x70	; 112
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
     668:	78 94       	sei
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <GetTempTI>:
/**********************************************************************************************************************************/

void GetTempTI(unsigned int ubrr)
{
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
     67c:	60 97       	sbiw	r28, 0x10	; 16
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	de bf       	out	0x3e, r29	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	cd bf       	out	0x3d, r28	; 61
     688:	98 8b       	std	Y+16, r25	; 0x10
     68a:	8f 87       	std	Y+15, r24	; 0x0f
	WORD tempDataTI = 0;
     68c:	1a 82       	std	Y+2, r1	; 0x02
     68e:	19 82       	std	Y+1, r1	; 0x01
	char tempStringTI[8];
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	24 e6       	ldi	r18, 0x64	; 100
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	f9 01       	movw	r30, r18
     69a:	20 81       	ld	r18, Z
     69c:	2f 7e       	andi	r18, 0xEF	; 239
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
     6a2:	8a e0       	ldi	r24, 0x0A	; 10
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	UBRR1 = 0;
     6aa:	8c ec       	ldi	r24, 0xCC	; 204
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	fc 01       	movw	r30, r24
     6b0:	11 82       	std	Z+1, r1	; 0x01
     6b2:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
     6b4:	8a e2       	ldi	r24, 0x2A	; 42
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	2a e2       	ldi	r18, 0x2A	; 42
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	20 63       	ori	r18, 0x30	; 48
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
     6c6:	8b e2       	ldi	r24, 0x2B	; 43
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	2b e2       	ldi	r18, 0x2B	; 43
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	f9 01       	movw	r30, r18
     6d0:	20 81       	ld	r18, Z
     6d2:	20 63       	ori	r18, 0x30	; 48
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
     6d8:	8a ec       	ldi	r24, 0xCA	; 202
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	20 ec       	ldi	r18, 0xC0	; 192
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
     6e2:	89 ec       	ldi	r24, 0xC9	; 201
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	28 e1       	ldi	r18, 0x18	; 24
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
     6ec:	8c ec       	ldi	r24, 0xCC	; 204
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	2f 85       	ldd	r18, Y+15	; 0x0f
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
     6f6:	8d ec       	ldi	r24, 0xCD	; 205
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2f 85       	ldd	r18, Y+15	; 0x0f
     6fc:	38 89       	ldd	r19, Y+16	; 0x10
     6fe:	23 2f       	mov	r18, r19
     700:	33 27       	eor	r19, r19
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
     706:	00 00       	nop
     708:	88 ec       	ldi	r24, 0xC8	; 200
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	80 72       	andi	r24, 0x20	; 32
     716:	90 70       	andi	r25, 0x00	; 0
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	b1 f3       	breq	.-20     	; 0x708 <GetTempTI+0x98>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
     71c:	8b e2       	ldi	r24, 0x2B	; 43
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	2b e2       	ldi	r18, 0x2B	; 43
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	f9 01       	movw	r30, r18
     726:	20 81       	ld	r18, Z
     728:	2f 7d       	andi	r18, 0xDF	; 223
     72a:	fc 01       	movw	r30, r24
     72c:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
     72e:	8e ec       	ldi	r24, 0xCE	; 206
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	fc 01       	movw	r30, r24
     734:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
     736:	00 00       	nop
     738:	88 ec       	ldi	r24, 0xC8	; 200
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	fc 01       	movw	r30, r24
     73e:	80 81       	ld	r24, Z
     740:	88 23       	and	r24, r24
     742:	d4 f7       	brge	.-12     	; 0x738 <GetTempTI+0xc8>
	tempDataTI = (UDR1 << 8);	//first byte of data
     744:	8e ec       	ldi	r24, 0xCE	; 206
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	fc 01       	movw	r30, r24
     74a:	80 81       	ld	r24, Z
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	98 2f       	mov	r25, r24
     752:	88 27       	eor	r24, r24
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
     758:	8e ec       	ldi	r24, 0xCE	; 206
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
     760:	00 00       	nop
     762:	88 ec       	ldi	r24, 0xC8	; 200
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	fc 01       	movw	r30, r24
     768:	80 81       	ld	r24, Z
     76a:	88 23       	and	r24, r24
     76c:	d4 f7       	brge	.-12     	; 0x762 <GetTempTI+0xf2>
	tempDataTI |= UDR1;	
     76e:	8e ec       	ldi	r24, 0xCE	; 206
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	fc 01       	movw	r30, r24
     774:	80 81       	ld	r24, Z
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	29 81       	ldd	r18, Y+1	; 0x01
     77c:	3a 81       	ldd	r19, Y+2	; 0x02
     77e:	82 2b       	or	r24, r18
     780:	93 2b       	or	r25, r19
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
     786:	8b e2       	ldi	r24, 0x2B	; 43
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	2b e2       	ldi	r18, 0x2B	; 43
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	20 63       	ori	r18, 0x30	; 48
     794:	fc 01       	movw	r30, r24
     796:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
     798:	8a ec       	ldi	r24, 0xCA	; 202
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	fc 01       	movw	r30, r24
     79e:	10 82       	st	Z, r1
	UCSR1B = 0;
     7a0:	89 ec       	ldi	r24, 0xC9	; 201
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	fc 01       	movw	r30, r24
     7a6:	10 82       	st	Z, r1
	UCSR1A = 0;
     7a8:	88 ec       	ldi	r24, 0xC8	; 200
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc 01       	movw	r30, r24
     7ae:	10 82       	st	Z, r1
	UBRR1L = 0;
     7b0:	8c ec       	ldi	r24, 0xCC	; 204
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	fc 01       	movw	r30, r24
     7b6:	10 82       	st	Z, r1
	UBRR1H = 0;
     7b8:	8d ec       	ldi	r24, 0xCD	; 205
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
     7c0:	84 e6       	ldi	r24, 0x64	; 100
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	24 e6       	ldi	r18, 0x64	; 100
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	20 81       	ld	r18, Z
     7cc:	20 61       	ori	r18, 0x10	; 16
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	float dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	9a 81       	ldd	r25, Y+2	; 0x02
     7d6:	96 95       	lsr	r25
     7d8:	87 95       	ror	r24
     7da:	96 95       	lsr	r25
     7dc:	87 95       	ror	r24
     7de:	cc 01       	movw	r24, r24
     7e0:	a0 e0       	ldi	r26, 0x00	; 0
     7e2:	b0 e0       	ldi	r27, 0x00	; 0
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	0e 94 0a 08 	call	0x1014	; 0x1014 <__floatunsisf>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	bc 01       	movw	r22, r24
     7f2:	cd 01       	movw	r24, r26
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	5d e3       	ldi	r21, 0x3D	; 61
     7fc:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     800:	dc 01       	movw	r26, r24
     802:	cb 01       	movw	r24, r22
     804:	bc 01       	movw	r22, r24
     806:	cd 01       	movw	r24, r26
     808:	26 e6       	ldi	r18, 0x66	; 102
     80a:	36 e6       	ldi	r19, 0x66	; 102
     80c:	46 ee       	ldi	r20, 0xE6	; 230
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	bc 01       	movw	r22, r24
     81a:	cd 01       	movw	r24, r26
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	52 e4       	ldi	r21, 0x42	; 66
     824:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__addsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	8b 83       	std	Y+3, r24	; 0x03
     82e:	9c 83       	std	Y+4, r25	; 0x04
     830:	ad 83       	std	Y+5, r26	; 0x05
     832:	be 83       	std	Y+6, r27	; 0x06
	dtostrf(dataTI, 5, 2, tempStringTI);
     834:	8b 81       	ldd	r24, Y+3	; 0x03
     836:	9c 81       	ldd	r25, Y+4	; 0x04
     838:	ad 81       	ldd	r26, Y+5	; 0x05
     83a:	be 81       	ldd	r27, Y+6	; 0x06
     83c:	fe 01       	movw	r30, r28
     83e:	37 96       	adiw	r30, 0x07	; 7
     840:	bc 01       	movw	r22, r24
     842:	cd 01       	movw	r24, r26
     844:	45 e0       	ldi	r20, 0x05	; 5
     846:	22 e0       	ldi	r18, 0x02	; 2
     848:	8f 01       	movw	r16, r30
     84a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <dtostrf>
	tempStringTI[6] = '.';
     84e:	8e e2       	ldi	r24, 0x2E	; 46
     850:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringTI[7] = '\0';
     852:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" TI temp= ");
     854:	83 e2       	ldi	r24, 0x23	; 35
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
	Print0(tempStringTI);	
     85c:	ce 01       	movw	r24, r28
     85e:	07 96       	adiw	r24, 0x07	; 7
     860:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
		
}
     864:	60 96       	adiw	r28, 0x10	; 16
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	f8 94       	cli
     86a:	de bf       	out	0x3e, r29	; 62
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	cd bf       	out	0x3d, r28	; 61
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <GetTempTherm>:

/**********************************************************************************************************************************/
void GetTempTherm()
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	62 97       	sbiw	r28, 0x12	; 18
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
     892:	1c 82       	std	Y+4, r1	; 0x04
     894:	1b 82       	std	Y+3, r1	; 0x03
	float dataTherm = 0;
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	dc 01       	movw	r26, r24
     89c:	8d 83       	std	Y+5, r24	; 0x05
     89e:	9e 83       	std	Y+6, r25	; 0x06
     8a0:	af 83       	std	Y+7, r26	; 0x07
     8a2:	b8 87       	std	Y+8, r27	; 0x08
	char stringTherm[10];
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
     8a4:	84 e6       	ldi	r24, 0x64	; 100
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	24 e6       	ldi	r18, 0x64	; 100
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	2e 7f       	andi	r18, 0xFE	; 254
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
     8b6:	8c e7       	ldi	r24, 0x7C	; 124
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	2c e7       	ldi	r18, 0x7C	; 124
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	f9 01       	movw	r30, r18
     8c0:	20 81       	ld	r18, Z
     8c2:	22 64       	ori	r18, 0x42	; 66
     8c4:	fc 01       	movw	r30, r24
     8c6:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
     8c8:	8a e7       	ldi	r24, 0x7A	; 122
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	2a e7       	ldi	r18, 0x7A	; 122
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	f9 01       	movw	r30, r18
     8d2:	20 81       	ld	r18, Z
     8d4:	27 68       	ori	r18, 0x87	; 135
     8d6:	fc 01       	movw	r30, r24
     8d8:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     8da:	8e e7       	ldi	r24, 0x7E	; 126
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	2b ef       	ldi	r18, 0xFB	; 251
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
	Wait_ms(10);
     8e4:	8a e0       	ldi	r24, 0x0A	; 10
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     8ec:	1a 82       	std	Y+2, r1	; 0x02
     8ee:	19 82       	std	Y+1, r1	; 0x01
     8f0:	19 c0       	rjmp	.+50     	; 0x924 <__stack+0x25>
     8f2:	8a e7       	ldi	r24, 0x7A	; 122
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	2a e7       	ldi	r18, 0x7A	; 122
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	f9 01       	movw	r30, r18
     8fc:	20 81       	ld	r18, Z
     8fe:	20 64       	ori	r18, 0x40	; 64
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	00 00       	nop
     906:	8a e7       	ldi	r24, 0x7A	; 122
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	80 74       	andi	r24, 0x40	; 64
     914:	90 70       	andi	r25, 0x00	; 0
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	b1 f7       	brne	.-20     	; 0x906 <__stack+0x7>
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	9a 83       	std	Y+2, r25	; 0x02
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	91 05       	cpc	r25, r1
     92c:	14 f3       	brlt	.-60     	; 0x8f2 <GetTempTherm+0x78>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
     92e:	88 e7       	ldi	r24, 0x78	; 120
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	fc 01       	movw	r30, r24
     934:	80 81       	ld	r24, Z
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	9c 83       	std	Y+4, r25	; 0x04
     93c:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
     93e:	89 e7       	ldi	r24, 0x79	; 121
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	98 2f       	mov	r25, r24
     94c:	88 27       	eor	r24, r24
     94e:	2b 81       	ldd	r18, Y+3	; 0x03
     950:	3c 81       	ldd	r19, Y+4	; 0x04
     952:	82 2b       	or	r24, r18
     954:	93 2b       	or	r25, r19
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     95a:	8a e7       	ldi	r24, 0x7A	; 122
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	fc 01       	movw	r30, r24
     960:	10 82       	st	Z, r1
	ADMUX = 0;
     962:	8c e7       	ldi	r24, 0x7C	; 124
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
     96a:	8e e7       	ldi	r24, 0x7E	; 126
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	2e e7       	ldi	r18, 0x7E	; 126
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	f9 01       	movw	r30, r18
     974:	20 81       	ld	r18, Z
     976:	24 60       	ori	r18, 0x04	; 4
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     97c:	84 e6       	ldi	r24, 0x64	; 100
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	24 e6       	ldi	r18, 0x64	; 100
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	f9 01       	movw	r30, r18
     986:	20 81       	ld	r18, Z
     988:	21 60       	ori	r18, 0x01	; 1
     98a:	fc 01       	movw	r30, r24
     98c:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
     98e:	22 ef       	ldi	r18, 0xF2	; 242
     990:	32 e0       	ldi	r19, 0x02	; 2
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	a9 01       	movw	r20, r18
     998:	48 1b       	sub	r20, r24
     99a:	59 0b       	sbc	r21, r25
     99c:	ca 01       	movw	r24, r20
     99e:	9c 83       	std	Y+4, r25	; 0x04
     9a0:	8b 83       	std	Y+3, r24	; 0x03
	Print0(" RAW Therm ADC= ");
	Print0(shibby);
	#endif
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
     9a2:	8b 81       	ldd	r24, Y+3	; 0x03
     9a4:	9c 81       	ldd	r25, Y+4	; 0x04
     9a6:	cc 01       	movw	r24, r24
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 0a 08 	call	0x1014	; 0x1014 <__floatunsisf>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	28 e4       	ldi	r18, 0x48	; 72
     9be:	31 ee       	ldi	r19, 0xE1	; 225
     9c0:	4c e1       	ldi	r20, 0x1C	; 28
     9c2:	51 e4       	ldi	r21, 0x41	; 65
     9c4:	0e 94 a2 07 	call	0xf44	; 0xf44 <__divsf3>
     9c8:	dc 01       	movw	r26, r24
     9ca:	cb 01       	movw	r24, r22
     9cc:	8d 83       	std	Y+5, r24	; 0x05
     9ce:	9e 83       	std	Y+6, r25	; 0x06
     9d0:	af 83       	std	Y+7, r26	; 0x07
     9d2:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
     9d4:	6d 81       	ldd	r22, Y+5	; 0x05
     9d6:	7e 81       	ldd	r23, Y+6	; 0x06
     9d8:	8f 81       	ldd	r24, Y+7	; 0x07
     9da:	98 85       	ldd	r25, Y+8	; 0x08
     9dc:	26 e6       	ldi	r18, 0x66	; 102
     9de:	36 e6       	ldi	r19, 0x66	; 102
     9e0:	46 ee       	ldi	r20, 0xE6	; 230
     9e2:	5f e3       	ldi	r21, 0x3F	; 63
     9e4:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	bc 01       	movw	r22, r24
     9ee:	cd 01       	movw	r24, r26
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	52 e4       	ldi	r21, 0x42	; 66
     9f8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__addsf3>
     9fc:	dc 01       	movw	r26, r24
     9fe:	cb 01       	movw	r24, r22
     a00:	8d 83       	std	Y+5, r24	; 0x05
     a02:	9e 83       	std	Y+6, r25	; 0x06
     a04:	af 83       	std	Y+7, r26	; 0x07
     a06:	b8 87       	std	Y+8, r27	; 0x08
	
	//Convert into a string
	dtostrf(dataTherm,5,2,stringTherm);
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	9e 81       	ldd	r25, Y+6	; 0x06
     a0c:	af 81       	ldd	r26, Y+7	; 0x07
     a0e:	b8 85       	ldd	r27, Y+8	; 0x08
     a10:	fe 01       	movw	r30, r28
     a12:	39 96       	adiw	r30, 0x09	; 9
     a14:	bc 01       	movw	r22, r24
     a16:	cd 01       	movw	r24, r26
     a18:	45 e0       	ldi	r20, 0x05	; 5
     a1a:	22 e0       	ldi	r18, 0x02	; 2
     a1c:	8f 01       	movw	r16, r30
     a1e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <dtostrf>
	stringTherm[8] = '.';
     a22:	8e e2       	ldi	r24, 0x2E	; 46
     a24:	89 8b       	std	Y+17, r24	; 0x11
	stringTherm[9] = '\0';
     a26:	1a 8a       	std	Y+18, r1	; 0x12
	
	//Print temperature
	Print0(" Therm Temp= ");
     a28:	8e e2       	ldi	r24, 0x2E	; 46
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
	Print0(stringTherm);
     a30:	ce 01       	movw	r24, r28
     a32:	09 96       	adiw	r24, 0x09	; 9
     a34:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
		
}
     a38:	62 96       	adiw	r28, 0x12	; 18
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <GetHumidity>:

/**********************************************************************************************************************************/	
void GetHumidity()
{
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	62 97       	sbiw	r28, 0x12	; 18
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	de bf       	out	0x3e, r29	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	char humidityString[10];
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
     a66:	84 e6       	ldi	r24, 0x64	; 100
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	24 e6       	ldi	r18, 0x64	; 100
     a6c:	30 e0       	ldi	r19, 0x00	; 0
     a6e:	f9 01       	movw	r30, r18
     a70:	20 81       	ld	r18, Z
     a72:	2e 7f       	andi	r18, 0xFE	; 254
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
	Wait_ms(10);						
     a78:	8a e0       	ldi	r24, 0x0A	; 10
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
     a80:	8c e7       	ldi	r24, 0x7C	; 124
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	2c e7       	ldi	r18, 0x7C	; 124
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	f9 01       	movw	r30, r18
     a8a:	20 81       	ld	r18, Z
     a8c:	21 64       	ori	r18, 0x41	; 65
     a8e:	fc 01       	movw	r30, r24
     a90:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
     a92:	8a e7       	ldi	r24, 0x7A	; 122
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	2a e7       	ldi	r18, 0x7A	; 122
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	f9 01       	movw	r30, r18
     a9c:	20 81       	ld	r18, Z
     a9e:	27 68       	ori	r18, 0x87	; 135
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
     aa4:	8e e7       	ldi	r24, 0x7E	; 126
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	2d ef       	ldi	r18, 0xFD	; 253
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
	Wait_ms(10);
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
     ab6:	1a 82       	std	Y+2, r1	; 0x02
     ab8:	19 82       	std	Y+1, r1	; 0x01
     aba:	19 c0       	rjmp	.+50     	; 0xaee <GetHumidity+0xa0>
     abc:	8a e7       	ldi	r24, 0x7A	; 122
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2a e7       	ldi	r18, 0x7A	; 122
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	20 64       	ori	r18, 0x40	; 64
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18
     ace:	00 00       	nop
     ad0:	8a e7       	ldi	r24, 0x7A	; 122
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	fc 01       	movw	r30, r24
     ad6:	80 81       	ld	r24, Z
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	80 74       	andi	r24, 0x40	; 64
     ade:	90 70       	andi	r25, 0x00	; 0
     ae0:	00 97       	sbiw	r24, 0x00	; 0
     ae2:	b1 f7       	brne	.-20     	; 0xad0 <GetHumidity+0x82>
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	9a 81       	ldd	r25, Y+2	; 0x02
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	9a 83       	std	Y+2, r25	; 0x02
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	89 81       	ldd	r24, Y+1	; 0x01
     af0:	9a 81       	ldd	r25, Y+2	; 0x02
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	91 05       	cpc	r25, r1
     af6:	14 f3       	brlt	.-60     	; 0xabc <GetHumidity+0x6e>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
     af8:	88 e7       	ldi	r24, 0x78	; 120
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	fc 01       	movw	r30, r24
     afe:	80 81       	ld	r24, Z
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	9c 83       	std	Y+4, r25	; 0x04
     b06:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
     b08:	89 e7       	ldi	r24, 0x79	; 121
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fc 01       	movw	r30, r24
     b0e:	80 81       	ld	r24, Z
     b10:	88 2f       	mov	r24, r24
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	98 2f       	mov	r25, r24
     b16:	88 27       	eor	r24, r24
     b18:	2b 81       	ldd	r18, Y+3	; 0x03
     b1a:	3c 81       	ldd	r19, Y+4	; 0x04
     b1c:	82 2b       	or	r24, r18
     b1e:	93 2b       	or	r25, r19
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
     b24:	8a e7       	ldi	r24, 0x7A	; 122
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	fc 01       	movw	r30, r24
     b2a:	10 82       	st	Z, r1
	ADMUX = 0;
     b2c:	8c e7       	ldi	r24, 0x7C	; 124
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
     b34:	8e e7       	ldi	r24, 0x7E	; 126
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	2e e7       	ldi	r18, 0x7E	; 126
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	f9 01       	movw	r30, r18
     b3e:	20 81       	ld	r18, Z
     b40:	22 60       	ori	r18, 0x02	; 2
     b42:	fc 01       	movw	r30, r24
     b44:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
     b46:	84 e6       	ldi	r24, 0x64	; 100
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	24 e6       	ldi	r18, 0x64	; 100
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	f9 01       	movw	r30, r18
     b50:	20 81       	ld	r18, Z
     b52:	21 60       	ori	r18, 0x01	; 1
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18

	//Get actual humidity
	float humidityResultFloat = (float)humidityResult;
     b58:	8b 81       	ldd	r24, Y+3	; 0x03
     b5a:	9c 81       	ldd	r25, Y+4	; 0x04
     b5c:	cc 01       	movw	r24, r24
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	bc 01       	movw	r22, r24
     b64:	cd 01       	movw	r24, r26
     b66:	0e 94 0a 08 	call	0x1014	; 0x1014 <__floatunsisf>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	8d 83       	std	Y+5, r24	; 0x05
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	af 83       	std	Y+7, r26	; 0x07
     b74:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
     b76:	6d 81       	ldd	r22, Y+5	; 0x05
     b78:	7e 81       	ldd	r23, Y+6	; 0x06
     b7a:	8f 81       	ldd	r24, Y+7	; 0x07
     b7c:	98 85       	ldd	r25, Y+8	; 0x08
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4b e1       	ldi	r20, 0x1B	; 27
     b84:	53 e4       	ldi	r21, 0x43	; 67
     b86:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__subsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	8d 83       	std	Y+5, r24	; 0x05
     b90:	9e 83       	std	Y+6, r25	; 0x06
     b92:	af 83       	std	Y+7, r26	; 0x07
     b94:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultFloat /= HUMIDITY_CONVERTER;	//get actual humidity	
     b96:	6d 81       	ldd	r22, Y+5	; 0x05
     b98:	7e 81       	ldd	r23, Y+6	; 0x06
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	23 e7       	ldi	r18, 0x73	; 115
     ba0:	38 e6       	ldi	r19, 0x68	; 104
     ba2:	4d e9       	ldi	r20, 0x9D	; 157
     ba4:	50 e4       	ldi	r21, 0x40	; 64
     ba6:	0e 94 a2 07 	call	0xf44	; 0xf44 <__divsf3>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8d 83       	std	Y+5, r24	; 0x05
     bb0:	9e 83       	std	Y+6, r25	; 0x06
     bb2:	af 83       	std	Y+7, r26	; 0x07
     bb4:	b8 87       	std	Y+8, r27	; 0x08
	
	//Print humidity to terminal
	dtostrf(humidityResultFloat, 5, 2, humidityString);
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	9e 81       	ldd	r25, Y+6	; 0x06
     bba:	af 81       	ldd	r26, Y+7	; 0x07
     bbc:	b8 85       	ldd	r27, Y+8	; 0x08
     bbe:	fe 01       	movw	r30, r28
     bc0:	39 96       	adiw	r30, 0x09	; 9
     bc2:	bc 01       	movw	r22, r24
     bc4:	cd 01       	movw	r24, r26
     bc6:	45 e0       	ldi	r20, 0x05	; 5
     bc8:	22 e0       	ldi	r18, 0x02	; 2
     bca:	8f 01       	movw	r16, r30
     bcc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <dtostrf>
	humidityString[8] = '.';
     bd0:	8e e2       	ldi	r24, 0x2E	; 46
     bd2:	89 8b       	std	Y+17, r24	; 0x11
	humidityString[9] = '\0';
     bd4:	1a 8a       	std	Y+18, r1	; 0x12
	Print0(" Humidity: ");
     bd6:	8c e3       	ldi	r24, 0x3C	; 60
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
	Print0(humidityString);
     bde:	ce 01       	movw	r24, r28
     be0:	09 96       	adiw	r24, 0x09	; 9
     be2:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
}
     be6:	62 96       	adiw	r28, 0x12	; 18
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	08 95       	ret

00000bfc <GetTempADT>:

/**********************************************************************************************************************************/	

void GetTempADT()
{
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	2e 97       	sbiw	r28, 0x0e	; 14
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
	WORD rawDataAD = 0;
     c14:	1a 82       	std	Y+2, r1	; 0x02
     c16:	19 82       	std	Y+1, r1	; 0x01
	char tempStringAD[8];
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
     c18:	84 e6       	ldi	r24, 0x64	; 100
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	24 e6       	ldi	r18, 0x64	; 100
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	f9 01       	movw	r30, r18
     c22:	20 81       	ld	r18, Z
     c24:	2b 7f       	andi	r18, 0xFB	; 251
     c26:	fc 01       	movw	r30, r24
     c28:	20 83       	st	Z, r18
	Wait_ms(10);
     c2a:	8a e0       	ldi	r24, 0x0A	; 10
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
     c32:	85 e2       	ldi	r24, 0x25	; 37
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	25 e2       	ldi	r18, 0x25	; 37
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	2f 7e       	andi	r18, 0xEF	; 239
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
     c44:	8e e4       	ldi	r24, 0x4E	; 78
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	fc 01       	movw	r30, r24
     c4a:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
     c4c:	00 00       	nop
     c4e:	8d e4       	ldi	r24, 0x4D	; 77
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	88 23       	and	r24, r24
     c58:	d4 f7       	brge	.-12     	; 0xc4e <GetTempADT+0x52>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
     c5a:	8e e4       	ldi	r24, 0x4E	; 78
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	88 2f       	mov	r24, r24
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	98 2f       	mov	r25, r24
     c68:	88 27       	eor	r24, r24
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
     c6e:	8e e4       	ldi	r24, 0x4E	; 78
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	fc 01       	movw	r30, r24
     c74:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
     c76:	00 00       	nop
     c78:	8d e4       	ldi	r24, 0x4D	; 77
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	d4 f7       	brge	.-12     	; 0xc78 <GetTempADT+0x7c>
	rawDataAD |= SPDR0;					//get second byte, store in low order
     c84:	8e e4       	ldi	r24, 0x4E	; 78
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	29 81       	ldd	r18, Y+1	; 0x01
     c92:	3a 81       	ldd	r19, Y+2	; 0x02
     c94:	82 2b       	or	r24, r18
     c96:	93 2b       	or	r25, r19
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
     c9c:	84 e6       	ldi	r24, 0x64	; 100
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	24 e6       	ldi	r18, 0x64	; 100
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	f9 01       	movw	r30, r18
     ca6:	20 81       	ld	r18, Z
     ca8:	24 60       	ori	r18, 0x04	; 4
     caa:	fc 01       	movw	r30, r24
     cac:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
     cae:	85 e2       	ldi	r24, 0x25	; 37
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	25 e2       	ldi	r18, 0x25	; 37
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	20 69       	ori	r18, 0x90	; 144
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 d2 06 	call	0xda4	; 0xda4 <Wait_ms>
	
	//Convert number into Celsius, then Fahrenheit
	float dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	cc 01       	movw	r24, r24
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 0a 08 	call	0x1014	; 0x1014 <__floatunsisf>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	bc 01       	movw	r22, r24
     ce0:	cd 01       	movw	r24, r26
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e0       	ldi	r20, 0x00	; 0
     ce8:	5d e3       	ldi	r21, 0x3D	; 61
     cea:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     cee:	dc 01       	movw	r26, r24
     cf0:	cb 01       	movw	r24, r22
     cf2:	bc 01       	movw	r22, r24
     cf4:	cd 01       	movw	r24, r26
     cf6:	26 e6       	ldi	r18, 0x66	; 102
     cf8:	36 e6       	ldi	r19, 0x66	; 102
     cfa:	46 ee       	ldi	r20, 0xE6	; 230
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 98 08 	call	0x1130	; 0x1130 <__mulsf3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	bc 01       	movw	r22, r24
     d08:	cd 01       	movw	r24, r26
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	52 e4       	ldi	r21, 0x42	; 66
     d12:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__addsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	8b 83       	std	Y+3, r24	; 0x03
     d1c:	9c 83       	std	Y+4, r25	; 0x04
     d1e:	ad 83       	std	Y+5, r26	; 0x05
     d20:	be 83       	std	Y+6, r27	; 0x06
	
	//Print string
	dtostrf(dataAD, 5, 2, tempStringAD);
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	9c 81       	ldd	r25, Y+4	; 0x04
     d26:	ad 81       	ldd	r26, Y+5	; 0x05
     d28:	be 81       	ldd	r27, Y+6	; 0x06
     d2a:	fe 01       	movw	r30, r28
     d2c:	37 96       	adiw	r30, 0x07	; 7
     d2e:	bc 01       	movw	r22, r24
     d30:	cd 01       	movw	r24, r26
     d32:	45 e0       	ldi	r20, 0x05	; 5
     d34:	22 e0       	ldi	r18, 0x02	; 2
     d36:	8f 01       	movw	r16, r30
     d38:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <dtostrf>
	tempStringAD[6] = '.';
     d3c:	8e e2       	ldi	r24, 0x2E	; 46
     d3e:	8d 87       	std	Y+13, r24	; 0x0d
	tempStringAD[7] = '\0';
     d40:	1e 86       	std	Y+14, r1	; 0x0e
	Print0(" AD temp= ");
     d42:	88 e4       	ldi	r24, 0x48	; 72
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
	Print0(tempStringAD);
     d4a:	ce 01       	movw	r24, r28
     d4c:	07 96       	adiw	r24, 0x07	; 7
     d4e:	0e 94 14 07 	call	0xe28	; 0xe28 <Print0>
}
     d52:	2e 96       	adiw	r28, 0x0e	; 14
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	08 95       	ret

00000d68 <ResetDebug>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <ResetDebug+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
     d72:	88 e2       	ldi	r24, 0x28	; 40
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	fc 01       	movw	r30, r24
     d78:	90 81       	ld	r25, Z
     d7a:	88 ef       	ldi	r24, 0xF8	; 248
     d7c:	89 27       	eor	r24, r25
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
     d86:	88 e2       	ldi	r24, 0x28	; 40
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	28 e2       	ldi	r18, 0x28	; 40
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	30 81       	ld	r19, Z
     d92:	29 81       	ldd	r18, Y+1	; 0x01
     d94:	23 23       	and	r18, r19
     d96:	fc 01       	movw	r30, r24
     d98:	20 83       	st	Z, r18
}
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	df 91       	pop	r29
     da0:	cf 91       	pop	r28
     da2:	08 95       	ret

00000da4 <Wait_ms>:

/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	00 d0       	rcall	.+0      	; 0xdaa <Wait_ms+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <Wait_ms+0x8>
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	9c 83       	std	Y+4, r25	; 0x04
     db2:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
     db4:	14 c0       	rjmp	.+40     	; 0xdde <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
     db6:	1a 82       	std	Y+2, r1	; 0x02
     db8:	19 82       	std	Y+1, r1	; 0x01
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <Wait_ms+0x24>
			asm volatile("nop");
     dbc:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	80 39       	cpi	r24, 0x90	; 144
     dd0:	92 07       	cpc	r25, r18
     dd2:	a0 f3       	brcs	.-24     	; 0xdbc <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	9c 81       	ldd	r25, Y+4	; 0x04
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	9c 83       	std	Y+4, r25	; 0x04
     ddc:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	41 f7       	brne	.-48     	; 0xdb6 <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <PutUart0Ch>:

/**********************************************************************************************************************************/

void PutUart0Ch(char ch)
{
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	0f 92       	push	r0
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
     e00:	00 00       	nop
     e02:	80 ec       	ldi	r24, 0xC0	; 192
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	80 72       	andi	r24, 0x20	; 32
     e10:	90 70       	andi	r25, 0x00	; 0
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	b1 f3       	breq	.-20     	; 0xe02 <PutUart0Ch+0xe>
	UDR0 = ch;
     e16:	86 ec       	ldi	r24, 0xC6	; 198
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	29 81       	ldd	r18, Y+1	; 0x01
     e1c:	fc 01       	movw	r30, r24
     e1e:	20 83       	st	Z, r18
}
     e20:	0f 90       	pop	r0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	08 95       	ret

00000e28 <Print0>:

/**********************************************************************************************************************************/
void Print0(char string[])
{	
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <Print0+0x6>
     e2e:	0f 92       	push	r0
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	9b 83       	std	Y+3, r25	; 0x03
     e36:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     e38:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     e3a:	0e c0       	rjmp	.+28     	; 0xe58 <Print0+0x30>
		PutUart0Ch(string[i]);  //send byte		
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	2a 81       	ldd	r18, Y+2	; 0x02
     e44:	3b 81       	ldd	r19, Y+3	; 0x03
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	fc 01       	movw	r30, r24
     e4c:	80 81       	ld	r24, Z
     e4e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <PutUart0Ch>
		i += 1;
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{	
	BYTE i;
	i = 0;

	while (string[i]) {
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	2a 81       	ldd	r18, Y+2	; 0x02
     e60:	3b 81       	ldd	r19, Y+3	; 0x03
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	fc 01       	movw	r30, r24
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	39 f7       	brne	.-50     	; 0xe3c <Print0+0x14>
		PutUart0Ch(string[i]);  //send byte		
		i += 1;
	}
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <__subsf3>:
     e7a:	50 58       	subi	r21, 0x80	; 128

00000e7c <__addsf3>:
     e7c:	bb 27       	eor	r27, r27
     e7e:	aa 27       	eor	r26, r26
     e80:	0e d0       	rcall	.+28     	; 0xe9e <__addsf3x>
     e82:	1c c1       	rjmp	.+568    	; 0x10bc <__fp_round>
     e84:	0d d1       	rcall	.+538    	; 0x10a0 <__fp_pscA>
     e86:	30 f0       	brcs	.+12     	; 0xe94 <__addsf3+0x18>
     e88:	12 d1       	rcall	.+548    	; 0x10ae <__fp_pscB>
     e8a:	20 f0       	brcs	.+8      	; 0xe94 <__addsf3+0x18>
     e8c:	31 f4       	brne	.+12     	; 0xe9a <__addsf3+0x1e>
     e8e:	9f 3f       	cpi	r25, 0xFF	; 255
     e90:	11 f4       	brne	.+4      	; 0xe96 <__addsf3+0x1a>
     e92:	1e f4       	brtc	.+6      	; 0xe9a <__addsf3+0x1e>
     e94:	02 c1       	rjmp	.+516    	; 0x109a <__fp_nan>
     e96:	0e f4       	brtc	.+2      	; 0xe9a <__addsf3+0x1e>
     e98:	e0 95       	com	r30
     e9a:	e7 fb       	bst	r30, 7
     e9c:	f8 c0       	rjmp	.+496    	; 0x108e <__fp_inf>

00000e9e <__addsf3x>:
     e9e:	e9 2f       	mov	r30, r25
     ea0:	1e d1       	rcall	.+572    	; 0x10de <__fp_split3>
     ea2:	80 f3       	brcs	.-32     	; 0xe84 <__addsf3+0x8>
     ea4:	ba 17       	cp	r27, r26
     ea6:	62 07       	cpc	r22, r18
     ea8:	73 07       	cpc	r23, r19
     eaa:	84 07       	cpc	r24, r20
     eac:	95 07       	cpc	r25, r21
     eae:	18 f0       	brcs	.+6      	; 0xeb6 <__addsf3x+0x18>
     eb0:	71 f4       	brne	.+28     	; 0xece <__addsf3x+0x30>
     eb2:	9e f5       	brtc	.+102    	; 0xf1a <__addsf3x+0x7c>
     eb4:	36 c1       	rjmp	.+620    	; 0x1122 <__fp_zero>
     eb6:	0e f4       	brtc	.+2      	; 0xeba <__addsf3x+0x1c>
     eb8:	e0 95       	com	r30
     eba:	0b 2e       	mov	r0, r27
     ebc:	ba 2f       	mov	r27, r26
     ebe:	a0 2d       	mov	r26, r0
     ec0:	0b 01       	movw	r0, r22
     ec2:	b9 01       	movw	r22, r18
     ec4:	90 01       	movw	r18, r0
     ec6:	0c 01       	movw	r0, r24
     ec8:	ca 01       	movw	r24, r20
     eca:	a0 01       	movw	r20, r0
     ecc:	11 24       	eor	r1, r1
     ece:	ff 27       	eor	r31, r31
     ed0:	59 1b       	sub	r21, r25
     ed2:	99 f0       	breq	.+38     	; 0xefa <__addsf3x+0x5c>
     ed4:	59 3f       	cpi	r21, 0xF9	; 249
     ed6:	50 f4       	brcc	.+20     	; 0xeec <__addsf3x+0x4e>
     ed8:	50 3e       	cpi	r21, 0xE0	; 224
     eda:	68 f1       	brcs	.+90     	; 0xf36 <__addsf3x+0x98>
     edc:	1a 16       	cp	r1, r26
     ede:	f0 40       	sbci	r31, 0x00	; 0
     ee0:	a2 2f       	mov	r26, r18
     ee2:	23 2f       	mov	r18, r19
     ee4:	34 2f       	mov	r19, r20
     ee6:	44 27       	eor	r20, r20
     ee8:	58 5f       	subi	r21, 0xF8	; 248
     eea:	f3 cf       	rjmp	.-26     	; 0xed2 <__addsf3x+0x34>
     eec:	46 95       	lsr	r20
     eee:	37 95       	ror	r19
     ef0:	27 95       	ror	r18
     ef2:	a7 95       	ror	r26
     ef4:	f0 40       	sbci	r31, 0x00	; 0
     ef6:	53 95       	inc	r21
     ef8:	c9 f7       	brne	.-14     	; 0xeec <__addsf3x+0x4e>
     efa:	7e f4       	brtc	.+30     	; 0xf1a <__addsf3x+0x7c>
     efc:	1f 16       	cp	r1, r31
     efe:	ba 0b       	sbc	r27, r26
     f00:	62 0b       	sbc	r22, r18
     f02:	73 0b       	sbc	r23, r19
     f04:	84 0b       	sbc	r24, r20
     f06:	ba f0       	brmi	.+46     	; 0xf36 <__addsf3x+0x98>
     f08:	91 50       	subi	r25, 0x01	; 1
     f0a:	a1 f0       	breq	.+40     	; 0xf34 <__addsf3x+0x96>
     f0c:	ff 0f       	add	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	c2 f7       	brpl	.-16     	; 0xf08 <__addsf3x+0x6a>
     f18:	0e c0       	rjmp	.+28     	; 0xf36 <__addsf3x+0x98>
     f1a:	ba 0f       	add	r27, r26
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 1f       	adc	r23, r19
     f20:	84 1f       	adc	r24, r20
     f22:	48 f4       	brcc	.+18     	; 0xf36 <__addsf3x+0x98>
     f24:	87 95       	ror	r24
     f26:	77 95       	ror	r23
     f28:	67 95       	ror	r22
     f2a:	b7 95       	ror	r27
     f2c:	f7 95       	ror	r31
     f2e:	9e 3f       	cpi	r25, 0xFE	; 254
     f30:	08 f0       	brcs	.+2      	; 0xf34 <__addsf3x+0x96>
     f32:	b3 cf       	rjmp	.-154    	; 0xe9a <__addsf3+0x1e>
     f34:	93 95       	inc	r25
     f36:	88 0f       	add	r24, r24
     f38:	08 f0       	brcs	.+2      	; 0xf3c <__addsf3x+0x9e>
     f3a:	99 27       	eor	r25, r25
     f3c:	ee 0f       	add	r30, r30
     f3e:	97 95       	ror	r25
     f40:	87 95       	ror	r24
     f42:	08 95       	ret

00000f44 <__divsf3>:
     f44:	0c d0       	rcall	.+24     	; 0xf5e <__divsf3x>
     f46:	ba c0       	rjmp	.+372    	; 0x10bc <__fp_round>
     f48:	b2 d0       	rcall	.+356    	; 0x10ae <__fp_pscB>
     f4a:	40 f0       	brcs	.+16     	; 0xf5c <__divsf3+0x18>
     f4c:	a9 d0       	rcall	.+338    	; 0x10a0 <__fp_pscA>
     f4e:	30 f0       	brcs	.+12     	; 0xf5c <__divsf3+0x18>
     f50:	21 f4       	brne	.+8      	; 0xf5a <__divsf3+0x16>
     f52:	5f 3f       	cpi	r21, 0xFF	; 255
     f54:	19 f0       	breq	.+6      	; 0xf5c <__divsf3+0x18>
     f56:	9b c0       	rjmp	.+310    	; 0x108e <__fp_inf>
     f58:	51 11       	cpse	r21, r1
     f5a:	e4 c0       	rjmp	.+456    	; 0x1124 <__fp_szero>
     f5c:	9e c0       	rjmp	.+316    	; 0x109a <__fp_nan>

00000f5e <__divsf3x>:
     f5e:	bf d0       	rcall	.+382    	; 0x10de <__fp_split3>
     f60:	98 f3       	brcs	.-26     	; 0xf48 <__divsf3+0x4>

00000f62 <__divsf3_pse>:
     f62:	99 23       	and	r25, r25
     f64:	c9 f3       	breq	.-14     	; 0xf58 <__divsf3+0x14>
     f66:	55 23       	and	r21, r21
     f68:	b1 f3       	breq	.-20     	; 0xf56 <__divsf3+0x12>
     f6a:	95 1b       	sub	r25, r21
     f6c:	55 0b       	sbc	r21, r21
     f6e:	bb 27       	eor	r27, r27
     f70:	aa 27       	eor	r26, r26
     f72:	62 17       	cp	r22, r18
     f74:	73 07       	cpc	r23, r19
     f76:	84 07       	cpc	r24, r20
     f78:	38 f0       	brcs	.+14     	; 0xf88 <__divsf3_pse+0x26>
     f7a:	9f 5f       	subi	r25, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	22 0f       	add	r18, r18
     f80:	33 1f       	adc	r19, r19
     f82:	44 1f       	adc	r20, r20
     f84:	aa 1f       	adc	r26, r26
     f86:	a9 f3       	breq	.-22     	; 0xf72 <__divsf3_pse+0x10>
     f88:	33 d0       	rcall	.+102    	; 0xff0 <__divsf3_pse+0x8e>
     f8a:	0e 2e       	mov	r0, r30
     f8c:	3a f0       	brmi	.+14     	; 0xf9c <__divsf3_pse+0x3a>
     f8e:	e0 e8       	ldi	r30, 0x80	; 128
     f90:	30 d0       	rcall	.+96     	; 0xff2 <__divsf3_pse+0x90>
     f92:	91 50       	subi	r25, 0x01	; 1
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	e6 95       	lsr	r30
     f98:	00 1c       	adc	r0, r0
     f9a:	ca f7       	brpl	.-14     	; 0xf8e <__divsf3_pse+0x2c>
     f9c:	29 d0       	rcall	.+82     	; 0xff0 <__divsf3_pse+0x8e>
     f9e:	fe 2f       	mov	r31, r30
     fa0:	27 d0       	rcall	.+78     	; 0xff0 <__divsf3_pse+0x8e>
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 1f       	adc	r24, r24
     fa8:	bb 1f       	adc	r27, r27
     faa:	26 17       	cp	r18, r22
     fac:	37 07       	cpc	r19, r23
     fae:	48 07       	cpc	r20, r24
     fb0:	ab 07       	cpc	r26, r27
     fb2:	b0 e8       	ldi	r27, 0x80	; 128
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__divsf3_pse+0x56>
     fb6:	bb 0b       	sbc	r27, r27
     fb8:	80 2d       	mov	r24, r0
     fba:	bf 01       	movw	r22, r30
     fbc:	ff 27       	eor	r31, r31
     fbe:	93 58       	subi	r25, 0x83	; 131
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	2a f0       	brmi	.+10     	; 0xfce <__divsf3_pse+0x6c>
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	51 05       	cpc	r21, r1
     fc8:	68 f0       	brcs	.+26     	; 0xfe4 <__divsf3_pse+0x82>
     fca:	61 c0       	rjmp	.+194    	; 0x108e <__fp_inf>
     fcc:	ab c0       	rjmp	.+342    	; 0x1124 <__fp_szero>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	ec f3       	brlt	.-6      	; 0xfcc <__divsf3_pse+0x6a>
     fd2:	98 3e       	cpi	r25, 0xE8	; 232
     fd4:	dc f3       	brlt	.-10     	; 0xfcc <__divsf3_pse+0x6a>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b7 95       	ror	r27
     fde:	f7 95       	ror	r31
     fe0:	9f 5f       	subi	r25, 0xFF	; 255
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__divsf3_pse+0x74>
     fe4:	88 0f       	add	r24, r24
     fe6:	91 1d       	adc	r25, r1
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret
     ff0:	e1 e0       	ldi	r30, 0x01	; 1
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	88 1f       	adc	r24, r24
     ff8:	bb 1f       	adc	r27, r27
     ffa:	62 17       	cp	r22, r18
     ffc:	73 07       	cpc	r23, r19
     ffe:	84 07       	cpc	r24, r20
    1000:	ba 07       	cpc	r27, r26
    1002:	20 f0       	brcs	.+8      	; 0x100c <__divsf3_pse+0xaa>
    1004:	62 1b       	sub	r22, r18
    1006:	73 0b       	sbc	r23, r19
    1008:	84 0b       	sbc	r24, r20
    100a:	ba 0b       	sbc	r27, r26
    100c:	ee 1f       	adc	r30, r30
    100e:	88 f7       	brcc	.-30     	; 0xff2 <__divsf3_pse+0x90>
    1010:	e0 95       	com	r30
    1012:	08 95       	ret

00001014 <__floatunsisf>:
    1014:	e8 94       	clt
    1016:	09 c0       	rjmp	.+18     	; 0x102a <__floatsisf+0x12>

00001018 <__floatsisf>:
    1018:	97 fb       	bst	r25, 7
    101a:	3e f4       	brtc	.+14     	; 0x102a <__floatsisf+0x12>
    101c:	90 95       	com	r25
    101e:	80 95       	com	r24
    1020:	70 95       	com	r23
    1022:	61 95       	neg	r22
    1024:	7f 4f       	sbci	r23, 0xFF	; 255
    1026:	8f 4f       	sbci	r24, 0xFF	; 255
    1028:	9f 4f       	sbci	r25, 0xFF	; 255
    102a:	99 23       	and	r25, r25
    102c:	a9 f0       	breq	.+42     	; 0x1058 <__floatsisf+0x40>
    102e:	f9 2f       	mov	r31, r25
    1030:	96 e9       	ldi	r25, 0x96	; 150
    1032:	bb 27       	eor	r27, r27
    1034:	93 95       	inc	r25
    1036:	f6 95       	lsr	r31
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	b7 95       	ror	r27
    1040:	f1 11       	cpse	r31, r1
    1042:	f8 cf       	rjmp	.-16     	; 0x1034 <__floatsisf+0x1c>
    1044:	fa f4       	brpl	.+62     	; 0x1084 <__floatsisf+0x6c>
    1046:	bb 0f       	add	r27, r27
    1048:	11 f4       	brne	.+4      	; 0x104e <__floatsisf+0x36>
    104a:	60 ff       	sbrs	r22, 0
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <__floatsisf+0x6c>
    104e:	6f 5f       	subi	r22, 0xFF	; 255
    1050:	7f 4f       	sbci	r23, 0xFF	; 255
    1052:	8f 4f       	sbci	r24, 0xFF	; 255
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <__floatsisf+0x6c>
    1058:	88 23       	and	r24, r24
    105a:	11 f0       	breq	.+4      	; 0x1060 <__floatsisf+0x48>
    105c:	96 e9       	ldi	r25, 0x96	; 150
    105e:	11 c0       	rjmp	.+34     	; 0x1082 <__floatsisf+0x6a>
    1060:	77 23       	and	r23, r23
    1062:	21 f0       	breq	.+8      	; 0x106c <__floatsisf+0x54>
    1064:	9e e8       	ldi	r25, 0x8E	; 142
    1066:	87 2f       	mov	r24, r23
    1068:	76 2f       	mov	r23, r22
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <__floatsisf+0x5e>
    106c:	66 23       	and	r22, r22
    106e:	71 f0       	breq	.+28     	; 0x108c <__floatsisf+0x74>
    1070:	96 e8       	ldi	r25, 0x86	; 134
    1072:	86 2f       	mov	r24, r22
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	2a f0       	brmi	.+10     	; 0x1084 <__floatsisf+0x6c>
    107a:	9a 95       	dec	r25
    107c:	66 0f       	add	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	88 1f       	adc	r24, r24
    1082:	da f7       	brpl	.-10     	; 0x107a <__floatsisf+0x62>
    1084:	88 0f       	add	r24, r24
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__fp_inf>:
    108e:	97 f9       	bld	r25, 7
    1090:	9f 67       	ori	r25, 0x7F	; 127
    1092:	80 e8       	ldi	r24, 0x80	; 128
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	60 e0       	ldi	r22, 0x00	; 0
    1098:	08 95       	ret

0000109a <__fp_nan>:
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	80 ec       	ldi	r24, 0xC0	; 192
    109e:	08 95       	ret

000010a0 <__fp_pscA>:
    10a0:	00 24       	eor	r0, r0
    10a2:	0a 94       	dec	r0
    10a4:	16 16       	cp	r1, r22
    10a6:	17 06       	cpc	r1, r23
    10a8:	18 06       	cpc	r1, r24
    10aa:	09 06       	cpc	r0, r25
    10ac:	08 95       	ret

000010ae <__fp_pscB>:
    10ae:	00 24       	eor	r0, r0
    10b0:	0a 94       	dec	r0
    10b2:	12 16       	cp	r1, r18
    10b4:	13 06       	cpc	r1, r19
    10b6:	14 06       	cpc	r1, r20
    10b8:	05 06       	cpc	r0, r21
    10ba:	08 95       	ret

000010bc <__fp_round>:
    10bc:	09 2e       	mov	r0, r25
    10be:	03 94       	inc	r0
    10c0:	00 0c       	add	r0, r0
    10c2:	11 f4       	brne	.+4      	; 0x10c8 <__fp_round+0xc>
    10c4:	88 23       	and	r24, r24
    10c6:	52 f0       	brmi	.+20     	; 0x10dc <__fp_round+0x20>
    10c8:	bb 0f       	add	r27, r27
    10ca:	40 f4       	brcc	.+16     	; 0x10dc <__fp_round+0x20>
    10cc:	bf 2b       	or	r27, r31
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__fp_round+0x18>
    10d0:	60 ff       	sbrs	r22, 0
    10d2:	04 c0       	rjmp	.+8      	; 0x10dc <__fp_round+0x20>
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	8f 4f       	sbci	r24, 0xFF	; 255
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	08 95       	ret

000010de <__fp_split3>:
    10de:	57 fd       	sbrc	r21, 7
    10e0:	90 58       	subi	r25, 0x80	; 128
    10e2:	44 0f       	add	r20, r20
    10e4:	55 1f       	adc	r21, r21
    10e6:	59 f0       	breq	.+22     	; 0x10fe <__fp_splitA+0x10>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	71 f0       	breq	.+28     	; 0x1108 <__fp_splitA+0x1a>
    10ec:	47 95       	ror	r20

000010ee <__fp_splitA>:
    10ee:	88 0f       	add	r24, r24
    10f0:	97 fb       	bst	r25, 7
    10f2:	99 1f       	adc	r25, r25
    10f4:	61 f0       	breq	.+24     	; 0x110e <__fp_splitA+0x20>
    10f6:	9f 3f       	cpi	r25, 0xFF	; 255
    10f8:	79 f0       	breq	.+30     	; 0x1118 <__fp_splitA+0x2a>
    10fa:	87 95       	ror	r24
    10fc:	08 95       	ret
    10fe:	12 16       	cp	r1, r18
    1100:	13 06       	cpc	r1, r19
    1102:	14 06       	cpc	r1, r20
    1104:	55 1f       	adc	r21, r21
    1106:	f2 cf       	rjmp	.-28     	; 0x10ec <__fp_split3+0xe>
    1108:	46 95       	lsr	r20
    110a:	f1 df       	rcall	.-30     	; 0x10ee <__fp_splitA>
    110c:	08 c0       	rjmp	.+16     	; 0x111e <__fp_splitA+0x30>
    110e:	16 16       	cp	r1, r22
    1110:	17 06       	cpc	r1, r23
    1112:	18 06       	cpc	r1, r24
    1114:	99 1f       	adc	r25, r25
    1116:	f1 cf       	rjmp	.-30     	; 0x10fa <__fp_splitA+0xc>
    1118:	86 95       	lsr	r24
    111a:	71 05       	cpc	r23, r1
    111c:	61 05       	cpc	r22, r1
    111e:	08 94       	sec
    1120:	08 95       	ret

00001122 <__fp_zero>:
    1122:	e8 94       	clt

00001124 <__fp_szero>:
    1124:	bb 27       	eor	r27, r27
    1126:	66 27       	eor	r22, r22
    1128:	77 27       	eor	r23, r23
    112a:	cb 01       	movw	r24, r22
    112c:	97 f9       	bld	r25, 7
    112e:	08 95       	ret

00001130 <__mulsf3>:
    1130:	0b d0       	rcall	.+22     	; 0x1148 <__mulsf3x>
    1132:	c4 cf       	rjmp	.-120    	; 0x10bc <__fp_round>
    1134:	b5 df       	rcall	.-150    	; 0x10a0 <__fp_pscA>
    1136:	28 f0       	brcs	.+10     	; 0x1142 <__mulsf3+0x12>
    1138:	ba df       	rcall	.-140    	; 0x10ae <__fp_pscB>
    113a:	18 f0       	brcs	.+6      	; 0x1142 <__mulsf3+0x12>
    113c:	95 23       	and	r25, r21
    113e:	09 f0       	breq	.+2      	; 0x1142 <__mulsf3+0x12>
    1140:	a6 cf       	rjmp	.-180    	; 0x108e <__fp_inf>
    1142:	ab cf       	rjmp	.-170    	; 0x109a <__fp_nan>
    1144:	11 24       	eor	r1, r1
    1146:	ee cf       	rjmp	.-36     	; 0x1124 <__fp_szero>

00001148 <__mulsf3x>:
    1148:	ca df       	rcall	.-108    	; 0x10de <__fp_split3>
    114a:	a0 f3       	brcs	.-24     	; 0x1134 <__mulsf3+0x4>

0000114c <__mulsf3_pse>:
    114c:	95 9f       	mul	r25, r21
    114e:	d1 f3       	breq	.-12     	; 0x1144 <__mulsf3+0x14>
    1150:	95 0f       	add	r25, r21
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	55 1f       	adc	r21, r21
    1156:	62 9f       	mul	r22, r18
    1158:	f0 01       	movw	r30, r0
    115a:	72 9f       	mul	r23, r18
    115c:	bb 27       	eor	r27, r27
    115e:	f0 0d       	add	r31, r0
    1160:	b1 1d       	adc	r27, r1
    1162:	63 9f       	mul	r22, r19
    1164:	aa 27       	eor	r26, r26
    1166:	f0 0d       	add	r31, r0
    1168:	b1 1d       	adc	r27, r1
    116a:	aa 1f       	adc	r26, r26
    116c:	64 9f       	mul	r22, r20
    116e:	66 27       	eor	r22, r22
    1170:	b0 0d       	add	r27, r0
    1172:	a1 1d       	adc	r26, r1
    1174:	66 1f       	adc	r22, r22
    1176:	82 9f       	mul	r24, r18
    1178:	22 27       	eor	r18, r18
    117a:	b0 0d       	add	r27, r0
    117c:	a1 1d       	adc	r26, r1
    117e:	62 1f       	adc	r22, r18
    1180:	73 9f       	mul	r23, r19
    1182:	b0 0d       	add	r27, r0
    1184:	a1 1d       	adc	r26, r1
    1186:	62 1f       	adc	r22, r18
    1188:	83 9f       	mul	r24, r19
    118a:	a0 0d       	add	r26, r0
    118c:	61 1d       	adc	r22, r1
    118e:	22 1f       	adc	r18, r18
    1190:	74 9f       	mul	r23, r20
    1192:	33 27       	eor	r19, r19
    1194:	a0 0d       	add	r26, r0
    1196:	61 1d       	adc	r22, r1
    1198:	23 1f       	adc	r18, r19
    119a:	84 9f       	mul	r24, r20
    119c:	60 0d       	add	r22, r0
    119e:	21 1d       	adc	r18, r1
    11a0:	82 2f       	mov	r24, r18
    11a2:	76 2f       	mov	r23, r22
    11a4:	6a 2f       	mov	r22, r26
    11a6:	11 24       	eor	r1, r1
    11a8:	9f 57       	subi	r25, 0x7F	; 127
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	8a f0       	brmi	.+34     	; 0x11d0 <__mulsf3_pse+0x84>
    11ae:	e1 f0       	breq	.+56     	; 0x11e8 <__mulsf3_pse+0x9c>
    11b0:	88 23       	and	r24, r24
    11b2:	4a f0       	brmi	.+18     	; 0x11c6 <__mulsf3_pse+0x7a>
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	bb 1f       	adc	r27, r27
    11ba:	66 1f       	adc	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	91 50       	subi	r25, 0x01	; 1
    11c2:	50 40       	sbci	r21, 0x00	; 0
    11c4:	a9 f7       	brne	.-22     	; 0x11b0 <__mulsf3_pse+0x64>
    11c6:	9e 3f       	cpi	r25, 0xFE	; 254
    11c8:	51 05       	cpc	r21, r1
    11ca:	70 f0       	brcs	.+28     	; 0x11e8 <__mulsf3_pse+0x9c>
    11cc:	60 cf       	rjmp	.-320    	; 0x108e <__fp_inf>
    11ce:	aa cf       	rjmp	.-172    	; 0x1124 <__fp_szero>
    11d0:	5f 3f       	cpi	r21, 0xFF	; 255
    11d2:	ec f3       	brlt	.-6      	; 0x11ce <__mulsf3_pse+0x82>
    11d4:	98 3e       	cpi	r25, 0xE8	; 232
    11d6:	dc f3       	brlt	.-10     	; 0x11ce <__mulsf3_pse+0x82>
    11d8:	86 95       	lsr	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	e7 95       	ror	r30
    11e4:	9f 5f       	subi	r25, 0xFF	; 255
    11e6:	c1 f7       	brne	.-16     	; 0x11d8 <__mulsf3_pse+0x8c>
    11e8:	fe 2b       	or	r31, r30
    11ea:	88 0f       	add	r24, r24
    11ec:	91 1d       	adc	r25, r1
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	97 f9       	bld	r25, 7
    11f4:	08 95       	ret

000011f6 <dtostrf>:
    11f6:	ef 92       	push	r14
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	32 2f       	mov	r19, r18
    1200:	c0 2f       	mov	r28, r16
    1202:	47 ff       	sbrs	r20, 7
    1204:	02 c0       	rjmp	.+4      	; 0x120a <dtostrf+0x14>
    1206:	a4 e1       	ldi	r26, 0x14	; 20
    1208:	01 c0       	rjmp	.+2      	; 0x120c <dtostrf+0x16>
    120a:	a4 e0       	ldi	r26, 0x04	; 4
    120c:	e4 2f       	mov	r30, r20
    120e:	ff 27       	eor	r31, r31
    1210:	e7 fd       	sbrc	r30, 7
    1212:	f0 95       	com	r31
    1214:	f7 ff       	sbrs	r31, 7
    1216:	03 c0       	rjmp	.+6      	; 0x121e <dtostrf+0x28>
    1218:	f0 95       	com	r31
    121a:	e1 95       	neg	r30
    121c:	ff 4f       	sbci	r31, 0xFF	; 255
    121e:	4c 2f       	mov	r20, r28
    1220:	51 2f       	mov	r21, r17
    1222:	2e 2f       	mov	r18, r30
    1224:	03 2f       	mov	r16, r19
    1226:	ea 2e       	mov	r14, r26
    1228:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <dtoa_prf>
    122c:	8c 2f       	mov	r24, r28
    122e:	91 2f       	mov	r25, r17
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	ef 90       	pop	r14
    1238:	08 95       	ret

0000123a <vfprintf>:
    123a:	ad e0       	ldi	r26, 0x0D	; 13
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	e3 e2       	ldi	r30, 0x23	; 35
    1240:	f9 e0       	ldi	r31, 0x09	; 9
    1242:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__prologue_saves__>
    1246:	3c 01       	movw	r6, r24
    1248:	7d 87       	std	Y+13, r23	; 0x0d
    124a:	6c 87       	std	Y+12, r22	; 0x0c
    124c:	5a 01       	movw	r10, r20
    124e:	fc 01       	movw	r30, r24
    1250:	17 82       	std	Z+7, r1	; 0x07
    1252:	16 82       	std	Z+6, r1	; 0x06
    1254:	83 81       	ldd	r24, Z+3	; 0x03
    1256:	81 ff       	sbrs	r24, 1
    1258:	c8 c1       	rjmp	.+912    	; 0x15ea <vfprintf+0x3b0>
    125a:	2e 01       	movw	r4, r28
    125c:	08 94       	sec
    125e:	41 1c       	adc	r4, r1
    1260:	51 1c       	adc	r5, r1
    1262:	f3 01       	movw	r30, r6
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	ec 85       	ldd	r30, Y+12	; 0x0c
    1268:	fd 85       	ldd	r31, Y+13	; 0x0d
    126a:	93 fd       	sbrc	r25, 3
    126c:	85 91       	lpm	r24, Z+
    126e:	93 ff       	sbrs	r25, 3
    1270:	81 91       	ld	r24, Z+
    1272:	fd 87       	std	Y+13, r31	; 0x0d
    1274:	ec 87       	std	Y+12, r30	; 0x0c
    1276:	88 23       	and	r24, r24
    1278:	09 f4       	brne	.+2      	; 0x127c <vfprintf+0x42>
    127a:	b3 c1       	rjmp	.+870    	; 0x15e2 <vfprintf+0x3a8>
    127c:	85 32       	cpi	r24, 0x25	; 37
    127e:	41 f4       	brne	.+16     	; 0x1290 <vfprintf+0x56>
    1280:	93 fd       	sbrc	r25, 3
    1282:	85 91       	lpm	r24, Z+
    1284:	93 ff       	sbrs	r25, 3
    1286:	81 91       	ld	r24, Z+
    1288:	fd 87       	std	Y+13, r31	; 0x0d
    128a:	ec 87       	std	Y+12, r30	; 0x0c
    128c:	85 32       	cpi	r24, 0x25	; 37
    128e:	29 f4       	brne	.+10     	; 0x129a <vfprintf+0x60>
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	b3 01       	movw	r22, r6
    1294:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    1298:	e4 cf       	rjmp	.-56     	; 0x1262 <vfprintf+0x28>
    129a:	ff 24       	eor	r15, r15
    129c:	ee 24       	eor	r14, r14
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	10 32       	cpi	r17, 0x20	; 32
    12a2:	b0 f4       	brcc	.+44     	; 0x12d0 <vfprintf+0x96>
    12a4:	8b 32       	cpi	r24, 0x2B	; 43
    12a6:	69 f0       	breq	.+26     	; 0x12c2 <vfprintf+0x88>
    12a8:	8c 32       	cpi	r24, 0x2C	; 44
    12aa:	28 f4       	brcc	.+10     	; 0x12b6 <vfprintf+0x7c>
    12ac:	80 32       	cpi	r24, 0x20	; 32
    12ae:	51 f0       	breq	.+20     	; 0x12c4 <vfprintf+0x8a>
    12b0:	83 32       	cpi	r24, 0x23	; 35
    12b2:	71 f4       	brne	.+28     	; 0x12d0 <vfprintf+0x96>
    12b4:	0b c0       	rjmp	.+22     	; 0x12cc <vfprintf+0x92>
    12b6:	8d 32       	cpi	r24, 0x2D	; 45
    12b8:	39 f0       	breq	.+14     	; 0x12c8 <vfprintf+0x8e>
    12ba:	80 33       	cpi	r24, 0x30	; 48
    12bc:	49 f4       	brne	.+18     	; 0x12d0 <vfprintf+0x96>
    12be:	11 60       	ori	r17, 0x01	; 1
    12c0:	2c c0       	rjmp	.+88     	; 0x131a <vfprintf+0xe0>
    12c2:	12 60       	ori	r17, 0x02	; 2
    12c4:	14 60       	ori	r17, 0x04	; 4
    12c6:	29 c0       	rjmp	.+82     	; 0x131a <vfprintf+0xe0>
    12c8:	18 60       	ori	r17, 0x08	; 8
    12ca:	27 c0       	rjmp	.+78     	; 0x131a <vfprintf+0xe0>
    12cc:	10 61       	ori	r17, 0x10	; 16
    12ce:	25 c0       	rjmp	.+74     	; 0x131a <vfprintf+0xe0>
    12d0:	17 fd       	sbrc	r17, 7
    12d2:	2e c0       	rjmp	.+92     	; 0x1330 <vfprintf+0xf6>
    12d4:	28 2f       	mov	r18, r24
    12d6:	20 53       	subi	r18, 0x30	; 48
    12d8:	2a 30       	cpi	r18, 0x0A	; 10
    12da:	98 f4       	brcc	.+38     	; 0x1302 <vfprintf+0xc8>
    12dc:	16 ff       	sbrs	r17, 6
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <vfprintf+0xb6>
    12e0:	8f 2d       	mov	r24, r15
    12e2:	88 0f       	add	r24, r24
    12e4:	f8 2e       	mov	r15, r24
    12e6:	ff 0c       	add	r15, r15
    12e8:	ff 0c       	add	r15, r15
    12ea:	f8 0e       	add	r15, r24
    12ec:	f2 0e       	add	r15, r18
    12ee:	15 c0       	rjmp	.+42     	; 0x131a <vfprintf+0xe0>
    12f0:	8e 2d       	mov	r24, r14
    12f2:	88 0f       	add	r24, r24
    12f4:	e8 2e       	mov	r14, r24
    12f6:	ee 0c       	add	r14, r14
    12f8:	ee 0c       	add	r14, r14
    12fa:	e8 0e       	add	r14, r24
    12fc:	e2 0e       	add	r14, r18
    12fe:	10 62       	ori	r17, 0x20	; 32
    1300:	0c c0       	rjmp	.+24     	; 0x131a <vfprintf+0xe0>
    1302:	8e 32       	cpi	r24, 0x2E	; 46
    1304:	21 f4       	brne	.+8      	; 0x130e <vfprintf+0xd4>
    1306:	16 fd       	sbrc	r17, 6
    1308:	6c c1       	rjmp	.+728    	; 0x15e2 <vfprintf+0x3a8>
    130a:	10 64       	ori	r17, 0x40	; 64
    130c:	06 c0       	rjmp	.+12     	; 0x131a <vfprintf+0xe0>
    130e:	8c 36       	cpi	r24, 0x6C	; 108
    1310:	11 f4       	brne	.+4      	; 0x1316 <vfprintf+0xdc>
    1312:	10 68       	ori	r17, 0x80	; 128
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0xe0>
    1316:	88 36       	cpi	r24, 0x68	; 104
    1318:	59 f4       	brne	.+22     	; 0x1330 <vfprintf+0xf6>
    131a:	ec 85       	ldd	r30, Y+12	; 0x0c
    131c:	fd 85       	ldd	r31, Y+13	; 0x0d
    131e:	93 fd       	sbrc	r25, 3
    1320:	85 91       	lpm	r24, Z+
    1322:	93 ff       	sbrs	r25, 3
    1324:	81 91       	ld	r24, Z+
    1326:	fd 87       	std	Y+13, r31	; 0x0d
    1328:	ec 87       	std	Y+12, r30	; 0x0c
    132a:	88 23       	and	r24, r24
    132c:	09 f0       	breq	.+2      	; 0x1330 <vfprintf+0xf6>
    132e:	b8 cf       	rjmp	.-144    	; 0x12a0 <vfprintf+0x66>
    1330:	98 2f       	mov	r25, r24
    1332:	95 54       	subi	r25, 0x45	; 69
    1334:	93 30       	cpi	r25, 0x03	; 3
    1336:	18 f0       	brcs	.+6      	; 0x133e <vfprintf+0x104>
    1338:	90 52       	subi	r25, 0x20	; 32
    133a:	93 30       	cpi	r25, 0x03	; 3
    133c:	38 f4       	brcc	.+14     	; 0x134c <vfprintf+0x112>
    133e:	24 e0       	ldi	r18, 0x04	; 4
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	a2 0e       	add	r10, r18
    1344:	b3 1e       	adc	r11, r19
    1346:	3f e3       	ldi	r19, 0x3F	; 63
    1348:	39 83       	std	Y+1, r19	; 0x01
    134a:	0f c0       	rjmp	.+30     	; 0x136a <vfprintf+0x130>
    134c:	83 36       	cpi	r24, 0x63	; 99
    134e:	31 f0       	breq	.+12     	; 0x135c <vfprintf+0x122>
    1350:	83 37       	cpi	r24, 0x73	; 115
    1352:	81 f0       	breq	.+32     	; 0x1374 <vfprintf+0x13a>
    1354:	83 35       	cpi	r24, 0x53	; 83
    1356:	09 f0       	breq	.+2      	; 0x135a <vfprintf+0x120>
    1358:	5a c0       	rjmp	.+180    	; 0x140e <vfprintf+0x1d4>
    135a:	22 c0       	rjmp	.+68     	; 0x13a0 <vfprintf+0x166>
    135c:	f5 01       	movw	r30, r10
    135e:	80 81       	ld	r24, Z
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	22 e0       	ldi	r18, 0x02	; 2
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	a2 0e       	add	r10, r18
    1368:	b3 1e       	adc	r11, r19
    136a:	21 e0       	ldi	r18, 0x01	; 1
    136c:	c2 2e       	mov	r12, r18
    136e:	d1 2c       	mov	r13, r1
    1370:	42 01       	movw	r8, r4
    1372:	14 c0       	rjmp	.+40     	; 0x139c <vfprintf+0x162>
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	29 2e       	mov	r2, r25
    1378:	31 2c       	mov	r3, r1
    137a:	2a 0c       	add	r2, r10
    137c:	3b 1c       	adc	r3, r11
    137e:	f5 01       	movw	r30, r10
    1380:	80 80       	ld	r8, Z
    1382:	91 80       	ldd	r9, Z+1	; 0x01
    1384:	16 ff       	sbrs	r17, 6
    1386:	03 c0       	rjmp	.+6      	; 0x138e <vfprintf+0x154>
    1388:	6f 2d       	mov	r22, r15
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <vfprintf+0x158>
    138e:	6f ef       	ldi	r22, 0xFF	; 255
    1390:	7f ef       	ldi	r23, 0xFF	; 255
    1392:	c4 01       	movw	r24, r8
    1394:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <strnlen>
    1398:	6c 01       	movw	r12, r24
    139a:	51 01       	movw	r10, r2
    139c:	1f 77       	andi	r17, 0x7F	; 127
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <vfprintf+0x190>
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	28 2e       	mov	r2, r24
    13a4:	31 2c       	mov	r3, r1
    13a6:	2a 0c       	add	r2, r10
    13a8:	3b 1c       	adc	r3, r11
    13aa:	f5 01       	movw	r30, r10
    13ac:	80 80       	ld	r8, Z
    13ae:	91 80       	ldd	r9, Z+1	; 0x01
    13b0:	16 ff       	sbrs	r17, 6
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <vfprintf+0x180>
    13b4:	6f 2d       	mov	r22, r15
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <vfprintf+0x184>
    13ba:	6f ef       	ldi	r22, 0xFF	; 255
    13bc:	7f ef       	ldi	r23, 0xFF	; 255
    13be:	c4 01       	movw	r24, r8
    13c0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <strnlen_P>
    13c4:	6c 01       	movw	r12, r24
    13c6:	10 68       	ori	r17, 0x80	; 128
    13c8:	51 01       	movw	r10, r2
    13ca:	13 fd       	sbrc	r17, 3
    13cc:	1c c0       	rjmp	.+56     	; 0x1406 <vfprintf+0x1cc>
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x1a2>
    13d0:	80 e2       	ldi	r24, 0x20	; 32
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	b3 01       	movw	r22, r6
    13d6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    13da:	ea 94       	dec	r14
    13dc:	8e 2d       	mov	r24, r14
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	c8 16       	cp	r12, r24
    13e2:	d9 06       	cpc	r13, r25
    13e4:	a8 f3       	brcs	.-22     	; 0x13d0 <vfprintf+0x196>
    13e6:	0f c0       	rjmp	.+30     	; 0x1406 <vfprintf+0x1cc>
    13e8:	f4 01       	movw	r30, r8
    13ea:	17 fd       	sbrc	r17, 7
    13ec:	85 91       	lpm	r24, Z+
    13ee:	17 ff       	sbrs	r17, 7
    13f0:	81 91       	ld	r24, Z+
    13f2:	4f 01       	movw	r8, r30
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	b3 01       	movw	r22, r6
    13f8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    13fc:	e1 10       	cpse	r14, r1
    13fe:	ea 94       	dec	r14
    1400:	08 94       	sec
    1402:	c1 08       	sbc	r12, r1
    1404:	d1 08       	sbc	r13, r1
    1406:	c1 14       	cp	r12, r1
    1408:	d1 04       	cpc	r13, r1
    140a:	71 f7       	brne	.-36     	; 0x13e8 <vfprintf+0x1ae>
    140c:	e7 c0       	rjmp	.+462    	; 0x15dc <vfprintf+0x3a2>
    140e:	84 36       	cpi	r24, 0x64	; 100
    1410:	11 f0       	breq	.+4      	; 0x1416 <vfprintf+0x1dc>
    1412:	89 36       	cpi	r24, 0x69	; 105
    1414:	51 f5       	brne	.+84     	; 0x146a <vfprintf+0x230>
    1416:	f5 01       	movw	r30, r10
    1418:	17 ff       	sbrs	r17, 7
    141a:	07 c0       	rjmp	.+14     	; 0x142a <vfprintf+0x1f0>
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	a2 81       	ldd	r26, Z+2	; 0x02
    1422:	b3 81       	ldd	r27, Z+3	; 0x03
    1424:	24 e0       	ldi	r18, 0x04	; 4
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	08 c0       	rjmp	.+16     	; 0x143a <vfprintf+0x200>
    142a:	80 81       	ld	r24, Z
    142c:	91 81       	ldd	r25, Z+1	; 0x01
    142e:	aa 27       	eor	r26, r26
    1430:	97 fd       	sbrc	r25, 7
    1432:	a0 95       	com	r26
    1434:	ba 2f       	mov	r27, r26
    1436:	22 e0       	ldi	r18, 0x02	; 2
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	a2 0e       	add	r10, r18
    143c:	b3 1e       	adc	r11, r19
    143e:	01 2f       	mov	r16, r17
    1440:	0f 76       	andi	r16, 0x6F	; 111
    1442:	b7 ff       	sbrs	r27, 7
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <vfprintf+0x21c>
    1446:	b0 95       	com	r27
    1448:	a0 95       	com	r26
    144a:	90 95       	com	r25
    144c:	81 95       	neg	r24
    144e:	9f 4f       	sbci	r25, 0xFF	; 255
    1450:	af 4f       	sbci	r26, 0xFF	; 255
    1452:	bf 4f       	sbci	r27, 0xFF	; 255
    1454:	00 68       	ori	r16, 0x80	; 128
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	a2 01       	movw	r20, r4
    145c:	2a e0       	ldi	r18, 0x0A	; 10
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    1464:	d8 2e       	mov	r13, r24
    1466:	d4 18       	sub	r13, r4
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <vfprintf+0x2ae>
    146a:	85 37       	cpi	r24, 0x75	; 117
    146c:	21 f4       	brne	.+8      	; 0x1476 <vfprintf+0x23c>
    146e:	1f 7e       	andi	r17, 0xEF	; 239
    1470:	2a e0       	ldi	r18, 0x0A	; 10
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	20 c0       	rjmp	.+64     	; 0x14b6 <vfprintf+0x27c>
    1476:	19 7f       	andi	r17, 0xF9	; 249
    1478:	8f 36       	cpi	r24, 0x6F	; 111
    147a:	a9 f0       	breq	.+42     	; 0x14a6 <vfprintf+0x26c>
    147c:	80 37       	cpi	r24, 0x70	; 112
    147e:	20 f4       	brcc	.+8      	; 0x1488 <vfprintf+0x24e>
    1480:	88 35       	cpi	r24, 0x58	; 88
    1482:	09 f0       	breq	.+2      	; 0x1486 <vfprintf+0x24c>
    1484:	ae c0       	rjmp	.+348    	; 0x15e2 <vfprintf+0x3a8>
    1486:	0b c0       	rjmp	.+22     	; 0x149e <vfprintf+0x264>
    1488:	80 37       	cpi	r24, 0x70	; 112
    148a:	21 f0       	breq	.+8      	; 0x1494 <vfprintf+0x25a>
    148c:	88 37       	cpi	r24, 0x78	; 120
    148e:	09 f0       	breq	.+2      	; 0x1492 <vfprintf+0x258>
    1490:	a8 c0       	rjmp	.+336    	; 0x15e2 <vfprintf+0x3a8>
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <vfprintf+0x25c>
    1494:	10 61       	ori	r17, 0x10	; 16
    1496:	14 ff       	sbrs	r17, 4
    1498:	09 c0       	rjmp	.+18     	; 0x14ac <vfprintf+0x272>
    149a:	14 60       	ori	r17, 0x04	; 4
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <vfprintf+0x272>
    149e:	14 ff       	sbrs	r17, 4
    14a0:	08 c0       	rjmp	.+16     	; 0x14b2 <vfprintf+0x278>
    14a2:	16 60       	ori	r17, 0x06	; 6
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x278>
    14a6:	28 e0       	ldi	r18, 0x08	; 8
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <vfprintf+0x27c>
    14ac:	20 e1       	ldi	r18, 0x10	; 16
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x27c>
    14b2:	20 e1       	ldi	r18, 0x10	; 16
    14b4:	32 e0       	ldi	r19, 0x02	; 2
    14b6:	f5 01       	movw	r30, r10
    14b8:	17 ff       	sbrs	r17, 7
    14ba:	07 c0       	rjmp	.+14     	; 0x14ca <vfprintf+0x290>
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	44 e0       	ldi	r20, 0x04	; 4
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	06 c0       	rjmp	.+12     	; 0x14d6 <vfprintf+0x29c>
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	42 e0       	ldi	r20, 0x02	; 2
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	a4 0e       	add	r10, r20
    14d8:	b5 1e       	adc	r11, r21
    14da:	a2 01       	movw	r20, r4
    14dc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <__ultoa_invert>
    14e0:	d8 2e       	mov	r13, r24
    14e2:	d4 18       	sub	r13, r4
    14e4:	01 2f       	mov	r16, r17
    14e6:	0f 77       	andi	r16, 0x7F	; 127
    14e8:	06 ff       	sbrs	r16, 6
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <vfprintf+0x2c4>
    14ec:	0e 7f       	andi	r16, 0xFE	; 254
    14ee:	df 14       	cp	r13, r15
    14f0:	30 f4       	brcc	.+12     	; 0x14fe <vfprintf+0x2c4>
    14f2:	04 ff       	sbrs	r16, 4
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <vfprintf+0x2c8>
    14f6:	02 fd       	sbrc	r16, 2
    14f8:	04 c0       	rjmp	.+8      	; 0x1502 <vfprintf+0x2c8>
    14fa:	0f 7e       	andi	r16, 0xEF	; 239
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <vfprintf+0x2c8>
    14fe:	1d 2d       	mov	r17, r13
    1500:	01 c0       	rjmp	.+2      	; 0x1504 <vfprintf+0x2ca>
    1502:	1f 2d       	mov	r17, r15
    1504:	80 2f       	mov	r24, r16
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	04 ff       	sbrs	r16, 4
    150a:	0c c0       	rjmp	.+24     	; 0x1524 <vfprintf+0x2ea>
    150c:	fe 01       	movw	r30, r28
    150e:	ed 0d       	add	r30, r13
    1510:	f1 1d       	adc	r31, r1
    1512:	20 81       	ld	r18, Z
    1514:	20 33       	cpi	r18, 0x30	; 48
    1516:	11 f4       	brne	.+4      	; 0x151c <vfprintf+0x2e2>
    1518:	09 7e       	andi	r16, 0xE9	; 233
    151a:	09 c0       	rjmp	.+18     	; 0x152e <vfprintf+0x2f4>
    151c:	02 ff       	sbrs	r16, 2
    151e:	06 c0       	rjmp	.+12     	; 0x152c <vfprintf+0x2f2>
    1520:	1e 5f       	subi	r17, 0xFE	; 254
    1522:	05 c0       	rjmp	.+10     	; 0x152e <vfprintf+0x2f4>
    1524:	86 78       	andi	r24, 0x86	; 134
    1526:	90 70       	andi	r25, 0x00	; 0
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	09 f0       	breq	.+2      	; 0x152e <vfprintf+0x2f4>
    152c:	1f 5f       	subi	r17, 0xFF	; 255
    152e:	80 2e       	mov	r8, r16
    1530:	99 24       	eor	r9, r9
    1532:	03 fd       	sbrc	r16, 3
    1534:	12 c0       	rjmp	.+36     	; 0x155a <vfprintf+0x320>
    1536:	00 ff       	sbrs	r16, 0
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <vfprintf+0x31a>
    153a:	fd 2c       	mov	r15, r13
    153c:	1e 15       	cp	r17, r14
    153e:	50 f4       	brcc	.+20     	; 0x1554 <vfprintf+0x31a>
    1540:	fe 0c       	add	r15, r14
    1542:	f1 1a       	sub	r15, r17
    1544:	1e 2d       	mov	r17, r14
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <vfprintf+0x31a>
    1548:	80 e2       	ldi	r24, 0x20	; 32
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	b3 01       	movw	r22, r6
    154e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    1552:	1f 5f       	subi	r17, 0xFF	; 255
    1554:	1e 15       	cp	r17, r14
    1556:	c0 f3       	brcs	.-16     	; 0x1548 <vfprintf+0x30e>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <vfprintf+0x328>
    155a:	1e 15       	cp	r17, r14
    155c:	10 f4       	brcc	.+4      	; 0x1562 <vfprintf+0x328>
    155e:	e1 1a       	sub	r14, r17
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <vfprintf+0x32a>
    1562:	ee 24       	eor	r14, r14
    1564:	84 fe       	sbrs	r8, 4
    1566:	0f c0       	rjmp	.+30     	; 0x1586 <vfprintf+0x34c>
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b3 01       	movw	r22, r6
    156e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    1572:	82 fe       	sbrs	r8, 2
    1574:	1f c0       	rjmp	.+62     	; 0x15b4 <vfprintf+0x37a>
    1576:	81 fe       	sbrs	r8, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <vfprintf+0x346>
    157a:	88 e5       	ldi	r24, 0x58	; 88
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	10 c0       	rjmp	.+32     	; 0x15a0 <vfprintf+0x366>
    1580:	88 e7       	ldi	r24, 0x78	; 120
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0d c0       	rjmp	.+26     	; 0x15a0 <vfprintf+0x366>
    1586:	c4 01       	movw	r24, r8
    1588:	86 78       	andi	r24, 0x86	; 134
    158a:	90 70       	andi	r25, 0x00	; 0
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	91 f0       	breq	.+36     	; 0x15b4 <vfprintf+0x37a>
    1590:	81 fc       	sbrc	r8, 1
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <vfprintf+0x35e>
    1594:	80 e2       	ldi	r24, 0x20	; 32
    1596:	01 c0       	rjmp	.+2      	; 0x159a <vfprintf+0x360>
    1598:	8b e2       	ldi	r24, 0x2B	; 43
    159a:	07 fd       	sbrc	r16, 7
    159c:	8d e2       	ldi	r24, 0x2D	; 45
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	b3 01       	movw	r22, r6
    15a2:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <vfprintf+0x37a>
    15a8:	80 e3       	ldi	r24, 0x30	; 48
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	b3 01       	movw	r22, r6
    15ae:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    15b2:	fa 94       	dec	r15
    15b4:	df 14       	cp	r13, r15
    15b6:	c0 f3       	brcs	.-16     	; 0x15a8 <vfprintf+0x36e>
    15b8:	da 94       	dec	r13
    15ba:	f2 01       	movw	r30, r4
    15bc:	ed 0d       	add	r30, r13
    15be:	f1 1d       	adc	r31, r1
    15c0:	80 81       	ld	r24, Z
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	b3 01       	movw	r22, r6
    15c6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    15ca:	dd 20       	and	r13, r13
    15cc:	a9 f7       	brne	.-22     	; 0x15b8 <vfprintf+0x37e>
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <vfprintf+0x3a2>
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	b3 01       	movw	r22, r6
    15d6:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <fputc>
    15da:	ea 94       	dec	r14
    15dc:	ee 20       	and	r14, r14
    15de:	c1 f7       	brne	.-16     	; 0x15d0 <vfprintf+0x396>
    15e0:	40 ce       	rjmp	.-896    	; 0x1262 <vfprintf+0x28>
    15e2:	f3 01       	movw	r30, r6
    15e4:	86 81       	ldd	r24, Z+6	; 0x06
    15e6:	97 81       	ldd	r25, Z+7	; 0x07
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <vfprintf+0x3b4>
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	9f ef       	ldi	r25, 0xFF	; 255
    15ee:	2d 96       	adiw	r28, 0x0d	; 13
    15f0:	e2 e1       	ldi	r30, 0x12	; 18
    15f2:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__epilogue_restores__>

000015f6 <dtoa_prf>:
    15f6:	a9 e0       	ldi	r26, 0x09	; 9
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e1 e0       	ldi	r30, 0x01	; 1
    15fc:	fb e0       	ldi	r31, 0x0B	; 11
    15fe:	0c 94 cf 0d 	jmp	0x1b9e	; 0x1b9e <__prologue_saves__+0x8>
    1602:	6a 01       	movw	r12, r20
    1604:	12 2f       	mov	r17, r18
    1606:	f0 2e       	mov	r15, r16
    1608:	2b e3       	ldi	r18, 0x3B	; 59
    160a:	20 17       	cp	r18, r16
    160c:	18 f0       	brcs	.+6      	; 0x1614 <dtoa_prf+0x1e>
    160e:	b0 2e       	mov	r11, r16
    1610:	b3 94       	inc	r11
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <dtoa_prf+0x22>
    1614:	3c e3       	ldi	r19, 0x3C	; 60
    1616:	b3 2e       	mov	r11, r19
    1618:	ae 01       	movw	r20, r28
    161a:	4f 5f       	subi	r20, 0xFF	; 255
    161c:	5f 4f       	sbci	r21, 0xFF	; 255
    161e:	27 e0       	ldi	r18, 0x07	; 7
    1620:	0b 2d       	mov	r16, r11
    1622:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__ftoa_engine>
    1626:	bc 01       	movw	r22, r24
    1628:	a9 81       	ldd	r26, Y+1	; 0x01
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	cd 01       	movw	r24, r26
    162e:	89 70       	andi	r24, 0x09	; 9
    1630:	90 70       	andi	r25, 0x00	; 0
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	31 f0       	breq	.+12     	; 0x1644 <dtoa_prf+0x4e>
    1638:	e1 fc       	sbrc	r14, 1
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <dtoa_prf+0x52>
    163c:	e0 fe       	sbrs	r14, 0
    163e:	06 c0       	rjmp	.+12     	; 0x164c <dtoa_prf+0x56>
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	05 c0       	rjmp	.+10     	; 0x164e <dtoa_prf+0x58>
    1644:	4d e2       	ldi	r20, 0x2D	; 45
    1646:	03 c0       	rjmp	.+6      	; 0x164e <dtoa_prf+0x58>
    1648:	4b e2       	ldi	r20, 0x2B	; 43
    164a:	01 c0       	rjmp	.+2      	; 0x164e <dtoa_prf+0x58>
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	a3 ff       	sbrs	r26, 3
    1650:	36 c0       	rjmp	.+108    	; 0x16be <dtoa_prf+0xc8>
    1652:	44 23       	and	r20, r20
    1654:	11 f0       	breq	.+4      	; 0x165a <dtoa_prf+0x64>
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	01 c0       	rjmp	.+2      	; 0x165c <dtoa_prf+0x66>
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	81 17       	cp	r24, r17
    165e:	10 f4       	brcc	.+4      	; 0x1664 <dtoa_prf+0x6e>
    1660:	18 1b       	sub	r17, r24
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <dtoa_prf+0x70>
    1664:	10 e0       	ldi	r17, 0x00	; 0
    1666:	e4 fc       	sbrc	r14, 4
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <dtoa_prf+0x8a>
    166a:	91 2f       	mov	r25, r17
    166c:	f6 01       	movw	r30, r12
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <dtoa_prf+0x80>
    1672:	81 93       	st	Z+, r24
    1674:	91 50       	subi	r25, 0x01	; 1
    1676:	99 23       	and	r25, r25
    1678:	e1 f7       	brne	.-8      	; 0x1672 <dtoa_prf+0x7c>
    167a:	c1 0e       	add	r12, r17
    167c:	d1 1c       	adc	r13, r1
    167e:	10 e0       	ldi	r17, 0x00	; 0
    1680:	44 23       	and	r20, r20
    1682:	19 f0       	breq	.+6      	; 0x168a <dtoa_prf+0x94>
    1684:	f6 01       	movw	r30, r12
    1686:	41 93       	st	Z+, r20
    1688:	6f 01       	movw	r12, r30
    168a:	e2 fe       	sbrs	r14, 2
    168c:	05 c0       	rjmp	.+10     	; 0x1698 <dtoa_prf+0xa2>
    168e:	8e e4       	ldi	r24, 0x4E	; 78
    1690:	f6 01       	movw	r30, r12
    1692:	80 83       	st	Z, r24
    1694:	91 e4       	ldi	r25, 0x41	; 65
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <dtoa_prf+0xaa>
    1698:	8e e6       	ldi	r24, 0x6E	; 110
    169a:	f6 01       	movw	r30, r12
    169c:	80 83       	st	Z, r24
    169e:	91 e6       	ldi	r25, 0x61	; 97
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	82 83       	std	Z+2, r24	; 0x02
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	c8 0e       	add	r12, r24
    16aa:	d9 1e       	adc	r13, r25
    16ac:	81 2f       	mov	r24, r17
    16ae:	f6 01       	movw	r30, r12
    16b0:	90 e2       	ldi	r25, 0x20	; 32
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <dtoa_prf+0xc2>
    16b4:	91 93       	st	Z+, r25
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	88 23       	and	r24, r24
    16ba:	e1 f7       	brne	.-8      	; 0x16b4 <dtoa_prf+0xbe>
    16bc:	3a c0       	rjmp	.+116    	; 0x1732 <dtoa_prf+0x13c>
    16be:	a2 ff       	sbrs	r26, 2
    16c0:	3f c0       	rjmp	.+126    	; 0x1740 <dtoa_prf+0x14a>
    16c2:	44 23       	and	r20, r20
    16c4:	11 f0       	breq	.+4      	; 0x16ca <dtoa_prf+0xd4>
    16c6:	84 e0       	ldi	r24, 0x04	; 4
    16c8:	01 c0       	rjmp	.+2      	; 0x16cc <dtoa_prf+0xd6>
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	81 17       	cp	r24, r17
    16ce:	10 f4       	brcc	.+4      	; 0x16d4 <dtoa_prf+0xde>
    16d0:	18 1b       	sub	r17, r24
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <dtoa_prf+0xe0>
    16d4:	10 e0       	ldi	r17, 0x00	; 0
    16d6:	e4 fc       	sbrc	r14, 4
    16d8:	0b c0       	rjmp	.+22     	; 0x16f0 <dtoa_prf+0xfa>
    16da:	91 2f       	mov	r25, r17
    16dc:	f6 01       	movw	r30, r12
    16de:	80 e2       	ldi	r24, 0x20	; 32
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <dtoa_prf+0xf0>
    16e2:	81 93       	st	Z+, r24
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	99 23       	and	r25, r25
    16e8:	e1 f7       	brne	.-8      	; 0x16e2 <dtoa_prf+0xec>
    16ea:	c1 0e       	add	r12, r17
    16ec:	d1 1c       	adc	r13, r1
    16ee:	10 e0       	ldi	r17, 0x00	; 0
    16f0:	44 23       	and	r20, r20
    16f2:	19 f0       	breq	.+6      	; 0x16fa <dtoa_prf+0x104>
    16f4:	f6 01       	movw	r30, r12
    16f6:	41 93       	st	Z+, r20
    16f8:	6f 01       	movw	r12, r30
    16fa:	e2 fe       	sbrs	r14, 2
    16fc:	07 c0       	rjmp	.+14     	; 0x170c <dtoa_prf+0x116>
    16fe:	89 e4       	ldi	r24, 0x49	; 73
    1700:	f6 01       	movw	r30, r12
    1702:	80 83       	st	Z, r24
    1704:	8e e4       	ldi	r24, 0x4E	; 78
    1706:	81 83       	std	Z+1, r24	; 0x01
    1708:	86 e4       	ldi	r24, 0x46	; 70
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <dtoa_prf+0x122>
    170c:	89 e6       	ldi	r24, 0x69	; 105
    170e:	f6 01       	movw	r30, r12
    1710:	80 83       	st	Z, r24
    1712:	8e e6       	ldi	r24, 0x6E	; 110
    1714:	81 83       	std	Z+1, r24	; 0x01
    1716:	86 e6       	ldi	r24, 0x66	; 102
    1718:	82 83       	std	Z+2, r24	; 0x02
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	c8 0e       	add	r12, r24
    1720:	d9 1e       	adc	r13, r25
    1722:	81 2f       	mov	r24, r17
    1724:	f6 01       	movw	r30, r12
    1726:	90 e2       	ldi	r25, 0x20	; 32
    1728:	02 c0       	rjmp	.+4      	; 0x172e <dtoa_prf+0x138>
    172a:	91 93       	st	Z+, r25
    172c:	81 50       	subi	r24, 0x01	; 1
    172e:	88 23       	and	r24, r24
    1730:	e1 f7       	brne	.-8      	; 0x172a <dtoa_prf+0x134>
    1732:	c1 0e       	add	r12, r17
    1734:	d1 1c       	adc	r13, r1
    1736:	f6 01       	movw	r30, r12
    1738:	10 82       	st	Z, r1
    173a:	8e ef       	ldi	r24, 0xFE	; 254
    173c:	9f ef       	ldi	r25, 0xFF	; 255
    173e:	af c0       	rjmp	.+350    	; 0x189e <dtoa_prf+0x2a8>
    1740:	21 e0       	ldi	r18, 0x01	; 1
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	44 23       	and	r20, r20
    1746:	11 f4       	brne	.+4      	; 0x174c <dtoa_prf+0x156>
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	16 16       	cp	r1, r22
    174e:	17 06       	cpc	r1, r23
    1750:	1c f4       	brge	.+6      	; 0x1758 <dtoa_prf+0x162>
    1752:	cb 01       	movw	r24, r22
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	02 c0       	rjmp	.+4      	; 0x175c <dtoa_prf+0x166>
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	28 0f       	add	r18, r24
    175e:	39 1f       	adc	r19, r25
    1760:	ff 20       	and	r15, r15
    1762:	21 f0       	breq	.+8      	; 0x176c <dtoa_prf+0x176>
    1764:	8f 2d       	mov	r24, r15
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	01 96       	adiw	r24, 0x01	; 1
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <dtoa_prf+0x17a>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	21 2f       	mov	r18, r17
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	82 17       	cp	r24, r18
    177a:	93 07       	cpc	r25, r19
    177c:	1c f4       	brge	.+6      	; 0x1784 <dtoa_prf+0x18e>
    177e:	51 2f       	mov	r21, r17
    1780:	58 1b       	sub	r21, r24
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <dtoa_prf+0x190>
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	8e 2d       	mov	r24, r14
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9c 01       	movw	r18, r24
    178c:	20 71       	andi	r18, 0x10	; 16
    178e:	30 70       	andi	r19, 0x00	; 0
    1790:	e4 fc       	sbrc	r14, 4
    1792:	0d c0       	rjmp	.+26     	; 0x17ae <dtoa_prf+0x1b8>
    1794:	e3 fc       	sbrc	r14, 3
    1796:	0b c0       	rjmp	.+22     	; 0x17ae <dtoa_prf+0x1b8>
    1798:	85 2f       	mov	r24, r21
    179a:	f6 01       	movw	r30, r12
    179c:	90 e2       	ldi	r25, 0x20	; 32
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <dtoa_prf+0x1ae>
    17a0:	91 93       	st	Z+, r25
    17a2:	81 50       	subi	r24, 0x01	; 1
    17a4:	88 23       	and	r24, r24
    17a6:	e1 f7       	brne	.-8      	; 0x17a0 <dtoa_prf+0x1aa>
    17a8:	c5 0e       	add	r12, r21
    17aa:	d1 1c       	adc	r13, r1
    17ac:	50 e0       	ldi	r21, 0x00	; 0
    17ae:	44 23       	and	r20, r20
    17b0:	19 f0       	breq	.+6      	; 0x17b8 <dtoa_prf+0x1c2>
    17b2:	f6 01       	movw	r30, r12
    17b4:	41 93       	st	Z+, r20
    17b6:	6f 01       	movw	r12, r30
    17b8:	21 15       	cp	r18, r1
    17ba:	31 05       	cpc	r19, r1
    17bc:	59 f4       	brne	.+22     	; 0x17d4 <dtoa_prf+0x1de>
    17be:	85 2f       	mov	r24, r21
    17c0:	f6 01       	movw	r30, r12
    17c2:	90 e3       	ldi	r25, 0x30	; 48
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <dtoa_prf+0x1d4>
    17c6:	91 93       	st	Z+, r25
    17c8:	81 50       	subi	r24, 0x01	; 1
    17ca:	88 23       	and	r24, r24
    17cc:	e1 f7       	brne	.-8      	; 0x17c6 <dtoa_prf+0x1d0>
    17ce:	c5 0e       	add	r12, r21
    17d0:	d1 1c       	adc	r13, r1
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	b6 0e       	add	r11, r22
    17d6:	4a 81       	ldd	r20, Y+2	; 0x02
    17d8:	20 e1       	ldi	r18, 0x10	; 16
    17da:	62 2e       	mov	r6, r18
    17dc:	71 2c       	mov	r7, r1
    17de:	6a 22       	and	r6, r26
    17e0:	7b 22       	and	r7, r27
    17e2:	a4 ff       	sbrs	r26, 4
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <dtoa_prf+0x1f6>
    17e6:	41 33       	cpi	r20, 0x31	; 49
    17e8:	09 f4       	brne	.+2      	; 0x17ec <dtoa_prf+0x1f6>
    17ea:	ba 94       	dec	r11
    17ec:	1b 14       	cp	r1, r11
    17ee:	2c f4       	brge	.+10     	; 0x17fa <dtoa_prf+0x204>
    17f0:	8b 2d       	mov	r24, r11
    17f2:	89 30       	cpi	r24, 0x09	; 9
    17f4:	18 f0       	brcs	.+6      	; 0x17fc <dtoa_prf+0x206>
    17f6:	88 e0       	ldi	r24, 0x08	; 8
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <dtoa_prf+0x206>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	9b 01       	movw	r18, r22
    17fe:	77 ff       	sbrs	r23, 7
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <dtoa_prf+0x210>
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	a0 e0       	ldi	r26, 0x00	; 0
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	9e e2       	ldi	r25, 0x2E	; 46
    180c:	e9 2e       	mov	r14, r25
    180e:	4b 01       	movw	r8, r22
    1810:	88 1a       	sub	r8, r24
    1812:	91 08       	sbc	r9, r1
    1814:	cb 01       	movw	r24, r22
    1816:	82 1b       	sub	r24, r18
    1818:	93 0b       	sbc	r25, r19
    181a:	8e 01       	movw	r16, r28
    181c:	0f 5f       	subi	r16, 0xFF	; 255
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	08 0f       	add	r16, r24
    1822:	19 1f       	adc	r17, r25
    1824:	8f 2d       	mov	r24, r15
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	aa 24       	eor	r10, r10
    182a:	bb 24       	eor	r11, r11
    182c:	a8 1a       	sub	r10, r24
    182e:	b9 0a       	sbc	r11, r25
    1830:	ff ef       	ldi	r31, 0xFF	; 255
    1832:	2f 3f       	cpi	r18, 0xFF	; 255
    1834:	3f 07       	cpc	r19, r31
    1836:	19 f4       	brne	.+6      	; 0x183e <dtoa_prf+0x248>
    1838:	f6 01       	movw	r30, r12
    183a:	e1 92       	st	Z+, r14
    183c:	6f 01       	movw	r12, r30
    183e:	62 17       	cp	r22, r18
    1840:	73 07       	cpc	r23, r19
    1842:	44 f0       	brlt	.+16     	; 0x1854 <dtoa_prf+0x25e>
    1844:	82 16       	cp	r8, r18
    1846:	93 06       	cpc	r9, r19
    1848:	2c f4       	brge	.+10     	; 0x1854 <dtoa_prf+0x25e>
    184a:	f8 01       	movw	r30, r16
    184c:	ea 0f       	add	r30, r26
    184e:	fb 1f       	adc	r31, r27
    1850:	81 81       	ldd	r24, Z+1	; 0x01
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <dtoa_prf+0x260>
    1854:	80 e3       	ldi	r24, 0x30	; 48
    1856:	21 50       	subi	r18, 0x01	; 1
    1858:	30 40       	sbci	r19, 0x00	; 0
    185a:	11 96       	adiw	r26, 0x01	; 1
    185c:	2a 15       	cp	r18, r10
    185e:	3b 05       	cpc	r19, r11
    1860:	24 f0       	brlt	.+8      	; 0x186a <dtoa_prf+0x274>
    1862:	f6 01       	movw	r30, r12
    1864:	81 93       	st	Z+, r24
    1866:	6f 01       	movw	r12, r30
    1868:	e3 cf       	rjmp	.-58     	; 0x1830 <dtoa_prf+0x23a>
    186a:	26 17       	cp	r18, r22
    186c:	37 07       	cpc	r19, r23
    186e:	41 f4       	brne	.+16     	; 0x1880 <dtoa_prf+0x28a>
    1870:	46 33       	cpi	r20, 0x36	; 54
    1872:	28 f4       	brcc	.+10     	; 0x187e <dtoa_prf+0x288>
    1874:	45 33       	cpi	r20, 0x35	; 53
    1876:	21 f4       	brne	.+8      	; 0x1880 <dtoa_prf+0x28a>
    1878:	61 14       	cp	r6, r1
    187a:	71 04       	cpc	r7, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <dtoa_prf+0x28a>
    187e:	81 e3       	ldi	r24, 0x31	; 49
    1880:	f6 01       	movw	r30, r12
    1882:	81 93       	st	Z+, r24
    1884:	85 2f       	mov	r24, r21
    1886:	df 01       	movw	r26, r30
    1888:	90 e2       	ldi	r25, 0x20	; 32
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <dtoa_prf+0x29a>
    188c:	9d 93       	st	X+, r25
    188e:	81 50       	subi	r24, 0x01	; 1
    1890:	88 23       	and	r24, r24
    1892:	e1 f7       	brne	.-8      	; 0x188c <dtoa_prf+0x296>
    1894:	e5 0f       	add	r30, r21
    1896:	f1 1d       	adc	r31, r1
    1898:	10 82       	st	Z, r1
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	29 96       	adiw	r28, 0x09	; 9
    18a0:	ee e0       	ldi	r30, 0x0E	; 14
    18a2:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__epilogue_restores__+0x8>

000018a6 <__ftoa_engine>:
    18a6:	28 30       	cpi	r18, 0x08	; 8
    18a8:	08 f0       	brcs	.+2      	; 0x18ac <__ftoa_engine+0x6>
    18aa:	27 e0       	ldi	r18, 0x07	; 7
    18ac:	33 27       	eor	r19, r19
    18ae:	da 01       	movw	r26, r20
    18b0:	99 0f       	add	r25, r25
    18b2:	31 1d       	adc	r19, r1
    18b4:	87 fd       	sbrc	r24, 7
    18b6:	91 60       	ori	r25, 0x01	; 1
    18b8:	00 96       	adiw	r24, 0x00	; 0
    18ba:	61 05       	cpc	r22, r1
    18bc:	71 05       	cpc	r23, r1
    18be:	39 f4       	brne	.+14     	; 0x18ce <__ftoa_engine+0x28>
    18c0:	32 60       	ori	r19, 0x02	; 2
    18c2:	2e 5f       	subi	r18, 0xFE	; 254
    18c4:	3d 93       	st	X+, r19
    18c6:	30 e3       	ldi	r19, 0x30	; 48
    18c8:	2a 95       	dec	r18
    18ca:	e1 f7       	brne	.-8      	; 0x18c4 <__ftoa_engine+0x1e>
    18cc:	08 95       	ret
    18ce:	9f 3f       	cpi	r25, 0xFF	; 255
    18d0:	30 f0       	brcs	.+12     	; 0x18de <__ftoa_engine+0x38>
    18d2:	80 38       	cpi	r24, 0x80	; 128
    18d4:	71 05       	cpc	r23, r1
    18d6:	61 05       	cpc	r22, r1
    18d8:	09 f0       	breq	.+2      	; 0x18dc <__ftoa_engine+0x36>
    18da:	3c 5f       	subi	r19, 0xFC	; 252
    18dc:	3c 5f       	subi	r19, 0xFC	; 252
    18de:	3d 93       	st	X+, r19
    18e0:	91 30       	cpi	r25, 0x01	; 1
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <__ftoa_engine+0x40>
    18e4:	80 68       	ori	r24, 0x80	; 128
    18e6:	91 1d       	adc	r25, r1
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	1f 93       	push	r17
    18ee:	0f 93       	push	r16
    18f0:	ff 92       	push	r15
    18f2:	ef 92       	push	r14
    18f4:	19 2f       	mov	r17, r25
    18f6:	98 7f       	andi	r25, 0xF8	; 248
    18f8:	96 95       	lsr	r25
    18fa:	e9 2f       	mov	r30, r25
    18fc:	96 95       	lsr	r25
    18fe:	96 95       	lsr	r25
    1900:	e9 0f       	add	r30, r25
    1902:	ff 27       	eor	r31, r31
    1904:	ea 52       	subi	r30, 0x2A	; 42
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	99 27       	eor	r25, r25
    190a:	33 27       	eor	r19, r19
    190c:	ee 24       	eor	r14, r14
    190e:	ff 24       	eor	r15, r15
    1910:	a7 01       	movw	r20, r14
    1912:	e7 01       	movw	r28, r14
    1914:	05 90       	lpm	r0, Z+
    1916:	08 94       	sec
    1918:	07 94       	ror	r0
    191a:	28 f4       	brcc	.+10     	; 0x1926 <__ftoa_engine+0x80>
    191c:	36 0f       	add	r19, r22
    191e:	e7 1e       	adc	r14, r23
    1920:	f8 1e       	adc	r15, r24
    1922:	49 1f       	adc	r20, r25
    1924:	51 1d       	adc	r21, r1
    1926:	66 0f       	add	r22, r22
    1928:	77 1f       	adc	r23, r23
    192a:	88 1f       	adc	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	06 94       	lsr	r0
    1930:	a1 f7       	brne	.-24     	; 0x191a <__ftoa_engine+0x74>
    1932:	05 90       	lpm	r0, Z+
    1934:	07 94       	ror	r0
    1936:	28 f4       	brcc	.+10     	; 0x1942 <__ftoa_engine+0x9c>
    1938:	e7 0e       	add	r14, r23
    193a:	f8 1e       	adc	r15, r24
    193c:	49 1f       	adc	r20, r25
    193e:	56 1f       	adc	r21, r22
    1940:	c1 1d       	adc	r28, r1
    1942:	77 0f       	add	r23, r23
    1944:	88 1f       	adc	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	66 1f       	adc	r22, r22
    194a:	06 94       	lsr	r0
    194c:	a1 f7       	brne	.-24     	; 0x1936 <__ftoa_engine+0x90>
    194e:	05 90       	lpm	r0, Z+
    1950:	07 94       	ror	r0
    1952:	28 f4       	brcc	.+10     	; 0x195e <__ftoa_engine+0xb8>
    1954:	f8 0e       	add	r15, r24
    1956:	49 1f       	adc	r20, r25
    1958:	56 1f       	adc	r21, r22
    195a:	c7 1f       	adc	r28, r23
    195c:	d1 1d       	adc	r29, r1
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	66 1f       	adc	r22, r22
    1964:	77 1f       	adc	r23, r23
    1966:	06 94       	lsr	r0
    1968:	a1 f7       	brne	.-24     	; 0x1952 <__ftoa_engine+0xac>
    196a:	05 90       	lpm	r0, Z+
    196c:	07 94       	ror	r0
    196e:	20 f4       	brcc	.+8      	; 0x1978 <__ftoa_engine+0xd2>
    1970:	49 0f       	add	r20, r25
    1972:	56 1f       	adc	r21, r22
    1974:	c7 1f       	adc	r28, r23
    1976:	d8 1f       	adc	r29, r24
    1978:	99 0f       	add	r25, r25
    197a:	66 1f       	adc	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	06 94       	lsr	r0
    1982:	a9 f7       	brne	.-22     	; 0x196e <__ftoa_engine+0xc8>
    1984:	84 91       	lpm	r24, Z
    1986:	10 95       	com	r17
    1988:	17 70       	andi	r17, 0x07	; 7
    198a:	41 f0       	breq	.+16     	; 0x199c <__ftoa_engine+0xf6>
    198c:	d6 95       	lsr	r29
    198e:	c7 95       	ror	r28
    1990:	57 95       	ror	r21
    1992:	47 95       	ror	r20
    1994:	f7 94       	ror	r15
    1996:	e7 94       	ror	r14
    1998:	1a 95       	dec	r17
    199a:	c1 f7       	brne	.-16     	; 0x198c <__ftoa_engine+0xe6>
    199c:	ec e7       	ldi	r30, 0x7C	; 124
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	68 94       	set
    19a2:	15 90       	lpm	r1, Z+
    19a4:	15 91       	lpm	r17, Z+
    19a6:	35 91       	lpm	r19, Z+
    19a8:	65 91       	lpm	r22, Z+
    19aa:	95 91       	lpm	r25, Z+
    19ac:	05 90       	lpm	r0, Z+
    19ae:	7f e2       	ldi	r23, 0x2F	; 47
    19b0:	73 95       	inc	r23
    19b2:	e1 18       	sub	r14, r1
    19b4:	f1 0a       	sbc	r15, r17
    19b6:	43 0b       	sbc	r20, r19
    19b8:	56 0b       	sbc	r21, r22
    19ba:	c9 0b       	sbc	r28, r25
    19bc:	d0 09       	sbc	r29, r0
    19be:	c0 f7       	brcc	.-16     	; 0x19b0 <__ftoa_engine+0x10a>
    19c0:	e1 0c       	add	r14, r1
    19c2:	f1 1e       	adc	r15, r17
    19c4:	43 1f       	adc	r20, r19
    19c6:	56 1f       	adc	r21, r22
    19c8:	c9 1f       	adc	r28, r25
    19ca:	d0 1d       	adc	r29, r0
    19cc:	7e f4       	brtc	.+30     	; 0x19ec <__ftoa_engine+0x146>
    19ce:	70 33       	cpi	r23, 0x30	; 48
    19d0:	11 f4       	brne	.+4      	; 0x19d6 <__ftoa_engine+0x130>
    19d2:	8a 95       	dec	r24
    19d4:	e6 cf       	rjmp	.-52     	; 0x19a2 <__ftoa_engine+0xfc>
    19d6:	e8 94       	clt
    19d8:	01 50       	subi	r16, 0x01	; 1
    19da:	30 f0       	brcs	.+12     	; 0x19e8 <__ftoa_engine+0x142>
    19dc:	08 0f       	add	r16, r24
    19de:	0a f4       	brpl	.+2      	; 0x19e2 <__ftoa_engine+0x13c>
    19e0:	00 27       	eor	r16, r16
    19e2:	02 17       	cp	r16, r18
    19e4:	08 f4       	brcc	.+2      	; 0x19e8 <__ftoa_engine+0x142>
    19e6:	20 2f       	mov	r18, r16
    19e8:	23 95       	inc	r18
    19ea:	02 2f       	mov	r16, r18
    19ec:	7a 33       	cpi	r23, 0x3A	; 58
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <__ftoa_engine+0x154>
    19f0:	79 e3       	ldi	r23, 0x39	; 57
    19f2:	7d 93       	st	X+, r23
    19f4:	2a 95       	dec	r18
    19f6:	e9 f7       	brne	.-6      	; 0x19f2 <__ftoa_engine+0x14c>
    19f8:	10 c0       	rjmp	.+32     	; 0x1a1a <__ftoa_engine+0x174>
    19fa:	7d 93       	st	X+, r23
    19fc:	2a 95       	dec	r18
    19fe:	89 f6       	brne	.-94     	; 0x19a2 <__ftoa_engine+0xfc>
    1a00:	06 94       	lsr	r0
    1a02:	97 95       	ror	r25
    1a04:	67 95       	ror	r22
    1a06:	37 95       	ror	r19
    1a08:	17 95       	ror	r17
    1a0a:	17 94       	ror	r1
    1a0c:	e1 18       	sub	r14, r1
    1a0e:	f1 0a       	sbc	r15, r17
    1a10:	43 0b       	sbc	r20, r19
    1a12:	56 0b       	sbc	r21, r22
    1a14:	c9 0b       	sbc	r28, r25
    1a16:	d0 09       	sbc	r29, r0
    1a18:	98 f0       	brcs	.+38     	; 0x1a40 <__ftoa_engine+0x19a>
    1a1a:	23 95       	inc	r18
    1a1c:	7e 91       	ld	r23, -X
    1a1e:	73 95       	inc	r23
    1a20:	7a 33       	cpi	r23, 0x3A	; 58
    1a22:	08 f0       	brcs	.+2      	; 0x1a26 <__ftoa_engine+0x180>
    1a24:	70 e3       	ldi	r23, 0x30	; 48
    1a26:	7c 93       	st	X, r23
    1a28:	20 13       	cpse	r18, r16
    1a2a:	b8 f7       	brcc	.-18     	; 0x1a1a <__ftoa_engine+0x174>
    1a2c:	7e 91       	ld	r23, -X
    1a2e:	70 61       	ori	r23, 0x10	; 16
    1a30:	7d 93       	st	X+, r23
    1a32:	30 f0       	brcs	.+12     	; 0x1a40 <__ftoa_engine+0x19a>
    1a34:	83 95       	inc	r24
    1a36:	71 e3       	ldi	r23, 0x31	; 49
    1a38:	7d 93       	st	X+, r23
    1a3a:	70 e3       	ldi	r23, 0x30	; 48
    1a3c:	2a 95       	dec	r18
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <__ftoa_engine+0x192>
    1a40:	11 24       	eor	r1, r1
    1a42:	ef 90       	pop	r14
    1a44:	ff 90       	pop	r15
    1a46:	0f 91       	pop	r16
    1a48:	1f 91       	pop	r17
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	99 27       	eor	r25, r25
    1a50:	87 fd       	sbrc	r24, 7
    1a52:	90 95       	com	r25
    1a54:	08 95       	ret

00001a56 <strnlen_P>:
    1a56:	fc 01       	movw	r30, r24
    1a58:	05 90       	lpm	r0, Z+
    1a5a:	61 50       	subi	r22, 0x01	; 1
    1a5c:	70 40       	sbci	r23, 0x00	; 0
    1a5e:	01 10       	cpse	r0, r1
    1a60:	d8 f7       	brcc	.-10     	; 0x1a58 <strnlen_P+0x2>
    1a62:	80 95       	com	r24
    1a64:	90 95       	com	r25
    1a66:	8e 0f       	add	r24, r30
    1a68:	9f 1f       	adc	r25, r31
    1a6a:	08 95       	ret

00001a6c <strnlen>:
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	61 50       	subi	r22, 0x01	; 1
    1a70:	70 40       	sbci	r23, 0x00	; 0
    1a72:	01 90       	ld	r0, Z+
    1a74:	01 10       	cpse	r0, r1
    1a76:	d8 f7       	brcc	.-10     	; 0x1a6e <strnlen+0x2>
    1a78:	80 95       	com	r24
    1a7a:	90 95       	com	r25
    1a7c:	8e 0f       	add	r24, r30
    1a7e:	9f 1f       	adc	r25, r31
    1a80:	08 95       	ret

00001a82 <fputc>:
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	8c 01       	movw	r16, r24
    1a8c:	eb 01       	movw	r28, r22
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	81 ff       	sbrs	r24, 1
    1a92:	1b c0       	rjmp	.+54     	; 0x1aca <fputc+0x48>
    1a94:	82 ff       	sbrs	r24, 2
    1a96:	0d c0       	rjmp	.+26     	; 0x1ab2 <fputc+0x30>
    1a98:	2e 81       	ldd	r18, Y+6	; 0x06
    1a9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa0:	28 17       	cp	r18, r24
    1aa2:	39 07       	cpc	r19, r25
    1aa4:	64 f4       	brge	.+24     	; 0x1abe <fputc+0x3c>
    1aa6:	e8 81       	ld	r30, Y
    1aa8:	f9 81       	ldd	r31, Y+1	; 0x01
    1aaa:	01 93       	st	Z+, r16
    1aac:	f9 83       	std	Y+1, r31	; 0x01
    1aae:	e8 83       	st	Y, r30
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <fputc+0x3c>
    1ab2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ab4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ab6:	80 2f       	mov	r24, r16
    1ab8:	09 95       	icall
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	31 f4       	brne	.+12     	; 0x1aca <fputc+0x48>
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	9f 83       	std	Y+7, r25	; 0x07
    1ac6:	8e 83       	std	Y+6, r24	; 0x06
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <fputc+0x4c>
    1aca:	0f ef       	ldi	r16, 0xFF	; 255
    1acc:	1f ef       	ldi	r17, 0xFF	; 255
    1ace:	c8 01       	movw	r24, r16
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <__ultoa_invert>:
    1ada:	fa 01       	movw	r30, r20
    1adc:	aa 27       	eor	r26, r26
    1ade:	28 30       	cpi	r18, 0x08	; 8
    1ae0:	51 f1       	breq	.+84     	; 0x1b36 <__ultoa_invert+0x5c>
    1ae2:	20 31       	cpi	r18, 0x10	; 16
    1ae4:	81 f1       	breq	.+96     	; 0x1b46 <__ultoa_invert+0x6c>
    1ae6:	e8 94       	clt
    1ae8:	6f 93       	push	r22
    1aea:	6e 7f       	andi	r22, 0xFE	; 254
    1aec:	6e 5f       	subi	r22, 0xFE	; 254
    1aee:	7f 4f       	sbci	r23, 0xFF	; 255
    1af0:	8f 4f       	sbci	r24, 0xFF	; 255
    1af2:	9f 4f       	sbci	r25, 0xFF	; 255
    1af4:	af 4f       	sbci	r26, 0xFF	; 255
    1af6:	b1 e0       	ldi	r27, 0x01	; 1
    1af8:	3e d0       	rcall	.+124    	; 0x1b76 <__ultoa_invert+0x9c>
    1afa:	b4 e0       	ldi	r27, 0x04	; 4
    1afc:	3c d0       	rcall	.+120    	; 0x1b76 <__ultoa_invert+0x9c>
    1afe:	67 0f       	add	r22, r23
    1b00:	78 1f       	adc	r23, r24
    1b02:	89 1f       	adc	r24, r25
    1b04:	9a 1f       	adc	r25, r26
    1b06:	a1 1d       	adc	r26, r1
    1b08:	68 0f       	add	r22, r24
    1b0a:	79 1f       	adc	r23, r25
    1b0c:	8a 1f       	adc	r24, r26
    1b0e:	91 1d       	adc	r25, r1
    1b10:	a1 1d       	adc	r26, r1
    1b12:	6a 0f       	add	r22, r26
    1b14:	71 1d       	adc	r23, r1
    1b16:	81 1d       	adc	r24, r1
    1b18:	91 1d       	adc	r25, r1
    1b1a:	a1 1d       	adc	r26, r1
    1b1c:	20 d0       	rcall	.+64     	; 0x1b5e <__ultoa_invert+0x84>
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <__ultoa_invert+0x48>
    1b20:	68 94       	set
    1b22:	3f 91       	pop	r19
    1b24:	2a e0       	ldi	r18, 0x0A	; 10
    1b26:	26 9f       	mul	r18, r22
    1b28:	11 24       	eor	r1, r1
    1b2a:	30 19       	sub	r19, r0
    1b2c:	30 5d       	subi	r19, 0xD0	; 208
    1b2e:	31 93       	st	Z+, r19
    1b30:	de f6       	brtc	.-74     	; 0x1ae8 <__ultoa_invert+0xe>
    1b32:	cf 01       	movw	r24, r30
    1b34:	08 95       	ret
    1b36:	46 2f       	mov	r20, r22
    1b38:	47 70       	andi	r20, 0x07	; 7
    1b3a:	40 5d       	subi	r20, 0xD0	; 208
    1b3c:	41 93       	st	Z+, r20
    1b3e:	b3 e0       	ldi	r27, 0x03	; 3
    1b40:	0f d0       	rcall	.+30     	; 0x1b60 <__ultoa_invert+0x86>
    1b42:	c9 f7       	brne	.-14     	; 0x1b36 <__ultoa_invert+0x5c>
    1b44:	f6 cf       	rjmp	.-20     	; 0x1b32 <__ultoa_invert+0x58>
    1b46:	46 2f       	mov	r20, r22
    1b48:	4f 70       	andi	r20, 0x0F	; 15
    1b4a:	40 5d       	subi	r20, 0xD0	; 208
    1b4c:	4a 33       	cpi	r20, 0x3A	; 58
    1b4e:	18 f0       	brcs	.+6      	; 0x1b56 <__ultoa_invert+0x7c>
    1b50:	49 5d       	subi	r20, 0xD9	; 217
    1b52:	31 fd       	sbrc	r19, 1
    1b54:	40 52       	subi	r20, 0x20	; 32
    1b56:	41 93       	st	Z+, r20
    1b58:	02 d0       	rcall	.+4      	; 0x1b5e <__ultoa_invert+0x84>
    1b5a:	a9 f7       	brne	.-22     	; 0x1b46 <__ultoa_invert+0x6c>
    1b5c:	ea cf       	rjmp	.-44     	; 0x1b32 <__ultoa_invert+0x58>
    1b5e:	b4 e0       	ldi	r27, 0x04	; 4
    1b60:	a6 95       	lsr	r26
    1b62:	97 95       	ror	r25
    1b64:	87 95       	ror	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	ba 95       	dec	r27
    1b6c:	c9 f7       	brne	.-14     	; 0x1b60 <__ultoa_invert+0x86>
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	61 05       	cpc	r22, r1
    1b72:	71 05       	cpc	r23, r1
    1b74:	08 95       	ret
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
    1b7a:	0a 2e       	mov	r0, r26
    1b7c:	06 94       	lsr	r0
    1b7e:	57 95       	ror	r21
    1b80:	47 95       	ror	r20
    1b82:	37 95       	ror	r19
    1b84:	27 95       	ror	r18
    1b86:	ba 95       	dec	r27
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <__ultoa_invert+0xa2>
    1b8a:	62 0f       	add	r22, r18
    1b8c:	73 1f       	adc	r23, r19
    1b8e:	84 1f       	adc	r24, r20
    1b90:	95 1f       	adc	r25, r21
    1b92:	a0 1d       	adc	r26, r0
    1b94:	08 95       	ret

00001b96 <__prologue_saves__>:
    1b96:	2f 92       	push	r2
    1b98:	3f 92       	push	r3
    1b9a:	4f 92       	push	r4
    1b9c:	5f 92       	push	r5
    1b9e:	6f 92       	push	r6
    1ba0:	7f 92       	push	r7
    1ba2:	8f 92       	push	r8
    1ba4:	9f 92       	push	r9
    1ba6:	af 92       	push	r10
    1ba8:	bf 92       	push	r11
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	0f 93       	push	r16
    1bb4:	1f 93       	push	r17
    1bb6:	cf 93       	push	r28
    1bb8:	df 93       	push	r29
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	ca 1b       	sub	r28, r26
    1bc0:	db 0b       	sbc	r29, r27
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	09 94       	ijmp

00001bce <__epilogue_restores__>:
    1bce:	2a 88       	ldd	r2, Y+18	; 0x12
    1bd0:	39 88       	ldd	r3, Y+17	; 0x11
    1bd2:	48 88       	ldd	r4, Y+16	; 0x10
    1bd4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bd6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bd8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bda:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bdc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bde:	aa 84       	ldd	r10, Y+10	; 0x0a
    1be0:	b9 84       	ldd	r11, Y+9	; 0x09
    1be2:	c8 84       	ldd	r12, Y+8	; 0x08
    1be4:	df 80       	ldd	r13, Y+7	; 0x07
    1be6:	ee 80       	ldd	r14, Y+6	; 0x06
    1be8:	fd 80       	ldd	r15, Y+5	; 0x05
    1bea:	0c 81       	ldd	r16, Y+4	; 0x04
    1bec:	1b 81       	ldd	r17, Y+3	; 0x03
    1bee:	aa 81       	ldd	r26, Y+2	; 0x02
    1bf0:	b9 81       	ldd	r27, Y+1	; 0x01
    1bf2:	ce 0f       	add	r28, r30
    1bf4:	d1 1d       	adc	r29, r1
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	ed 01       	movw	r28, r26
    1c02:	08 95       	ret

00001c04 <_exit>:
    1c04:	f8 94       	cli

00001c06 <__stop_program>:
    1c06:	ff cf       	rjmp	.-2      	; 0x1c06 <__stop_program>


ATtiny84A_dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000018e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000040d  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000013a  00000000  00000000  00000d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a7  00000000  00000000  00000eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000133  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013b  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__vector_2>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	2e c0       	rjmp	.+92     	; 0x78 <__vector_13>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e1       	ldi	r30, 0x1A	; 26
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a1 36       	cpi	r26, 0x61	; 97
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	2c d0       	rcall	.+88     	; 0xae <main>
  56:	5f c0       	rjmp	.+190    	; 0x116 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_2>:
BYTE SPI_Exchange(BYTE out);
/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(PCINT0_vect){
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
  64:	8f 93       	push	r24
	cli();
  66:	f8 94       	cli
	if (PINA & (1 << PCINT3)){
  68:	89 b3       	in	r24, 0x19	; 25
		//Take reading and load data.
		//__startADCconversion();
	}
	sei();
  6a:	78 94       	sei
}
  6c:	8f 91       	pop	r24
  6e:	0f 90       	pop	r0
  70:	0f be       	out	0x3f, r0	; 63
  72:	0f 90       	pop	r0
  74:	1f 90       	pop	r1
  76:	18 95       	reti

00000078 <__vector_13>:

ISR(ADC_vect){
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
	flagWaitingForADC=fFalse;
  82:	10 92 60 00 	sts	0x0060, r1
}
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <DeviceInit>:

/**********************************************************************************************************************************/
void DeviceInit(void)
{
	// Default all i/o ports to input with pull-ups enabled	
	DDRA = 0;
  90:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0;
  92:	17 ba       	out	0x17, r1	; 23
	PORTA = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0xFF;
  98:	88 bb       	out	0x18, r24	; 24
}
  9a:	08 95       	ret

0000009c <AppInit>:
void AppInit(unsigned int ubrr)
{
	//Initialize I2C
		
	//Initialize ADC
	ADMUX = 0x00;							//Uses reference 3.3V, ADC0
  9c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = (1 << ADIE)|(1 << ADPS2)|(1 << ADPS0);		//enable global interrupt, clk divide of 32
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	86 b9       	out	0x06, r24	; 6
	
	//Initialize PCINT3
	GIMSK = (1 << PCIE0);		//enable interrupts from PCINT[0:7]
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	8b bf       	out	0x3b, r24	; 59
	PCMSK0 = (1 << PCINT3);		//enable pin change interrupt on PCINT3
  a6:	88 e0       	ldi	r24, 0x08	; 8
  a8:	82 bb       	out	0x12, r24	; 18
	
	sei(); //enable interrupts
  aa:	78 94       	sei
}
  ac:	08 95       	ret

000000ae <main>:
}
/*****************************************************************************************************************/

int main(void)
{
	DeviceInit();
  ae:	f0 df       	rcall	.-32     	; 0x90 <DeviceInit>
	AppInit(MYUBRR);
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	f3 df       	rcall	.-26     	; 0x9c <AppInit>
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <main+0x8>

000000b8 <Wait_ms>:
	sei(); //enable interrupts
}

/**********************************************************************************************************************************/		
void Wait_ms(volatile WORD delay)
{	
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <Wait_ms+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <Wait_ms+0x8>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	9c 83       	std	Y+4, r25	; 0x04
  c6:	8b 83       	std	Y+3, r24	; 0x03
	volatile WORD i;

	while(delay > 0){
  c8:	8b 81       	ldd	r24, Y+3	; 0x03
  ca:	9c 81       	ldd	r25, Y+4	; 0x04
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	e1 f0       	breq	.+56     	; 0x108 <Wait_ms+0x50>
		for( i = 0; i < 400; i++);
  d0:	1a 82       	std	Y+2, r1	; 0x02
  d2:	19 82       	std	Y+1, r1	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	80 39       	cpi	r24, 0x90	; 144
  dc:	92 07       	cpc	r25, r18
  de:	58 f4       	brcc	.+22     	; 0xf6 <Wait_ms+0x3e>
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	9a 81       	ldd	r25, Y+2	; 0x02
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	80 39       	cpi	r24, 0x90	; 144
  f2:	92 07       	cpc	r25, r18
  f4:	a8 f3       	brcs	.-22     	; 0xe0 <Wait_ms+0x28>
		delay -= 1;
  f6:	8b 81       	ldd	r24, Y+3	; 0x03
  f8:	9c 81       	ldd	r25, Y+4	; 0x04
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	9c 83       	std	Y+4, r25	; 0x04
  fe:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/		
void Wait_ms(volatile WORD delay)
{	
	volatile WORD i;

	while(delay > 0){
 100:	8b 81       	ldd	r24, Y+3	; 0x03
 102:	9c 81       	ldd	r25, Y+4	; 0x04
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	21 f7       	brne	.-56     	; 0xd0 <Wait_ms+0x18>
		for( i = 0; i < 400; i++);
		delay -= 1;
	}
}
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>

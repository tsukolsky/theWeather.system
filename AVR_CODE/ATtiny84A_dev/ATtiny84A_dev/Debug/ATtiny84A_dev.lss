
ATtiny84A_dev.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000039b  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e9  00000000  00000000  00000d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002ce  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000094  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e0  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000106  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e4 e6       	ldi	r30, 0x64	; 100
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__CCP__+0x6>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 36       	cpi	r26, 0x60	; 96
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	02 d0       	rcall	.+4      	; 0x5a <main>
  56:	84 c0       	rjmp	.+264    	; 0x160 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
/* ------------------------------------------------------------ */


/*****************************************************************************************************************/
int main(void)
{
  5a:	cf 93       	push	r28
  5c:	df 93       	push	r29
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
	DeviceInit();
  62:	1e d0       	rcall	.+60     	; 0xa0 <DeviceInit>
	AppInit(MYUBRR);
  64:	83 e3       	ldi	r24, 0x33	; 51
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	34 d0       	rcall	.+104    	; 0xd2 <AppInit>
	
	// main program loop
	while (fTrue) {
		sei();
  6a:	78 94       	sei
		Wait_ms(1000);
  6c:	88 ee       	ldi	r24, 0xE8	; 232
  6e:	93 e0       	ldi	r25, 0x03	; 3
  70:	4f d0       	rcall	.+158    	; 0x110 <Wait_ms>
		prtLED &= ~(1 << bnLED);
  72:	88 e3       	ldi	r24, 0x38	; 56
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	28 e3       	ldi	r18, 0x38	; 56
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	f9 01       	movw	r30, r18
  7c:	20 81       	ld	r18, Z
  7e:	2e 7f       	andi	r18, 0xFE	; 254
  80:	fc 01       	movw	r30, r24
  82:	20 83       	st	Z, r18
		Wait_ms(1000);
  84:	88 ee       	ldi	r24, 0xE8	; 232
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	43 d0       	rcall	.+134    	; 0x110 <Wait_ms>
		prtLED |= (1 << bnLED);
  8a:	88 e3       	ldi	r24, 0x38	; 56
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	28 e3       	ldi	r18, 0x38	; 56
  90:	30 e0       	ldi	r19, 0x00	; 0
  92:	f9 01       	movw	r30, r18
  94:	20 81       	ld	r18, Z
  96:	21 60       	ori	r18, 0x01	; 1
  98:	fc 01       	movw	r30, r24
  9a:	20 83       	st	Z, r18
		cli();										  //disable interrupts	
  9c:	f8 94       	cli
	}  //end while fTrue
  9e:	e5 cf       	rjmp	.-54     	; 0x6a <main+0x10>

000000a0 <DeviceInit>:
} // end main()


/**********************************************************************************************************************************/
void DeviceInit(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups enabled	
	DDRA = 0;
  a8:	8a e3       	ldi	r24, 0x3A	; 58
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	10 82       	st	Z, r1
	DDRB = 0;
  b0:	87 e3       	ldi	r24, 0x37	; 55
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	fc 01       	movw	r30, r24
  b6:	10 82       	st	Z, r1
	PORTA = 0xFF;
  b8:	8b e3       	ldi	r24, 0x3B	; 59
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	PORTB = 0xFF;
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <AppInit>:
/**********************************************************************************************************************************/
#ifdef DEAD
void AppInit(unsigned int ubrr)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <AppInit+0x6>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	89 83       	std	Y+1, r24	; 0x01
	//initialize stuff for UART
	
	//Initialize LED outputs
	ddrLED |= (1 << bnLED); //set power LED to output
  e0:	87 e3       	ldi	r24, 0x37	; 55
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	27 e3       	ldi	r18, 0x37	; 55
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	f9 01       	movw	r30, r18
  ea:	20 81       	ld	r18, Z
  ec:	21 60       	ori	r18, 0x01	; 1
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	prtLED |= (1 << bnLED);	//turn it on initially
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	28 e3       	ldi	r18, 0x38	; 56
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	f9 01       	movw	r30, r18
  fc:	20 81       	ld	r18, Z
  fe:	21 60       	ori	r18, 0x01	; 1
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
	sei(); //enable interrupts
 104:	78 94       	sei
}
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <Wait_ms>:
**		and WinAVR GCC.  A handy method of calibrating the delay loop is to write a 
**		short program that toggles an LED on and off once per second using this 
**		function and using a watch to time how long it is actually taking to
**		complete. 																												*/
void Wait_ms(WORD delay)
{	
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	00 d0       	rcall	.+0      	; 0x116 <Wait_ms+0x6>
 116:	00 d0       	rcall	.+0      	; 0x118 <Wait_ms+0x8>
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	9c 83       	std	Y+4, r25	; 0x04
 11e:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
 120:	14 c0       	rjmp	.+40     	; 0x14a <Wait_ms+0x3a>
		for( i = 0; i < 400; i++){
 122:	1a 82       	std	Y+2, r1	; 0x02
 124:	19 82       	std	Y+1, r1	; 0x01
 126:	06 c0       	rjmp	.+12     	; 0x134 <Wait_ms+0x24>
			asm volatile("nop");
 128:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	9a 81       	ldd	r25, Y+2	; 0x02
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	80 39       	cpi	r24, 0x90	; 144
 13c:	92 07       	cpc	r25, r18
 13e:	a0 f3       	brcs	.-24     	; 0x128 <Wait_ms+0x18>
			asm volatile("nop");
		}
		delay -= 1;
 140:	8b 81       	ldd	r24, Y+3	; 0x03
 142:	9c 81       	ldd	r25, Y+4	; 0x04
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	9c 83       	std	Y+4, r25	; 0x04
 148:	8b 83       	std	Y+3, r24	; 0x03
**		complete. 																												*/
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
 14a:	8b 81       	ldd	r24, Y+3	; 0x03
 14c:	9c 81       	ldd	r25, Y+4	; 0x04
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	41 f7       	brne	.-48     	; 0x122 <Wait_ms+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>


theWeather.system_breadboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000164  000001f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000001fc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000433  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000134  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  00000f37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000142  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000097  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  9e:	0c 94 b0 00 	jmp	0x160	; 0x160 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DeviceInit>:

/**********************************************************************************************************************************/
void DeviceInit(void)
{
	// Default all i/o ports to input with pull-ups enabled	
	DDRB = 0;
  a6:	14 b8       	out	0x04, r1	; 4
	DDRC = 0;
  a8:	17 b8       	out	0x07, r1	; 7
	DDRD = 0;
  aa:	1a b8       	out	0x0a, r1	; 10

	PORTB = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
  b0:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
  b2:	8b b9       	out	0x0b, r24	; 11
}
  b4:	08 95       	ret

000000b6 <AppInit>:
/**********************************************************************************************************************************/
#ifdef DEAD
void AppInit(void)
{
	//initialize stuff for UART
	UBRR0L = BAUD115200;   											//set low byte of baud rate
  b6:	80 91 02 01 	lds	r24, 0x0102
  ba:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = (BAUD115200 >> 8);										//set high byte of baud rate
  be:	80 91 03 01 	lds	r24, 0x0103
  c2:	80 93 c5 00 	sts	0x00C5, r24
#define U2X0 1
	UCSR0A = (1 << U2X0);											//select high speed baud rate clock
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	80 93 c0 00 	sts	0x00C0, r24
	//enable tx
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
  cc:	88 e1       	ldi	r24, 0x18	; 24
  ce:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 c2 00 	sts	0x00C2, r24
	//initialize clock
	//CLKPR = (1 << CLKPCE);
	//CLKPR &= ~(1 << CLKPS3)|(1 << CLKPS2)|(1 << CLKPS1)|(1 << CLKPS0); //sets internal oscillator to 8Mhz

	//INitialize LED outputs
	ddrLED |= (1 << bnLED0);	//enables output
  d8:	3b 9a       	sbi	0x07, 3	; 7
	prtLED &= ~(1 << bnLED0);	//disables pullup
  da:	43 98       	cbi	0x08, 3	; 8
	sei(); //enable interrupts
  dc:	78 94       	sei
}
  de:	08 95       	ret

000000e0 <Wait_ms>:
**		complete. 																												*/
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	41 f4       	brne	.+16     	; 0xf4 <Wait_ms+0x14>
  e4:	08 95       	ret
		for( i = 0; i < 400; i++){
			asm volatile("nop");
  e6:	00 00       	nop
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
  ec:	e1 f7       	brne	.-8      	; 0xe6 <Wait_ms+0x6>
			asm volatile("nop");
		}
		delay -= 1;
  ee:	01 97       	sbiw	r24, 0x01	; 1
**		complete. 																												*/
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
  f0:	19 f4       	brne	.+6      	; 0xf8 <Wait_ms+0x18>
  f2:	08 95       	ret
**		and WinAVR GCC.  A handy method of calibrating the delay loop is to write a 
**		short program that toggles an LED on and off once per second using this 
**		function and using a watch to time how long it is actually taking to
**		complete. 																												*/
void Wait_ms(WORD delay)
{	
  f4:	40 e9       	ldi	r20, 0x90	; 144
  f6:	51 e0       	ldi	r21, 0x01	; 1
  f8:	9a 01       	movw	r18, r20
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <Wait_ms+0x6>

000000fc <main>:

/*****************************************************************************************************************/
int main(void)
{	

	DeviceInit();
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <DeviceInit>
	AppInit();
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <AppInit>
	// main program loop
	while (fTrue) {		
//		sei();
		pinLED0 |= (1 << bnLED0);	//enable high output
 104:	33 9a       	sbi	0x06, 3	; 6
		Wait_ms(1000); //should wait ~ 1 seconds
 106:	88 ee       	ldi	r24, 0xE8	; 232
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	0e 94 70 00 	call	0xe0	; 0xe0 <Wait_ms>
		pinLED0 &= ~(1 << bnLED0); //enable low output
 10e:	33 98       	cbi	0x06, 3	; 6
		Wait_ms(1000); //should wait ~ 1 second
 110:	88 ee       	ldi	r24, 0xE8	; 232
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	0e 94 70 00 	call	0xe0	; 0xe0 <Wait_ms>
 118:	f5 cf       	rjmp	.-22     	; 0x104 <main+0x8>

0000011a <PutUart0Ch>:
**		This routine will write the specified character to the
**		UART0 transmitter.
*/
void PutUart0Ch(char ch)
{
	while (! (UCSR0A & (1 << UDRE0)) ) { asm volatile("nop"); }
 11a:	90 91 c0 00 	lds	r25, 0x00C0
 11e:	95 fd       	sbrc	r25, 5
 120:	06 c0       	rjmp	.+12     	; 0x12e <PutUart0Ch+0x14>
 122:	e0 ec       	ldi	r30, 0xC0	; 192
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	00 00       	nop
 128:	90 81       	ld	r25, Z
 12a:	95 ff       	sbrs	r25, 5
 12c:	fc cf       	rjmp	.-8      	; 0x126 <PutUart0Ch+0xc>
	UDR0 = ch;
 12e:	80 93 c6 00 	sts	0x00C6, r24
}
 132:	08 95       	ret

00000134 <Print0>:
/**********************************************************************************************************************************/
void Print0(char string[])
{	
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	8c 01       	movw	r16, r24
	BYTE i;
	i = 0;

	while (string[i]) {
 13c:	fc 01       	movw	r30, r24
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	51 f0       	breq	.+20     	; 0x158 <Print0+0x24>
}
/**********************************************************************************************************************************/
void Print0(char string[])
{	
	BYTE i;
	i = 0;
 144:	c0 e0       	ldi	r28, 0x00	; 0

	while (string[i]) {
		PutUart0Ch(string[i]);  //send byte		
 146:	0e 94 8d 00 	call	0x11a	; 0x11a <PutUart0Ch>
		i += 1;
 14a:	cf 5f       	subi	r28, 0xFF	; 255
void Print0(char string[])
{	
	BYTE i;
	i = 0;

	while (string[i]) {
 14c:	f8 01       	movw	r30, r16
 14e:	ec 0f       	add	r30, r28
 150:	f1 1d       	adc	r31, r1
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	b9 f7       	brne	.-18     	; 0x146 <Print0+0x12>
		PutUart0Ch(string[i]);  //send byte		
		i += 1;
	}
}
 158:	cf 91       	pop	r28
 15a:	1f 91       	pop	r17
 15c:	0f 91       	pop	r16
 15e:	08 95       	ret

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>

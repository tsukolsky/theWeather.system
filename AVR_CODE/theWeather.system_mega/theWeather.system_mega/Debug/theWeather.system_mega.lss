
theWeather.system_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00003288  0000333c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003288  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800172  00800172  000033ae  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  000033ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000037ec  00000000  00000000  000033b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000cd6  00000000  00000000  00006b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 000001a0  00000000  00000000  00007878  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001eb6  00000000  00000000  00007a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000050b  00000000  00000000  000098ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ddc  00000000  00000000  00009dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000087c  00000000  00000000  0000abb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b55  00000000  00000000  0000b434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000160e  00000000  00000000  0000bf89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  0000d597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       c:	0c 94 37 0c 	jmp	0x186e	; 0x186e <__vector_3>
      10:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      14:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      18:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      20:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      24:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      28:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      2c:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__vector_11>
      30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      3c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      4c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      50:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      58:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      5c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      60:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      68:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      6c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      70:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      74:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      78:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <_ZN10thermostat7getAveTEv+0x10>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49a>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff24>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <_ZN10thermostat9PrintWeekEv+0xe2>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <_ZN10thermostat9addTheDayEv+0xb0>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <__do_clear_bss+0x6>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13c>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff7e>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <_ZN10thermostatC1Ev+0x16>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_start>:
     176:	b0 13       	cpse	r27, r16

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d8 e0       	ldi	r29, 0x08	; 8
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e8 e8       	ldi	r30, 0x88	; 136
     18c:	f2 e3       	ldi	r31, 0x32	; 50
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 37       	cpi	r26, 0x72	; 114
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a2 e7       	ldi	r26, 0x72	; 114
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a7 3a       	cpi	r26, 0xA7	; 167
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>

000001aa <__do_global_ctors>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	c8 e7       	ldi	r28, 0x78	; 120
     1ae:	d1 e0       	ldi	r29, 0x01	; 1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__do_global_ctors+0x10>
     1b2:	22 97       	sbiw	r28, 0x02	; 2
     1b4:	fe 01       	movw	r30, r28
     1b6:	0e 94 08 16 	call	0x2c10	; 0x2c10 <__tablejump__>
     1ba:	c6 37       	cpi	r28, 0x76	; 118
     1bc:	d1 07       	cpc	r29, r17
     1be:	c9 f7       	brne	.-14     	; 0x1b2 <__do_global_ctors+0x8>
     1c0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <main>
     1c4:	0c 94 42 19 	jmp	0x3284	; 0x3284 <_exit>

000001c8 <__bad_interrupt>:
     1c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001cc <_ZN10thermostatC1Ev>:
		double weekHigh,weekLow,weekAverageT,weekAverageH;
		WORD numDayReadings;
		BYTE howManyDays;
};

thermostat::thermostat(){
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_ZN10thermostatC1Ev+0x6>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	9a 83       	std	Y+2, r25	; 0x02
     1d8:	89 83       	std	Y+1, r24	; 0x01
	reset();
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN10thermostat5resetEv>
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <_ZN10thermostat5resetEv>:

void thermostat::reset(){
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_ZN10thermostat5resetEv+0x6>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
	resetDay();
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	9a 81       	ldd	r25, Y+2	; 0x02
     1fe:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10thermostat8resetDayEv>
	resetWeek();
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	0e 94 44 01 	call	0x288	; 0x288 <_ZN10thermostat9resetWeekEv>
}
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <_ZN10thermostat8resetDayEv>:

void thermostat::resetDay(){
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <_ZN10thermostat8resetDayEv+0x6>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	89 83       	std	Y+1, r24	; 0x01
	high=0.0;
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	3a 81       	ldd	r19, Y+2	; 0x02
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	dc 01       	movw	r26, r24
     22c:	f9 01       	movw	r30, r18
     22e:	80 83       	st	Z, r24
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	a2 83       	std	Z+2, r26	; 0x02
     234:	b3 83       	std	Z+3, r27	; 0x03
	low=1000.0;
     236:	29 81       	ldd	r18, Y+1	; 0x01
     238:	3a 81       	ldd	r19, Y+2	; 0x02
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	aa e7       	ldi	r26, 0x7A	; 122
     240:	b4 e4       	ldi	r27, 0x44	; 68
     242:	f9 01       	movw	r30, r18
     244:	84 83       	std	Z+4, r24	; 0x04
     246:	95 83       	std	Z+5, r25	; 0x05
     248:	a6 83       	std	Z+6, r26	; 0x06
     24a:	b7 83       	std	Z+7, r27	; 0x07
	averageT=0.0;
     24c:	29 81       	ldd	r18, Y+1	; 0x01
     24e:	3a 81       	ldd	r19, Y+2	; 0x02
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	dc 01       	movw	r26, r24
     256:	f9 01       	movw	r30, r18
     258:	80 87       	std	Z+8, r24	; 0x08
     25a:	91 87       	std	Z+9, r25	; 0x09
     25c:	a2 87       	std	Z+10, r26	; 0x0a
     25e:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=0.0;
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	3a 81       	ldd	r19, Y+2	; 0x02
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	dc 01       	movw	r26, r24
     26a:	f9 01       	movw	r30, r18
     26c:	84 87       	std	Z+12, r24	; 0x0c
     26e:	95 87       	std	Z+13, r25	; 0x0d
     270:	a6 87       	std	Z+14, r26	; 0x0e
     272:	b7 87       	std	Z+15, r27	; 0x0f
	numDayReadings=0;	
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	9a 81       	ldd	r25, Y+2	; 0x02
     278:	fc 01       	movw	r30, r24
     27a:	11 a2       	lds	r17, 0x91
     27c:	10 a2       	lds	r17, 0x90
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <_ZN10thermostat9resetWeekEv>:

void thermostat::resetWeek(){
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <_ZN10thermostat9resetWeekEv+0x6>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
	howManyDays=0;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	12 a2       	lds	r17, 0x92
	weekHigh=0;
     29e:	29 81       	ldd	r18, Y+1	; 0x01
     2a0:	3a 81       	ldd	r19, Y+2	; 0x02
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	dc 01       	movw	r26, r24
     2a8:	f9 01       	movw	r30, r18
     2aa:	80 8b       	std	Z+16, r24	; 0x10
     2ac:	91 8b       	std	Z+17, r25	; 0x11
     2ae:	a2 8b       	std	Z+18, r26	; 0x12
     2b0:	b3 8b       	std	Z+19, r27	; 0x13
	weekLow=0;
     2b2:	29 81       	ldd	r18, Y+1	; 0x01
     2b4:	3a 81       	ldd	r19, Y+2	; 0x02
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	dc 01       	movw	r26, r24
     2bc:	f9 01       	movw	r30, r18
     2be:	84 8b       	std	Z+20, r24	; 0x14
     2c0:	95 8b       	std	Z+21, r25	; 0x15
     2c2:	a6 8b       	std	Z+22, r26	; 0x16
     2c4:	b7 8b       	std	Z+23, r27	; 0x17
	weekAverageH=0;
     2c6:	29 81       	ldd	r18, Y+1	; 0x01
     2c8:	3a 81       	ldd	r19, Y+2	; 0x02
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	dc 01       	movw	r26, r24
     2d0:	f9 01       	movw	r30, r18
     2d2:	84 8f       	std	Z+28, r24	; 0x1c
     2d4:	95 8f       	std	Z+29, r25	; 0x1d
     2d6:	a6 8f       	std	Z+30, r26	; 0x1e
     2d8:	b7 8f       	std	Z+31, r27	; 0x1f
	weekAverageT=0;	
     2da:	29 81       	ldd	r18, Y+1	; 0x01
     2dc:	3a 81       	ldd	r19, Y+2	; 0x02
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	dc 01       	movw	r26, r24
     2e4:	f9 01       	movw	r30, r18
     2e6:	80 8f       	std	Z+24, r24	; 0x18
     2e8:	91 8f       	std	Z+25, r25	; 0x19
     2ea:	a2 8f       	std	Z+26, r26	; 0x1a
     2ec:	b3 8f       	std	Z+27, r27	; 0x1b
}
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <_ZN10thermostat12takeReadingsEv>:

void thermostat::takeReadings(){
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	00 d0       	rcall	.+0      	; 0x30a <_ZN10thermostat12takeReadingsEv+0x12>
     30a:	cd b7       	in	r28, 0x3d	; 61
     30c:	de b7       	in	r29, 0x3e	; 62
     30e:	9a 83       	std	Y+2, r25	; 0x02
     310:	89 83       	std	Y+1, r24	; 0x01
	addDataPoint(GetTempTherm(),GetHumidity());	
     312:	0e 94 c6 10 	call	0x218c	; 0x218c <_Z12GetTempThermv>
     316:	6b 01       	movw	r12, r22
     318:	7c 01       	movw	r14, r24
     31a:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z11GetHumidityv>
     31e:	8b 01       	movw	r16, r22
     320:	9c 01       	movw	r18, r24
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	b7 01       	movw	r22, r14
     328:	a6 01       	movw	r20, r12
     32a:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN10thermostat12addDataPointEdd>
}
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	08 95       	ret

00000344 <_ZN10thermostat9addTheDayEv>:

void thermostat::addTheDay(){
     344:	ef 92       	push	r14
     346:	ff 92       	push	r15
     348:	0f 93       	push	r16
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <_ZN10thermostat9addTheDayEv+0xe>
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
	//Add this day to the average of things
	takeReadings();
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN10thermostat12takeReadingsEv>
	howManyDays++;
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	fc 01       	movw	r30, r24
     368:	82 a1       	lds	r24, 0x42
     36a:	28 2f       	mov	r18, r24
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	fc 01       	movw	r30, r24
     374:	22 a3       	lds	r18, 0x52
	weekHigh=(weekHigh*(howManyDays-1) + high)/howManyDays;
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	9a 81       	ldd	r25, Y+2	; 0x02
     37a:	fc 01       	movw	r30, r24
     37c:	e0 88       	ldd	r14, Z+16	; 0x10
     37e:	f1 88       	ldd	r15, Z+17	; 0x11
     380:	02 89       	ldd	r16, Z+18	; 0x12
     382:	13 89       	ldd	r17, Z+19	; 0x13
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	fc 01       	movw	r30, r24
     38a:	82 a1       	lds	r24, 0x42
     38c:	88 2f       	mov	r24, r24
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	aa 27       	eor	r26, r26
     394:	97 fd       	sbrc	r25, 7
     396:	a0 95       	com	r26
     398:	ba 2f       	mov	r27, r26
     39a:	bc 01       	movw	r22, r24
     39c:	cd 01       	movw	r24, r26
     39e:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     3a2:	9b 01       	movw	r18, r22
     3a4:	ac 01       	movw	r20, r24
     3a6:	c8 01       	movw	r24, r16
     3a8:	b7 01       	movw	r22, r14
     3aa:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     3ae:	dc 01       	movw	r26, r24
     3b0:	cb 01       	movw	r24, r22
     3b2:	29 81       	ldd	r18, Y+1	; 0x01
     3b4:	3a 81       	ldd	r19, Y+2	; 0x02
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	31 81       	ldd	r19, Z+1	; 0x01
     3bc:	42 81       	ldd	r20, Z+2	; 0x02
     3be:	53 81       	ldd	r21, Z+3	; 0x03
     3c0:	bc 01       	movw	r22, r24
     3c2:	cd 01       	movw	r24, r26
     3c4:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     3c8:	dc 01       	movw	r26, r24
     3ca:	cb 01       	movw	r24, r22
     3cc:	7c 01       	movw	r14, r24
     3ce:	8d 01       	movw	r16, r26
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	9a 81       	ldd	r25, Y+2	; 0x02
     3d4:	fc 01       	movw	r30, r24
     3d6:	82 a1       	lds	r24, 0x42
     3d8:	88 2f       	mov	r24, r24
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	aa 27       	eor	r26, r26
     3de:	97 fd       	sbrc	r25, 7
     3e0:	a0 95       	com	r26
     3e2:	ba 2f       	mov	r27, r26
     3e4:	bc 01       	movw	r22, r24
     3e6:	cd 01       	movw	r24, r26
     3e8:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     3ec:	9b 01       	movw	r18, r22
     3ee:	ac 01       	movw	r20, r24
     3f0:	c8 01       	movw	r24, r16
     3f2:	b7 01       	movw	r22, r14
     3f4:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     3f8:	dc 01       	movw	r26, r24
     3fa:	cb 01       	movw	r24, r22
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	3a 81       	ldd	r19, Y+2	; 0x02
     400:	f9 01       	movw	r30, r18
     402:	80 8b       	std	Z+16, r24	; 0x10
     404:	91 8b       	std	Z+17, r25	; 0x11
     406:	a2 8b       	std	Z+18, r26	; 0x12
     408:	b3 8b       	std	Z+19, r27	; 0x13
	weekLow=(weekLow*(howManyDays-1)+low)/howManyDays;
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	9a 81       	ldd	r25, Y+2	; 0x02
     40e:	fc 01       	movw	r30, r24
     410:	e4 88       	ldd	r14, Z+20	; 0x14
     412:	f5 88       	ldd	r15, Z+21	; 0x15
     414:	06 89       	ldd	r16, Z+22	; 0x16
     416:	17 89       	ldd	r17, Z+23	; 0x17
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	9a 81       	ldd	r25, Y+2	; 0x02
     41c:	fc 01       	movw	r30, r24
     41e:	82 a1       	lds	r24, 0x42
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	aa 27       	eor	r26, r26
     428:	97 fd       	sbrc	r25, 7
     42a:	a0 95       	com	r26
     42c:	ba 2f       	mov	r27, r26
     42e:	bc 01       	movw	r22, r24
     430:	cd 01       	movw	r24, r26
     432:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     436:	9b 01       	movw	r18, r22
     438:	ac 01       	movw	r20, r24
     43a:	c8 01       	movw	r24, r16
     43c:	b7 01       	movw	r22, r14
     43e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     442:	dc 01       	movw	r26, r24
     444:	cb 01       	movw	r24, r22
     446:	29 81       	ldd	r18, Y+1	; 0x01
     448:	3a 81       	ldd	r19, Y+2	; 0x02
     44a:	f9 01       	movw	r30, r18
     44c:	24 81       	ldd	r18, Z+4	; 0x04
     44e:	35 81       	ldd	r19, Z+5	; 0x05
     450:	46 81       	ldd	r20, Z+6	; 0x06
     452:	57 81       	ldd	r21, Z+7	; 0x07
     454:	bc 01       	movw	r22, r24
     456:	cd 01       	movw	r24, r26
     458:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     45c:	dc 01       	movw	r26, r24
     45e:	cb 01       	movw	r24, r22
     460:	7c 01       	movw	r14, r24
     462:	8d 01       	movw	r16, r26
     464:	89 81       	ldd	r24, Y+1	; 0x01
     466:	9a 81       	ldd	r25, Y+2	; 0x02
     468:	fc 01       	movw	r30, r24
     46a:	82 a1       	lds	r24, 0x42
     46c:	88 2f       	mov	r24, r24
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	aa 27       	eor	r26, r26
     472:	97 fd       	sbrc	r25, 7
     474:	a0 95       	com	r26
     476:	ba 2f       	mov	r27, r26
     478:	bc 01       	movw	r22, r24
     47a:	cd 01       	movw	r24, r26
     47c:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     480:	9b 01       	movw	r18, r22
     482:	ac 01       	movw	r20, r24
     484:	c8 01       	movw	r24, r16
     486:	b7 01       	movw	r22, r14
     488:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     48c:	dc 01       	movw	r26, r24
     48e:	cb 01       	movw	r24, r22
     490:	29 81       	ldd	r18, Y+1	; 0x01
     492:	3a 81       	ldd	r19, Y+2	; 0x02
     494:	f9 01       	movw	r30, r18
     496:	84 8b       	std	Z+20, r24	; 0x14
     498:	95 8b       	std	Z+21, r25	; 0x15
     49a:	a6 8b       	std	Z+22, r26	; 0x16
     49c:	b7 8b       	std	Z+23, r27	; 0x17
	weekAverageH=(weekAverageH*(howManyDays-1)+averageH)/howManyDays;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	fc 01       	movw	r30, r24
     4a4:	e4 8c       	ldd	r14, Z+28	; 0x1c
     4a6:	f5 8c       	ldd	r15, Z+29	; 0x1d
     4a8:	06 8d       	ldd	r16, Z+30	; 0x1e
     4aa:	17 8d       	ldd	r17, Z+31	; 0x1f
     4ac:	89 81       	ldd	r24, Y+1	; 0x01
     4ae:	9a 81       	ldd	r25, Y+2	; 0x02
     4b0:	fc 01       	movw	r30, r24
     4b2:	82 a1       	lds	r24, 0x42
     4b4:	88 2f       	mov	r24, r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	aa 27       	eor	r26, r26
     4bc:	97 fd       	sbrc	r25, 7
     4be:	a0 95       	com	r26
     4c0:	ba 2f       	mov	r27, r26
     4c2:	bc 01       	movw	r22, r24
     4c4:	cd 01       	movw	r24, r26
     4c6:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
     4ce:	c8 01       	movw	r24, r16
     4d0:	b7 01       	movw	r22, r14
     4d2:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     4d6:	dc 01       	movw	r26, r24
     4d8:	cb 01       	movw	r24, r22
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	3a 81       	ldd	r19, Y+2	; 0x02
     4de:	f9 01       	movw	r30, r18
     4e0:	24 85       	ldd	r18, Z+12	; 0x0c
     4e2:	35 85       	ldd	r19, Z+13	; 0x0d
     4e4:	46 85       	ldd	r20, Z+14	; 0x0e
     4e6:	57 85       	ldd	r21, Z+15	; 0x0f
     4e8:	bc 01       	movw	r22, r24
     4ea:	cd 01       	movw	r24, r26
     4ec:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     4f0:	dc 01       	movw	r26, r24
     4f2:	cb 01       	movw	r24, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	8d 01       	movw	r16, r26
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	fc 01       	movw	r30, r24
     4fe:	82 a1       	lds	r24, 0x42
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	aa 27       	eor	r26, r26
     506:	97 fd       	sbrc	r25, 7
     508:	a0 95       	com	r26
     50a:	ba 2f       	mov	r27, r26
     50c:	bc 01       	movw	r22, r24
     50e:	cd 01       	movw	r24, r26
     510:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     514:	9b 01       	movw	r18, r22
     516:	ac 01       	movw	r20, r24
     518:	c8 01       	movw	r24, r16
     51a:	b7 01       	movw	r22, r14
     51c:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	29 81       	ldd	r18, Y+1	; 0x01
     526:	3a 81       	ldd	r19, Y+2	; 0x02
     528:	f9 01       	movw	r30, r18
     52a:	84 8f       	std	Z+28, r24	; 0x1c
     52c:	95 8f       	std	Z+29, r25	; 0x1d
     52e:	a6 8f       	std	Z+30, r26	; 0x1e
     530:	b7 8f       	std	Z+31, r27	; 0x1f
	weekAverageT=(weekAverageT*(howManyDays-1)+averageT)/howManyDays;
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	9a 81       	ldd	r25, Y+2	; 0x02
     536:	fc 01       	movw	r30, r24
     538:	e0 8c       	ldd	r14, Z+24	; 0x18
     53a:	f1 8c       	ldd	r15, Z+25	; 0x19
     53c:	02 8d       	ldd	r16, Z+26	; 0x1a
     53e:	13 8d       	ldd	r17, Z+27	; 0x1b
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	fc 01       	movw	r30, r24
     546:	82 a1       	lds	r24, 0x42
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	01 97       	sbiw	r24, 0x01	; 1
     54e:	aa 27       	eor	r26, r26
     550:	97 fd       	sbrc	r25, 7
     552:	a0 95       	com	r26
     554:	ba 2f       	mov	r27, r26
     556:	bc 01       	movw	r22, r24
     558:	cd 01       	movw	r24, r26
     55a:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     55e:	9b 01       	movw	r18, r22
     560:	ac 01       	movw	r20, r24
     562:	c8 01       	movw	r24, r16
     564:	b7 01       	movw	r22, r14
     566:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	29 81       	ldd	r18, Y+1	; 0x01
     570:	3a 81       	ldd	r19, Y+2	; 0x02
     572:	f9 01       	movw	r30, r18
     574:	20 85       	ldd	r18, Z+8	; 0x08
     576:	31 85       	ldd	r19, Z+9	; 0x09
     578:	42 85       	ldd	r20, Z+10	; 0x0a
     57a:	53 85       	ldd	r21, Z+11	; 0x0b
     57c:	bc 01       	movw	r22, r24
     57e:	cd 01       	movw	r24, r26
     580:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     584:	dc 01       	movw	r26, r24
     586:	cb 01       	movw	r24, r22
     588:	7c 01       	movw	r14, r24
     58a:	8d 01       	movw	r16, r26
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	9a 81       	ldd	r25, Y+2	; 0x02
     590:	fc 01       	movw	r30, r24
     592:	82 a1       	lds	r24, 0x42
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	aa 27       	eor	r26, r26
     59a:	97 fd       	sbrc	r25, 7
     59c:	a0 95       	com	r26
     59e:	ba 2f       	mov	r27, r26
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	0e 94 bc 14 	call	0x2978	; 0x2978 <__floatsisf>
     5a8:	9b 01       	movw	r18, r22
     5aa:	ac 01       	movw	r20, r24
     5ac:	c8 01       	movw	r24, r16
     5ae:	b7 01       	movw	r22, r14
     5b0:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	29 81       	ldd	r18, Y+1	; 0x01
     5ba:	3a 81       	ldd	r19, Y+2	; 0x02
     5bc:	f9 01       	movw	r30, r18
     5be:	80 8f       	std	Z+24, r24	; 0x18
     5c0:	91 8f       	std	Z+25, r25	; 0x19
     5c2:	a2 8f       	std	Z+26, r26	; 0x1a
     5c4:	b3 8f       	std	Z+27, r27	; 0x1b
	resetDay();
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10thermostat8resetDayEv>
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <_ZN10thermostat9PrintWeekEv>:

void thermostat::PrintWeek(){
     5e0:	0f 93       	push	r16
     5e2:	1f 93       	push	r17
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	6a 97       	sbiw	r28, 0x1a	; 26
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	9a 8f       	std	Y+26, r25	; 0x1a
     5fa:	89 8f       	std	Y+25, r24	; 0x19
	//Set the time, take a reading
	if (howManyDays==0){
     5fc:	89 8d       	ldd	r24, Y+25	; 0x19
     5fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
     600:	fc 01       	movw	r30, r24
     602:	82 a1       	lds	r24, 0x42
     604:	88 23       	and	r24, r24
     606:	c1 f5       	brne	.+112    	; 0x678 <_ZN10thermostat9PrintWeekEv+0x98>
		weekAverageT=averageT;
     608:	89 8d       	ldd	r24, Y+25	; 0x19
     60a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     60c:	fc 01       	movw	r30, r24
     60e:	80 85       	ldd	r24, Z+8	; 0x08
     610:	91 85       	ldd	r25, Z+9	; 0x09
     612:	a2 85       	ldd	r26, Z+10	; 0x0a
     614:	b3 85       	ldd	r27, Z+11	; 0x0b
     616:	29 8d       	ldd	r18, Y+25	; 0x19
     618:	3a 8d       	ldd	r19, Y+26	; 0x1a
     61a:	f9 01       	movw	r30, r18
     61c:	80 8f       	std	Z+24, r24	; 0x18
     61e:	91 8f       	std	Z+25, r25	; 0x19
     620:	a2 8f       	std	Z+26, r26	; 0x1a
     622:	b3 8f       	std	Z+27, r27	; 0x1b
		weekAverageH=averageH;
     624:	89 8d       	ldd	r24, Y+25	; 0x19
     626:	9a 8d       	ldd	r25, Y+26	; 0x1a
     628:	fc 01       	movw	r30, r24
     62a:	84 85       	ldd	r24, Z+12	; 0x0c
     62c:	95 85       	ldd	r25, Z+13	; 0x0d
     62e:	a6 85       	ldd	r26, Z+14	; 0x0e
     630:	b7 85       	ldd	r27, Z+15	; 0x0f
     632:	29 8d       	ldd	r18, Y+25	; 0x19
     634:	3a 8d       	ldd	r19, Y+26	; 0x1a
     636:	f9 01       	movw	r30, r18
     638:	84 8f       	std	Z+28, r24	; 0x1c
     63a:	95 8f       	std	Z+29, r25	; 0x1d
     63c:	a6 8f       	std	Z+30, r26	; 0x1e
     63e:	b7 8f       	std	Z+31, r27	; 0x1f
		weekHigh=high;
     640:	89 8d       	ldd	r24, Y+25	; 0x19
     642:	9a 8d       	ldd	r25, Y+26	; 0x1a
     644:	fc 01       	movw	r30, r24
     646:	80 81       	ld	r24, Z
     648:	91 81       	ldd	r25, Z+1	; 0x01
     64a:	a2 81       	ldd	r26, Z+2	; 0x02
     64c:	b3 81       	ldd	r27, Z+3	; 0x03
     64e:	29 8d       	ldd	r18, Y+25	; 0x19
     650:	3a 8d       	ldd	r19, Y+26	; 0x1a
     652:	f9 01       	movw	r30, r18
     654:	80 8b       	std	Z+16, r24	; 0x10
     656:	91 8b       	std	Z+17, r25	; 0x11
     658:	a2 8b       	std	Z+18, r26	; 0x12
     65a:	b3 8b       	std	Z+19, r27	; 0x13
		weekLow=low;
     65c:	89 8d       	ldd	r24, Y+25	; 0x19
     65e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     660:	fc 01       	movw	r30, r24
     662:	84 81       	ldd	r24, Z+4	; 0x04
     664:	95 81       	ldd	r25, Z+5	; 0x05
     666:	a6 81       	ldd	r26, Z+6	; 0x06
     668:	b7 81       	ldd	r27, Z+7	; 0x07
     66a:	29 8d       	ldd	r18, Y+25	; 0x19
     66c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     66e:	f9 01       	movw	r30, r18
     670:	84 8b       	std	Z+20, r24	; 0x14
     672:	95 8b       	std	Z+21, r25	; 0x15
     674:	a6 8b       	std	Z+22, r26	; 0x16
     676:	b7 8b       	std	Z+23, r27	; 0x17
	}
	char weekHighStr[6],weekLowStr[6],weekAveHStr[6],weekAveTStr[6];
	dtostrf(weekHigh,0,2,weekHighStr);
     678:	89 8d       	ldd	r24, Y+25	; 0x19
     67a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     67c:	fc 01       	movw	r30, r24
     67e:	80 89       	ldd	r24, Z+16	; 0x10
     680:	91 89       	ldd	r25, Z+17	; 0x11
     682:	a2 89       	ldd	r26, Z+18	; 0x12
     684:	b3 89       	ldd	r27, Z+19	; 0x13
     686:	bc 01       	movw	r22, r24
     688:	cd 01       	movw	r24, r26
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	22 e0       	ldi	r18, 0x02	; 2
     68e:	fe 01       	movw	r30, r28
     690:	31 96       	adiw	r30, 0x01	; 1
     692:	8f 01       	movw	r16, r30
     694:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
	dtostrf(weekLow,0,2,weekLowStr);
     698:	89 8d       	ldd	r24, Y+25	; 0x19
     69a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     69c:	fc 01       	movw	r30, r24
     69e:	84 89       	ldd	r24, Z+20	; 0x14
     6a0:	95 89       	ldd	r25, Z+21	; 0x15
     6a2:	a6 89       	ldd	r26, Z+22	; 0x16
     6a4:	b7 89       	ldd	r27, Z+23	; 0x17
     6a6:	fe 01       	movw	r30, r28
     6a8:	37 96       	adiw	r30, 0x07	; 7
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	22 e0       	ldi	r18, 0x02	; 2
     6b2:	8f 01       	movw	r16, r30
     6b4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
	dtostrf(weekAverageH,0,2,weekAveHStr);
     6b8:	89 8d       	ldd	r24, Y+25	; 0x19
     6ba:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6bc:	fc 01       	movw	r30, r24
     6be:	84 8d       	ldd	r24, Z+28	; 0x1c
     6c0:	95 8d       	ldd	r25, Z+29	; 0x1d
     6c2:	a6 8d       	ldd	r26, Z+30	; 0x1e
     6c4:	b7 8d       	ldd	r27, Z+31	; 0x1f
     6c6:	fe 01       	movw	r30, r28
     6c8:	3d 96       	adiw	r30, 0x0d	; 13
     6ca:	bc 01       	movw	r22, r24
     6cc:	cd 01       	movw	r24, r26
     6ce:	40 e0       	ldi	r20, 0x00	; 0
     6d0:	22 e0       	ldi	r18, 0x02	; 2
     6d2:	8f 01       	movw	r16, r30
     6d4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
	dtostrf(weekAverageT,0,2,weekAveTStr);
     6d8:	89 8d       	ldd	r24, Y+25	; 0x19
     6da:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6dc:	fc 01       	movw	r30, r24
     6de:	80 8d       	ldd	r24, Z+24	; 0x18
     6e0:	91 8d       	ldd	r25, Z+25	; 0x19
     6e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
     6e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
     6e6:	fe 01       	movw	r30, r28
     6e8:	73 96       	adiw	r30, 0x13	; 19
     6ea:	bc 01       	movw	r22, r24
     6ec:	cd 01       	movw	r24, r26
     6ee:	40 e0       	ldi	r20, 0x00	; 0
     6f0:	22 e0       	ldi	r18, 0x02	; 2
     6f2:	8f 01       	movw	r16, r30
     6f4:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
	Print0("WH");
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0(weekHighStr);
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0("/WL");
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0(weekLowStr);
     710:	ce 01       	movw	r24, r28
     712:	07 96       	adiw	r24, 0x07	; 7
     714:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0("/WT");
     718:	87 e0       	ldi	r24, 0x07	; 7
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0(weekAveTStr);
     720:	ce 01       	movw	r24, r28
     722:	43 96       	adiw	r24, 0x13	; 19
     724:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0("/Wh");
     728:	8b e0       	ldi	r24, 0x0B	; 11
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0(weekAveHStr);
     730:	ce 01       	movw	r24, r28
     732:	0d 96       	adiw	r24, 0x0d	; 13
     734:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0("XXX");
     738:	8f e0       	ldi	r24, 0x0F	; 15
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	resetWeek();
     740:	89 8d       	ldd	r24, Y+25	; 0x19
     742:	9a 8d       	ldd	r25, Y+26	; 0x1a
     744:	0e 94 44 01 	call	0x288	; 0x288 <_ZN10thermostat9resetWeekEv>
}
     748:	6a 96       	adiw	r28, 0x1a	; 26
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	1f 91       	pop	r17
     75a:	0f 91       	pop	r16
     75c:	08 95       	ret

0000075e <_ZN10thermostat12addDataPointEdd>:

void thermostat::addDataPoint(double temp, double humidity){
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	2a 97       	sbiw	r28, 0x0a	; 10
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	9a 83       	std	Y+2, r25	; 0x02
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	4b 83       	std	Y+3, r20	; 0x03
     780:	5c 83       	std	Y+4, r21	; 0x04
     782:	6d 83       	std	Y+5, r22	; 0x05
     784:	7e 83       	std	Y+6, r23	; 0x06
     786:	0f 83       	std	Y+7, r16	; 0x07
     788:	18 87       	std	Y+8, r17	; 0x08
     78a:	29 87       	std	Y+9, r18	; 0x09
     78c:	3a 87       	std	Y+10, r19	; 0x0a
	numDayReadings++;
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	fc 01       	movw	r30, r24
     794:	80 a1       	lds	r24, 0x40
     796:	91 a1       	lds	r25, 0x41
     798:	9c 01       	movw	r18, r24
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	fc 01       	movw	r30, r24
     7a4:	31 a3       	lds	r19, 0x51
     7a6:	20 a3       	lds	r18, 0x50
	averageT=(averageT*(numDayReadings-1)+temp)/numDayReadings;
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	fc 01       	movw	r30, r24
     7ae:	e0 84       	ldd	r14, Z+8	; 0x08
     7b0:	f1 84       	ldd	r15, Z+9	; 0x09
     7b2:	02 85       	ldd	r16, Z+10	; 0x0a
     7b4:	13 85       	ldd	r17, Z+11	; 0x0b
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 a1       	lds	r24, 0x40
     7be:	91 a1       	lds	r25, 0x41
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	cc 01       	movw	r24, r24
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	bc 01       	movw	r22, r24
     7ca:	cd 01       	movw	r24, r26
     7cc:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
     7d0:	9b 01       	movw	r18, r22
     7d2:	ac 01       	movw	r20, r24
     7d4:	c8 01       	movw	r24, r16
     7d6:	b7 01       	movw	r22, r14
     7d8:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     7dc:	dc 01       	movw	r26, r24
     7de:	cb 01       	movw	r24, r22
     7e0:	bc 01       	movw	r22, r24
     7e2:	cd 01       	movw	r24, r26
     7e4:	2b 81       	ldd	r18, Y+3	; 0x03
     7e6:	3c 81       	ldd	r19, Y+4	; 0x04
     7e8:	4d 81       	ldd	r20, Y+5	; 0x05
     7ea:	5e 81       	ldd	r21, Y+6	; 0x06
     7ec:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	8d 01       	movw	r16, r26
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 a1       	lds	r24, 0x40
     800:	91 a1       	lds	r25, 0x41
     802:	cc 01       	movw	r24, r24
     804:	a0 e0       	ldi	r26, 0x00	; 0
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
     810:	9b 01       	movw	r18, r22
     812:	ac 01       	movw	r20, r24
     814:	c8 01       	movw	r24, r16
     816:	b7 01       	movw	r22, r14
     818:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     81c:	dc 01       	movw	r26, r24
     81e:	cb 01       	movw	r24, r22
     820:	29 81       	ldd	r18, Y+1	; 0x01
     822:	3a 81       	ldd	r19, Y+2	; 0x02
     824:	f9 01       	movw	r30, r18
     826:	80 87       	std	Z+8, r24	; 0x08
     828:	91 87       	std	Z+9, r25	; 0x09
     82a:	a2 87       	std	Z+10, r26	; 0x0a
     82c:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=(averageH*(numDayReadings-1)+humidity)/numDayReadings;
     82e:	89 81       	ldd	r24, Y+1	; 0x01
     830:	9a 81       	ldd	r25, Y+2	; 0x02
     832:	fc 01       	movw	r30, r24
     834:	e4 84       	ldd	r14, Z+12	; 0x0c
     836:	f5 84       	ldd	r15, Z+13	; 0x0d
     838:	06 85       	ldd	r16, Z+14	; 0x0e
     83a:	17 85       	ldd	r17, Z+15	; 0x0f
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	fc 01       	movw	r30, r24
     842:	80 a1       	lds	r24, 0x40
     844:	91 a1       	lds	r25, 0x41
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	cc 01       	movw	r24, r24
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	bc 01       	movw	r22, r24
     850:	cd 01       	movw	r24, r26
     852:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	c8 01       	movw	r24, r16
     85c:	b7 01       	movw	r22, r14
     85e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	2f 81       	ldd	r18, Y+7	; 0x07
     86c:	38 85       	ldd	r19, Y+8	; 0x08
     86e:	49 85       	ldd	r20, Y+9	; 0x09
     870:	5a 85       	ldd	r21, Y+10	; 0x0a
     872:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	7c 01       	movw	r14, r24
     87c:	8d 01       	movw	r16, r26
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	9a 81       	ldd	r25, Y+2	; 0x02
     882:	fc 01       	movw	r30, r24
     884:	80 a1       	lds	r24, 0x40
     886:	91 a1       	lds	r25, 0x41
     888:	cc 01       	movw	r24, r24
     88a:	a0 e0       	ldi	r26, 0x00	; 0
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	bc 01       	movw	r22, r24
     890:	cd 01       	movw	r24, r26
     892:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	c8 01       	movw	r24, r16
     89c:	b7 01       	movw	r22, r14
     89e:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
     8a2:	dc 01       	movw	r26, r24
     8a4:	cb 01       	movw	r24, r22
     8a6:	29 81       	ldd	r18, Y+1	; 0x01
     8a8:	3a 81       	ldd	r19, Y+2	; 0x02
     8aa:	f9 01       	movw	r30, r18
     8ac:	84 87       	std	Z+12, r24	; 0x0c
     8ae:	95 87       	std	Z+13, r25	; 0x0d
     8b0:	a6 87       	std	Z+14, r26	; 0x0e
     8b2:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (temp>high){
     8b4:	89 81       	ldd	r24, Y+1	; 0x01
     8b6:	9a 81       	ldd	r25, Y+2	; 0x02
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	91 81       	ldd	r25, Z+1	; 0x01
     8be:	a2 81       	ldd	r26, Z+2	; 0x02
     8c0:	b3 81       	ldd	r27, Z+3	; 0x03
     8c2:	11 e0       	ldi	r17, 0x01	; 1
     8c4:	bc 01       	movw	r22, r24
     8c6:	cd 01       	movw	r24, r26
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	3c 81       	ldd	r19, Y+4	; 0x04
     8cc:	4d 81       	ldd	r20, Y+5	; 0x05
     8ce:	5e 81       	ldd	r21, Y+6	; 0x06
     8d0:	0e 94 22 14 	call	0x2844	; 0x2844 <__cmpsf2>
     8d4:	88 23       	and	r24, r24
     8d6:	0c f0       	brlt	.+2      	; 0x8da <_ZN10thermostat12addDataPointEdd+0x17c>
     8d8:	10 e0       	ldi	r17, 0x00	; 0
     8da:	11 23       	and	r17, r17
     8dc:	59 f0       	breq	.+22     	; 0x8f4 <_ZN10thermostat12addDataPointEdd+0x196>
		high=temp;
     8de:	29 81       	ldd	r18, Y+1	; 0x01
     8e0:	3a 81       	ldd	r19, Y+2	; 0x02
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	ad 81       	ldd	r26, Y+5	; 0x05
     8e8:	be 81       	ldd	r27, Y+6	; 0x06
     8ea:	f9 01       	movw	r30, r18
     8ec:	80 83       	st	Z, r24
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	a2 83       	std	Z+2, r26	; 0x02
     8f2:	b3 83       	std	Z+3, r27	; 0x03
	}
	//Seperate if statements just in case it is a high and a low.
	if (temp<low){
     8f4:	89 81       	ldd	r24, Y+1	; 0x01
     8f6:	9a 81       	ldd	r25, Y+2	; 0x02
     8f8:	fc 01       	movw	r30, r24
     8fa:	84 81       	ldd	r24, Z+4	; 0x04
     8fc:	95 81       	ldd	r25, Z+5	; 0x05
     8fe:	a6 81       	ldd	r26, Z+6	; 0x06
     900:	b7 81       	ldd	r27, Z+7	; 0x07
     902:	11 e0       	ldi	r17, 0x01	; 1
     904:	bc 01       	movw	r22, r24
     906:	cd 01       	movw	r24, r26
     908:	2b 81       	ldd	r18, Y+3	; 0x03
     90a:	3c 81       	ldd	r19, Y+4	; 0x04
     90c:	4d 81       	ldd	r20, Y+5	; 0x05
     90e:	5e 81       	ldd	r21, Y+6	; 0x06
     910:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__gesf2>
     914:	18 16       	cp	r1, r24
     916:	0c f0       	brlt	.+2      	; 0x91a <__stack+0x1b>
     918:	10 e0       	ldi	r17, 0x00	; 0
     91a:	11 23       	and	r17, r17
     91c:	59 f0       	breq	.+22     	; 0x934 <__stack+0x35>
		low=temp;
     91e:	29 81       	ldd	r18, Y+1	; 0x01
     920:	3a 81       	ldd	r19, Y+2	; 0x02
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	ad 81       	ldd	r26, Y+5	; 0x05
     928:	be 81       	ldd	r27, Y+6	; 0x06
     92a:	f9 01       	movw	r30, r18
     92c:	84 83       	std	Z+4, r24	; 0x04
     92e:	95 83       	std	Z+5, r25	; 0x05
     930:	a6 83       	std	Z+6, r26	; 0x06
     932:	b7 83       	std	Z+7, r27	; 0x07
	}
}
     934:	2a 96       	adiw	r28, 0x0a	; 10
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	08 95       	ret

0000094e <_ZN10thermostat8saveDataEv>:

void thermostat::saveData(){
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	00 d0       	rcall	.+0      	; 0x954 <_ZN10thermostat8saveDataEv+0x6>
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	89 83       	std	Y+1, r24	; 0x01
	SaveDay();			//Calls save day in 
     95c:	0e 94 34 0a 	call	0x1468	; 0x1468 <_Z7SaveDayv>
	reset();			//reset thermostat.
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	9a 81       	ldd	r25, Y+2	; 0x02
     964:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN10thermostat5resetEv>
}
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <_ZN10thermostat7getHighEv>:
double thermostat::getHigh(){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <_ZN10thermostat7getHighEv+0x6>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	return high;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	91 81       	ldd	r25, Z+1	; 0x01
     98a:	a2 81       	ldd	r26, Z+2	; 0x02
     98c:	b3 81       	ldd	r27, Z+3	; 0x03
}
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <_ZN10thermostat6getLowEv>:

double thermostat::getLow(){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <_ZN10thermostat6getLowEv+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
	return low;
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	fc 01       	movw	r30, r24
     9b0:	84 81       	ldd	r24, Z+4	; 0x04
     9b2:	95 81       	ldd	r25, Z+5	; 0x05
     9b4:	a6 81       	ldd	r26, Z+6	; 0x06
     9b6:	b7 81       	ldd	r27, Z+7	; 0x07
}
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <_ZN10thermostat7getAveTEv>:

double thermostat::getAveT(){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <_ZN10thermostat7getAveTEv+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
	return averageT;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	fc 01       	movw	r30, r24
     9da:	80 85       	ldd	r24, Z+8	; 0x08
     9dc:	91 85       	ldd	r25, Z+9	; 0x09
     9de:	a2 85       	ldd	r26, Z+10	; 0x0a
     9e0:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     9e2:	bc 01       	movw	r22, r24
     9e4:	cd 01       	movw	r24, r26
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <_ZN10thermostat7getAveHEv>:

double thermostat::getAveH(){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <_ZN10thermostat7getAveHEv+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	89 83       	std	Y+1, r24	; 0x01
	return averageH;
     9fe:	89 81       	ldd	r24, Y+1	; 0x01
     a00:	9a 81       	ldd	r25, Y+2	; 0x02
     a02:	fc 01       	movw	r30, r24
     a04:	84 85       	ldd	r24, Z+12	; 0x0c
     a06:	95 85       	ldd	r25, Z+13	; 0x0d
     a08:	a6 85       	ldd	r26, Z+14	; 0x0e
     a0a:	b7 85       	ldd	r27, Z+15	; 0x0f
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <_ZN5clockC1Ev>:
		void addDay(WORD days);
		void addMonth(WORD months);
		void addYear(WORD years);
};

clock::clock(){
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <_ZN5clockC1Ev+0x6>
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	9a 83       	std	Y+2, r25	; 0x02
     a26:	89 83       	std	Y+1, r24	; 0x01
	second=0;
     a28:	89 81       	ldd	r24, Y+1	; 0x01
     a2a:	9a 81       	ldd	r25, Y+2	; 0x02
     a2c:	fc 01       	movw	r30, r24
     a2e:	10 82       	st	Z, r1
	minute=0;
     a30:	89 81       	ldd	r24, Y+1	; 0x01
     a32:	9a 81       	ldd	r25, Y+2	; 0x02
     a34:	fc 01       	movw	r30, r24
     a36:	11 82       	std	Z+1, r1	; 0x01
	hour=0;
     a38:	89 81       	ldd	r24, Y+1	; 0x01
     a3a:	9a 81       	ldd	r25, Y+2	; 0x02
     a3c:	fc 01       	movw	r30, r24
     a3e:	12 82       	std	Z+2, r1	; 0x02
	day=0;
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	9a 81       	ldd	r25, Y+2	; 0x02
     a44:	fc 01       	movw	r30, r24
     a46:	13 82       	std	Z+3, r1	; 0x03
	month=0;
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	9a 81       	ldd	r25, Y+2	; 0x02
     a4c:	fc 01       	movw	r30, r24
     a4e:	14 82       	std	Z+4, r1	; 0x04
	year=2013;
     a50:	89 81       	ldd	r24, Y+1	; 0x01
     a52:	9a 81       	ldd	r25, Y+2	; 0x02
     a54:	2d ed       	ldi	r18, 0xDD	; 221
     a56:	37 e0       	ldi	r19, 0x07	; 7
     a58:	fc 01       	movw	r30, r24
     a5a:	36 83       	std	Z+6, r19	; 0x06
     a5c:	25 83       	std	Z+5, r18	; 0x05
}
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_ZN5clock7setTimeEjjj>:

void clock::setTime(WORD hours, WORD minutes, WORD seconds){
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	28 97       	sbiw	r28, 0x08	; 8
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	9a 83       	std	Y+2, r25	; 0x02
     a7e:	89 83       	std	Y+1, r24	; 0x01
     a80:	7c 83       	std	Y+4, r23	; 0x04
     a82:	6b 83       	std	Y+3, r22	; 0x03
     a84:	5e 83       	std	Y+6, r21	; 0x06
     a86:	4d 83       	std	Y+5, r20	; 0x05
     a88:	38 87       	std	Y+8, r19	; 0x08
     a8a:	2f 83       	std	Y+7, r18	; 0x07
	hour=hours;
     a8c:	2b 81       	ldd	r18, Y+3	; 0x03
     a8e:	89 81       	ldd	r24, Y+1	; 0x01
     a90:	9a 81       	ldd	r25, Y+2	; 0x02
     a92:	fc 01       	movw	r30, r24
     a94:	22 83       	std	Z+2, r18	; 0x02
	minute=minutes;
     a96:	2d 81       	ldd	r18, Y+5	; 0x05
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
     a9c:	fc 01       	movw	r30, r24
     a9e:	21 83       	std	Z+1, r18	; 0x01
	second=seconds;
     aa0:	2f 81       	ldd	r18, Y+7	; 0x07
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
}
     aaa:	28 96       	adiw	r28, 0x08	; 8
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
     ab6:	df 91       	pop	r29
     ab8:	cf 91       	pop	r28
     aba:	08 95       	ret

00000abc <_ZN5clock9printTimeEv>:

void clock::printTime(){
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	cd b7       	in	r28, 0x3d	; 61
     ac2:	de b7       	in	r29, 0x3e	; 62
     ac4:	2b 97       	sbiw	r28, 0x0b	; 11
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9b 87       	std	Y+11, r25	; 0x0b
     ad2:	8a 87       	std	Y+10, r24	; 0x0a
	char str1[3],str2[3],str3[3];
	utoa(hour,str1,10);
     ad4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ad6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ad8:	fc 01       	movw	r30, r24
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	88 2f       	mov	r24, r24
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	9e 01       	movw	r18, r28
     ae2:	2f 5f       	subi	r18, 0xFF	; 255
     ae4:	3f 4f       	sbci	r19, 0xFF	; 255
     ae6:	b9 01       	movw	r22, r18
     ae8:	4a e0       	ldi	r20, 0x0A	; 10
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	0e 94 6d 16 	call	0x2cda	; 0x2cda <utoa>
	utoa(minute,str2,10);
     af0:	8a 85       	ldd	r24, Y+10	; 0x0a
     af2:	9b 85       	ldd	r25, Y+11	; 0x0b
     af4:	fc 01       	movw	r30, r24
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	88 2f       	mov	r24, r24
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	9e 01       	movw	r18, r28
     afe:	2c 5f       	subi	r18, 0xFC	; 252
     b00:	3f 4f       	sbci	r19, 0xFF	; 255
     b02:	b9 01       	movw	r22, r18
     b04:	4a e0       	ldi	r20, 0x0A	; 10
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	0e 94 6d 16 	call	0x2cda	; 0x2cda <utoa>
	utoa(second,str3,10);
     b0c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b0e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b10:	fc 01       	movw	r30, r24
     b12:	80 81       	ld	r24, Z
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	9e 01       	movw	r18, r28
     b1a:	29 5f       	subi	r18, 0xF9	; 249
     b1c:	3f 4f       	sbci	r19, 0xFF	; 255
     b1e:	b9 01       	movw	r22, r18
     b20:	4a e0       	ldi	r20, 0x0A	; 10
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	0e 94 6d 16 	call	0x2cda	; 0x2cda <utoa>
	Print0(str1);
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	PutUart0Ch(':');
     b30:	8a e3       	ldi	r24, 0x3A	; 58
     b32:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z10PutUart0Chc>
	Print0(str2);
     b36:	ce 01       	movw	r24, r28
     b38:	04 96       	adiw	r24, 0x04	; 4
     b3a:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	PutUart0Ch(':');
     b3e:	8a e3       	ldi	r24, 0x3A	; 58
     b40:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z10PutUart0Chc>
	Print0(str3);
     b44:	ce 01       	movw	r24, r28
     b46:	07 96       	adiw	r24, 0x07	; 7
     b48:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
	Print0("XXX");
     b4c:	8f e0       	ldi	r24, 0x0F	; 15
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
}
     b54:	2b 96       	adiw	r28, 0x0b	; 11
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <_ZN5clock9addSecondEj>:

void clock::addSecond(WORD seconds){
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <_ZN5clock9addSecondEj+0x6>
     b6c:	00 d0       	rcall	.+0      	; 0xb6e <_ZN5clock9addSecondEj+0x8>
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <_ZN5clock9addSecondEj+0xa>
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	9c 83       	std	Y+4, r25	; 0x04
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	7e 83       	std	Y+6, r23	; 0x06
     b7a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempSecond=second+seconds;
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	fc 01       	movw	r30, r24
     b82:	80 81       	ld	r24, Z
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	8d 81       	ldd	r24, Y+5	; 0x05
     b8a:	9e 81       	ldd	r25, Y+6	; 0x06
     b8c:	82 0f       	add	r24, r18
     b8e:	93 1f       	adc	r25, r19
     b90:	9a 83       	std	Y+2, r25	; 0x02
     b92:	89 83       	std	Y+1, r24	; 0x01
	second=tempSecond%60;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	2c e3       	ldi	r18, 0x3C	; 60
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     ba2:	28 2f       	mov	r18, r24
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
	if (tempSecond/60>=1){
     bac:	89 81       	ldd	r24, Y+1	; 0x01
     bae:	9a 81       	ldd	r25, Y+2	; 0x02
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	8c 33       	cpi	r24, 0x3C	; 60
     bb4:	91 05       	cpc	r25, r1
     bb6:	0c f4       	brge	.+2      	; 0xbba <_ZN5clock9addSecondEj+0x54>
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	22 23       	and	r18, r18
     bbc:	79 f0       	breq	.+30     	; 0xbdc <_ZN5clock9addSecondEj+0x76>
		addMinute(tempSecond/60);
     bbe:	89 81       	ldd	r24, Y+1	; 0x01
     bc0:	9a 81       	ldd	r25, Y+2	; 0x02
     bc2:	2c e3       	ldi	r18, 0x3C	; 60
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	b9 01       	movw	r22, r18
     bc8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     bcc:	9b 01       	movw	r18, r22
     bce:	c9 01       	movw	r24, r18
     bd0:	9c 01       	movw	r18, r24
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	b9 01       	movw	r22, r18
     bd8:	0e 94 f7 05 	call	0xbee	; 0xbee <_ZN5clock9addMinuteEj>
	}
}
     bdc:	26 96       	adiw	r28, 0x06	; 6
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	f8 94       	cli
     be2:	de bf       	out	0x3e, r29	; 62
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	cd bf       	out	0x3d, r28	; 61
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <_ZN5clock9addMinuteEj>:

void clock::addMinute(WORD minutes){
     bee:	cf 93       	push	r28
     bf0:	df 93       	push	r29
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <_ZN5clock9addMinuteEj+0x6>
     bf4:	00 d0       	rcall	.+0      	; 0xbf6 <_ZN5clock9addMinuteEj+0x8>
     bf6:	00 d0       	rcall	.+0      	; 0xbf8 <_ZN5clock9addMinuteEj+0xa>
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	9c 83       	std	Y+4, r25	; 0x04
     bfe:	8b 83       	std	Y+3, r24	; 0x03
     c00:	7e 83       	std	Y+6, r23	; 0x06
     c02:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMinutes=minute+minutes;
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	fc 01       	movw	r30, r24
     c0a:	81 81       	ldd	r24, Z+1	; 0x01
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	8d 81       	ldd	r24, Y+5	; 0x05
     c12:	9e 81       	ldd	r25, Y+6	; 0x06
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	9a 83       	std	Y+2, r25	; 0x02
     c1a:	89 83       	std	Y+1, r24	; 0x01
	minute=tempMinutes%60;
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	2c e3       	ldi	r18, 0x3C	; 60
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	b9 01       	movw	r22, r18
     c26:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     c2a:	28 2f       	mov	r18, r24
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	fc 01       	movw	r30, r24
     c32:	21 83       	std	Z+1, r18	; 0x01
	if (tempMinutes/60>=1){
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	21 e0       	ldi	r18, 0x01	; 1
     c3a:	8c 33       	cpi	r24, 0x3C	; 60
     c3c:	91 05       	cpc	r25, r1
     c3e:	0c f4       	brge	.+2      	; 0xc42 <_ZN5clock9addMinuteEj+0x54>
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	22 23       	and	r18, r18
     c44:	79 f0       	breq	.+30     	; 0xc64 <_ZN5clock9addMinuteEj+0x76>
		addHour(tempMinutes/60);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	2c e3       	ldi	r18, 0x3C	; 60
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	b9 01       	movw	r22, r18
     c50:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     c54:	9b 01       	movw	r18, r22
     c56:	c9 01       	movw	r24, r18
     c58:	9c 01       	movw	r18, r24
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	9c 81       	ldd	r25, Y+4	; 0x04
     c5e:	b9 01       	movw	r22, r18
     c60:	0e 94 4f 06 	call	0xc9e	; 0xc9e <_ZN5clock7addHourEj>
	}
	
	//If minute%20==0, take reading
	if (minute%20==0){
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	fc 01       	movw	r30, r24
     c6a:	81 81       	ldd	r24, Z+1	; 0x01
     c6c:	94 e1       	ldi	r25, 0x14	; 20
     c6e:	69 2f       	mov	r22, r25
     c70:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodqi4>
     c74:	89 2f       	mov	r24, r25
     c76:	98 2f       	mov	r25, r24
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	99 23       	and	r25, r25
     c7c:	09 f0       	breq	.+2      	; 0xc80 <_ZN5clock9addMinuteEj+0x92>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	88 23       	and	r24, r24
     c82:	21 f0       	breq	.+8      	; 0xc8c <_ZN5clock9addMinuteEj+0x9e>
		theThermostat.takeReadings();
     c84:	8f e7       	ldi	r24, 0x7F	; 127
     c86:	91 e0       	ldi	r25, 0x01	; 1
     c88:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN10thermostat12takeReadingsEv>
	}
}
     c8c:	26 96       	adiw	r28, 0x06	; 6
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <_ZN5clock7addHourEj>:

void clock::addHour(WORD hours){
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <_ZN5clock7addHourEj+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <_ZN5clock7addHourEj+0x8>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <_ZN5clock7addHourEj+0xa>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
     cb0:	7e 83       	std	Y+6, r23	; 0x06
     cb2:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempHours=hour+hours;
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	fc 01       	movw	r30, r24
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	9e 81       	ldd	r25, Y+6	; 0x06
     cc4:	82 0f       	add	r24, r18
     cc6:	93 1f       	adc	r25, r19
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
	hour=tempHours%24;
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	28 e1       	ldi	r18, 0x18	; 24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     cda:	28 2f       	mov	r18, r24
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	fc 01       	movw	r30, r24
     ce2:	22 83       	std	Z+2, r18	; 0x02
	if (tempHours>=1){
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	21 e0       	ldi	r18, 0x01	; 1
     cea:	18 16       	cp	r1, r24
     cec:	19 06       	cpc	r1, r25
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <_ZN5clock7addHourEj+0x54>
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	22 23       	and	r18, r18
     cf4:	79 f0       	breq	.+30     	; 0xd14 <_ZN5clock7addHourEj+0x76>
		addDay(tempHours/24);
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	28 e1       	ldi	r18, 0x18	; 24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	b9 01       	movw	r22, r18
     d00:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     d04:	9b 01       	movw	r18, r22
     d06:	c9 01       	movw	r24, r18
     d08:	9c 01       	movw	r18, r24
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	b9 01       	movw	r22, r18
     d10:	0e 94 93 06 	call	0xd26	; 0xd26 <_ZN5clock6addDayEj>
	}
}
     d14:	26 96       	adiw	r28, 0x06	; 6
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <_ZN5clock6addDayEj>:

void clock::addDay(WORD days){
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	27 97       	sbiw	r28, 0x07	; 7
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	9d 83       	std	Y+5, r25	; 0x05
     d3c:	8c 83       	std	Y+4, r24	; 0x04
     d3e:	7f 83       	std	Y+7, r23	; 0x07
     d40:	6e 83       	std	Y+6, r22	; 0x06
	//new day, need to save the average, high and low into eeprom
	theThermostat.saveData();
     d42:	8f e7       	ldi	r24, 0x7F	; 127
     d44:	91 e0       	ldi	r25, 0x01	; 1
     d46:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN10thermostat8saveDataEv>
	theThermostat.addTheDay();
     d4a:	8f e7       	ldi	r24, 0x7F	; 127
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN10thermostat9addTheDayEv>
	
	//Get the new day.
	volatile int tempDays=day+days;
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	fc 01       	movw	r30, r24
     d58:	83 81       	ldd	r24, Z+3	; 0x03
     d5a:	28 2f       	mov	r18, r24
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	9f 81       	ldd	r25, Y+7	; 0x07
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	9b 83       	std	Y+3, r25	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
	BYTE currentMonth=month;
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	9d 81       	ldd	r25, Y+5	; 0x05
     d6e:	fc 01       	movw	r30, r24
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	89 83       	std	Y+1, r24	; 0x01
	if (tempDays/daysInMonths[currentMonth]>=1){
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	9b 81       	ldd	r25, Y+3	; 0x03
     d78:	29 81       	ldd	r18, Y+1	; 0x01
     d7a:	22 2f       	mov	r18, r18
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	2d 5e       	subi	r18, 0xED	; 237
     d80:	3e 4f       	sbci	r19, 0xFE	; 254
     d82:	f9 01       	movw	r30, r18
     d84:	20 81       	ld	r18, Z
     d86:	22 2f       	mov	r18, r18
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	b9 01       	movw	r22, r18
     d8c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     d90:	9b 01       	movw	r18, r22
     d92:	c9 01       	movw	r24, r18
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	18 16       	cp	r1, r24
     d98:	19 06       	cpc	r1, r25
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <_ZN5clock6addDayEj+0x78>
     d9c:	20 e0       	ldi	r18, 0x00	; 0
     d9e:	22 23       	and	r18, r18
     da0:	09 f4       	brne	.+2      	; 0xda4 <_ZN5clock6addDayEj+0x7e>
     da2:	48 c0       	rjmp	.+144    	; 0xe34 <_ZN5clock6addDayEj+0x10e>
		//See how many months we need to go forward.
		while (tempDays > daysInMonths[currentMonth]){
     da4:	14 c0       	rjmp	.+40     	; 0xdce <_ZN5clock6addDayEj+0xa8>
			tempDays-=daysInMonths[currentMonth];
     da6:	2a 81       	ldd	r18, Y+2	; 0x02
     da8:	3b 81       	ldd	r19, Y+3	; 0x03
     daa:	89 81       	ldd	r24, Y+1	; 0x01
     dac:	88 2f       	mov	r24, r24
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	8d 5e       	subi	r24, 0xED	; 237
     db2:	9e 4f       	sbci	r25, 0xFE	; 254
     db4:	fc 01       	movw	r30, r24
     db6:	80 81       	ld	r24, Z
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a9 01       	movw	r20, r18
     dbe:	48 1b       	sub	r20, r24
     dc0:	59 0b       	sbc	r21, r25
     dc2:	ca 01       	movw	r24, r20
     dc4:	9b 83       	std	Y+3, r25	; 0x03
     dc6:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	8f 5f       	subi	r24, 0xFF	; 255
     dcc:	89 83       	std	Y+1, r24	; 0x01
	//Get the new day.
	volatile int tempDays=day+days;
	BYTE currentMonth=month;
	if (tempDays/daysInMonths[currentMonth]>=1){
		//See how many months we need to go forward.
		while (tempDays > daysInMonths[currentMonth]){
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	8d 5e       	subi	r24, 0xED	; 237
     dd6:	9e 4f       	sbci	r25, 0xFE	; 254
     dd8:	fc 01       	movw	r30, r24
     dda:	80 81       	ld	r24, Z
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8a 81       	ldd	r24, Y+2	; 0x02
     de2:	9b 81       	ldd	r25, Y+3	; 0x03
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	28 17       	cp	r18, r24
     de8:	39 07       	cpc	r19, r25
     dea:	0c f0       	brlt	.+2      	; 0xdee <_ZN5clock6addDayEj+0xc8>
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	44 23       	and	r20, r20
     df0:	d1 f6       	brne	.-76     	; 0xda6 <_ZN5clock6addDayEj+0x80>
			tempDays-=daysInMonths[currentMonth];
			currentMonth++;
		}
		if (tempDays>28 && currentMonth==2){
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	9b 81       	ldd	r25, Y+3	; 0x03
     df6:	8d 31       	cpi	r24, 0x1D	; 29
     df8:	91 05       	cpc	r25, r1
     dfa:	2c f0       	brlt	.+10     	; 0xe06 <_ZN5clock6addDayEj+0xe0>
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	11 f4       	brne	.+4      	; 0xe06 <_ZN5clock6addDayEj+0xe0>
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	01 c0       	rjmp	.+2      	; 0xe08 <_ZN5clock6addDayEj+0xe2>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	88 23       	and	r24, r24
     e0a:	a1 f0       	breq	.+40     	; 0xe34 <_ZN5clock6addDayEj+0x10e>
			tempDays-=daysInMonths[currentMonth];
     e0c:	2a 81       	ldd	r18, Y+2	; 0x02
     e0e:	3b 81       	ldd	r19, Y+3	; 0x03
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	88 2f       	mov	r24, r24
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	8d 5e       	subi	r24, 0xED	; 237
     e18:	9e 4f       	sbci	r25, 0xFE	; 254
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	88 2f       	mov	r24, r24
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	a9 01       	movw	r20, r18
     e24:	48 1b       	sub	r20, r24
     e26:	59 0b       	sbc	r21, r25
     e28:	ca 01       	movw	r24, r20
     e2a:	9b 83       	std	Y+3, r25	; 0x03
     e2c:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	days=tempDays;
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	9f 83       	std	Y+7, r25	; 0x07
     e3a:	8e 83       	std	Y+6, r24	; 0x06
	month=currentMonth;
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	29 81       	ldd	r18, Y+1	; 0x01
     e42:	fc 01       	movw	r30, r24
     e44:	24 83       	std	Z+4, r18	; 0x04
}
     e46:	27 96       	adiw	r28, 0x07	; 7
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <_ZN5clock8addMonthEj>:

void clock::addMonth(WORD months){
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <_ZN5clock8addMonthEj+0x6>
     e5e:	00 d0       	rcall	.+0      	; 0xe60 <_ZN5clock8addMonthEj+0x8>
     e60:	00 d0       	rcall	.+0      	; 0xe62 <_ZN5clock8addMonthEj+0xa>
     e62:	cd b7       	in	r28, 0x3d	; 61
     e64:	de b7       	in	r29, 0x3e	; 62
     e66:	9c 83       	std	Y+4, r25	; 0x04
     e68:	8b 83       	std	Y+3, r24	; 0x03
     e6a:	7e 83       	std	Y+6, r23	; 0x06
     e6c:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMonths=month+months;
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	fc 01       	movw	r30, r24
     e74:	84 81       	ldd	r24, Z+4	; 0x04
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	82 0f       	add	r24, r18
     e80:	93 1f       	adc	r25, r19
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01
	month=tempMonths%12;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	2c e0       	ldi	r18, 0x0C	; 12
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	b9 01       	movw	r22, r18
     e90:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     e94:	28 2f       	mov	r18, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	fc 01       	movw	r30, r24
     e9c:	24 83       	std	Z+4, r18	; 0x04
	if (tempMonths/12>=1){
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	21 e0       	ldi	r18, 0x01	; 1
     ea4:	8c 30       	cpi	r24, 0x0C	; 12
     ea6:	91 05       	cpc	r25, r1
     ea8:	0c f4       	brge	.+2      	; 0xeac <_ZN5clock8addMonthEj+0x54>
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	22 23       	and	r18, r18
     eae:	79 f0       	breq	.+30     	; 0xece <_ZN5clock8addMonthEj+0x76>
		addYear(tempMonths/12);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	2c e0       	ldi	r18, 0x0C	; 12
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	b9 01       	movw	r22, r18
     eba:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <__divmodhi4>
     ebe:	9b 01       	movw	r18, r22
     ec0:	c9 01       	movw	r24, r18
     ec2:	9c 01       	movw	r18, r24
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	b9 01       	movw	r22, r18
     eca:	0e 94 70 07 	call	0xee0	; 0xee0 <_ZN5clock7addYearEj>
	}
}
     ece:	26 96       	adiw	r28, 0x06	; 6
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <_ZN5clock7addYearEj>:

void clock::addYear(WORD years){
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <_ZN5clock7addYearEj+0x6>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <_ZN5clock7addYearEj+0x8>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <_ZN5clock7addYearEj+0xa>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	7e 83       	std	Y+6, r23	; 0x06
     ef4:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears=year+years;
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	9c 81       	ldd	r25, Y+4	; 0x04
     efa:	fc 01       	movw	r30, r24
     efc:	25 81       	ldd	r18, Z+5	; 0x05
     efe:	36 81       	ldd	r19, Z+6	; 0x06
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	82 0f       	add	r24, r18
     f06:	93 1f       	adc	r25, r19
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
	year=tempYears;
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	9c 01       	movw	r18, r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	fc 01       	movw	r30, r24
     f18:	36 83       	std	Z+6, r19	; 0x06
     f1a:	25 83       	std	Z+5, r18	; 0x05
}
     f1c:	26 96       	adiw	r28, 0x06	; 6
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	df 91       	pop	r29
     f2a:	cf 91       	pop	r28
     f2c:	08 95       	ret

00000f2e <_ZN5clock9getSecondEv>:

/**********************************/
/*			Get Functions		  */
/**********************************/
BYTE clock::getSecond(){
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	00 d0       	rcall	.+0      	; 0xf34 <_ZN5clock9getSecondEv+0x6>
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
	return second;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
}
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <_ZN5clock9getMinuteEv>:
BYTE clock::getMinute(){
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <_ZN5clock9getMinuteEv+0x6>
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	89 83       	std	Y+1, r24	; 0x01
	return minute;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	fc 01       	movw	r30, r24
     f62:	81 81       	ldd	r24, Z+1	; 0x01
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <_ZN5clock7getHourEv>:
BYTE clock::getHour(){
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 d0       	rcall	.+0      	; 0xf74 <_ZN5clock7getHourEv+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9a 83       	std	Y+2, r25	; 0x02
     f7a:	89 83       	std	Y+1, r24	; 0x01
	return hour;
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	9a 81       	ldd	r25, Y+2	; 0x02
     f80:	fc 01       	movw	r30, r24
     f82:	82 81       	ldd	r24, Z+2	; 0x02
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <_ZN5clock6getDayEv>:
BYTE clock::getDay(){
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	00 d0       	rcall	.+0      	; 0xf94 <_ZN5clock6getDayEv+0x6>
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	return (day+1);
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	fc 01       	movw	r30, r24
     fa2:	83 81       	ldd	r24, Z+3	; 0x03
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	df 91       	pop	r29
     fac:	cf 91       	pop	r28
     fae:	08 95       	ret

00000fb0 <_ZN5clock8getMonthEv>:
BYTE clock::getMonth(){
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <_ZN5clock8getMonthEv+0x6>
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
     fba:	9a 83       	std	Y+2, r25	; 0x02
     fbc:	89 83       	std	Y+1, r24	; 0x01
	return (month+1);
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	9a 81       	ldd	r25, Y+2	; 0x02
     fc2:	fc 01       	movw	r30, r24
     fc4:	84 81       	ldd	r24, Z+4	; 0x04
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
}
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <_ZN5clock7getYearEv>:
WORD clock::getYear(){
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <_ZN5clock7getYearEv+0x6>
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
	return year;
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	fc 01       	movw	r30, r24
     fe6:	85 81       	ldd	r24, Z+5	; 0x05
     fe8:	96 81       	ldd	r25, Z+6	; 0x06
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <_Z10PutUart0Chc>:
void PutUart0Ch(char ch);
void Print0(char string[]);

/**********************************************************************************************************************************/
void PutUart0Ch(char ch)
{
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	0f 92       	push	r0
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
    1000:	00 00       	nop
    1002:	80 ec       	ldi	r24, 0xC0	; 192
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	fc 01       	movw	r30, r24
    1008:	80 81       	ld	r24, Z
    100a:	88 2f       	mov	r24, r24
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	80 72       	andi	r24, 0x20	; 32
    1010:	90 70       	andi	r25, 0x00	; 0
    1012:	21 e0       	ldi	r18, 0x01	; 1
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	09 f0       	breq	.+2      	; 0x101a <_Z10PutUart0Chc+0x26>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	22 23       	and	r18, r18
    101c:	91 f7       	brne	.-28     	; 0x1002 <_Z10PutUart0Chc+0xe>
	UDR0 = ch;
    101e:	86 ec       	ldi	r24, 0xC6	; 198
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	29 81       	ldd	r18, Y+1	; 0x01
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
}
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <_Z6Print0Pc>:
/**********************************************************************************************************************************/
void Print0(char string[])
{
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	00 d0       	rcall	.+0      	; 0x1036 <_Z6Print0Pc+0x6>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9b 83       	std	Y+3, r25	; 0x03
    103e:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
    1040:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i]);  //send byte
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	88 2f       	mov	r24, r24
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	2a 81       	ldd	r18, Y+2	; 0x02
    104c:	3b 81       	ldd	r19, Y+3	; 0x03
    104e:	82 0f       	add	r24, r18
    1050:	93 1f       	adc	r25, r19
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	0e 94 fa 07 	call	0xff4	; 0xff4 <_Z10PutUart0Chc>
		i += 1;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{
	BYTE i;
	i = 0;

	while (string[i]) {
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	88 2f       	mov	r24, r24
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	2a 81       	ldd	r18, Y+2	; 0x02
    1068:	3b 81       	ldd	r19, Y+3	; 0x03
    106a:	82 0f       	add	r24, r18
    106c:	93 1f       	adc	r25, r19
    106e:	fc 01       	movw	r30, r24
    1070:	90 81       	ld	r25, Z
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	99 23       	and	r25, r25
    1076:	09 f4       	brne	.+2      	; 0x107a <_Z6Print0Pc+0x4a>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	88 23       	and	r24, r24
    107c:	19 f7       	brne	.-58     	; 0x1044 <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i]);  //send byte
		i += 1;
	}
}
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <_Z9ReceivePiv>:
/**********************************************************************************************************************************/
void ReceivePi(){
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	69 97       	sbiw	r28, 0x19	; 25
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
    109e:	19 82       	std	Y+1, r1	; 0x01
    10a0:	1a 82       	std	Y+2, r1	; 0x02
	BOOL noDelimiter=fTrue;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	8b 83       	std	Y+3, r24	; 0x03
	
	while (flagReceivePi){
    10a6:	30 c1       	rjmp	.+608    	; 0x1308 <_Z9ReceivePiv+0x27e>
		switch (state) {
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <_Z9ReceivePiv+0x2c>
    10b4:	6f c0       	rjmp	.+222    	; 0x1194 <_Z9ReceivePiv+0x10a>
    10b6:	83 30       	cpi	r24, 0x03	; 3
    10b8:	91 05       	cpc	r25, r1
    10ba:	3c f4       	brge	.+14     	; 0x10ca <_Z9ReceivePiv+0x40>
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	91 f0       	breq	.+36     	; 0x10e4 <_Z9ReceivePiv+0x5a>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <_Z9ReceivePiv+0x3e>
    10c6:	56 c0       	rjmp	.+172    	; 0x1174 <_Z9ReceivePiv+0xea>
    10c8:	1c c1       	rjmp	.+568    	; 0x1302 <_Z9ReceivePiv+0x278>
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <_Z9ReceivePiv+0x48>
    10d0:	e1 c0       	rjmp	.+450    	; 0x1294 <_Z9ReceivePiv+0x20a>
    10d2:	84 30       	cpi	r24, 0x04	; 4
    10d4:	91 05       	cpc	r25, r1
    10d6:	0c f4       	brge	.+2      	; 0x10da <_Z9ReceivePiv+0x50>
    10d8:	ba c0       	rjmp	.+372    	; 0x124e <_Z9ReceivePiv+0x1c4>
    10da:	85 30       	cpi	r24, 0x05	; 5
    10dc:	91 05       	cpc	r25, r1
    10de:	09 f4       	brne	.+2      	; 0x10e2 <_Z9ReceivePiv+0x58>
    10e0:	e0 c0       	rjmp	.+448    	; 0x12a2 <_Z9ReceivePiv+0x218>
    10e2:	0f c1       	rjmp	.+542    	; 0x1302 <_Z9ReceivePiv+0x278>
			case 0:{
				//Send ACK
				Print0("ACK.");
    10e4:	8f e1       	ldi	r24, 0x1F	; 31
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
				state=1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	8a 83       	std	Y+2, r24	; 0x02
				break;
    10f0:	0b c1       	rjmp	.+534    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
    10f2:	00 00       	nop
    10f4:	80 ec       	ldi	r24, 0xC0	; 192
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	fc 01       	movw	r30, r24
    10fa:	80 81       	ld	r24, Z
    10fc:	88 23       	and	r24, r24
    10fe:	34 f0       	brlt	.+12     	; 0x110c <_Z9ReceivePiv+0x82>
    1100:	80 91 76 01 	lds	r24, 0x0176
    1104:	88 23       	and	r24, r24
    1106:	11 f0       	breq	.+4      	; 0x110c <_Z9ReceivePiv+0x82>
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	01 c0       	rjmp	.+2      	; 0x110e <_Z9ReceivePiv+0x84>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	88 23       	and	r24, r24
    1110:	89 f7       	brne	.-30     	; 0x10f4 <_Z9ReceivePiv+0x6a>
					if (!flagReceivePi){break;state=3;}//had a timeout
    1112:	80 91 76 01 	lds	r24, 0x0176
    1116:	88 23       	and	r24, r24
    1118:	d9 f1       	breq	.+118    	; 0x1190 <_Z9ReceivePiv+0x106>
					recChar=UDR0;
    111a:	86 ec       	ldi	r24, 0xC6	; 198
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	8e 83       	std	Y+6, r24	; 0x06
					recString[strLoc++]=recChar;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	9e 01       	movw	r18, r28
    112c:	23 5f       	subi	r18, 0xF3	; 243
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	82 0f       	add	r24, r18
    1132:	93 1f       	adc	r25, r19
    1134:	2e 81       	ldd	r18, Y+6	; 0x06
    1136:	fc 01       	movw	r30, r24
    1138:	20 83       	st	Z, r18
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	89 83       	std	Y+1, r24	; 0x01
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
    1140:	8e 81       	ldd	r24, Y+6	; 0x06
    1142:	8e 32       	cpi	r24, 0x2E	; 46
    1144:	19 f0       	breq	.+6      	; 0x114c <_Z9ReceivePiv+0xc2>
    1146:	8e 81       	ldd	r24, Y+6	; 0x06
    1148:	88 23       	and	r24, r24
    114a:	71 f4       	brne	.+28     	; 0x1168 <_Z9ReceivePiv+0xde>
    114c:	89 81       	ldd	r24, Y+1	; 0x01
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9e 01       	movw	r18, r28
    1154:	23 5f       	subi	r18, 0xF3	; 243
    1156:	3f 4f       	sbci	r19, 0xFF	; 255
    1158:	82 0f       	add	r24, r18
    115a:	93 1f       	adc	r25, r19
    115c:	fc 01       	movw	r30, r24
    115e:	10 82       	st	Z, r1
    1160:	1b 82       	std	Y+3, r1	; 0x03
    1162:	82 e0       	ldi	r24, 0x02	; 2
    1164:	8a 83       	std	Y+2, r24	; 0x02
    1166:	06 c0       	rjmp	.+12     	; 0x1174 <_Z9ReceivePiv+0xea>
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8a 30       	cpi	r24, 0x0A	; 10
    116c:	18 f0       	brcs	.+6      	; 0x1174 <_Z9ReceivePiv+0xea>
    116e:	84 e0       	ldi	r24, 0x04	; 4
    1170:	8a 83       	std	Y+2, r24	; 0x02
    1172:	1b 82       	std	Y+3, r1	; 0x03
				state=1;
				break;
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 23       	and	r24, r24
    1178:	31 f0       	breq	.+12     	; 0x1186 <_Z9ReceivePiv+0xfc>
    117a:	80 91 76 01 	lds	r24, 0x0176
    117e:	88 23       	and	r24, r24
    1180:	11 f0       	breq	.+4      	; 0x1186 <_Z9ReceivePiv+0xfc>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	01 c0       	rjmp	.+2      	; 0x1188 <_Z9ReceivePiv+0xfe>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	88 23       	and	r24, r24
    118a:	09 f0       	breq	.+2      	; 0x118e <_Z9ReceivePiv+0x104>
    118c:	b2 cf       	rjmp	.-156    	; 0x10f2 <_Z9ReceivePiv+0x68>
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
    118e:	bc c0       	rjmp	.+376    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
					if (!flagReceivePi){break;state=3;}//had a timeout
    1190:	00 00       	nop
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
    1192:	ba c0       	rjmp	.+372    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 1
			case 2:{
				state=3;
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	8a 83       	std	Y+2, r24	; 0x02
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
    1198:	ce 01       	movw	r24, r28
    119a:	0d 96       	adiw	r24, 0x0d	; 13
    119c:	24 e2       	ldi	r18, 0x24	; 36
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	b9 01       	movw	r22, r18
    11a2:	46 e0       	ldi	r20, 0x06	; 6
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	0e 94 57 16 	call	0x2cae	; 0x2cae <strncmp>
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <_Z9ReceivePiv+0x12c>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 75 01 	sts	0x0175, r24
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    11b4:	a9 c0       	rjmp	.+338    	; 0x1308 <_Z9ReceivePiv+0x27e>
				break;
			}//end case 1
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
    11b6:	ce 01       	movw	r24, r28
    11b8:	0d 96       	adiw	r24, 0x0d	; 13
    11ba:	2b e2       	ldi	r18, 0x2B	; 43
    11bc:	31 e0       	ldi	r19, 0x01	; 1
    11be:	b9 01       	movw	r22, r18
    11c0:	43 e0       	ldi	r20, 0x03	; 3
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 57 16 	call	0x2cae	; 0x2cae <strncmp>
    11c8:	00 97       	sbiw	r24, 0x00	; 0
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <_Z9ReceivePiv+0x14c>
    11cc:	8f e2       	ldi	r24, 0x2F	; 47
    11ce:	91 e0       	ldi	r25, 0x01	; 1
    11d0:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    11d4:	99 c0       	rjmp	.+306    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 1
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
    11d6:	ce 01       	movw	r24, r28
    11d8:	0d 96       	adiw	r24, 0x0d	; 13
    11da:	23 e4       	ldi	r18, 0x43	; 67
    11dc:	31 e0       	ldi	r19, 0x01	; 1
    11de:	b9 01       	movw	r22, r18
    11e0:	45 e0       	ldi	r20, 0x05	; 5
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	0e 94 57 16 	call	0x2cae	; 0x2cae <strncmp>
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	39 f4       	brne	.+14     	; 0x11fa <_Z9ReceivePiv+0x170>
    11ec:	89 e4       	ldi	r24, 0x49	; 73
    11ee:	91 e0       	ldi	r25, 0x01	; 1
    11f0:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
    11f4:	0e 94 34 0a 	call	0x1468	; 0x1468 <_Z7SaveDayv>
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    11f8:	87 c0       	rjmp	.+270    	; 0x1308 <_Z9ReceivePiv+0x27e>
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
    11fa:	ce 01       	movw	r24, r28
    11fc:	0d 96       	adiw	r24, 0x0d	; 13
    11fe:	23 e5       	ldi	r18, 0x53	; 83
    1200:	31 e0       	ldi	r19, 0x01	; 1
    1202:	b9 01       	movw	r22, r18
    1204:	46 e0       	ldi	r20, 0x06	; 6
    1206:	50 e0       	ldi	r21, 0x00	; 0
    1208:	0e 94 57 16 	call	0x2cae	; 0x2cae <strncmp>
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	21 f4       	brne	.+8      	; 0x1218 <_Z9ReceivePiv+0x18e>
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 77 01 	sts	0x0177, r24
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    1216:	78 c0       	rjmp	.+240    	; 0x1308 <_Z9ReceivePiv+0x27e>
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
    1218:	ce 01       	movw	r24, r28
    121a:	0d 96       	adiw	r24, 0x0d	; 13
    121c:	29 e5       	ldi	r18, 0x59	; 89
    121e:	31 e0       	ldi	r19, 0x01	; 1
    1220:	b9 01       	movw	r22, r18
    1222:	45 e0       	ldi	r20, 0x05	; 5
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	0e 94 57 16 	call	0x2cae	; 0x2cae <strncmp>
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	29 f4       	brne	.+10     	; 0x1238 <_Z9ReceivePiv+0x1ae>
    122e:	88 e7       	ldi	r24, 0x78	; 120
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5clock9printTimeEv>
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    1236:	68 c0       	rjmp	.+208    	; 0x1308 <_Z9ReceivePiv+0x27e>
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
    1238:	84 e5       	ldi	r24, 0x54	; 84
    123a:	8d 87       	std	Y+13, r24	; 0x0d
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <_Z9ReceivePiv+0x1be>
    1242:	85 e0       	ldi	r24, 0x05	; 5
    1244:	8a 83       	std	Y+2, r24	; 0x02
				else {state=4;}
				break;
    1246:	60 c0       	rjmp	.+192    	; 0x1308 <_Z9ReceivePiv+0x27e>
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	8a 83       	std	Y+2, r24	; 0x02
				break;
    124c:	5d c0       	rjmp	.+186    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 2
			case 3:{
				//Graceful exit
				int i=0;
    124e:	1d 82       	std	Y+5, r1	; 0x05
    1250:	1c 82       	std	Y+4, r1	; 0x04
				for (i=0;i<strLoc;i++){recString[strLoc]=NULL;}	//clear string memory
    1252:	1d 82       	std	Y+5, r1	; 0x05
    1254:	1c 82       	std	Y+4, r1	; 0x04
    1256:	0f c0       	rjmp	.+30     	; 0x1276 <_Z9ReceivePiv+0x1ec>
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9e 01       	movw	r18, r28
    1260:	23 5f       	subi	r18, 0xF3	; 243
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	fc 01       	movw	r30, r24
    126a:	10 82       	st	Z, r1
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	9d 83       	std	Y+5, r25	; 0x05
    1274:	8c 83       	std	Y+4, r24	; 0x04
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	41 e0       	ldi	r20, 0x01	; 1
    127e:	8c 81       	ldd	r24, Y+4	; 0x04
    1280:	9d 81       	ldd	r25, Y+5	; 0x05
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	0c f0       	brlt	.+2      	; 0x128a <_Z9ReceivePiv+0x200>
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	44 23       	and	r20, r20
    128c:	29 f7       	brne	.-54     	; 0x1258 <_Z9ReceivePiv+0x1ce>
				flagReceivePi=fFalse;
    128e:	10 92 76 01 	sts	0x0176, r1
				break;
    1292:	3a c0       	rjmp	.+116    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 3
			case 4:{
				//Bad ACK or ask string
				Print0("Unknown query.");
    1294:	8f e5       	ldi	r24, 0x5F	; 95
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
				state=3;
    129c:	83 e0       	ldi	r24, 0x03	; 3
    129e:	8a 83       	std	Y+2, r24	; 0x02
				break;
    12a0:	33 c0       	rjmp	.+102    	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 4
			case 5:{
				char tempString[3];
				tempString[0]=recString[1];
    12a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a4:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[2];
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	88 8f       	std	Y+24, r24	; 0x18
				tempString[2]='\0';
    12aa:	19 8e       	std	Y+25, r1	; 0x19
				WORD hour=atoi(tempString);
    12ac:	ce 01       	movw	r24, r28
    12ae:	47 96       	adiw	r24, 0x17	; 23
    12b0:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <atoi>
    12b4:	98 87       	std	Y+8, r25	; 0x08
    12b6:	8f 83       	std	Y+7, r24	; 0x07
				tempString[0]=recString[3];
    12b8:	88 89       	ldd	r24, Y+16	; 0x10
    12ba:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[4];
    12bc:	89 89       	ldd	r24, Y+17	; 0x11
    12be:	88 8f       	std	Y+24, r24	; 0x18
				WORD minute=atoi(tempString);
    12c0:	ce 01       	movw	r24, r28
    12c2:	47 96       	adiw	r24, 0x17	; 23
    12c4:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <atoi>
    12c8:	9a 87       	std	Y+10, r25	; 0x0a
    12ca:	89 87       	std	Y+9, r24	; 0x09
				tempString[0]=recString[5];
    12cc:	8a 89       	ldd	r24, Y+18	; 0x12
    12ce:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[6];				
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	88 8f       	std	Y+24, r24	; 0x18
				WORD second=atoi(tempString);
    12d4:	ce 01       	movw	r24, r28
    12d6:	47 96       	adiw	r24, 0x17	; 23
    12d8:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <atoi>
    12dc:	9c 87       	std	Y+12, r25	; 0x0c
    12de:	8b 87       	std	Y+11, r24	; 0x0b
				theClock.setTime(hour,minute,second);
    12e0:	88 e7       	ldi	r24, 0x78	; 120
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	49 85       	ldd	r20, Y+9	; 0x09
    12ea:	5a 85       	ldd	r21, Y+10	; 0x0a
    12ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    12ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    12f0:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN5clock7setTimeEjjj>
				theClock.printTime();
    12f4:	88 e7       	ldi	r24, 0x78	; 120
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 5e 05 	call	0xabc	; 0xabc <_ZN5clock9printTimeEv>
				state=3;
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	8a 83       	std	Y+2, r24	; 0x02
				break;
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <_Z9ReceivePiv+0x27e>
			}//end case 5
			default:{flagReceivePi=fFalse;break;}			
    1302:	10 92 76 01 	sts	0x0176, r1
    1306:	00 00       	nop
void ReceivePi(){
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
	BOOL noDelimiter=fTrue;
	
	while (flagReceivePi){
    1308:	90 91 76 01 	lds	r25, 0x0176
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	99 23       	and	r25, r25
    1310:	09 f4       	brne	.+2      	; 0x1314 <_Z9ReceivePiv+0x28a>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	88 23       	and	r24, r24
    1316:	09 f0       	breq	.+2      	; 0x131a <_Z9ReceivePiv+0x290>
    1318:	c7 ce       	rjmp	.-626    	; 0x10a8 <_Z9ReceivePiv+0x1e>
				break;
			}//end case 5
			default:{flagReceivePi=fFalse;break;}			
		}//end switch
	}//end while ReceivePi	
    131a:	69 96       	adiw	r28, 0x19	; 25
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <_Z8MoveDownh>:

//Total number of days stored
BYTE EEMEM eeTotalDays=0;
BYTE EEMEM eeOldestDay=0;

void MoveDown(BYTE whichDay){
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	67 97       	sbiw	r28, 0x17	; 23
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	8f 8b       	std	Y+23, r24	; 0x17
	//Get what day we are moving and all of it's data into temp variables
	WORD offset=INITIAL_OFFSET+(whichDay)*BLOCK_SIZE;
    1342:	8f 89       	ldd	r24, Y+23	; 0x17
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	9c 01       	movw	r18, r24
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	04 96       	adiw	r24, 0x04	; 4
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	WORD dayT,monthT;
	dayT=eeprom_read_word((WORD *)(offset+DAY));
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__eerd_word_m324pa>
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
	monthT=eeprom_read_word((WORD *)(offset+MONTH));
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	02 96       	adiw	r24, 0x02	; 2
    1376:	0e 94 91 16 	call	0x2d22	; 0x2d22 <__eerd_word_m324pa>
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
	float lowT=eeprom_read_float((float*)(offset+LOW));
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	9a 81       	ldd	r25, Y+2	; 0x02
    1382:	04 96       	adiw	r24, 0x04	; 4
    1384:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__eerd_dword_m324pa>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	8f 83       	std	Y+7, r24	; 0x07
    138e:	98 87       	std	Y+8, r25	; 0x08
    1390:	a9 87       	std	Y+9, r26	; 0x09
    1392:	ba 87       	std	Y+10, r27	; 0x0a
	float highT=eeprom_read_float((float*)(offset+HIGH));
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	08 96       	adiw	r24, 0x08	; 8
    139a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__eerd_dword_m324pa>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	ad 87       	std	Y+13, r26	; 0x0d
    13a8:	be 87       	std	Y+14, r27	; 0x0e
	float avgT=eeprom_read_float((float*)(offset+AVGT));
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	9a 81       	ldd	r25, Y+2	; 0x02
    13ae:	0c 96       	adiw	r24, 0x0c	; 12
    13b0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__eerd_dword_m324pa>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8f 87       	std	Y+15, r24	; 0x0f
    13ba:	98 8b       	std	Y+16, r25	; 0x10
    13bc:	a9 8b       	std	Y+17, r26	; 0x11
    13be:	ba 8b       	std	Y+18, r27	; 0x12
	float avgH=eeprom_read_float((float *)(offset+AVGH));
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	40 96       	adiw	r24, 0x10	; 16
    13c6:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <__eerd_dword_m324pa>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
    13d0:	9c 8b       	std	Y+20, r25	; 0x14
    13d2:	ad 8b       	std	Y+21, r26	; 0x15
    13d4:	be 8b       	std	Y+22, r27	; 0x16
	
	//Put all that data into the spot below this one. Offset is one block down
	offset-=BLOCK_SIZE;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	44 97       	sbiw	r24, 0x14	; 20
    13dc:	9a 83       	std	Y+2, r25	; 0x02
    13de:	89 83       	std	Y+1, r24	; 0x01
	eeprom_update_word((WORD *)(offset+DAY),dayT);
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	b9 01       	movw	r22, r18
    13ea:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),monthT);
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	9a 81       	ldd	r25, Y+2	; 0x02
    13f2:	02 96       	adiw	r24, 0x02	; 2
    13f4:	2d 81       	ldd	r18, Y+5	; 0x05
    13f6:	3e 81       	ldd	r19, Y+6	; 0x06
    13f8:	b9 01       	movw	r22, r18
    13fa:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__eeupd_word_m324pa>
	eeprom_update_float((float*)(offset+LOW),lowT);
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	9a 81       	ldd	r25, Y+2	; 0x02
    1402:	04 96       	adiw	r24, 0x04	; 4
    1404:	2f 81       	ldd	r18, Y+7	; 0x07
    1406:	38 85       	ldd	r19, Y+8	; 0x08
    1408:	49 85       	ldd	r20, Y+9	; 0x09
    140a:	5a 85       	ldd	r21, Y+10	; 0x0a
    140c:	ba 01       	movw	r22, r20
    140e:	a9 01       	movw	r20, r18
    1410:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+HIGH),highT);
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	08 96       	adiw	r24, 0x08	; 8
    141a:	2b 85       	ldd	r18, Y+11	; 0x0b
    141c:	3c 85       	ldd	r19, Y+12	; 0x0c
    141e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1420:	5e 85       	ldd	r21, Y+14	; 0x0e
    1422:	ba 01       	movw	r22, r20
    1424:	a9 01       	movw	r20, r18
    1426:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGT),avgT);
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	9a 81       	ldd	r25, Y+2	; 0x02
    142e:	0c 96       	adiw	r24, 0x0c	; 12
    1430:	2f 85       	ldd	r18, Y+15	; 0x0f
    1432:	38 89       	ldd	r19, Y+16	; 0x10
    1434:	49 89       	ldd	r20, Y+17	; 0x11
    1436:	5a 89       	ldd	r21, Y+18	; 0x12
    1438:	ba 01       	movw	r22, r20
    143a:	a9 01       	movw	r20, r18
    143c:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGH),avgH);
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	9a 81       	ldd	r25, Y+2	; 0x02
    1444:	40 96       	adiw	r24, 0x10	; 16
    1446:	2b 89       	ldd	r18, Y+19	; 0x13
    1448:	3c 89       	ldd	r19, Y+20	; 0x14
    144a:	4d 89       	ldd	r20, Y+21	; 0x15
    144c:	5e 89       	ldd	r21, Y+22	; 0x16
    144e:	ba 01       	movw	r22, r20
    1450:	a9 01       	movw	r20, r18
    1452:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
}
    1456:	67 96       	adiw	r28, 0x17	; 23
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	08 95       	ret

00001468 <_Z7SaveDayv>:

void SaveDay(){
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	00 d0       	rcall	.+0      	; 0x1472 <_Z7SaveDayv+0xa>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <_Z7SaveDayv+0xc>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
	static BOOL allFull=fFalse;
	BYTE daysStored,oldestDay;
	WORD offset;
	
	//If we are all full, don't waste a read on the TotalDays, go right to OldestDay protocol
	if (!allFull){daysStored=eeprom_read_byte(&eeTotalDays);}
    1478:	80 91 a6 01 	lds	r24, 0x01A6
    147c:	88 23       	and	r24, r24
    147e:	29 f4       	brne	.+10     	; 0x148a <_Z7SaveDayv+0x22>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__eerd_byte_m324pa>
    1488:	89 83       	std	Y+1, r24	; 0x01
		
	//Get offset for where we are goign to store data.
	if (daysStored >= MAX_DAYS || allFull){
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	88 32       	cpi	r24, 0x28	; 40
    148e:	20 f4       	brcc	.+8      	; 0x1498 <_Z7SaveDayv+0x30>
    1490:	80 91 a6 01 	lds	r24, 0x01A6
    1494:	88 23       	and	r24, r24
    1496:	31 f1       	breq	.+76     	; 0x14e4 <_Z7SaveDayv+0x7c>
		if (!allFull){allFull=fTrue;}
    1498:	80 91 a6 01 	lds	r24, 0x01A6
    149c:	88 23       	and	r24, r24
    149e:	19 f4       	brne	.+6      	; 0x14a6 <_Z7SaveDayv+0x3e>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	80 93 a6 01 	sts	0x01A6, r24
		oldestDay=eeprom_read_byte(&eeOldestDay);
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__eerd_byte_m324pa>
    14ae:	8c 83       	std	Y+4, r24	; 0x04
		//Offset is wherever the oldestDay is, which is the block size*absolute + initial.
		offset = INITIAL_OFFSET+(oldestDay)*BLOCK_SIZE;
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	9c 01       	movw	r18, r24
    14c0:	22 0f       	add	r18, r18
    14c2:	33 1f       	adc	r19, r19
    14c4:	22 0f       	add	r18, r18
    14c6:	33 1f       	adc	r19, r19
    14c8:	82 0f       	add	r24, r18
    14ca:	93 1f       	adc	r25, r19
    14cc:	04 96       	adiw	r24, 0x04	; 4
    14ce:	9b 83       	std	Y+3, r25	; 0x03
    14d0:	8a 83       	std	Y+2, r24	; 0x02
		//increment oldest day to next location.
		oldestDay++;
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	8f 5f       	subi	r24, 0xFF	; 255
    14d6:	8c 83       	std	Y+4, r24	; 0x04
		eeprom_update_byte(&eeOldestDay,oldestDay);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	6c 81       	ldd	r22, Y+4	; 0x04
    14de:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__eeupd_byte_m324pa>
    14e2:	19 c0       	rjmp	.+50     	; 0x1516 <_Z7SaveDayv+0xae>
	} else {
		//Offset is how many days are stored. If 0 are stored, should be lowest location. if one is stored, should be the next location (block size up).
		offset = INITIAL_OFFSET+(daysStored)*BLOCK_SIZE;
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	88 2f       	mov	r24, r24
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	9c 01       	movw	r18, r24
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	04 96       	adiw	r24, 0x04	; 4
    1502:	9b 83       	std	Y+3, r25	; 0x03
    1504:	8a 83       	std	Y+2, r24	; 0x02
		daysStored++;
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	89 83       	std	Y+1, r24	; 0x01
		//Update how many days are stored.
		eeprom_update_byte(&eeTotalDays,daysStored);	
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	69 81       	ldd	r22, Y+1	; 0x01
    1512:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__eeupd_byte_m324pa>
	}

	//Write the data to EEPROM
	eeprom_update_word((WORD *)(offset+DAY),(float)theClock.getDay());
    1516:	0a 81       	ldd	r16, Y+2	; 0x02
    1518:	1b 81       	ldd	r17, Y+3	; 0x03
    151a:	88 e7       	ldi	r24, 0x78	; 120
    151c:	91 e0       	ldi	r25, 0x01	; 1
    151e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <_ZN5clock6getDayEv>
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	a0 e0       	ldi	r26, 0x00	; 0
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	0e 94 8e 14 	call	0x291c	; 0x291c <__fixunssfsi>
    153e:	dc 01       	movw	r26, r24
    1540:	cb 01       	movw	r24, r22
    1542:	9c 01       	movw	r18, r24
    1544:	c8 01       	movw	r24, r16
    1546:	b9 01       	movw	r22, r18
    1548:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),(float)theClock.getMonth());
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	9b 81       	ldd	r25, Y+3	; 0x03
    1550:	02 96       	adiw	r24, 0x02	; 2
    1552:	8c 01       	movw	r16, r24
    1554:	88 e7       	ldi	r24, 0x78	; 120
    1556:	91 e0       	ldi	r25, 0x01	; 1
    1558:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN5clock8getMonthEv>
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	bc 01       	movw	r22, r24
    1572:	cd 01       	movw	r24, r26
    1574:	0e 94 8e 14 	call	0x291c	; 0x291c <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9c 01       	movw	r18, r24
    157e:	c8 01       	movw	r24, r16
    1580:	b9 01       	movw	r22, r18
    1582:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__eeupd_word_m324pa>
	eeprom_update_float((float *)(offset+LOW),(float)theThermostat.getLow());
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	04 96       	adiw	r24, 0x04	; 4
    158c:	8c 01       	movw	r16, r24
    158e:	8f e7       	ldi	r24, 0x7F	; 127
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN10thermostat6getLowEv>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	c8 01       	movw	r24, r16
    159c:	ba 01       	movw	r22, r20
    159e:	a9 01       	movw	r20, r18
    15a0:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+HIGH),(float)theThermostat.getHigh());
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	08 96       	adiw	r24, 0x08	; 8
    15aa:	8c 01       	movw	r16, r24
    15ac:	8f e7       	ldi	r24, 0x7F	; 127
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN10thermostat7getHighEv>
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
    15b8:	c8 01       	movw	r24, r16
    15ba:	ba 01       	movw	r22, r20
    15bc:	a9 01       	movw	r20, r18
    15be:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGT),(float)theThermostat.getAveT());
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	0c 96       	adiw	r24, 0x0c	; 12
    15c8:	8c 01       	movw	r16, r24
    15ca:	8f e7       	ldi	r24, 0x7F	; 127
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN10thermostat7getAveTEv>
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	c8 01       	movw	r24, r16
    15d8:	ba 01       	movw	r22, r20
    15da:	a9 01       	movw	r20, r18
    15dc:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	9b 81       	ldd	r25, Y+3	; 0x03
    15e4:	40 96       	adiw	r24, 0x10	; 16
    15e6:	8c 01       	movw	r16, r24
    15e8:	8f e7       	ldi	r24, 0x7F	; 127
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN10thermostat7getAveHEv>
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	c8 01       	movw	r24, r16
    15f6:	ba 01       	movw	r22, r20
    15f8:	a9 01       	movw	r20, r18
    15fa:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <__eeupd_dword_m324pa>
}
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <_Z9DeleteDayh>:

void DeleteDay(BYTE whichDay){
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 d0       	rcall	.+0      	; 0x1616 <_Z9DeleteDayh+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <_Z9DeleteDayh+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	8c 83       	std	Y+4, r24	; 0x04
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 83 16 	call	0x2d06	; 0x2d06 <__eerd_byte_m324pa>
    1626:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=whichDay+1; i<=daysStored; i++){
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	08 c0       	rjmp	.+16     	; 0x1646 <_Z9DeleteDayh+0x36>
		MoveDown(i);
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	0e 94 96 09 	call	0x132c	; 0x132c <_Z8MoveDownh>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
}

void DeleteDay(BYTE whichDay){
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
	for(int i=whichDay+1; i<=daysStored; i++){
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	9a 81       	ldd	r25, Y+2	; 0x02
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	28 2f       	mov	r18, r24
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	41 e0       	ldi	r20, 0x01	; 1
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	28 17       	cp	r18, r24
    1654:	39 07       	cpc	r19, r25
    1656:	0c f4       	brge	.+2      	; 0x165a <_Z9DeleteDayh+0x4a>
    1658:	40 e0       	ldi	r20, 0x00	; 0
    165a:	44 23       	and	r20, r20
    165c:	61 f7       	brne	.-40     	; 0x1636 <_Z9DeleteDayh+0x26>
		MoveDown(i);
	}
	
	daysStored--;
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	81 50       	subi	r24, 0x01	; 1
    1662:	8b 83       	std	Y+3, r24	; 0x03
	eeprom_update_byte(&eeTotalDays,daysStored);
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	6b 81       	ldd	r22, Y+3	; 0x03
    166a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__eeupd_byte_m324pa>
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <_Z11getTempTinyv>:
void TWI_write_data(BYTE data);




BYTE getTempTiny(){
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	0f 92       	push	r0
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
	//Send the start condition
	TWI_start();
    1686:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_Z9TWI_startv>
	//Send the 7-bit slave address, data direction bit (0)
	TWI_read_address(tiny);			//slave address should be 1010
    168a:	84 e1       	ldi	r24, 0x14	; 20
    168c:	0e 94 96 0b 	call	0x172c	; 0x172c <_Z16TWI_read_addressh>
	//Send the data.
	TWI_write_data(0x04);			//4 represents=>SendThermTemp
    1690:	84 e0       	ldi	r24, 0x04	; 4
    1692:	0e 94 c4 0b 	call	0x1788	; 0x1788 <_Z14TWI_write_datah>
	//Send Stop Condition
	TWI_stop();
    1696:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z8TWI_stopv>
	
	//Wait two seconds before getting data off the bus
	Wait_sec(2);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z8Wait_secj>
	
	//Send Start Condition
	TWI_start();
    16a2:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_Z9TWI_startv>
	//Send slave address with read instruction
	TWI_read_address(tiny+1);
    16a6:	85 e1       	ldi	r24, 0x15	; 21
    16a8:	0e 94 96 0b 	call	0x172c	; 0x172c <_Z16TWI_read_addressh>
	//Read the data from the line
	BYTE output=TWI_read_data();
    16ac:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <_Z13TWI_read_datav>
    16b0:	89 83       	std	Y+1, r24	; 0x01
	//Send Stop Condition
	TWI_stop();
    16b2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <_Z8TWI_stopv>
	
	return output;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b8:	0f 90       	pop	r0
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <_Z15TWI_init_masterv>:


//Initialize Master
void TWI_init_master(void){
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
	TWBR=0x01;		//Bit rate
    16c8:	88 eb       	ldi	r24, 0xB8	; 184
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	21 e0       	ldi	r18, 0x01	; 1
    16ce:	fc 01       	movw	r30, r24
    16d0:	20 83       	st	Z, r18
	TWSR=(0<<TWPS1)|(0<<TWPS0); 
    16d2:	89 eb       	ldi	r24, 0xB9	; 185
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	fc 01       	movw	r30, r24
    16d8:	10 82       	st	Z, r1
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	08 95       	ret

000016e0 <_Z9TWI_startv>:

void TWI_start(void){
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    16e8:	8c eb       	ldi	r24, 0xBC	; 188
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	24 ea       	ldi	r18, 0xA4	; 164
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
    16f2:	00 00       	nop
    16f4:	8c eb       	ldi	r24, 0xBC	; 188
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	fc 01       	movw	r30, r24
    16fa:	80 81       	ld	r24, Z
    16fc:	80 95       	com	r24
    16fe:	88 1f       	adc	r24, r24
    1700:	88 27       	eor	r24, r24
    1702:	88 1f       	adc	r24, r24
    1704:	88 23       	and	r24, r24
    1706:	b1 f7       	brne	.-20     	; 0x16f4 <_Z9TWI_startv+0x14>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
    1708:	89 eb       	ldi	r24, 0xB9	; 185
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	fc 01       	movw	r30, r24
    170e:	80 81       	ld	r24, Z
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	88 7f       	andi	r24, 0xF8	; 248
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	21 e0       	ldi	r18, 0x01	; 1
    171a:	88 30       	cpi	r24, 0x08	; 8
    171c:	91 05       	cpc	r25, r1
    171e:	09 f4       	brne	.+2      	; 0x1722 <_Z9TWI_startv+0x42>
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	22 23       	and	r18, r18
    1724:	89 f7       	brne	.-30     	; 0x1708 <_Z9TWI_startv+0x28>
}
    1726:	df 91       	pop	r29
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <_Z16TWI_read_addressh>:

void TWI_read_address(BYTE data)
{
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	0f 92       	push	r0
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;    // Address and read instruction (read=1, write=0) in low bit.
    1738:	8b eb       	ldi	r24, 0xBB	; 187
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	29 81       	ldd	r18, Y+1	; 0x01
    173e:	fc 01       	movw	r30, r24
    1740:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    1742:	8c eb       	ldi	r24, 0xBC	; 188
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	24 e8       	ldi	r18, 0x84	; 132
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    174c:	00 00       	nop
    174e:	8c eb       	ldi	r24, 0xBC	; 188
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	80 95       	com	r24
    1758:	88 1f       	adc	r24, r24
    175a:	88 27       	eor	r24, r24
    175c:	88 1f       	adc	r24, r24
    175e:	88 23       	and	r24, r24
    1760:	b1 f7       	brne	.-20     	; 0x174e <_Z16TWI_read_addressh+0x22>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    1762:	89 eb       	ldi	r24, 0xB9	; 185
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	fc 01       	movw	r30, r24
    1768:	80 81       	ld	r24, Z
    176a:	88 2f       	mov	r24, r24
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	88 7f       	andi	r24, 0xF8	; 248
    1770:	90 70       	andi	r25, 0x00	; 0
    1772:	21 e0       	ldi	r18, 0x01	; 1
    1774:	80 34       	cpi	r24, 0x40	; 64
    1776:	91 05       	cpc	r25, r1
    1778:	09 f4       	brne	.+2      	; 0x177c <_Z16TWI_read_addressh+0x50>
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	22 23       	and	r18, r18
    177e:	89 f7       	brne	.-30     	; 0x1762 <_Z16TWI_read_addressh+0x36>
}
    1780:	0f 90       	pop	r0
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <_Z14TWI_write_datah>:

void TWI_write_data(BYTE data)
{
    1788:	cf 93       	push	r28
    178a:	df 93       	push	r29
    178c:	0f 92       	push	r0
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;    // put data in TWDR, direction bit (write=0, read=1).
    1794:	8b eb       	ldi	r24, 0xBB	; 187
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	29 81       	ldd	r18, Y+1	; 0x01
    179a:	fc 01       	movw	r30, r24
    179c:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    179e:	8c eb       	ldi	r24, 0xBC	; 188
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	24 e8       	ldi	r18, 0x84	; 132
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    17a8:	00 00       	nop
    17aa:	8c eb       	ldi	r24, 0xBC	; 188
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	fc 01       	movw	r30, r24
    17b0:	80 81       	ld	r24, Z
    17b2:	80 95       	com	r24
    17b4:	88 1f       	adc	r24, r24
    17b6:	88 27       	eor	r24, r24
    17b8:	88 1f       	adc	r24, r24
    17ba:	88 23       	and	r24, r24
    17bc:	b1 f7       	brne	.-20     	; 0x17aa <_Z14TWI_write_datah+0x22>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    17be:	89 eb       	ldi	r24, 0xB9	; 185
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	fc 01       	movw	r30, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	88 2f       	mov	r24, r24
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	88 7f       	andi	r24, 0xF8	; 248
    17cc:	90 70       	andi	r25, 0x00	; 0
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	88 32       	cpi	r24, 0x28	; 40
    17d2:	91 05       	cpc	r25, r1
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <_Z14TWI_write_datah+0x50>
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	22 23       	and	r18, r18
    17da:	89 f7       	brne	.-30     	; 0x17be <_Z14TWI_write_datah+0x36>
}
    17dc:	0f 90       	pop	r0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <_Z13TWI_read_datav>:

BYTE TWI_read_data(void)
{
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    17ec:	8c eb       	ldi	r24, 0xBC	; 188
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	24 e8       	ldi	r18, 0x84	; 132
    17f2:	fc 01       	movw	r30, r24
    17f4:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    17f6:	00 00       	nop
    17f8:	8c eb       	ldi	r24, 0xBC	; 188
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	fc 01       	movw	r30, r24
    17fe:	80 81       	ld	r24, Z
    1800:	80 95       	com	r24
    1802:	88 1f       	adc	r24, r24
    1804:	88 27       	eor	r24, r24
    1806:	88 1f       	adc	r24, r24
    1808:	88 23       	and	r24, r24
    180a:	b1 f7       	brne	.-20     	; 0x17f8 <_Z13TWI_read_datav+0x14>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    180c:	89 eb       	ldi	r24, 0xB9	; 185
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	fc 01       	movw	r30, r24
    1812:	80 81       	ld	r24, Z
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	88 7f       	andi	r24, 0xF8	; 248
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	88 35       	cpi	r24, 0x58	; 88
    1820:	91 05       	cpc	r25, r1
    1822:	09 f4       	brne	.+2      	; 0x1826 <_Z13TWI_read_datav+0x42>
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	22 23       	and	r18, r18
    1828:	89 f7       	brne	.-30     	; 0x180c <_Z13TWI_read_datav+0x28>
	return TWDR;
    182a:	8b eb       	ldi	r24, 0xBB	; 187
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	fc 01       	movw	r30, r24
    1830:	80 81       	ld	r24, Z
}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	08 95       	ret

00001838 <_Z8TWI_stopv>:
void TWI_stop(void)
{
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    1840:	8c eb       	ldi	r24, 0xBC	; 188
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	24 e9       	ldi	r18, 0x94	; 148
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    184a:	00 00       	nop
    184c:	8c eb       	ldi	r24, 0xBC	; 188
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	fc 01       	movw	r30, r24
    1852:	80 81       	ld	r24, Z
    1854:	88 2f       	mov	r24, r24
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	80 71       	andi	r24, 0x10	; 16
    185a:	90 70       	andi	r25, 0x00	; 0
    185c:	21 e0       	ldi	r18, 0x01	; 1
    185e:	00 97       	sbiw	r24, 0x00	; 0
    1860:	09 f0       	breq	.+2      	; 0x1864 <_Z8TWI_stopv+0x2c>
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	22 23       	and	r18, r18
    1866:	91 f7       	brne	.-28     	; 0x184c <_Z8TWI_stopv+0x14>
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	08 95       	ret

0000186e <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
    186e:	1f 92       	push	r1
    1870:	0f 92       	push	r0
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	0f 92       	push	r0
    1876:	11 24       	eor	r1, r1
    1878:	2f 93       	push	r18
    187a:	3f 93       	push	r19
    187c:	4f 93       	push	r20
    187e:	5f 93       	push	r21
    1880:	6f 93       	push	r22
    1882:	7f 93       	push	r23
    1884:	8f 93       	push	r24
    1886:	9f 93       	push	r25
    1888:	af 93       	push	r26
    188a:	bf 93       	push	r27
    188c:	ef 93       	push	r30
    188e:	ff 93       	push	r31
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
	cli();
    1898:	f8 94       	cli
	prtDebug |= (1 << bnD1);	//should toggle amber LED on. 
    189a:	88 e2       	ldi	r24, 0x28	; 40
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	28 e2       	ldi	r18, 0x28	; 40
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	20 61       	ori	r18, 0x10	; 16
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 83       	st	Z, r18
	Wait_ms(200);
    18ac:	88 ec       	ldi	r24, 0xC8	; 200
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	flagReceivePi=fTrue;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	80 93 76 01 	sts	0x0176, r24
	sei();
    18ba:	78 94       	sei
}
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	ff 91       	pop	r31
    18c2:	ef 91       	pop	r30
    18c4:	bf 91       	pop	r27
    18c6:	af 91       	pop	r26
    18c8:	9f 91       	pop	r25
    18ca:	8f 91       	pop	r24
    18cc:	7f 91       	pop	r23
    18ce:	6f 91       	pop	r22
    18d0:	5f 91       	pop	r21
    18d2:	4f 91       	pop	r20
    18d4:	3f 91       	pop	r19
    18d6:	2f 91       	pop	r18
    18d8:	0f 90       	pop	r0
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	0f 90       	pop	r0
    18de:	1f 90       	pop	r1
    18e0:	18 95       	reti

000018e2 <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
    18e2:	1f 92       	push	r1
    18e4:	0f 92       	push	r0
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	0f 92       	push	r0
    18ea:	11 24       	eor	r1, r1
    18ec:	2f 93       	push	r18
    18ee:	3f 93       	push	r19
    18f0:	4f 93       	push	r20
    18f2:	5f 93       	push	r21
    18f4:	6f 93       	push	r22
    18f6:	7f 93       	push	r23
    18f8:	8f 93       	push	r24
    18fa:	9f 93       	push	r25
    18fc:	af 93       	push	r26
    18fe:	bf 93       	push	r27
    1900:	ef 93       	push	r30
    1902:	ff 93       	push	r31
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
	cli();
    190c:	f8 94       	cli
	static WORD timerTwoCount=0,receivePiTimer=0;
	

	if (timerTwoCount++>=PULSE_TIME) {
    190e:	80 91 a2 01 	lds	r24, 0x01A2
    1912:	90 91 a3 01 	lds	r25, 0x01A3
    1916:	21 e0       	ldi	r18, 0x01	; 1
    1918:	8f 31       	cpi	r24, 0x1F	; 31
    191a:	91 05       	cpc	r25, r1
    191c:	08 f4       	brcc	.+2      	; 0x1920 <__vector_11+0x3e>
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	90 93 a3 01 	sts	0x01A3, r25
    1926:	80 93 a2 01 	sts	0x01A2, r24
    192a:	22 23       	and	r18, r18
    192c:	79 f0       	breq	.+30     	; 0x194c <__vector_11+0x6a>
		theClock.addSecond(1);  
    192e:	88 e7       	ldi	r24, 0x78	; 120
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	61 e0       	ldi	r22, 0x01	; 1
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	0e 94 b3 05 	call	0xb66	; 0xb66 <_ZN5clock9addSecondEj>
		timerTwoCount = 0;
    193a:	10 92 a3 01 	sts	0x01A3, r1
    193e:	10 92 a2 01 	sts	0x01A2, r1
		pinDebug = (1 << bnD0);
    1942:	86 e2       	ldi	r24, 0x26	; 38
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	28 e0       	ldi	r18, 0x08	; 8
    1948:	fc 01       	movw	r30, r24
    194a:	20 83       	st	Z, r18
	}		//toggles green, left LED. Should be on half second.
	
	//Receive Timeout	
	if (flagReceivePi && receivePiTimer<TIMEOUT){receivePiTimer++;}								//no timteout yet
    194c:	80 91 76 01 	lds	r24, 0x0176
    1950:	88 23       	and	r24, r24
    1952:	91 f0       	breq	.+36     	; 0x1978 <__vector_11+0x96>
    1954:	80 91 a4 01 	lds	r24, 0x01A4
    1958:	90 91 a5 01 	lds	r25, 0x01A5
    195c:	f1 e0       	ldi	r31, 0x01	; 1
    195e:	8c 32       	cpi	r24, 0x2C	; 44
    1960:	9f 07       	cpc	r25, r31
    1962:	50 f4       	brcc	.+20     	; 0x1978 <__vector_11+0x96>
    1964:	80 91 a4 01 	lds	r24, 0x01A4
    1968:	90 91 a5 01 	lds	r25, 0x01A5
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	90 93 a5 01 	sts	0x01A5, r25
    1972:	80 93 a4 01 	sts	0x01A4, r24
    1976:	17 c0       	rjmp	.+46     	; 0x19a6 <__vector_11+0xc4>
	else if (flagReceivePi && receivePiTimer>=TIMEOUT){receivePiTimer=0;flagReceivePi=fFalse;}	//timeout
    1978:	80 91 76 01 	lds	r24, 0x0176
    197c:	88 23       	and	r24, r24
    197e:	79 f0       	breq	.+30     	; 0x199e <__vector_11+0xbc>
    1980:	80 91 a4 01 	lds	r24, 0x01A4
    1984:	90 91 a5 01 	lds	r25, 0x01A5
    1988:	21 e0       	ldi	r18, 0x01	; 1
    198a:	8c 32       	cpi	r24, 0x2C	; 44
    198c:	92 07       	cpc	r25, r18
    198e:	38 f0       	brcs	.+14     	; 0x199e <__vector_11+0xbc>
    1990:	10 92 a5 01 	sts	0x01A5, r1
    1994:	10 92 a4 01 	sts	0x01A4, r1
    1998:	10 92 76 01 	sts	0x0176, r1
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <__vector_11+0xc4>
	else {receivePiTimer=0;}																	//make sure this statys at 0 and is reset if a successful receive happens		
    199e:	10 92 a5 01 	sts	0x01A5, r1
    19a2:	10 92 a4 01 	sts	0x01A4, r1
	sei();
    19a6:	78 94       	sei
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	bf 91       	pop	r27
    19b2:	af 91       	pop	r26
    19b4:	9f 91       	pop	r25
    19b6:	8f 91       	pop	r24
    19b8:	7f 91       	pop	r23
    19ba:	6f 91       	pop	r22
    19bc:	5f 91       	pop	r21
    19be:	4f 91       	pop	r20
    19c0:	3f 91       	pop	r19
    19c2:	2f 91       	pop	r18
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <main>:


/*****************************************************************************************************************/
int main(void)
{	
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
    19da:	c4 56       	subi	r28, 0x64	; 100
    19dc:	d0 40       	sbci	r29, 0x00	; 0
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    19e8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    19ec:	83 e3       	ldi	r24, 0x33	; 51
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	0e 94 c0 0e 	call	0x1d80	; 0x1d80 <_Z7AppInitj>
	ResetDebug();	//clear LED's
    19f4:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z10ResetDebugv>
	InitTimer2();
    19f8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <_Z10InitTimer2v>
	TWI_init_master();		//make us the master of our own destiny
    19fc:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_Z15TWI_init_masterv>
	sei();
    1a00:	78 94       	sei
	Wait_sec(2);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z8Wait_secj>
	prtDebug|=(1 << bnD4);
    1a0a:	88 e2       	ldi	r24, 0x28	; 40
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	28 e2       	ldi	r18, 0x28	; 40
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	20 68       	ori	r18, 0x80	; 128
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
	// main program loop
	while (fTrue) {	
		
		//IF receiving from the Pi
		if (flagReceivePi){
    1a1c:	80 91 76 01 	lds	r24, 0x0176
    1a20:	88 23       	and	r24, r24
    1a22:	59 f0       	breq	.+22     	; 0x1a3a <main+0x6c>
			//Print0("Receiving.");
			ReceivePi();
    1a24:	0e 94 45 08 	call	0x108a	; 0x108a <_Z9ReceivePiv>
			prtDebug &= ~(1 << bnD1);
    1a28:	88 e2       	ldi	r24, 0x28	; 40
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	28 e2       	ldi	r18, 0x28	; 40
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	f9 01       	movw	r30, r18
    1a32:	20 81       	ld	r18, Z
    1a34:	2f 7e       	andi	r18, 0xEF	; 239
    1a36:	fc 01       	movw	r30, r24
    1a38:	20 83       	st	Z, r18
		}
		Wait_sec(1);
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z8Wait_secj>
		
		//Print the week, does implicit things
		if (flagSendWeek){
    1a42:	80 91 77 01 	lds	r24, 0x0177
    1a46:	88 23       	and	r24, r24
    1a48:	a1 f0       	breq	.+40     	; 0x1a72 <main+0xa4>
			theThermostat.takeReadings();
    1a4a:	8f e7       	ldi	r24, 0x7F	; 127
    1a4c:	91 e0       	ldi	r25, 0x01	; 1
    1a4e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN10thermostat12takeReadingsEv>
			theThermostat.PrintWeek();
    1a52:	8f e7       	ldi	r24, 0x7F	; 127
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN10thermostat9PrintWeekEv>
			theClock.setTime(7,0,0);
    1a5a:	88 e7       	ldi	r24, 0x78	; 120
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	67 e0       	ldi	r22, 0x07	; 7
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN5clock7setTimeEjjj>
			flagSendWeek=fFalse;
    1a6e:	10 92 77 01 	sts	0x0177, r1
		}
		
		//If we were asked for stats, send them back.
		if (flagAllStats){
    1a72:	80 91 75 01 	lds	r24, 0x0175
    1a76:	88 23       	and	r24, r24
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <main+0xae>
    1a7a:	16 c1       	rjmp	.+556    	; 0x1ca8 <main+0x2da>
			cli();
    1a7c:	f8 94       	cli
			//Print0("Taking readings.");
			prtDebug |= (1 << bnD2);
    1a7e:	88 e2       	ldi	r24, 0x28	; 40
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	28 e2       	ldi	r18, 0x28	; 40
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	20 62       	ori	r18, 0x20	; 32
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
			char printString[50];
			//Get all the data readings
			double adtTemp=GetTempADT();
    1a90:	0e 94 69 12 	call	0x24d2	; 0x24d2 <_Z10GetTempADTv>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	8b 83       	std	Y+3, r24	; 0x03
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	ad 83       	std	Y+5, r26	; 0x05
    1a9e:	be 83       	std	Y+6, r27	; 0x06
			double tiTemp=GetTempTI(MYUBRR);
    1aa0:	83 e3       	ldi	r24, 0x33	; 51
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <_Z9GetTempTIj>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8f 83       	std	Y+7, r24	; 0x07
    1aae:	98 87       	std	Y+8, r25	; 0x08
    1ab0:	a9 87       	std	Y+9, r26	; 0x09
    1ab2:	ba 87       	std	Y+10, r27	; 0x0a
			double thermTemp=GetTempTherm();
    1ab4:	0e 94 c6 10 	call	0x218c	; 0x218c <_Z12GetTempThermv>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8b 87       	std	Y+11, r24	; 0x0b
    1abe:	9c 87       	std	Y+12, r25	; 0x0c
    1ac0:	ad 87       	std	Y+13, r26	; 0x0d
    1ac2:	be 87       	std	Y+14, r27	; 0x0e
			double humidity=GetHumidity();
    1ac4:	0e 94 a1 11 	call	0x2342	; 0x2342 <_Z11GetHumidityv>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8f 87       	std	Y+15, r24	; 0x0f
    1ace:	98 8b       	std	Y+16, r25	; 0x10
    1ad0:	a9 8b       	std	Y+17, r26	; 0x11
    1ad2:	ba 8b       	std	Y+18, r27	; 0x12
			//Add the therm temp to the thermostat class long with the humidity.
			theThermostat.addDataPoint(thermTemp,humidity);
    1ad4:	8f e7       	ldi	r24, 0x7F	; 127
    1ad6:	91 e0       	ldi	r25, 0x01	; 1
    1ad8:	4b 85       	ldd	r20, Y+11	; 0x0b
    1ada:	5c 85       	ldd	r21, Y+12	; 0x0c
    1adc:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ade:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ae0:	0f 85       	ldd	r16, Y+15	; 0x0f
    1ae2:	18 89       	ldd	r17, Y+16	; 0x10
    1ae4:	29 89       	ldd	r18, Y+17	; 0x11
    1ae6:	3a 89       	ldd	r19, Y+18	; 0x12
    1ae8:	0e 94 af 03 	call	0x75e	; 0x75e <_ZN10thermostat12addDataPointEdd>
			//Declare strings to convert doubles into
			char adtStr[8],tiStr[8],thermStr[8],humidityStr[8];
			dtostrf(adtTemp,1,2,adtStr);
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	9c 81       	ldd	r25, Y+4	; 0x04
    1af0:	ad 81       	ldd	r26, Y+5	; 0x05
    1af2:	be 81       	ldd	r27, Y+6	; 0x06
    1af4:	fe 01       	movw	r30, r28
    1af6:	73 96       	adiw	r30, 0x13	; 19
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	41 e0       	ldi	r20, 0x01	; 1
    1afe:	22 e0       	ldi	r18, 0x02	; 2
    1b00:	8f 01       	movw	r16, r30
    1b02:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
			dtostrf(thermTemp,1,2,thermStr);
    1b06:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b08:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b0c:	be 85       	ldd	r27, Y+14	; 0x0e
    1b0e:	fe 01       	movw	r30, r28
    1b10:	b3 96       	adiw	r30, 0x23	; 35
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	22 e0       	ldi	r18, 0x02	; 2
    1b1a:	8f 01       	movw	r16, r30
    1b1c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
			dtostrf(tiTemp,1,2,tiStr);
    1b20:	8f 81       	ldd	r24, Y+7	; 0x07
    1b22:	98 85       	ldd	r25, Y+8	; 0x08
    1b24:	a9 85       	ldd	r26, Y+9	; 0x09
    1b26:	ba 85       	ldd	r27, Y+10	; 0x0a
    1b28:	fe 01       	movw	r30, r28
    1b2a:	7b 96       	adiw	r30, 0x1b	; 27
    1b2c:	bc 01       	movw	r22, r24
    1b2e:	cd 01       	movw	r24, r26
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	22 e0       	ldi	r18, 0x02	; 2
    1b34:	8f 01       	movw	r16, r30
    1b36:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
			dtostrf(humidity,1,2,humidityStr);
    1b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b3c:	98 89       	ldd	r25, Y+16	; 0x10
    1b3e:	a9 89       	ldd	r26, Y+17	; 0x11
    1b40:	ba 89       	ldd	r27, Y+18	; 0x12
    1b42:	fe 01       	movw	r30, r28
    1b44:	bb 96       	adiw	r30, 0x2b	; 43
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	22 e0       	ldi	r18, 0x02	; 2
    1b4e:	8f 01       	movw	r16, r30
    1b50:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <dtostrf>
			//Make the output string
			strcpy(printString,"AD");
    1b54:	ce 01       	movw	r24, r28
    1b56:	c3 96       	adiw	r24, 0x33	; 51
    1b58:	2e e6       	ldi	r18, 0x6E	; 110
    1b5a:	31 e0       	ldi	r19, 0x01	; 1
    1b5c:	43 e0       	ldi	r20, 0x03	; 3
    1b5e:	f9 01       	movw	r30, r18
    1b60:	00 80       	ld	r0, Z
    1b62:	2f 5f       	subi	r18, 0xFF	; 255
    1b64:	3f 4f       	sbci	r19, 0xFF	; 255
    1b66:	fc 01       	movw	r30, r24
    1b68:	00 82       	st	Z, r0
    1b6a:	01 96       	adiw	r24, 0x01	; 1
    1b6c:	41 50       	subi	r20, 0x01	; 1
    1b6e:	44 23       	and	r20, r20
    1b70:	b1 f7       	brne	.-20     	; 0x1b5e <main+0x190>
			strcat(printString,adtStr);
    1b72:	ce 01       	movw	r24, r28
    1b74:	c3 96       	adiw	r24, 0x33	; 51
    1b76:	9e 01       	movw	r18, r28
    1b78:	2d 5e       	subi	r18, 0xED	; 237
    1b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <strcat>
			strcat(printString,"/TI");
    1b82:	ce 01       	movw	r24, r28
    1b84:	c3 96       	adiw	r24, 0x33	; 51
    1b86:	9c 01       	movw	r18, r24
    1b88:	f9 01       	movw	r30, r18
    1b8a:	01 90       	ld	r0, Z+
    1b8c:	00 20       	and	r0, r0
    1b8e:	e9 f7       	brne	.-6      	; 0x1b8a <main+0x1bc>
    1b90:	cf 01       	movw	r24, r30
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	82 1b       	sub	r24, r18
    1b96:	93 0b       	sbc	r25, r19
    1b98:	9e 01       	movw	r18, r28
    1b9a:	2d 5c       	subi	r18, 0xCD	; 205
    1b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9e:	28 0f       	add	r18, r24
    1ba0:	39 1f       	adc	r19, r25
    1ba2:	8f e2       	ldi	r24, 0x2F	; 47
    1ba4:	94 e5       	ldi	r25, 0x54	; 84
    1ba6:	a9 e4       	ldi	r26, 0x49	; 73
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	f9 01       	movw	r30, r18
    1bac:	80 83       	st	Z, r24
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	a2 83       	std	Z+2, r26	; 0x02
    1bb2:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,tiStr);
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	c3 96       	adiw	r24, 0x33	; 51
    1bb8:	9e 01       	movw	r18, r28
    1bba:	25 5e       	subi	r18, 0xE5	; 229
    1bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbe:	b9 01       	movw	r22, r18
    1bc0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <strcat>
			strcat(printString,"/TH");
    1bc4:	ce 01       	movw	r24, r28
    1bc6:	c3 96       	adiw	r24, 0x33	; 51
    1bc8:	9c 01       	movw	r18, r24
    1bca:	f9 01       	movw	r30, r18
    1bcc:	01 90       	ld	r0, Z+
    1bce:	00 20       	and	r0, r0
    1bd0:	e9 f7       	brne	.-6      	; 0x1bcc <main+0x1fe>
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	82 1b       	sub	r24, r18
    1bd8:	93 0b       	sbc	r25, r19
    1bda:	9e 01       	movw	r18, r28
    1bdc:	2d 5c       	subi	r18, 0xCD	; 205
    1bde:	3f 4f       	sbci	r19, 0xFF	; 255
    1be0:	28 0f       	add	r18, r24
    1be2:	39 1f       	adc	r19, r25
    1be4:	8f e2       	ldi	r24, 0x2F	; 47
    1be6:	94 e5       	ldi	r25, 0x54	; 84
    1be8:	a8 e4       	ldi	r26, 0x48	; 72
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	f9 01       	movw	r30, r18
    1bee:	80 83       	st	Z, r24
    1bf0:	91 83       	std	Z+1, r25	; 0x01
    1bf2:	a2 83       	std	Z+2, r26	; 0x02
    1bf4:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,thermStr);
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	c3 96       	adiw	r24, 0x33	; 51
    1bfa:	9e 01       	movw	r18, r28
    1bfc:	2d 5d       	subi	r18, 0xDD	; 221
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	b9 01       	movw	r22, r18
    1c02:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <strcat>
			strcat(printString,"/HU");
    1c06:	ce 01       	movw	r24, r28
    1c08:	c3 96       	adiw	r24, 0x33	; 51
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	f9 01       	movw	r30, r18
    1c0e:	01 90       	ld	r0, Z+
    1c10:	00 20       	and	r0, r0
    1c12:	e9 f7       	brne	.-6      	; 0x1c0e <main+0x240>
    1c14:	cf 01       	movw	r24, r30
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	82 1b       	sub	r24, r18
    1c1a:	93 0b       	sbc	r25, r19
    1c1c:	9e 01       	movw	r18, r28
    1c1e:	2d 5c       	subi	r18, 0xCD	; 205
    1c20:	3f 4f       	sbci	r19, 0xFF	; 255
    1c22:	28 0f       	add	r18, r24
    1c24:	39 1f       	adc	r19, r25
    1c26:	8f e2       	ldi	r24, 0x2F	; 47
    1c28:	98 e4       	ldi	r25, 0x48	; 72
    1c2a:	a5 e5       	ldi	r26, 0x55	; 85
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	f9 01       	movw	r30, r18
    1c30:	80 83       	st	Z, r24
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	a2 83       	std	Z+2, r26	; 0x02
    1c36:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,humidityStr);
    1c38:	ce 01       	movw	r24, r28
    1c3a:	c3 96       	adiw	r24, 0x33	; 51
    1c3c:	9e 01       	movw	r18, r28
    1c3e:	25 5d       	subi	r18, 0xD5	; 213
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	b9 01       	movw	r22, r18
    1c44:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <strcat>
			//Drop debug indicator light, print the string, exit while clearing the string in memory
			prtDebug &= ~(1 << bnD2);
    1c48:	88 e2       	ldi	r24, 0x28	; 40
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	28 e2       	ldi	r18, 0x28	; 40
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	2f 7d       	andi	r18, 0xDF	; 223
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
			Print0(printString);
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	c3 96       	adiw	r24, 0x33	; 51
    1c5e:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
			Print0("XXX");
    1c62:	8f e0       	ldi	r24, 0x0F	; 15
    1c64:	91 e0       	ldi	r25, 0x01	; 1
    1c66:	0e 94 18 08 	call	0x1030	; 0x1030 <_Z6Print0Pc>
			flagAllStats=fFalse;
    1c6a:	10 92 75 01 	sts	0x0175, r1
			int i=0;
    1c6e:	1a 82       	std	Y+2, r1	; 0x02
    1c70:	19 82       	std	Y+1, r1	; 0x01
			for (i=0;i<50;i++){printString[i]=NULL;}
    1c72:	1a 82       	std	Y+2, r1	; 0x02
    1c74:	19 82       	std	Y+1, r1	; 0x01
    1c76:	0e c0       	rjmp	.+28     	; 0x1c94 <main+0x2c6>
    1c78:	9e 01       	movw	r18, r28
    1c7a:	2d 5c       	subi	r18, 0xCD	; 205
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	9a 81       	ldd	r25, Y+2	; 0x02
    1c82:	82 0f       	add	r24, r18
    1c84:	93 1f       	adc	r25, r19
    1c86:	fc 01       	movw	r30, r24
    1c88:	10 82       	st	Z, r1
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	9a 83       	std	Y+2, r25	; 0x02
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	21 e0       	ldi	r18, 0x01	; 1
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	82 33       	cpi	r24, 0x32	; 50
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	0c f0       	brlt	.+2      	; 0x1ca2 <main+0x2d4>
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	22 23       	and	r18, r18
    1ca4:	49 f7       	brne	.-46     	; 0x1c78 <main+0x2aa>
			sei();
    1ca6:	78 94       	sei
		}		
		
		//Power save. Should sleep for ~10 seconds
		//Print0(" Going to sleep... ");
		prtDebug &= ~(1 << bnD4);
    1ca8:	88 e2       	ldi	r24, 0x28	; 40
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	28 e2       	ldi	r18, 0x28	; 40
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	2f 77       	andi	r18, 0x7F	; 127
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18
		flagGoToSleep=fTrue;
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	80 93 74 01 	sts	0x0174, r24
		sleepCnt=0;
    1cc0:	10 92 73 01 	sts	0x0173, r1
    1cc4:	10 92 72 01 	sts	0x0172, r1
		SMCR = (1 << SM1)|(1 << SM0);
    1cc8:	83 e5       	ldi	r24, 0x53	; 83
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	26 e0       	ldi	r18, 0x06	; 6
    1cce:	fc 01       	movw	r30, r24
    1cd0:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    1cd2:	83 e5       	ldi	r24, 0x53	; 83
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	23 e5       	ldi	r18, 0x53	; 83
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	f9 01       	movw	r30, r18
    1cdc:	20 81       	ld	r18, Z
    1cde:	21 60       	ori	r18, 0x01	; 1
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	20 83       	st	Z, r18
		while (!flagReceivePi){
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <main+0x32c>
			asm volatile("SLEEP");
    1ce6:	88 95       	sleep
			sleepCnt++;
    1ce8:	80 91 72 01 	lds	r24, 0x0172
    1cec:	90 91 73 01 	lds	r25, 0x0173
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	90 93 73 01 	sts	0x0173, r25
    1cf6:	80 93 72 01 	sts	0x0172, r24
		prtDebug &= ~(1 << bnD4);
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (!flagReceivePi){
    1cfa:	90 91 76 01 	lds	r25, 0x0176
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	99 23       	and	r25, r25
    1d02:	09 f0       	breq	.+2      	; 0x1d06 <main+0x338>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	88 23       	and	r24, r24
    1d08:	71 f7       	brne	.-36     	; 0x1ce6 <main+0x318>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
    1d0a:	83 e5       	ldi	r24, 0x53	; 83
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	fc 01       	movw	r30, r24
    1d10:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
    1d12:	10 92 74 01 	sts	0x0174, r1
		prtDebug|=(1 << bnD4);
    1d16:	88 e2       	ldi	r24, 0x28	; 40
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	28 e2       	ldi	r18, 0x28	; 40
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	f9 01       	movw	r30, r18
    1d20:	20 81       	ld	r18, Z
    1d22:	20 68       	ori	r18, 0x80	; 128
    1d24:	fc 01       	movw	r30, r24
    1d26:	20 83       	st	Z, r18
		Wait_ms(10);
    1d28:	8a e0       	ldi	r24, 0x0A	; 10
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	TWI_init_master();		//make us the master of our own destiny
	sei();
	Wait_sec(2);
	prtDebug|=(1 << bnD4);
	// main program loop
	while (fTrue) {	
    1d30:	75 ce       	rjmp	.-790    	; 0x1a1c <main+0x4e>

00001d32 <_Z10DeviceInitv>:
	}  //end while fTrue
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
    1d3a:	81 e2       	ldi	r24, 0x21	; 33
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	fc 01       	movw	r30, r24
    1d40:	10 82       	st	Z, r1
	DDRB = 0;
    1d42:	84 e2       	ldi	r24, 0x24	; 36
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	10 82       	st	Z, r1
	DDRC = 0;
    1d4a:	87 e2       	ldi	r24, 0x27	; 39
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	fc 01       	movw	r30, r24
    1d50:	10 82       	st	Z, r1
	DDRD = 0;
    1d52:	8a e2       	ldi	r24, 0x2A	; 42
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	fc 01       	movw	r30, r24
    1d58:	10 82       	st	Z, r1

	PORTA = 0x00;
    1d5a:	82 e2       	ldi	r24, 0x22	; 34
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	fc 01       	movw	r30, r24
    1d60:	10 82       	st	Z, r1
	PORTB = 0x00;
    1d62:	85 e2       	ldi	r24, 0x25	; 37
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	fc 01       	movw	r30, r24
    1d68:	10 82       	st	Z, r1
	PORTC = 0x00;
    1d6a:	88 e2       	ldi	r24, 0x28	; 40
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	fc 01       	movw	r30, r24
    1d70:	10 82       	st	Z, r1
	PORTD = 0x00;
    1d72:	8b e2       	ldi	r24, 0x2B	; 43
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	fc 01       	movw	r30, r24
    1d78:	10 82       	st	Z, r1
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	08 95       	ret

00001d80 <_Z7AppInitj>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
    1d80:	cf 93       	push	r28
    1d82:	df 93       	push	r29
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <_Z7AppInitj+0x6>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <_Z7AppInitj+0x8>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <_Z7AppInitj+0xa>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
    1d92:	84 ec       	ldi	r24, 0xC4	; 196
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	2d 81       	ldd	r18, Y+5	; 0x05
    1d98:	fc 01       	movw	r30, r24
    1d9a:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
    1d9c:	85 ec       	ldi	r24, 0xC5	; 197
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	2d 81       	ldd	r18, Y+5	; 0x05
    1da2:	3e 81       	ldd	r19, Y+6	; 0x06
    1da4:	23 2f       	mov	r18, r19
    1da6:	33 27       	eor	r19, r19
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    1dac:	81 ec       	ldi	r24, 0xC1	; 193
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	28 e1       	ldi	r18, 0x18	; 24
    1db2:	fc 01       	movw	r30, r24
    1db4:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
    1db6:	82 ec       	ldi	r24, 0xC2	; 194
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	26 e0       	ldi	r18, 0x06	; 6
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
    1dc0:	87 e2       	ldi	r24, 0x27	; 39
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	27 e2       	ldi	r18, 0x27	; 39
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	f9 01       	movw	r30, r18
    1dca:	20 81       	ld	r18, Z
    1dcc:	28 6f       	ori	r18, 0xF8	; 248
    1dce:	fc 01       	movw	r30, r24
    1dd0:	20 83       	st	Z, r18
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    1dd2:	84 e0       	ldi	r24, 0x04	; 4
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	1d c0       	rjmp	.+58     	; 0x1e16 <_Z7AppInitj+0x96>
		prtDebug |= (1 << i);
    1ddc:	88 e2       	ldi	r24, 0x28	; 40
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	28 e2       	ldi	r18, 0x28	; 40
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	f9 01       	movw	r30, r18
    1de6:	20 81       	ld	r18, Z
    1de8:	42 2f       	mov	r20, r18
    1dea:	21 e0       	ldi	r18, 0x01	; 1
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	09 80       	ldd	r0, Y+1	; 0x01
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <_Z7AppInitj+0x76>
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <_Z7AppInitj+0x72>
    1dfa:	24 2b       	or	r18, r20
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	20 83       	st	Z, r18
		Wait_ms(200);
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
		ResetDebug();
    1e08:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z10ResetDebugv>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	01 96       	adiw	r24, 0x01	; 1
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	21 e0       	ldi	r18, 0x01	; 1
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1c:	88 30       	cpi	r24, 0x08	; 8
    1e1e:	91 05       	cpc	r25, r1
    1e20:	0c f0       	brlt	.+2      	; 0x1e24 <_Z7AppInitj+0xa4>
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	22 23       	and	r18, r18
    1e26:	d1 f6       	brne	.-76     	; 0x1ddc <_Z7AppInitj+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    1e28:	87 e0       	ldi	r24, 0x07	; 7
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9c 83       	std	Y+4, r25	; 0x04
    1e2e:	8b 83       	std	Y+3, r24	; 0x03
    1e30:	1d c0       	rjmp	.+58     	; 0x1e6c <_Z7AppInitj+0xec>
		prtDebug |= (1 << j);
    1e32:	88 e2       	ldi	r24, 0x28	; 40
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	28 e2       	ldi	r18, 0x28	; 40
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	f9 01       	movw	r30, r18
    1e3c:	20 81       	ld	r18, Z
    1e3e:	42 2f       	mov	r20, r18
    1e40:	21 e0       	ldi	r18, 0x01	; 1
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	0b 80       	ldd	r0, Y+3	; 0x03
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <_Z7AppInitj+0xcc>
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <_Z7AppInitj+0xc8>
    1e50:	24 2b       	or	r18, r20
    1e52:	fc 01       	movw	r30, r24
    1e54:	20 83       	st	Z, r18
		Wait_ms(200);
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
		ResetDebug();
    1e5e:	0e 94 0e 13 	call	0x261c	; 0x261c <_Z10ResetDebugv>
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	9c 81       	ldd	r25, Y+4	; 0x04
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	21 e0       	ldi	r18, 0x01	; 1
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	84 30       	cpi	r24, 0x04	; 4
    1e74:	91 05       	cpc	r25, r1
    1e76:	0c f4       	brge	.+2      	; 0x1e7a <_Z7AppInitj+0xfa>
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	22 23       	and	r18, r18
    1e7c:	d1 f6       	brne	.-76     	; 0x1e32 <_Z7AppInitj+0xb2>
		Wait_ms(200);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
    1e7e:	84 e2       	ldi	r24, 0x24	; 36
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	24 e2       	ldi	r18, 0x24	; 36
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	f9 01       	movw	r30, r18
    1e88:	20 81       	ld	r18, Z
    1e8a:	20 6b       	ori	r18, 0xB0	; 176
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
    1e90:	85 e2       	ldi	r24, 0x25	; 37
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	25 e2       	ldi	r18, 0x25	; 37
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	f9 01       	movw	r30, r18
    1e9a:	20 81       	ld	r18, Z
    1e9c:	20 69       	ori	r18, 0x90	; 144
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
    1ea2:	85 e2       	ldi	r24, 0x25	; 37
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	25 e2       	ldi	r18, 0x25	; 37
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	f9 01       	movw	r30, r18
    1eac:	20 81       	ld	r18, Z
    1eae:	2f 7b       	andi	r18, 0xBF	; 191
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
    1eb4:	85 e2       	ldi	r24, 0x25	; 37
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	25 e2       	ldi	r18, 0x25	; 37
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	f9 01       	movw	r30, r18
    1ebe:	20 81       	ld	r18, Z
    1ec0:	2f 7d       	andi	r18, 0xDF	; 223
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
    1ec6:	8c e4       	ldi	r24, 0x4C	; 76
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	2c e4       	ldi	r18, 0x4C	; 76
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	f9 01       	movw	r30, r18
    1ed0:	20 81       	ld	r18, Z
    1ed2:	23 65       	ori	r18, 0x53	; 83
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM1)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
    1ed8:	84 e6       	ldi	r24, 0x64	; 100
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	24 e6       	ldi	r18, 0x64	; 100
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	f9 01       	movw	r30, r18
    1ee2:	20 81       	ld	r18, Z
    1ee4:	2d 6f       	ori	r18, 0xFD	; 253
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
    1eea:	89 e6       	ldi	r24, 0x69	; 105
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	29 e6       	ldi	r18, 0x69	; 105
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	f9 01       	movw	r30, r18
    1ef4:	20 81       	ld	r18, Z
    1ef6:	20 63       	ori	r18, 0x30	; 48
    1ef8:	fc 01       	movw	r30, r24
    1efa:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
    1efc:	8d e3       	ldi	r24, 0x3D	; 61
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	24 e0       	ldi	r18, 0x04	; 4
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 83       	st	Z, r18
	
	//Initialize Booleans
	flagGoToSleep=fFalse;
    1f06:	10 92 74 01 	sts	0x0174, r1
	flagAllStats=fFalse;
    1f0a:	10 92 75 01 	sts	0x0175, r1
	flagReceivePi=fFalse;
    1f0e:	10 92 76 01 	sts	0x0176, r1
	flagSendWeek=fFalse;
    1f12:	10 92 77 01 	sts	0x0177, r1
}
    1f16:	26 96       	adiw	r28, 0x06	; 6
    1f18:	0f b6       	in	r0, 0x3f	; 63
    1f1a:	f8 94       	cli
    1f1c:	de bf       	out	0x3e, r29	; 62
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	cd bf       	out	0x3d, r28	; 61
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	08 95       	ret

00001f28 <_Z10InitTimer2v>:

/**********************************************************************************************************************************/
void InitTimer2(){
    1f28:	cf 93       	push	r28
    1f2a:	df 93       	push	r29
    1f2c:	cd b7       	in	r28, 0x3d	; 61
    1f2e:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
    1f30:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
    1f32:	84 e6       	ldi	r24, 0x64	; 100
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	24 e6       	ldi	r18, 0x64	; 100
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	f9 01       	movw	r30, r18
    1f3c:	20 81       	ld	r18, Z
    1f3e:	2f 7b       	andi	r18, 0xBF	; 191
    1f40:	fc 01       	movw	r30, r24
    1f42:	20 83       	st	Z, r18
	Wait_ms(1);	
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
    1f4c:	81 eb       	ldi	r24, 0xB1	; 177
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	21 eb       	ldi	r18, 0xB1	; 177
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	f9 01       	movw	r30, r18
    1f56:	20 81       	ld	r18, Z
    1f58:	27 60       	ori	r18, 0x07	; 7
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
    1f5e:	86 eb       	ldi	r24, 0xB6	; 182
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	fc 01       	movw	r30, r24
    1f64:	80 81       	ld	r24, Z
    1f66:	88 2f       	mov	r24, r24
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	81 71       	andi	r24, 0x11	; 17
    1f6c:	90 70       	andi	r25, 0x00	; 0
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <_Z10InitTimer2v+0x4e>
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	22 23       	and	r18, r18
    1f78:	91 f7       	brne	.-28     	; 0x1f5e <_Z10InitTimer2v+0x36>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
    1f7a:	87 e3       	ldi	r24, 0x37	; 55
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	21 e0       	ldi	r18, 0x01	; 1
    1f80:	fc 01       	movw	r30, r24
    1f82:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
    1f84:	80 e7       	ldi	r24, 0x70	; 112
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	21 e0       	ldi	r18, 0x01	; 1
    1f8a:	fc 01       	movw	r30, r24
    1f8c:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
    1f8e:	78 94       	sei
}
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <_Z9GetTempTIj>:
/**********************************************************************************************************************************/

double GetTempTI(unsigned int ubrr)
{
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	28 97       	sbiw	r28, 0x08	; 8
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	98 87       	std	Y+8, r25	; 0x08
    1fac:	8f 83       	std	Y+7, r24	; 0x07
	WORD tempDataTI = 0;
    1fae:	1a 82       	std	Y+2, r1	; 0x02
    1fb0:	19 82       	std	Y+1, r1	; 0x01
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
    1fb2:	84 e6       	ldi	r24, 0x64	; 100
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	24 e6       	ldi	r18, 0x64	; 100
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	20 81       	ld	r18, Z
    1fbe:	2f 7e       	andi	r18, 0xEF	; 239
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
    1fc4:	8a e0       	ldi	r24, 0x0A	; 10
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	UBRR1 = 0;
    1fcc:	8c ec       	ldi	r24, 0xCC	; 204
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	11 82       	std	Z+1, r1	; 0x01
    1fd4:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
    1fd6:	8a e2       	ldi	r24, 0x2A	; 42
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	2a e2       	ldi	r18, 0x2A	; 42
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	f9 01       	movw	r30, r18
    1fe0:	20 81       	ld	r18, Z
    1fe2:	20 63       	ori	r18, 0x30	; 48
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
    1fe8:	8b e2       	ldi	r24, 0x2B	; 43
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	2b e2       	ldi	r18, 0x2B	; 43
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	20 81       	ld	r18, Z
    1ff4:	20 63       	ori	r18, 0x30	; 48
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
    1ffa:	8a ec       	ldi	r24, 0xCA	; 202
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	20 ec       	ldi	r18, 0xC0	; 192
    2000:	fc 01       	movw	r30, r24
    2002:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
    2004:	89 ec       	ldi	r24, 0xC9	; 201
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	28 e1       	ldi	r18, 0x18	; 24
    200a:	fc 01       	movw	r30, r24
    200c:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
    200e:	8c ec       	ldi	r24, 0xCC	; 204
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	2f 81       	ldd	r18, Y+7	; 0x07
    2014:	fc 01       	movw	r30, r24
    2016:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
    2018:	8d ec       	ldi	r24, 0xCD	; 205
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	2f 81       	ldd	r18, Y+7	; 0x07
    201e:	38 85       	ldd	r19, Y+8	; 0x08
    2020:	23 2f       	mov	r18, r19
    2022:	33 27       	eor	r19, r19
    2024:	fc 01       	movw	r30, r24
    2026:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
    2028:	00 00       	nop
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	80 72       	andi	r24, 0x20	; 32
    2038:	90 70       	andi	r25, 0x00	; 0
    203a:	21 e0       	ldi	r18, 0x01	; 1
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	09 f0       	breq	.+2      	; 0x2042 <_Z9GetTempTIj+0xac>
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	22 23       	and	r18, r18
    2044:	91 f7       	brne	.-28     	; 0x202a <_Z9GetTempTIj+0x94>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
    2046:	8b e2       	ldi	r24, 0x2B	; 43
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	2b e2       	ldi	r18, 0x2B	; 43
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	f9 01       	movw	r30, r18
    2050:	20 81       	ld	r18, Z
    2052:	2f 7d       	andi	r18, 0xDF	; 223
    2054:	fc 01       	movw	r30, r24
    2056:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
    2058:	8e ec       	ldi	r24, 0xCE	; 206
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	fc 01       	movw	r30, r24
    205e:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
    2060:	00 00       	nop
    2062:	88 ec       	ldi	r24, 0xC8	; 200
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	fc 01       	movw	r30, r24
    2068:	80 81       	ld	r24, Z
    206a:	80 95       	com	r24
    206c:	88 1f       	adc	r24, r24
    206e:	88 27       	eor	r24, r24
    2070:	88 1f       	adc	r24, r24
    2072:	88 23       	and	r24, r24
    2074:	b1 f7       	brne	.-20     	; 0x2062 <_Z9GetTempTIj+0xcc>
	tempDataTI = (UDR1 << 8);	//first byte of data
    2076:	8e ec       	ldi	r24, 0xCE	; 206
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	fc 01       	movw	r30, r24
    207c:	80 81       	ld	r24, Z
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	98 2f       	mov	r25, r24
    2084:	88 27       	eor	r24, r24
    2086:	9a 83       	std	Y+2, r25	; 0x02
    2088:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
    208a:	8e ec       	ldi	r24, 0xCE	; 206
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
    2092:	00 00       	nop
    2094:	88 ec       	ldi	r24, 0xC8	; 200
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	fc 01       	movw	r30, r24
    209a:	80 81       	ld	r24, Z
    209c:	80 95       	com	r24
    209e:	88 1f       	adc	r24, r24
    20a0:	88 27       	eor	r24, r24
    20a2:	88 1f       	adc	r24, r24
    20a4:	88 23       	and	r24, r24
    20a6:	b1 f7       	brne	.-20     	; 0x2094 <_Z9GetTempTIj+0xfe>
	tempDataTI |= UDR1;	
    20a8:	8e ec       	ldi	r24, 0xCE	; 206
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	fc 01       	movw	r30, r24
    20ae:	80 81       	ld	r24, Z
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	29 81       	ldd	r18, Y+1	; 0x01
    20b6:	3a 81       	ldd	r19, Y+2	; 0x02
    20b8:	82 2b       	or	r24, r18
    20ba:	93 2b       	or	r25, r19
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
    20c0:	8b e2       	ldi	r24, 0x2B	; 43
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	2b e2       	ldi	r18, 0x2B	; 43
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	f9 01       	movw	r30, r18
    20ca:	20 81       	ld	r18, Z
    20cc:	20 63       	ori	r18, 0x30	; 48
    20ce:	fc 01       	movw	r30, r24
    20d0:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
    20d2:	8a ec       	ldi	r24, 0xCA	; 202
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	fc 01       	movw	r30, r24
    20d8:	10 82       	st	Z, r1
	UCSR1B = 0;
    20da:	89 ec       	ldi	r24, 0xC9	; 201
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	fc 01       	movw	r30, r24
    20e0:	10 82       	st	Z, r1
	UCSR1A = 0;
    20e2:	88 ec       	ldi	r24, 0xC8	; 200
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	10 82       	st	Z, r1
	UBRR1L = 0;
    20ea:	8c ec       	ldi	r24, 0xCC	; 204
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	10 82       	st	Z, r1
	UBRR1H = 0;
    20f2:	8d ec       	ldi	r24, 0xCD	; 205
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	fc 01       	movw	r30, r24
    20f8:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
    20fa:	84 e6       	ldi	r24, 0x64	; 100
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	24 e6       	ldi	r18, 0x64	; 100
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	f9 01       	movw	r30, r18
    2104:	20 81       	ld	r18, Z
    2106:	20 61       	ori	r18, 0x10	; 16
    2108:	fc 01       	movw	r30, r24
    210a:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	double dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	96 95       	lsr	r25
    2116:	87 95       	ror	r24
    2118:	cc 01       	movw	r24, r24
    211a:	a0 e0       	ldi	r26, 0x00	; 0
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	bc 01       	movw	r22, r24
    2120:	cd 01       	movw	r24, r26
    2122:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e0       	ldi	r20, 0x00	; 0
    2134:	5d e3       	ldi	r21, 0x3D	; 61
    2136:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	26 e6       	ldi	r18, 0x66	; 102
    2144:	36 e6       	ldi	r19, 0x66	; 102
    2146:	46 ee       	ldi	r20, 0xE6	; 230
    2148:	5f e3       	ldi	r21, 0x3F	; 63
    214a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	52 e4       	ldi	r21, 0x42	; 66
    215e:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	8b 83       	std	Y+3, r24	; 0x03
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	ad 83       	std	Y+5, r26	; 0x05
    216c:	be 83       	std	Y+6, r27	; 0x06

	return dataTI;	
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	ad 81       	ldd	r26, Y+5	; 0x05
    2174:	be 81       	ldd	r27, Y+6	; 0x06
		
}
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	28 96       	adiw	r28, 0x08	; 8
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <_Z12GetTempThermv>:

/**********************************************************************************************************************************/
double  GetTempTherm()
{
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	28 97       	sbiw	r28, 0x08	; 8
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
    21a0:	1c 82       	std	Y+4, r1	; 0x04
    21a2:	1b 82       	std	Y+3, r1	; 0x03
	double dataTherm = 0;
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	dc 01       	movw	r26, r24
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	af 83       	std	Y+7, r26	; 0x07
    21b0:	b8 87       	std	Y+8, r27	; 0x08
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
    21b2:	84 e6       	ldi	r24, 0x64	; 100
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	24 e6       	ldi	r18, 0x64	; 100
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	f9 01       	movw	r30, r18
    21bc:	20 81       	ld	r18, Z
    21be:	2e 7f       	andi	r18, 0xFE	; 254
    21c0:	fc 01       	movw	r30, r24
    21c2:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
    21c4:	8c e7       	ldi	r24, 0x7C	; 124
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	2c e7       	ldi	r18, 0x7C	; 124
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	f9 01       	movw	r30, r18
    21ce:	20 81       	ld	r18, Z
    21d0:	22 64       	ori	r18, 0x42	; 66
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
    21d6:	8a e7       	ldi	r24, 0x7A	; 122
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	2a e7       	ldi	r18, 0x7A	; 122
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	f9 01       	movw	r30, r18
    21e0:	20 81       	ld	r18, Z
    21e2:	27 68       	ori	r18, 0x87	; 135
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    21e8:	8e e7       	ldi	r24, 0x7E	; 126
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	2b ef       	ldi	r18, 0xFB	; 251
    21ee:	fc 01       	movw	r30, r24
    21f0:	20 83       	st	Z, r18
	Wait_ms(10);
    21f2:	8a e0       	ldi	r24, 0x0A	; 10
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	19 82       	std	Y+1, r1	; 0x01
    21fe:	1c c0       	rjmp	.+56     	; 0x2238 <_Z12GetTempThermv+0xac>
    2200:	8a e7       	ldi	r24, 0x7A	; 122
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	2a e7       	ldi	r18, 0x7A	; 122
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	f9 01       	movw	r30, r18
    220a:	20 81       	ld	r18, Z
    220c:	20 64       	ori	r18, 0x40	; 64
    220e:	fc 01       	movw	r30, r24
    2210:	20 83       	st	Z, r18
    2212:	8a e7       	ldi	r24, 0x7A	; 122
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	fc 01       	movw	r30, r24
    2218:	80 81       	ld	r24, Z
    221a:	88 2f       	mov	r24, r24
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	80 74       	andi	r24, 0x40	; 64
    2220:	90 70       	andi	r25, 0x00	; 0
    2222:	21 e0       	ldi	r18, 0x01	; 1
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	09 f4       	brne	.+2      	; 0x222a <_Z12GetTempThermv+0x9e>
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	22 23       	and	r18, r18
    222c:	91 f7       	brne	.-28     	; 0x2212 <_Z12GetTempThermv+0x86>
    222e:	89 81       	ldd	r24, Y+1	; 0x01
    2230:	9a 81       	ldd	r25, Y+2	; 0x02
    2232:	01 96       	adiw	r24, 0x01	; 1
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	21 e0       	ldi	r18, 0x01	; 1
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	91 05       	cpc	r25, r1
    2242:	0c f0       	brlt	.+2      	; 0x2246 <_Z12GetTempThermv+0xba>
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	22 23       	and	r18, r18
    2248:	d9 f6       	brne	.-74     	; 0x2200 <_Z12GetTempThermv+0x74>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
    224a:	88 e7       	ldi	r24, 0x78	; 120
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	fc 01       	movw	r30, r24
    2250:	80 81       	ld	r24, Z
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
    225a:	89 e7       	ldi	r24, 0x79	; 121
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	80 81       	ld	r24, Z
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	98 2f       	mov	r25, r24
    2268:	88 27       	eor	r24, r24
    226a:	2b 81       	ldd	r18, Y+3	; 0x03
    226c:	3c 81       	ldd	r19, Y+4	; 0x04
    226e:	82 2b       	or	r24, r18
    2270:	93 2b       	or	r25, r19
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    2276:	8a e7       	ldi	r24, 0x7A	; 122
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	fc 01       	movw	r30, r24
    227c:	10 82       	st	Z, r1
	ADMUX = 0;
    227e:	8c e7       	ldi	r24, 0x7C	; 124
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	fc 01       	movw	r30, r24
    2284:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
    2286:	8e e7       	ldi	r24, 0x7E	; 126
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	2e e7       	ldi	r18, 0x7E	; 126
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	f9 01       	movw	r30, r18
    2290:	20 81       	ld	r18, Z
    2292:	24 60       	ori	r18, 0x04	; 4
    2294:	fc 01       	movw	r30, r24
    2296:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    2298:	84 e6       	ldi	r24, 0x64	; 100
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	24 e6       	ldi	r18, 0x64	; 100
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	f9 01       	movw	r30, r18
    22a2:	20 81       	ld	r18, Z
    22a4:	21 60       	ori	r18, 0x01	; 1
    22a6:	fc 01       	movw	r30, r24
    22a8:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
    22aa:	22 ef       	ldi	r18, 0xF2	; 242
    22ac:	32 e0       	ldi	r19, 0x02	; 2
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	a9 01       	movw	r20, r18
    22b4:	48 1b       	sub	r20, r24
    22b6:	59 0b       	sbc	r21, r25
    22b8:	ca 01       	movw	r24, r20
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	cc 01       	movw	r24, r24
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	28 e4       	ldi	r18, 0x48	; 72
    22da:	31 ee       	ldi	r19, 0xE1	; 225
    22dc:	4c e1       	ldi	r20, 0x1C	; 28
    22de:	51 e4       	ldi	r21, 0x41	; 65
    22e0:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	8d 83       	std	Y+5, r24	; 0x05
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	af 83       	std	Y+7, r26	; 0x07
    22ee:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
    22f0:	6d 81       	ldd	r22, Y+5	; 0x05
    22f2:	7e 81       	ldd	r23, Y+6	; 0x06
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	98 85       	ldd	r25, Y+8	; 0x08
    22f8:	26 e6       	ldi	r18, 0x66	; 102
    22fa:	36 e6       	ldi	r19, 0x66	; 102
    22fc:	46 ee       	ldi	r20, 0xE6	; 230
    22fe:	5f e3       	ldi	r21, 0x3F	; 63
    2300:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	52 e4       	ldi	r21, 0x42	; 66
    2314:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	8d 83       	std	Y+5, r24	; 0x05
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	af 83       	std	Y+7, r26	; 0x07
    2322:	b8 87       	std	Y+8, r27	; 0x08
	
	return dataTherm;
    2324:	8d 81       	ldd	r24, Y+5	; 0x05
    2326:	9e 81       	ldd	r25, Y+6	; 0x06
    2328:	af 81       	ldd	r26, Y+7	; 0x07
    232a:	b8 85       	ldd	r27, Y+8	; 0x08

		
}
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	28 96       	adiw	r28, 0x08	; 8
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <_Z11GetHumidityv>:

/**********************************************************************************************************************************/	
double GetHumidity()
{
    2342:	cf 93       	push	r28
    2344:	df 93       	push	r29
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	28 97       	sbiw	r28, 0x08	; 8
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
    2356:	84 e6       	ldi	r24, 0x64	; 100
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	24 e6       	ldi	r18, 0x64	; 100
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	f9 01       	movw	r30, r18
    2360:	20 81       	ld	r18, Z
    2362:	2e 7f       	andi	r18, 0xFE	; 254
    2364:	fc 01       	movw	r30, r24
    2366:	20 83       	st	Z, r18
	Wait_ms(10);						
    2368:	8a e0       	ldi	r24, 0x0A	; 10
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
    2370:	8c e7       	ldi	r24, 0x7C	; 124
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	2c e7       	ldi	r18, 0x7C	; 124
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	f9 01       	movw	r30, r18
    237a:	20 81       	ld	r18, Z
    237c:	21 64       	ori	r18, 0x41	; 65
    237e:	fc 01       	movw	r30, r24
    2380:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
    2382:	8a e7       	ldi	r24, 0x7A	; 122
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	2a e7       	ldi	r18, 0x7A	; 122
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	f9 01       	movw	r30, r18
    238c:	20 81       	ld	r18, Z
    238e:	27 68       	ori	r18, 0x87	; 135
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    2394:	8e e7       	ldi	r24, 0x7E	; 126
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	2d ef       	ldi	r18, 0xFD	; 253
    239a:	fc 01       	movw	r30, r24
    239c:	20 83       	st	Z, r18
	Wait_ms(10);
    239e:	8a e0       	ldi	r24, 0x0A	; 10
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    23a6:	1a 82       	std	Y+2, r1	; 0x02
    23a8:	19 82       	std	Y+1, r1	; 0x01
    23aa:	1c c0       	rjmp	.+56     	; 0x23e4 <_Z11GetHumidityv+0xa2>
    23ac:	8a e7       	ldi	r24, 0x7A	; 122
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	2a e7       	ldi	r18, 0x7A	; 122
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	f9 01       	movw	r30, r18
    23b6:	20 81       	ld	r18, Z
    23b8:	20 64       	ori	r18, 0x40	; 64
    23ba:	fc 01       	movw	r30, r24
    23bc:	20 83       	st	Z, r18
    23be:	8a e7       	ldi	r24, 0x7A	; 122
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	fc 01       	movw	r30, r24
    23c4:	80 81       	ld	r24, Z
    23c6:	88 2f       	mov	r24, r24
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	80 74       	andi	r24, 0x40	; 64
    23cc:	90 70       	andi	r25, 0x00	; 0
    23ce:	21 e0       	ldi	r18, 0x01	; 1
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <_Z11GetHumidityv+0x94>
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	22 23       	and	r18, r18
    23d8:	91 f7       	brne	.-28     	; 0x23be <_Z11GetHumidityv+0x7c>
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	9a 81       	ldd	r25, Y+2	; 0x02
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	21 e0       	ldi	r18, 0x01	; 1
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	9a 81       	ldd	r25, Y+2	; 0x02
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	91 05       	cpc	r25, r1
    23ee:	0c f0       	brlt	.+2      	; 0x23f2 <_Z11GetHumidityv+0xb0>
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	22 23       	and	r18, r18
    23f4:	d9 f6       	brne	.-74     	; 0x23ac <_Z11GetHumidityv+0x6a>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
    23f6:	88 e7       	ldi	r24, 0x78	; 120
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	fc 01       	movw	r30, r24
    23fc:	80 81       	ld	r24, Z
    23fe:	88 2f       	mov	r24, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c 83       	std	Y+4, r25	; 0x04
    2404:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
    2406:	89 e7       	ldi	r24, 0x79	; 121
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	fc 01       	movw	r30, r24
    240c:	80 81       	ld	r24, Z
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 2f       	mov	r25, r24
    2414:	88 27       	eor	r24, r24
    2416:	2b 81       	ldd	r18, Y+3	; 0x03
    2418:	3c 81       	ldd	r19, Y+4	; 0x04
    241a:	82 2b       	or	r24, r18
    241c:	93 2b       	or	r25, r19
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    2422:	8a e7       	ldi	r24, 0x7A	; 122
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	fc 01       	movw	r30, r24
    2428:	10 82       	st	Z, r1
	ADMUX = 0;
    242a:	8c e7       	ldi	r24, 0x7C	; 124
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	fc 01       	movw	r30, r24
    2430:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
    2432:	8e e7       	ldi	r24, 0x7E	; 126
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	2e e7       	ldi	r18, 0x7E	; 126
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	f9 01       	movw	r30, r18
    243c:	20 81       	ld	r18, Z
    243e:	22 60       	ori	r18, 0x02	; 2
    2440:	fc 01       	movw	r30, r24
    2442:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    2444:	84 e6       	ldi	r24, 0x64	; 100
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	24 e6       	ldi	r18, 0x64	; 100
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	f9 01       	movw	r30, r18
    244e:	20 81       	ld	r18, Z
    2450:	21 60       	ori	r18, 0x01	; 1
    2452:	fc 01       	movw	r30, r24
    2454:	20 83       	st	Z, r18

	//Get actual humidity
	double humidityResultDouble = (double)humidityResult;
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	cc 01       	movw	r24, r24
    245c:	a0 e0       	ldi	r26, 0x00	; 0
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	af 83       	std	Y+7, r26	; 0x07
    2472:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
    2474:	6d 81       	ldd	r22, Y+5	; 0x05
    2476:	7e 81       	ldd	r23, Y+6	; 0x06
    2478:	8f 81       	ldd	r24, Y+7	; 0x07
    247a:	98 85       	ldd	r25, Y+8	; 0x08
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4b e1       	ldi	r20, 0x1B	; 27
    2482:	53 e4       	ldi	r21, 0x43	; 67
    2484:	0e 94 bd 13 	call	0x277a	; 0x277a <__subsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8d 83       	std	Y+5, r24	; 0x05
    248e:	9e 83       	std	Y+6, r25	; 0x06
    2490:	af 83       	std	Y+7, r26	; 0x07
    2492:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble /= HUMIDITY_CONVERTER;	//get actual humidity	
    2494:	6d 81       	ldd	r22, Y+5	; 0x05
    2496:	7e 81       	ldd	r23, Y+6	; 0x06
    2498:	8f 81       	ldd	r24, Y+7	; 0x07
    249a:	98 85       	ldd	r25, Y+8	; 0x08
    249c:	23 e7       	ldi	r18, 0x73	; 115
    249e:	38 e6       	ldi	r19, 0x68	; 104
    24a0:	4d e9       	ldi	r20, 0x9D	; 157
    24a2:	50 e4       	ldi	r21, 0x40	; 64
    24a4:	0e 94 26 14 	call	0x284c	; 0x284c <__divsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	af 83       	std	Y+7, r26	; 0x07
    24b2:	b8 87       	std	Y+8, r27	; 0x08
	
	return humidityResultDouble;
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	9e 81       	ldd	r25, Y+6	; 0x06
    24b8:	af 81       	ldd	r26, Y+7	; 0x07
    24ba:	b8 85       	ldd	r27, Y+8	; 0x08
}
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	28 96       	adiw	r28, 0x08	; 8
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <_Z10GetTempADTv>:
/**********************************************************************************************************************************/	

double GetTempADT()
{
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <_Z10GetTempADTv+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <_Z10GetTempADTv+0x8>
    24da:	00 d0       	rcall	.+0      	; 0x24dc <_Z10GetTempADTv+0xa>
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
	WORD rawDataAD = 0;
    24e0:	1a 82       	std	Y+2, r1	; 0x02
    24e2:	19 82       	std	Y+1, r1	; 0x01
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
    24e4:	84 e6       	ldi	r24, 0x64	; 100
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	24 e6       	ldi	r18, 0x64	; 100
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	f9 01       	movw	r30, r18
    24ee:	20 81       	ld	r18, Z
    24f0:	2b 7f       	andi	r18, 0xFB	; 251
    24f2:	fc 01       	movw	r30, r24
    24f4:	20 83       	st	Z, r18
	Wait_ms(10);
    24f6:	8a e0       	ldi	r24, 0x0A	; 10
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
    24fe:	85 e2       	ldi	r24, 0x25	; 37
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	25 e2       	ldi	r18, 0x25	; 37
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	f9 01       	movw	r30, r18
    2508:	20 81       	ld	r18, Z
    250a:	2f 7e       	andi	r18, 0xEF	; 239
    250c:	fc 01       	movw	r30, r24
    250e:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
    2510:	8e e4       	ldi	r24, 0x4E	; 78
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	fc 01       	movw	r30, r24
    2516:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
    2518:	00 00       	nop
    251a:	8d e4       	ldi	r24, 0x4D	; 77
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	fc 01       	movw	r30, r24
    2520:	80 81       	ld	r24, Z
    2522:	80 95       	com	r24
    2524:	88 1f       	adc	r24, r24
    2526:	88 27       	eor	r24, r24
    2528:	88 1f       	adc	r24, r24
    252a:	88 23       	and	r24, r24
    252c:	b1 f7       	brne	.-20     	; 0x251a <_Z10GetTempADTv+0x48>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
    252e:	8e e4       	ldi	r24, 0x4E	; 78
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	fc 01       	movw	r30, r24
    2534:	80 81       	ld	r24, Z
    2536:	88 2f       	mov	r24, r24
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	98 2f       	mov	r25, r24
    253c:	88 27       	eor	r24, r24
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
    2542:	8e e4       	ldi	r24, 0x4E	; 78
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	fc 01       	movw	r30, r24
    2548:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
    254a:	00 00       	nop
    254c:	8d e4       	ldi	r24, 0x4D	; 77
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	fc 01       	movw	r30, r24
    2552:	80 81       	ld	r24, Z
    2554:	80 95       	com	r24
    2556:	88 1f       	adc	r24, r24
    2558:	88 27       	eor	r24, r24
    255a:	88 1f       	adc	r24, r24
    255c:	88 23       	and	r24, r24
    255e:	b1 f7       	brne	.-20     	; 0x254c <_Z10GetTempADTv+0x7a>
	rawDataAD |= SPDR0;					//get second byte, store in low order
    2560:	8e e4       	ldi	r24, 0x4E	; 78
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	fc 01       	movw	r30, r24
    2566:	80 81       	ld	r24, Z
    2568:	88 2f       	mov	r24, r24
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	29 81       	ldd	r18, Y+1	; 0x01
    256e:	3a 81       	ldd	r19, Y+2	; 0x02
    2570:	82 2b       	or	r24, r18
    2572:	93 2b       	or	r25, r19
    2574:	9a 83       	std	Y+2, r25	; 0x02
    2576:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
    2578:	84 e6       	ldi	r24, 0x64	; 100
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	24 e6       	ldi	r18, 0x64	; 100
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	f9 01       	movw	r30, r18
    2582:	20 81       	ld	r18, Z
    2584:	24 60       	ori	r18, 0x04	; 4
    2586:	fc 01       	movw	r30, r24
    2588:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
    258a:	85 e2       	ldi	r24, 0x25	; 37
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	25 e2       	ldi	r18, 0x25	; 37
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	f9 01       	movw	r30, r18
    2594:	20 81       	ld	r18, Z
    2596:	20 69       	ori	r18, 0x90	; 144
    2598:	fc 01       	movw	r30, r24
    259a:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
    259c:	8a e0       	ldi	r24, 0x0A	; 10
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z7Wait_msj>
	
	//Convert number into Celsius, then Fahrenheit
	double dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
    25a4:	89 81       	ldd	r24, Y+1	; 0x01
    25a6:	9a 81       	ldd	r25, Y+2	; 0x02
    25a8:	cc 01       	movw	r24, r24
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	bc 01       	movw	r22, r24
    25b0:	cd 01       	movw	r24, r26
    25b2:	0e 94 ba 14 	call	0x2974	; 0x2974 <__floatunsisf>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	5d e3       	ldi	r21, 0x3D	; 61
    25c6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	26 e6       	ldi	r18, 0x66	; 102
    25d4:	36 e6       	ldi	r19, 0x66	; 102
    25d6:	46 ee       	ldi	r20, 0xE6	; 230
    25d8:	5f e3       	ldi	r21, 0x3F	; 63
    25da:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <__mulsf3>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	bc 01       	movw	r22, r24
    25e4:	cd 01       	movw	r24, r26
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	52 e4       	ldi	r21, 0x42	; 66
    25ee:	0e 94 be 13 	call	0x277c	; 0x277c <__addsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	ad 83       	std	Y+5, r26	; 0x05
    25fc:	be 83       	std	Y+6, r27	; 0x06
	
	return dataAD;
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	ad 81       	ldd	r26, Y+5	; 0x05
    2604:	be 81       	ldd	r27, Y+6	; 0x06
}
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	26 96       	adiw	r28, 0x06	; 6
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	df 91       	pop	r29
    2618:	cf 91       	pop	r28
    261a:	08 95       	ret

0000261c <_Z10ResetDebugv>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
    261c:	cf 93       	push	r28
    261e:	df 93       	push	r29
    2620:	00 d0       	rcall	.+0      	; 0x2622 <_Z10ResetDebugv+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
    2626:	88 e2       	ldi	r24, 0x28	; 40
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	fc 01       	movw	r30, r24
    262c:	90 81       	ld	r25, Z
    262e:	80 ef       	ldi	r24, 0xF0	; 240
    2630:	89 27       	eor	r24, r25
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
    263a:	88 e2       	ldi	r24, 0x28	; 40
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	28 e2       	ldi	r18, 0x28	; 40
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	f9 01       	movw	r30, r18
    2644:	30 81       	ld	r19, Z
    2646:	29 81       	ldd	r18, Y+1	; 0x01
    2648:	23 23       	and	r18, r19
    264a:	fc 01       	movw	r30, r24
    264c:	20 83       	st	Z, r18
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <_Z8Wait_secj>:
/**********************************************************************************************************************************/
void Wait_sec(WORD delay){
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	00 d0       	rcall	.+0      	; 0x265e <_Z8Wait_secj+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <_Z8Wait_secj+0x8>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
	WORD exitTime=((theClock.getSecond()+delay)%60);
    2668:	88 e7       	ldi	r24, 0x78	; 120
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN5clock9getSecondEv>
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	82 0f       	add	r24, r18
    267a:	93 1f       	adc	r25, r19
    267c:	2c e3       	ldi	r18, 0x3C	; 60
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	b9 01       	movw	r22, r18
    2682:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__udivmodhi4>
    2686:	9a 83       	std	Y+2, r25	; 0x02
    2688:	89 83       	std	Y+1, r24	; 0x01
	while (theClock.getSecond() != exitTime);
    268a:	00 00       	nop
    268c:	88 e7       	ldi	r24, 0x78	; 120
    268e:	91 e0       	ldi	r25, 0x01	; 1
    2690:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN5clock9getSecondEv>
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	9a 81       	ldd	r25, Y+2	; 0x02
    269e:	28 17       	cp	r18, r24
    26a0:	39 07       	cpc	r19, r25
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <_Z8Wait_secj+0x4e>
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	44 23       	and	r20, r20
    26a8:	89 f7       	brne	.-30     	; 0x268c <_Z8Wait_secj+0x34>
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <_Z7Wait_msj>:
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	00 d0       	rcall	.+0      	; 0x26be <_Z7Wait_msj+0x6>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <_Z7Wait_msj+0x8>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
    26c8:	18 c0       	rjmp	.+48     	; 0x26fa <_Z7Wait_msj+0x42>
		for( i = 0; i < 400; i++){
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	19 82       	std	Y+1, r1	; 0x01
    26ce:	06 c0       	rjmp	.+12     	; 0x26dc <_Z7Wait_msj+0x24>
			asm volatile("nop");
    26d0:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	01 96       	adiw	r24, 0x01	; 1
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	21 e0       	ldi	r18, 0x01	; 1
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	9a 81       	ldd	r25, Y+2	; 0x02
    26e2:	31 e0       	ldi	r19, 0x01	; 1
    26e4:	80 39       	cpi	r24, 0x90	; 144
    26e6:	93 07       	cpc	r25, r19
    26e8:	08 f0       	brcs	.+2      	; 0x26ec <_Z7Wait_msj+0x34>
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	22 23       	and	r18, r18
    26ee:	81 f7       	brne	.-32     	; 0x26d0 <_Z7Wait_msj+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    26f0:	8b 81       	ldd	r24, Y+3	; 0x03
    26f2:	9c 81       	ldd	r25, Y+4	; 0x04
    26f4:	01 97       	sbiw	r24, 0x01	; 1
    26f6:	9c 83       	std	Y+4, r25	; 0x04
    26f8:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
    26fa:	21 e0       	ldi	r18, 0x01	; 1
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	09 f4       	brne	.+2      	; 0x2706 <_Z7Wait_msj+0x4e>
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	22 23       	and	r18, r18
    2708:	01 f7       	brne	.-64     	; 0x26ca <_Z7Wait_msj+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	df 91       	pop	r29
    2714:	cf 91       	pop	r28
    2716:	08 95       	ret

00002718 <_Z41__static_initialization_and_destruction_0ii>:
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	00 d0       	rcall	.+0      	; 0x271e <_Z41__static_initialization_and_destruction_0ii+0x6>
    271e:	00 d0       	rcall	.+0      	; 0x2720 <_Z41__static_initialization_and_destruction_0ii+0x8>
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	9a 83       	std	Y+2, r25	; 0x02
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	7c 83       	std	Y+4, r23	; 0x04
    272a:	6b 83       	std	Y+3, r22	; 0x03
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	9a 81       	ldd	r25, Y+2	; 0x02
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	71 f4       	brne	.+28     	; 0x2752 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	2f ef       	ldi	r18, 0xFF	; 255
    273c:	8f 3f       	cpi	r24, 0xFF	; 255
    273e:	92 07       	cpc	r25, r18
    2740:	41 f4       	brne	.+16     	; 0x2752 <_Z41__static_initialization_and_destruction_0ii+0x3a>
/* ------------------------------------------------------------ */

WORD sleepCnt=0;									//originally used to map how long the device sleeps, can now be used for downtime?
BOOL flagGoToSleep, flagAllStats,flagReceivePi, flagSendWeek;

clock theClock;
    2742:	88 e7       	ldi	r24, 0x78	; 120
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_ZN5clockC1Ev>
thermostat theThermostat;
    274a:	8f e7       	ldi	r24, 0x7F	; 127
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN10thermostatC1Ev>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	0f 90       	pop	r0
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	08 95       	ret

00002760 <_GLOBAL__sub_I__ZN10thermostatC2Ev>:
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	81 e0       	ldi	r24, 0x01	; 1
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	6f ef       	ldi	r22, 0xFF	; 255
    276e:	7f ef       	ldi	r23, 0xFF	; 255
    2770:	0e 94 8c 13 	call	0x2718	; 0x2718 <_Z41__static_initialization_and_destruction_0ii>
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <__subsf3>:
    277a:	50 58       	subi	r21, 0x80	; 128

0000277c <__addsf3>:
    277c:	bb 27       	eor	r27, r27
    277e:	aa 27       	eor	r26, r26
    2780:	0e d0       	rcall	.+28     	; 0x279e <__addsf3x>
    2782:	70 c1       	rjmp	.+736    	; 0x2a64 <__fp_round>
    2784:	61 d1       	rcall	.+706    	; 0x2a48 <__fp_pscA>
    2786:	30 f0       	brcs	.+12     	; 0x2794 <__addsf3+0x18>
    2788:	66 d1       	rcall	.+716    	; 0x2a56 <__fp_pscB>
    278a:	20 f0       	brcs	.+8      	; 0x2794 <__addsf3+0x18>
    278c:	31 f4       	brne	.+12     	; 0x279a <__addsf3+0x1e>
    278e:	9f 3f       	cpi	r25, 0xFF	; 255
    2790:	11 f4       	brne	.+4      	; 0x2796 <__addsf3+0x1a>
    2792:	1e f4       	brtc	.+6      	; 0x279a <__addsf3+0x1e>
    2794:	56 c1       	rjmp	.+684    	; 0x2a42 <__fp_nan>
    2796:	0e f4       	brtc	.+2      	; 0x279a <__addsf3+0x1e>
    2798:	e0 95       	com	r30
    279a:	e7 fb       	bst	r30, 7
    279c:	4c c1       	rjmp	.+664    	; 0x2a36 <__fp_inf>

0000279e <__addsf3x>:
    279e:	e9 2f       	mov	r30, r25
    27a0:	72 d1       	rcall	.+740    	; 0x2a86 <__fp_split3>
    27a2:	80 f3       	brcs	.-32     	; 0x2784 <__addsf3+0x8>
    27a4:	ba 17       	cp	r27, r26
    27a6:	62 07       	cpc	r22, r18
    27a8:	73 07       	cpc	r23, r19
    27aa:	84 07       	cpc	r24, r20
    27ac:	95 07       	cpc	r25, r21
    27ae:	18 f0       	brcs	.+6      	; 0x27b6 <__addsf3x+0x18>
    27b0:	71 f4       	brne	.+28     	; 0x27ce <__addsf3x+0x30>
    27b2:	9e f5       	brtc	.+102    	; 0x281a <__addsf3x+0x7c>
    27b4:	8a c1       	rjmp	.+788    	; 0x2aca <__fp_zero>
    27b6:	0e f4       	brtc	.+2      	; 0x27ba <__addsf3x+0x1c>
    27b8:	e0 95       	com	r30
    27ba:	0b 2e       	mov	r0, r27
    27bc:	ba 2f       	mov	r27, r26
    27be:	a0 2d       	mov	r26, r0
    27c0:	0b 01       	movw	r0, r22
    27c2:	b9 01       	movw	r22, r18
    27c4:	90 01       	movw	r18, r0
    27c6:	0c 01       	movw	r0, r24
    27c8:	ca 01       	movw	r24, r20
    27ca:	a0 01       	movw	r20, r0
    27cc:	11 24       	eor	r1, r1
    27ce:	ff 27       	eor	r31, r31
    27d0:	59 1b       	sub	r21, r25
    27d2:	99 f0       	breq	.+38     	; 0x27fa <__addsf3x+0x5c>
    27d4:	59 3f       	cpi	r21, 0xF9	; 249
    27d6:	50 f4       	brcc	.+20     	; 0x27ec <__addsf3x+0x4e>
    27d8:	50 3e       	cpi	r21, 0xE0	; 224
    27da:	68 f1       	brcs	.+90     	; 0x2836 <__addsf3x+0x98>
    27dc:	1a 16       	cp	r1, r26
    27de:	f0 40       	sbci	r31, 0x00	; 0
    27e0:	a2 2f       	mov	r26, r18
    27e2:	23 2f       	mov	r18, r19
    27e4:	34 2f       	mov	r19, r20
    27e6:	44 27       	eor	r20, r20
    27e8:	58 5f       	subi	r21, 0xF8	; 248
    27ea:	f3 cf       	rjmp	.-26     	; 0x27d2 <__addsf3x+0x34>
    27ec:	46 95       	lsr	r20
    27ee:	37 95       	ror	r19
    27f0:	27 95       	ror	r18
    27f2:	a7 95       	ror	r26
    27f4:	f0 40       	sbci	r31, 0x00	; 0
    27f6:	53 95       	inc	r21
    27f8:	c9 f7       	brne	.-14     	; 0x27ec <__addsf3x+0x4e>
    27fa:	7e f4       	brtc	.+30     	; 0x281a <__addsf3x+0x7c>
    27fc:	1f 16       	cp	r1, r31
    27fe:	ba 0b       	sbc	r27, r26
    2800:	62 0b       	sbc	r22, r18
    2802:	73 0b       	sbc	r23, r19
    2804:	84 0b       	sbc	r24, r20
    2806:	ba f0       	brmi	.+46     	; 0x2836 <__addsf3x+0x98>
    2808:	91 50       	subi	r25, 0x01	; 1
    280a:	a1 f0       	breq	.+40     	; 0x2834 <__addsf3x+0x96>
    280c:	ff 0f       	add	r31, r31
    280e:	bb 1f       	adc	r27, r27
    2810:	66 1f       	adc	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	c2 f7       	brpl	.-16     	; 0x2808 <__addsf3x+0x6a>
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <__addsf3x+0x98>
    281a:	ba 0f       	add	r27, r26
    281c:	62 1f       	adc	r22, r18
    281e:	73 1f       	adc	r23, r19
    2820:	84 1f       	adc	r24, r20
    2822:	48 f4       	brcc	.+18     	; 0x2836 <__addsf3x+0x98>
    2824:	87 95       	ror	r24
    2826:	77 95       	ror	r23
    2828:	67 95       	ror	r22
    282a:	b7 95       	ror	r27
    282c:	f7 95       	ror	r31
    282e:	9e 3f       	cpi	r25, 0xFE	; 254
    2830:	08 f0       	brcs	.+2      	; 0x2834 <__addsf3x+0x96>
    2832:	b3 cf       	rjmp	.-154    	; 0x279a <__addsf3+0x1e>
    2834:	93 95       	inc	r25
    2836:	88 0f       	add	r24, r24
    2838:	08 f0       	brcs	.+2      	; 0x283c <__addsf3x+0x9e>
    283a:	99 27       	eor	r25, r25
    283c:	ee 0f       	add	r30, r30
    283e:	97 95       	ror	r25
    2840:	87 95       	ror	r24
    2842:	08 95       	ret

00002844 <__cmpsf2>:
    2844:	d4 d0       	rcall	.+424    	; 0x29ee <__fp_cmp>
    2846:	08 f4       	brcc	.+2      	; 0x284a <__cmpsf2+0x6>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	08 95       	ret

0000284c <__divsf3>:
    284c:	0c d0       	rcall	.+24     	; 0x2866 <__divsf3x>
    284e:	0a c1       	rjmp	.+532    	; 0x2a64 <__fp_round>
    2850:	02 d1       	rcall	.+516    	; 0x2a56 <__fp_pscB>
    2852:	40 f0       	brcs	.+16     	; 0x2864 <__divsf3+0x18>
    2854:	f9 d0       	rcall	.+498    	; 0x2a48 <__fp_pscA>
    2856:	30 f0       	brcs	.+12     	; 0x2864 <__divsf3+0x18>
    2858:	21 f4       	brne	.+8      	; 0x2862 <__divsf3+0x16>
    285a:	5f 3f       	cpi	r21, 0xFF	; 255
    285c:	19 f0       	breq	.+6      	; 0x2864 <__divsf3+0x18>
    285e:	eb c0       	rjmp	.+470    	; 0x2a36 <__fp_inf>
    2860:	51 11       	cpse	r21, r1
    2862:	34 c1       	rjmp	.+616    	; 0x2acc <__fp_szero>
    2864:	ee c0       	rjmp	.+476    	; 0x2a42 <__fp_nan>

00002866 <__divsf3x>:
    2866:	0f d1       	rcall	.+542    	; 0x2a86 <__fp_split3>
    2868:	98 f3       	brcs	.-26     	; 0x2850 <__divsf3+0x4>

0000286a <__divsf3_pse>:
    286a:	99 23       	and	r25, r25
    286c:	c9 f3       	breq	.-14     	; 0x2860 <__divsf3+0x14>
    286e:	55 23       	and	r21, r21
    2870:	b1 f3       	breq	.-20     	; 0x285e <__divsf3+0x12>
    2872:	95 1b       	sub	r25, r21
    2874:	55 0b       	sbc	r21, r21
    2876:	bb 27       	eor	r27, r27
    2878:	aa 27       	eor	r26, r26
    287a:	62 17       	cp	r22, r18
    287c:	73 07       	cpc	r23, r19
    287e:	84 07       	cpc	r24, r20
    2880:	38 f0       	brcs	.+14     	; 0x2890 <__divsf3_pse+0x26>
    2882:	9f 5f       	subi	r25, 0xFF	; 255
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	22 0f       	add	r18, r18
    2888:	33 1f       	adc	r19, r19
    288a:	44 1f       	adc	r20, r20
    288c:	aa 1f       	adc	r26, r26
    288e:	a9 f3       	breq	.-22     	; 0x287a <__divsf3_pse+0x10>
    2890:	33 d0       	rcall	.+102    	; 0x28f8 <__divsf3_pse+0x8e>
    2892:	0e 2e       	mov	r0, r30
    2894:	3a f0       	brmi	.+14     	; 0x28a4 <__divsf3_pse+0x3a>
    2896:	e0 e8       	ldi	r30, 0x80	; 128
    2898:	30 d0       	rcall	.+96     	; 0x28fa <__divsf3_pse+0x90>
    289a:	91 50       	subi	r25, 0x01	; 1
    289c:	50 40       	sbci	r21, 0x00	; 0
    289e:	e6 95       	lsr	r30
    28a0:	00 1c       	adc	r0, r0
    28a2:	ca f7       	brpl	.-14     	; 0x2896 <__divsf3_pse+0x2c>
    28a4:	29 d0       	rcall	.+82     	; 0x28f8 <__divsf3_pse+0x8e>
    28a6:	fe 2f       	mov	r31, r30
    28a8:	27 d0       	rcall	.+78     	; 0x28f8 <__divsf3_pse+0x8e>
    28aa:	66 0f       	add	r22, r22
    28ac:	77 1f       	adc	r23, r23
    28ae:	88 1f       	adc	r24, r24
    28b0:	bb 1f       	adc	r27, r27
    28b2:	26 17       	cp	r18, r22
    28b4:	37 07       	cpc	r19, r23
    28b6:	48 07       	cpc	r20, r24
    28b8:	ab 07       	cpc	r26, r27
    28ba:	b0 e8       	ldi	r27, 0x80	; 128
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <__divsf3_pse+0x56>
    28be:	bb 0b       	sbc	r27, r27
    28c0:	80 2d       	mov	r24, r0
    28c2:	bf 01       	movw	r22, r30
    28c4:	ff 27       	eor	r31, r31
    28c6:	93 58       	subi	r25, 0x83	; 131
    28c8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ca:	2a f0       	brmi	.+10     	; 0x28d6 <__divsf3_pse+0x6c>
    28cc:	9e 3f       	cpi	r25, 0xFE	; 254
    28ce:	51 05       	cpc	r21, r1
    28d0:	68 f0       	brcs	.+26     	; 0x28ec <__divsf3_pse+0x82>
    28d2:	b1 c0       	rjmp	.+354    	; 0x2a36 <__fp_inf>
    28d4:	fb c0       	rjmp	.+502    	; 0x2acc <__fp_szero>
    28d6:	5f 3f       	cpi	r21, 0xFF	; 255
    28d8:	ec f3       	brlt	.-6      	; 0x28d4 <__divsf3_pse+0x6a>
    28da:	98 3e       	cpi	r25, 0xE8	; 232
    28dc:	dc f3       	brlt	.-10     	; 0x28d4 <__divsf3_pse+0x6a>
    28de:	86 95       	lsr	r24
    28e0:	77 95       	ror	r23
    28e2:	67 95       	ror	r22
    28e4:	b7 95       	ror	r27
    28e6:	f7 95       	ror	r31
    28e8:	9f 5f       	subi	r25, 0xFF	; 255
    28ea:	c9 f7       	brne	.-14     	; 0x28de <__divsf3_pse+0x74>
    28ec:	88 0f       	add	r24, r24
    28ee:	91 1d       	adc	r25, r1
    28f0:	96 95       	lsr	r25
    28f2:	87 95       	ror	r24
    28f4:	97 f9       	bld	r25, 7
    28f6:	08 95       	ret
    28f8:	e1 e0       	ldi	r30, 0x01	; 1
    28fa:	66 0f       	add	r22, r22
    28fc:	77 1f       	adc	r23, r23
    28fe:	88 1f       	adc	r24, r24
    2900:	bb 1f       	adc	r27, r27
    2902:	62 17       	cp	r22, r18
    2904:	73 07       	cpc	r23, r19
    2906:	84 07       	cpc	r24, r20
    2908:	ba 07       	cpc	r27, r26
    290a:	20 f0       	brcs	.+8      	; 0x2914 <__divsf3_pse+0xaa>
    290c:	62 1b       	sub	r22, r18
    290e:	73 0b       	sbc	r23, r19
    2910:	84 0b       	sbc	r24, r20
    2912:	ba 0b       	sbc	r27, r26
    2914:	ee 1f       	adc	r30, r30
    2916:	88 f7       	brcc	.-30     	; 0x28fa <__divsf3_pse+0x90>
    2918:	e0 95       	com	r30
    291a:	08 95       	ret

0000291c <__fixunssfsi>:
    291c:	bc d0       	rcall	.+376    	; 0x2a96 <__fp_splitA>
    291e:	88 f0       	brcs	.+34     	; 0x2942 <__fixunssfsi+0x26>
    2920:	9f 57       	subi	r25, 0x7F	; 127
    2922:	90 f0       	brcs	.+36     	; 0x2948 <__fixunssfsi+0x2c>
    2924:	b9 2f       	mov	r27, r25
    2926:	99 27       	eor	r25, r25
    2928:	b7 51       	subi	r27, 0x17	; 23
    292a:	a0 f0       	brcs	.+40     	; 0x2954 <__fixunssfsi+0x38>
    292c:	d1 f0       	breq	.+52     	; 0x2962 <__fixunssfsi+0x46>
    292e:	66 0f       	add	r22, r22
    2930:	77 1f       	adc	r23, r23
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	1a f0       	brmi	.+6      	; 0x293e <__fixunssfsi+0x22>
    2938:	ba 95       	dec	r27
    293a:	c9 f7       	brne	.-14     	; 0x292e <__fixunssfsi+0x12>
    293c:	12 c0       	rjmp	.+36     	; 0x2962 <__fixunssfsi+0x46>
    293e:	b1 30       	cpi	r27, 0x01	; 1
    2940:	81 f0       	breq	.+32     	; 0x2962 <__fixunssfsi+0x46>
    2942:	c3 d0       	rcall	.+390    	; 0x2aca <__fp_zero>
    2944:	b1 e0       	ldi	r27, 0x01	; 1
    2946:	08 95       	ret
    2948:	c0 c0       	rjmp	.+384    	; 0x2aca <__fp_zero>
    294a:	67 2f       	mov	r22, r23
    294c:	78 2f       	mov	r23, r24
    294e:	88 27       	eor	r24, r24
    2950:	b8 5f       	subi	r27, 0xF8	; 248
    2952:	39 f0       	breq	.+14     	; 0x2962 <__fixunssfsi+0x46>
    2954:	b9 3f       	cpi	r27, 0xF9	; 249
    2956:	cc f3       	brlt	.-14     	; 0x294a <__fixunssfsi+0x2e>
    2958:	86 95       	lsr	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	b3 95       	inc	r27
    2960:	d9 f7       	brne	.-10     	; 0x2958 <__fixunssfsi+0x3c>
    2962:	3e f4       	brtc	.+14     	; 0x2972 <__fixunssfsi+0x56>
    2964:	90 95       	com	r25
    2966:	80 95       	com	r24
    2968:	70 95       	com	r23
    296a:	61 95       	neg	r22
    296c:	7f 4f       	sbci	r23, 0xFF	; 255
    296e:	8f 4f       	sbci	r24, 0xFF	; 255
    2970:	9f 4f       	sbci	r25, 0xFF	; 255
    2972:	08 95       	ret

00002974 <__floatunsisf>:
    2974:	e8 94       	clt
    2976:	09 c0       	rjmp	.+18     	; 0x298a <__floatsisf+0x12>

00002978 <__floatsisf>:
    2978:	97 fb       	bst	r25, 7
    297a:	3e f4       	brtc	.+14     	; 0x298a <__floatsisf+0x12>
    297c:	90 95       	com	r25
    297e:	80 95       	com	r24
    2980:	70 95       	com	r23
    2982:	61 95       	neg	r22
    2984:	7f 4f       	sbci	r23, 0xFF	; 255
    2986:	8f 4f       	sbci	r24, 0xFF	; 255
    2988:	9f 4f       	sbci	r25, 0xFF	; 255
    298a:	99 23       	and	r25, r25
    298c:	a9 f0       	breq	.+42     	; 0x29b8 <__floatsisf+0x40>
    298e:	f9 2f       	mov	r31, r25
    2990:	96 e9       	ldi	r25, 0x96	; 150
    2992:	bb 27       	eor	r27, r27
    2994:	93 95       	inc	r25
    2996:	f6 95       	lsr	r31
    2998:	87 95       	ror	r24
    299a:	77 95       	ror	r23
    299c:	67 95       	ror	r22
    299e:	b7 95       	ror	r27
    29a0:	f1 11       	cpse	r31, r1
    29a2:	f8 cf       	rjmp	.-16     	; 0x2994 <__floatsisf+0x1c>
    29a4:	fa f4       	brpl	.+62     	; 0x29e4 <__floatsisf+0x6c>
    29a6:	bb 0f       	add	r27, r27
    29a8:	11 f4       	brne	.+4      	; 0x29ae <__floatsisf+0x36>
    29aa:	60 ff       	sbrs	r22, 0
    29ac:	1b c0       	rjmp	.+54     	; 0x29e4 <__floatsisf+0x6c>
    29ae:	6f 5f       	subi	r22, 0xFF	; 255
    29b0:	7f 4f       	sbci	r23, 0xFF	; 255
    29b2:	8f 4f       	sbci	r24, 0xFF	; 255
    29b4:	9f 4f       	sbci	r25, 0xFF	; 255
    29b6:	16 c0       	rjmp	.+44     	; 0x29e4 <__floatsisf+0x6c>
    29b8:	88 23       	and	r24, r24
    29ba:	11 f0       	breq	.+4      	; 0x29c0 <__floatsisf+0x48>
    29bc:	96 e9       	ldi	r25, 0x96	; 150
    29be:	11 c0       	rjmp	.+34     	; 0x29e2 <__floatsisf+0x6a>
    29c0:	77 23       	and	r23, r23
    29c2:	21 f0       	breq	.+8      	; 0x29cc <__floatsisf+0x54>
    29c4:	9e e8       	ldi	r25, 0x8E	; 142
    29c6:	87 2f       	mov	r24, r23
    29c8:	76 2f       	mov	r23, r22
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <__floatsisf+0x5e>
    29cc:	66 23       	and	r22, r22
    29ce:	71 f0       	breq	.+28     	; 0x29ec <__floatsisf+0x74>
    29d0:	96 e8       	ldi	r25, 0x86	; 134
    29d2:	86 2f       	mov	r24, r22
    29d4:	70 e0       	ldi	r23, 0x00	; 0
    29d6:	60 e0       	ldi	r22, 0x00	; 0
    29d8:	2a f0       	brmi	.+10     	; 0x29e4 <__floatsisf+0x6c>
    29da:	9a 95       	dec	r25
    29dc:	66 0f       	add	r22, r22
    29de:	77 1f       	adc	r23, r23
    29e0:	88 1f       	adc	r24, r24
    29e2:	da f7       	brpl	.-10     	; 0x29da <__floatsisf+0x62>
    29e4:	88 0f       	add	r24, r24
    29e6:	96 95       	lsr	r25
    29e8:	87 95       	ror	r24
    29ea:	97 f9       	bld	r25, 7
    29ec:	08 95       	ret

000029ee <__fp_cmp>:
    29ee:	99 0f       	add	r25, r25
    29f0:	00 08       	sbc	r0, r0
    29f2:	55 0f       	add	r21, r21
    29f4:	aa 0b       	sbc	r26, r26
    29f6:	e0 e8       	ldi	r30, 0x80	; 128
    29f8:	fe ef       	ldi	r31, 0xFE	; 254
    29fa:	16 16       	cp	r1, r22
    29fc:	17 06       	cpc	r1, r23
    29fe:	e8 07       	cpc	r30, r24
    2a00:	f9 07       	cpc	r31, r25
    2a02:	c0 f0       	brcs	.+48     	; 0x2a34 <__fp_cmp+0x46>
    2a04:	12 16       	cp	r1, r18
    2a06:	13 06       	cpc	r1, r19
    2a08:	e4 07       	cpc	r30, r20
    2a0a:	f5 07       	cpc	r31, r21
    2a0c:	98 f0       	brcs	.+38     	; 0x2a34 <__fp_cmp+0x46>
    2a0e:	62 1b       	sub	r22, r18
    2a10:	73 0b       	sbc	r23, r19
    2a12:	84 0b       	sbc	r24, r20
    2a14:	95 0b       	sbc	r25, r21
    2a16:	39 f4       	brne	.+14     	; 0x2a26 <__fp_cmp+0x38>
    2a18:	0a 26       	eor	r0, r26
    2a1a:	61 f0       	breq	.+24     	; 0x2a34 <__fp_cmp+0x46>
    2a1c:	23 2b       	or	r18, r19
    2a1e:	24 2b       	or	r18, r20
    2a20:	25 2b       	or	r18, r21
    2a22:	21 f4       	brne	.+8      	; 0x2a2c <__fp_cmp+0x3e>
    2a24:	08 95       	ret
    2a26:	0a 26       	eor	r0, r26
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <__fp_cmp+0x3e>
    2a2a:	a1 40       	sbci	r26, 0x01	; 1
    2a2c:	a6 95       	lsr	r26
    2a2e:	8f ef       	ldi	r24, 0xFF	; 255
    2a30:	81 1d       	adc	r24, r1
    2a32:	81 1d       	adc	r24, r1
    2a34:	08 95       	ret

00002a36 <__fp_inf>:
    2a36:	97 f9       	bld	r25, 7
    2a38:	9f 67       	ori	r25, 0x7F	; 127
    2a3a:	80 e8       	ldi	r24, 0x80	; 128
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	08 95       	ret

00002a42 <__fp_nan>:
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	80 ec       	ldi	r24, 0xC0	; 192
    2a46:	08 95       	ret

00002a48 <__fp_pscA>:
    2a48:	00 24       	eor	r0, r0
    2a4a:	0a 94       	dec	r0
    2a4c:	16 16       	cp	r1, r22
    2a4e:	17 06       	cpc	r1, r23
    2a50:	18 06       	cpc	r1, r24
    2a52:	09 06       	cpc	r0, r25
    2a54:	08 95       	ret

00002a56 <__fp_pscB>:
    2a56:	00 24       	eor	r0, r0
    2a58:	0a 94       	dec	r0
    2a5a:	12 16       	cp	r1, r18
    2a5c:	13 06       	cpc	r1, r19
    2a5e:	14 06       	cpc	r1, r20
    2a60:	05 06       	cpc	r0, r21
    2a62:	08 95       	ret

00002a64 <__fp_round>:
    2a64:	09 2e       	mov	r0, r25
    2a66:	03 94       	inc	r0
    2a68:	00 0c       	add	r0, r0
    2a6a:	11 f4       	brne	.+4      	; 0x2a70 <__fp_round+0xc>
    2a6c:	88 23       	and	r24, r24
    2a6e:	52 f0       	brmi	.+20     	; 0x2a84 <__fp_round+0x20>
    2a70:	bb 0f       	add	r27, r27
    2a72:	40 f4       	brcc	.+16     	; 0x2a84 <__fp_round+0x20>
    2a74:	bf 2b       	or	r27, r31
    2a76:	11 f4       	brne	.+4      	; 0x2a7c <__fp_round+0x18>
    2a78:	60 ff       	sbrs	r22, 0
    2a7a:	04 c0       	rjmp	.+8      	; 0x2a84 <__fp_round+0x20>
    2a7c:	6f 5f       	subi	r22, 0xFF	; 255
    2a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a80:	8f 4f       	sbci	r24, 0xFF	; 255
    2a82:	9f 4f       	sbci	r25, 0xFF	; 255
    2a84:	08 95       	ret

00002a86 <__fp_split3>:
    2a86:	57 fd       	sbrc	r21, 7
    2a88:	90 58       	subi	r25, 0x80	; 128
    2a8a:	44 0f       	add	r20, r20
    2a8c:	55 1f       	adc	r21, r21
    2a8e:	59 f0       	breq	.+22     	; 0x2aa6 <__fp_splitA+0x10>
    2a90:	5f 3f       	cpi	r21, 0xFF	; 255
    2a92:	71 f0       	breq	.+28     	; 0x2ab0 <__fp_splitA+0x1a>
    2a94:	47 95       	ror	r20

00002a96 <__fp_splitA>:
    2a96:	88 0f       	add	r24, r24
    2a98:	97 fb       	bst	r25, 7
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	61 f0       	breq	.+24     	; 0x2ab6 <__fp_splitA+0x20>
    2a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2aa0:	79 f0       	breq	.+30     	; 0x2ac0 <__fp_splitA+0x2a>
    2aa2:	87 95       	ror	r24
    2aa4:	08 95       	ret
    2aa6:	12 16       	cp	r1, r18
    2aa8:	13 06       	cpc	r1, r19
    2aaa:	14 06       	cpc	r1, r20
    2aac:	55 1f       	adc	r21, r21
    2aae:	f2 cf       	rjmp	.-28     	; 0x2a94 <__fp_split3+0xe>
    2ab0:	46 95       	lsr	r20
    2ab2:	f1 df       	rcall	.-30     	; 0x2a96 <__fp_splitA>
    2ab4:	08 c0       	rjmp	.+16     	; 0x2ac6 <__fp_splitA+0x30>
    2ab6:	16 16       	cp	r1, r22
    2ab8:	17 06       	cpc	r1, r23
    2aba:	18 06       	cpc	r1, r24
    2abc:	99 1f       	adc	r25, r25
    2abe:	f1 cf       	rjmp	.-30     	; 0x2aa2 <__fp_splitA+0xc>
    2ac0:	86 95       	lsr	r24
    2ac2:	71 05       	cpc	r23, r1
    2ac4:	61 05       	cpc	r22, r1
    2ac6:	08 94       	sec
    2ac8:	08 95       	ret

00002aca <__fp_zero>:
    2aca:	e8 94       	clt

00002acc <__fp_szero>:
    2acc:	bb 27       	eor	r27, r27
    2ace:	66 27       	eor	r22, r22
    2ad0:	77 27       	eor	r23, r23
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	97 f9       	bld	r25, 7
    2ad6:	08 95       	ret

00002ad8 <__gesf2>:
    2ad8:	8a df       	rcall	.-236    	; 0x29ee <__fp_cmp>
    2ada:	08 f4       	brcc	.+2      	; 0x2ade <__gesf2+0x6>
    2adc:	8f ef       	ldi	r24, 0xFF	; 255
    2ade:	08 95       	ret

00002ae0 <__mulsf3>:
    2ae0:	0b d0       	rcall	.+22     	; 0x2af8 <__mulsf3x>
    2ae2:	c0 cf       	rjmp	.-128    	; 0x2a64 <__fp_round>
    2ae4:	b1 df       	rcall	.-158    	; 0x2a48 <__fp_pscA>
    2ae6:	28 f0       	brcs	.+10     	; 0x2af2 <__mulsf3+0x12>
    2ae8:	b6 df       	rcall	.-148    	; 0x2a56 <__fp_pscB>
    2aea:	18 f0       	brcs	.+6      	; 0x2af2 <__mulsf3+0x12>
    2aec:	95 23       	and	r25, r21
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <__mulsf3+0x12>
    2af0:	a2 cf       	rjmp	.-188    	; 0x2a36 <__fp_inf>
    2af2:	a7 cf       	rjmp	.-178    	; 0x2a42 <__fp_nan>
    2af4:	11 24       	eor	r1, r1
    2af6:	ea cf       	rjmp	.-44     	; 0x2acc <__fp_szero>

00002af8 <__mulsf3x>:
    2af8:	c6 df       	rcall	.-116    	; 0x2a86 <__fp_split3>
    2afa:	a0 f3       	brcs	.-24     	; 0x2ae4 <__mulsf3+0x4>

00002afc <__mulsf3_pse>:
    2afc:	95 9f       	mul	r25, r21
    2afe:	d1 f3       	breq	.-12     	; 0x2af4 <__mulsf3+0x14>
    2b00:	95 0f       	add	r25, r21
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	55 1f       	adc	r21, r21
    2b06:	62 9f       	mul	r22, r18
    2b08:	f0 01       	movw	r30, r0
    2b0a:	72 9f       	mul	r23, r18
    2b0c:	bb 27       	eor	r27, r27
    2b0e:	f0 0d       	add	r31, r0
    2b10:	b1 1d       	adc	r27, r1
    2b12:	63 9f       	mul	r22, r19
    2b14:	aa 27       	eor	r26, r26
    2b16:	f0 0d       	add	r31, r0
    2b18:	b1 1d       	adc	r27, r1
    2b1a:	aa 1f       	adc	r26, r26
    2b1c:	64 9f       	mul	r22, r20
    2b1e:	66 27       	eor	r22, r22
    2b20:	b0 0d       	add	r27, r0
    2b22:	a1 1d       	adc	r26, r1
    2b24:	66 1f       	adc	r22, r22
    2b26:	82 9f       	mul	r24, r18
    2b28:	22 27       	eor	r18, r18
    2b2a:	b0 0d       	add	r27, r0
    2b2c:	a1 1d       	adc	r26, r1
    2b2e:	62 1f       	adc	r22, r18
    2b30:	73 9f       	mul	r23, r19
    2b32:	b0 0d       	add	r27, r0
    2b34:	a1 1d       	adc	r26, r1
    2b36:	62 1f       	adc	r22, r18
    2b38:	83 9f       	mul	r24, r19
    2b3a:	a0 0d       	add	r26, r0
    2b3c:	61 1d       	adc	r22, r1
    2b3e:	22 1f       	adc	r18, r18
    2b40:	74 9f       	mul	r23, r20
    2b42:	33 27       	eor	r19, r19
    2b44:	a0 0d       	add	r26, r0
    2b46:	61 1d       	adc	r22, r1
    2b48:	23 1f       	adc	r18, r19
    2b4a:	84 9f       	mul	r24, r20
    2b4c:	60 0d       	add	r22, r0
    2b4e:	21 1d       	adc	r18, r1
    2b50:	82 2f       	mov	r24, r18
    2b52:	76 2f       	mov	r23, r22
    2b54:	6a 2f       	mov	r22, r26
    2b56:	11 24       	eor	r1, r1
    2b58:	9f 57       	subi	r25, 0x7F	; 127
    2b5a:	50 40       	sbci	r21, 0x00	; 0
    2b5c:	8a f0       	brmi	.+34     	; 0x2b80 <__mulsf3_pse+0x84>
    2b5e:	e1 f0       	breq	.+56     	; 0x2b98 <__mulsf3_pse+0x9c>
    2b60:	88 23       	and	r24, r24
    2b62:	4a f0       	brmi	.+18     	; 0x2b76 <__mulsf3_pse+0x7a>
    2b64:	ee 0f       	add	r30, r30
    2b66:	ff 1f       	adc	r31, r31
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	66 1f       	adc	r22, r22
    2b6c:	77 1f       	adc	r23, r23
    2b6e:	88 1f       	adc	r24, r24
    2b70:	91 50       	subi	r25, 0x01	; 1
    2b72:	50 40       	sbci	r21, 0x00	; 0
    2b74:	a9 f7       	brne	.-22     	; 0x2b60 <__mulsf3_pse+0x64>
    2b76:	9e 3f       	cpi	r25, 0xFE	; 254
    2b78:	51 05       	cpc	r21, r1
    2b7a:	70 f0       	brcs	.+28     	; 0x2b98 <__mulsf3_pse+0x9c>
    2b7c:	5c cf       	rjmp	.-328    	; 0x2a36 <__fp_inf>
    2b7e:	a6 cf       	rjmp	.-180    	; 0x2acc <__fp_szero>
    2b80:	5f 3f       	cpi	r21, 0xFF	; 255
    2b82:	ec f3       	brlt	.-6      	; 0x2b7e <__mulsf3_pse+0x82>
    2b84:	98 3e       	cpi	r25, 0xE8	; 232
    2b86:	dc f3       	brlt	.-10     	; 0x2b7e <__mulsf3_pse+0x82>
    2b88:	86 95       	lsr	r24
    2b8a:	77 95       	ror	r23
    2b8c:	67 95       	ror	r22
    2b8e:	b7 95       	ror	r27
    2b90:	f7 95       	ror	r31
    2b92:	e7 95       	ror	r30
    2b94:	9f 5f       	subi	r25, 0xFF	; 255
    2b96:	c1 f7       	brne	.-16     	; 0x2b88 <__mulsf3_pse+0x8c>
    2b98:	fe 2b       	or	r31, r30
    2b9a:	88 0f       	add	r24, r24
    2b9c:	91 1d       	adc	r25, r1
    2b9e:	96 95       	lsr	r25
    2ba0:	87 95       	ror	r24
    2ba2:	97 f9       	bld	r25, 7
    2ba4:	08 95       	ret

00002ba6 <__udivmodqi4>:
    2ba6:	99 1b       	sub	r25, r25
    2ba8:	79 e0       	ldi	r23, 0x09	; 9
    2baa:	04 c0       	rjmp	.+8      	; 0x2bb4 <__udivmodqi4_ep>

00002bac <__udivmodqi4_loop>:
    2bac:	99 1f       	adc	r25, r25
    2bae:	96 17       	cp	r25, r22
    2bb0:	08 f0       	brcs	.+2      	; 0x2bb4 <__udivmodqi4_ep>
    2bb2:	96 1b       	sub	r25, r22

00002bb4 <__udivmodqi4_ep>:
    2bb4:	88 1f       	adc	r24, r24
    2bb6:	7a 95       	dec	r23
    2bb8:	c9 f7       	brne	.-14     	; 0x2bac <__udivmodqi4_loop>
    2bba:	80 95       	com	r24
    2bbc:	08 95       	ret

00002bbe <__udivmodhi4>:
    2bbe:	aa 1b       	sub	r26, r26
    2bc0:	bb 1b       	sub	r27, r27
    2bc2:	51 e1       	ldi	r21, 0x11	; 17
    2bc4:	07 c0       	rjmp	.+14     	; 0x2bd4 <__udivmodhi4_ep>

00002bc6 <__udivmodhi4_loop>:
    2bc6:	aa 1f       	adc	r26, r26
    2bc8:	bb 1f       	adc	r27, r27
    2bca:	a6 17       	cp	r26, r22
    2bcc:	b7 07       	cpc	r27, r23
    2bce:	10 f0       	brcs	.+4      	; 0x2bd4 <__udivmodhi4_ep>
    2bd0:	a6 1b       	sub	r26, r22
    2bd2:	b7 0b       	sbc	r27, r23

00002bd4 <__udivmodhi4_ep>:
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	5a 95       	dec	r21
    2bda:	a9 f7       	brne	.-22     	; 0x2bc6 <__udivmodhi4_loop>
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	08 95       	ret

00002be6 <__divmodhi4>:
    2be6:	97 fb       	bst	r25, 7
    2be8:	09 2e       	mov	r0, r25
    2bea:	07 26       	eor	r0, r23
    2bec:	0a d0       	rcall	.+20     	; 0x2c02 <__divmodhi4_neg1>
    2bee:	77 fd       	sbrc	r23, 7
    2bf0:	04 d0       	rcall	.+8      	; 0x2bfa <__divmodhi4_neg2>
    2bf2:	e5 df       	rcall	.-54     	; 0x2bbe <__udivmodhi4>
    2bf4:	06 d0       	rcall	.+12     	; 0x2c02 <__divmodhi4_neg1>
    2bf6:	00 20       	and	r0, r0
    2bf8:	1a f4       	brpl	.+6      	; 0x2c00 <__divmodhi4_exit>

00002bfa <__divmodhi4_neg2>:
    2bfa:	70 95       	com	r23
    2bfc:	61 95       	neg	r22
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255

00002c00 <__divmodhi4_exit>:
    2c00:	08 95       	ret

00002c02 <__divmodhi4_neg1>:
    2c02:	f6 f7       	brtc	.-4      	; 0x2c00 <__divmodhi4_exit>
    2c04:	90 95       	com	r25
    2c06:	81 95       	neg	r24
    2c08:	9f 4f       	sbci	r25, 0xFF	; 255
    2c0a:	08 95       	ret

00002c0c <__tablejump2__>:
    2c0c:	ee 0f       	add	r30, r30
    2c0e:	ff 1f       	adc	r31, r31

00002c10 <__tablejump__>:
    2c10:	05 90       	lpm	r0, Z+
    2c12:	f4 91       	lpm	r31, Z
    2c14:	e0 2d       	mov	r30, r0
    2c16:	09 94       	ijmp

00002c18 <dtostrf>:
    2c18:	ef 92       	push	r14
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	32 2f       	mov	r19, r18
    2c22:	c0 2f       	mov	r28, r16
    2c24:	47 ff       	sbrs	r20, 7
    2c26:	02 c0       	rjmp	.+4      	; 0x2c2c <dtostrf+0x14>
    2c28:	a4 e1       	ldi	r26, 0x14	; 20
    2c2a:	01 c0       	rjmp	.+2      	; 0x2c2e <dtostrf+0x16>
    2c2c:	a4 e0       	ldi	r26, 0x04	; 4
    2c2e:	e4 2f       	mov	r30, r20
    2c30:	ff 27       	eor	r31, r31
    2c32:	e7 fd       	sbrc	r30, 7
    2c34:	f0 95       	com	r31
    2c36:	f7 ff       	sbrs	r31, 7
    2c38:	03 c0       	rjmp	.+6      	; 0x2c40 <dtostrf+0x28>
    2c3a:	f0 95       	com	r31
    2c3c:	e1 95       	neg	r30
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	4c 2f       	mov	r20, r28
    2c42:	51 2f       	mov	r21, r17
    2c44:	2e 2f       	mov	r18, r30
    2c46:	03 2f       	mov	r16, r19
    2c48:	ea 2e       	mov	r14, r26
    2c4a:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <dtoa_prf>
    2c4e:	8c 2f       	mov	r24, r28
    2c50:	91 2f       	mov	r25, r17
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ef 90       	pop	r14
    2c5a:	08 95       	ret

00002c5c <atoi>:
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	88 27       	eor	r24, r24
    2c60:	99 27       	eor	r25, r25
    2c62:	e8 94       	clt
    2c64:	21 91       	ld	r18, Z+
    2c66:	20 32       	cpi	r18, 0x20	; 32
    2c68:	e9 f3       	breq	.-6      	; 0x2c64 <atoi+0x8>
    2c6a:	29 30       	cpi	r18, 0x09	; 9
    2c6c:	10 f0       	brcs	.+4      	; 0x2c72 <atoi+0x16>
    2c6e:	2e 30       	cpi	r18, 0x0E	; 14
    2c70:	c8 f3       	brcs	.-14     	; 0x2c64 <atoi+0x8>
    2c72:	2b 32       	cpi	r18, 0x2B	; 43
    2c74:	41 f0       	breq	.+16     	; 0x2c86 <atoi+0x2a>
    2c76:	2d 32       	cpi	r18, 0x2D	; 45
    2c78:	39 f4       	brne	.+14     	; 0x2c88 <atoi+0x2c>
    2c7a:	68 94       	set
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <atoi+0x2a>
    2c7e:	0e 94 65 16 	call	0x2cca	; 0x2cca <__mulhi_const_10>
    2c82:	82 0f       	add	r24, r18
    2c84:	91 1d       	adc	r25, r1
    2c86:	21 91       	ld	r18, Z+
    2c88:	20 53       	subi	r18, 0x30	; 48
    2c8a:	2a 30       	cpi	r18, 0x0A	; 10
    2c8c:	c0 f3       	brcs	.-16     	; 0x2c7e <atoi+0x22>
    2c8e:	1e f4       	brtc	.+6      	; 0x2c96 <atoi+0x3a>
    2c90:	90 95       	com	r25
    2c92:	81 95       	neg	r24
    2c94:	9f 4f       	sbci	r25, 0xFF	; 255
    2c96:	08 95       	ret

00002c98 <strcat>:
    2c98:	fb 01       	movw	r30, r22
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	0d 90       	ld	r0, X+
    2c9e:	00 20       	and	r0, r0
    2ca0:	e9 f7       	brne	.-6      	; 0x2c9c <strcat+0x4>
    2ca2:	11 97       	sbiw	r26, 0x01	; 1
    2ca4:	01 90       	ld	r0, Z+
    2ca6:	0d 92       	st	X+, r0
    2ca8:	00 20       	and	r0, r0
    2caa:	e1 f7       	brne	.-8      	; 0x2ca4 <strcat+0xc>
    2cac:	08 95       	ret

00002cae <strncmp>:
    2cae:	fb 01       	movw	r30, r22
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	41 50       	subi	r20, 0x01	; 1
    2cb4:	50 40       	sbci	r21, 0x00	; 0
    2cb6:	30 f0       	brcs	.+12     	; 0x2cc4 <strncmp+0x16>
    2cb8:	8d 91       	ld	r24, X+
    2cba:	01 90       	ld	r0, Z+
    2cbc:	80 19       	sub	r24, r0
    2cbe:	19 f4       	brne	.+6      	; 0x2cc6 <strncmp+0x18>
    2cc0:	00 20       	and	r0, r0
    2cc2:	b9 f7       	brne	.-18     	; 0x2cb2 <strncmp+0x4>
    2cc4:	88 1b       	sub	r24, r24
    2cc6:	99 0b       	sbc	r25, r25
    2cc8:	08 95       	ret

00002cca <__mulhi_const_10>:
    2cca:	7a e0       	ldi	r23, 0x0A	; 10
    2ccc:	97 9f       	mul	r25, r23
    2cce:	90 2d       	mov	r25, r0
    2cd0:	87 9f       	mul	r24, r23
    2cd2:	80 2d       	mov	r24, r0
    2cd4:	91 0d       	add	r25, r1
    2cd6:	11 24       	eor	r1, r1
    2cd8:	08 95       	ret

00002cda <utoa>:
    2cda:	fb 01       	movw	r30, r22
    2cdc:	9f 01       	movw	r18, r30
    2cde:	42 30       	cpi	r20, 0x02	; 2
    2ce0:	74 f0       	brlt	.+28     	; 0x2cfe <utoa+0x24>
    2ce2:	45 32       	cpi	r20, 0x25	; 37
    2ce4:	64 f4       	brge	.+24     	; 0x2cfe <utoa+0x24>
    2ce6:	64 2f       	mov	r22, r20
    2ce8:	77 27       	eor	r23, r23
    2cea:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <__udivmodhi4>
    2cee:	80 5d       	subi	r24, 0xD0	; 208
    2cf0:	8a 33       	cpi	r24, 0x3A	; 58
    2cf2:	0c f0       	brlt	.+2      	; 0x2cf6 <utoa+0x1c>
    2cf4:	89 5d       	subi	r24, 0xD9	; 217
    2cf6:	81 93       	st	Z+, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	00 97       	sbiw	r24, 0x00	; 0
    2cfc:	a1 f7       	brne	.-24     	; 0x2ce6 <utoa+0xc>
    2cfe:	10 82       	st	Z, r1
    2d00:	c9 01       	movw	r24, r18
    2d02:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <strrev>

00002d06 <__eerd_byte_m324pa>:
    2d06:	f9 99       	sbic	0x1f, 1	; 31
    2d08:	fe cf       	rjmp	.-4      	; 0x2d06 <__eerd_byte_m324pa>
    2d0a:	92 bd       	out	0x22, r25	; 34
    2d0c:	81 bd       	out	0x21, r24	; 33
    2d0e:	f8 9a       	sbi	0x1f, 0	; 31
    2d10:	99 27       	eor	r25, r25
    2d12:	80 b5       	in	r24, 0x20	; 32
    2d14:	08 95       	ret

00002d16 <__eerd_dword_m324pa>:
    2d16:	a6 e1       	ldi	r26, 0x16	; 22
    2d18:	b0 e0       	ldi	r27, 0x00	; 0
    2d1a:	44 e0       	ldi	r20, 0x04	; 4
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__eerd_blraw_m324pa>

00002d22 <__eerd_word_m324pa>:
    2d22:	a8 e1       	ldi	r26, 0x18	; 24
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	42 e0       	ldi	r20, 0x02	; 2
    2d28:	50 e0       	ldi	r21, 0x00	; 0
    2d2a:	0c 94 fd 18 	jmp	0x31fa	; 0x31fa <__eerd_blraw_m324pa>

00002d2e <__eeupd_byte_m324pa>:
    2d2e:	26 2f       	mov	r18, r22

00002d30 <__eeupd_r18_m324pa>:
    2d30:	f9 99       	sbic	0x1f, 1	; 31
    2d32:	fe cf       	rjmp	.-4      	; 0x2d30 <__eeupd_r18_m324pa>
    2d34:	92 bd       	out	0x22, r25	; 34
    2d36:	81 bd       	out	0x21, r24	; 33
    2d38:	f8 9a       	sbi	0x1f, 0	; 31
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	00 b4       	in	r0, 0x20	; 32
    2d3e:	02 16       	cp	r0, r18
    2d40:	39 f0       	breq	.+14     	; 0x2d50 <__eeupd_r18_m324pa+0x20>
    2d42:	1f ba       	out	0x1f, r1	; 31
    2d44:	20 bd       	out	0x20, r18	; 32
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	fa 9a       	sbi	0x1f, 2	; 31
    2d4c:	f9 9a       	sbi	0x1f, 1	; 31
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	08 95       	ret

00002d52 <__eeupd_dword_m324pa>:
    2d52:	03 96       	adiw	r24, 0x03	; 3
    2d54:	27 2f       	mov	r18, r23
    2d56:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__eeupd_r18_m324pa>
    2d5a:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__eeupd_byte_m324pa>
    2d5e:	25 2f       	mov	r18, r21
    2d60:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__eeupd_r18_m324pa>
    2d64:	24 2f       	mov	r18, r20
    2d66:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__eeupd_r18_m324pa>

00002d6a <__eeupd_word_m324pa>:
    2d6a:	01 96       	adiw	r24, 0x01	; 1
    2d6c:	27 2f       	mov	r18, r23
    2d6e:	0e 94 98 16 	call	0x2d30	; 0x2d30 <__eeupd_r18_m324pa>
    2d72:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__eeupd_byte_m324pa>

00002d76 <dtoa_prf>:
    2d76:	a9 e0       	ldi	r26, 0x09	; 9
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e1 ec       	ldi	r30, 0xC1	; 193
    2d7c:	f6 e1       	ldi	r31, 0x16	; 22
    2d7e:	0c 94 0f 19 	jmp	0x321e	; 0x321e <__prologue_saves__+0x8>
    2d82:	6a 01       	movw	r12, r20
    2d84:	12 2f       	mov	r17, r18
    2d86:	f0 2e       	mov	r15, r16
    2d88:	2b e3       	ldi	r18, 0x3B	; 59
    2d8a:	20 17       	cp	r18, r16
    2d8c:	18 f0       	brcs	.+6      	; 0x2d94 <dtoa_prf+0x1e>
    2d8e:	b0 2e       	mov	r11, r16
    2d90:	b3 94       	inc	r11
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <dtoa_prf+0x22>
    2d94:	3c e3       	ldi	r19, 0x3C	; 60
    2d96:	b3 2e       	mov	r11, r19
    2d98:	ae 01       	movw	r20, r28
    2d9a:	4f 5f       	subi	r20, 0xFF	; 255
    2d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9e:	27 e0       	ldi	r18, 0x07	; 7
    2da0:	0b 2d       	mov	r16, r11
    2da2:	0e 94 13 18 	call	0x3026	; 0x3026 <__ftoa_engine>
    2da6:	bc 01       	movw	r22, r24
    2da8:	a9 81       	ldd	r26, Y+1	; 0x01
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	cd 01       	movw	r24, r26
    2dae:	89 70       	andi	r24, 0x09	; 9
    2db0:	90 70       	andi	r25, 0x00	; 0
    2db2:	81 30       	cpi	r24, 0x01	; 1
    2db4:	91 05       	cpc	r25, r1
    2db6:	31 f0       	breq	.+12     	; 0x2dc4 <dtoa_prf+0x4e>
    2db8:	e1 fc       	sbrc	r14, 1
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <dtoa_prf+0x52>
    2dbc:	e0 fe       	sbrs	r14, 0
    2dbe:	06 c0       	rjmp	.+12     	; 0x2dcc <dtoa_prf+0x56>
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <dtoa_prf+0x58>
    2dc4:	4d e2       	ldi	r20, 0x2D	; 45
    2dc6:	03 c0       	rjmp	.+6      	; 0x2dce <dtoa_prf+0x58>
    2dc8:	4b e2       	ldi	r20, 0x2B	; 43
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <dtoa_prf+0x58>
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	a3 ff       	sbrs	r26, 3
    2dd0:	36 c0       	rjmp	.+108    	; 0x2e3e <dtoa_prf+0xc8>
    2dd2:	44 23       	and	r20, r20
    2dd4:	11 f0       	breq	.+4      	; 0x2dda <dtoa_prf+0x64>
    2dd6:	84 e0       	ldi	r24, 0x04	; 4
    2dd8:	01 c0       	rjmp	.+2      	; 0x2ddc <dtoa_prf+0x66>
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	81 17       	cp	r24, r17
    2dde:	10 f4       	brcc	.+4      	; 0x2de4 <dtoa_prf+0x6e>
    2de0:	18 1b       	sub	r17, r24
    2de2:	01 c0       	rjmp	.+2      	; 0x2de6 <dtoa_prf+0x70>
    2de4:	10 e0       	ldi	r17, 0x00	; 0
    2de6:	e4 fc       	sbrc	r14, 4
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <dtoa_prf+0x8a>
    2dea:	91 2f       	mov	r25, r17
    2dec:	f6 01       	movw	r30, r12
    2dee:	80 e2       	ldi	r24, 0x20	; 32
    2df0:	02 c0       	rjmp	.+4      	; 0x2df6 <dtoa_prf+0x80>
    2df2:	81 93       	st	Z+, r24
    2df4:	91 50       	subi	r25, 0x01	; 1
    2df6:	99 23       	and	r25, r25
    2df8:	e1 f7       	brne	.-8      	; 0x2df2 <dtoa_prf+0x7c>
    2dfa:	c1 0e       	add	r12, r17
    2dfc:	d1 1c       	adc	r13, r1
    2dfe:	10 e0       	ldi	r17, 0x00	; 0
    2e00:	44 23       	and	r20, r20
    2e02:	19 f0       	breq	.+6      	; 0x2e0a <dtoa_prf+0x94>
    2e04:	f6 01       	movw	r30, r12
    2e06:	41 93       	st	Z+, r20
    2e08:	6f 01       	movw	r12, r30
    2e0a:	e2 fe       	sbrs	r14, 2
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <dtoa_prf+0xa2>
    2e0e:	8e e4       	ldi	r24, 0x4E	; 78
    2e10:	f6 01       	movw	r30, r12
    2e12:	80 83       	st	Z, r24
    2e14:	91 e4       	ldi	r25, 0x41	; 65
    2e16:	04 c0       	rjmp	.+8      	; 0x2e20 <dtoa_prf+0xaa>
    2e18:	8e e6       	ldi	r24, 0x6E	; 110
    2e1a:	f6 01       	movw	r30, r12
    2e1c:	80 83       	st	Z, r24
    2e1e:	91 e6       	ldi	r25, 0x61	; 97
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	82 83       	std	Z+2, r24	; 0x02
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	c8 0e       	add	r12, r24
    2e2a:	d9 1e       	adc	r13, r25
    2e2c:	81 2f       	mov	r24, r17
    2e2e:	f6 01       	movw	r30, r12
    2e30:	90 e2       	ldi	r25, 0x20	; 32
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <dtoa_prf+0xc2>
    2e34:	91 93       	st	Z+, r25
    2e36:	81 50       	subi	r24, 0x01	; 1
    2e38:	88 23       	and	r24, r24
    2e3a:	e1 f7       	brne	.-8      	; 0x2e34 <dtoa_prf+0xbe>
    2e3c:	3a c0       	rjmp	.+116    	; 0x2eb2 <dtoa_prf+0x13c>
    2e3e:	a2 ff       	sbrs	r26, 2
    2e40:	3f c0       	rjmp	.+126    	; 0x2ec0 <dtoa_prf+0x14a>
    2e42:	44 23       	and	r20, r20
    2e44:	11 f0       	breq	.+4      	; 0x2e4a <dtoa_prf+0xd4>
    2e46:	84 e0       	ldi	r24, 0x04	; 4
    2e48:	01 c0       	rjmp	.+2      	; 0x2e4c <dtoa_prf+0xd6>
    2e4a:	83 e0       	ldi	r24, 0x03	; 3
    2e4c:	81 17       	cp	r24, r17
    2e4e:	10 f4       	brcc	.+4      	; 0x2e54 <dtoa_prf+0xde>
    2e50:	18 1b       	sub	r17, r24
    2e52:	01 c0       	rjmp	.+2      	; 0x2e56 <dtoa_prf+0xe0>
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	e4 fc       	sbrc	r14, 4
    2e58:	0b c0       	rjmp	.+22     	; 0x2e70 <dtoa_prf+0xfa>
    2e5a:	91 2f       	mov	r25, r17
    2e5c:	f6 01       	movw	r30, r12
    2e5e:	80 e2       	ldi	r24, 0x20	; 32
    2e60:	02 c0       	rjmp	.+4      	; 0x2e66 <dtoa_prf+0xf0>
    2e62:	81 93       	st	Z+, r24
    2e64:	91 50       	subi	r25, 0x01	; 1
    2e66:	99 23       	and	r25, r25
    2e68:	e1 f7       	brne	.-8      	; 0x2e62 <dtoa_prf+0xec>
    2e6a:	c1 0e       	add	r12, r17
    2e6c:	d1 1c       	adc	r13, r1
    2e6e:	10 e0       	ldi	r17, 0x00	; 0
    2e70:	44 23       	and	r20, r20
    2e72:	19 f0       	breq	.+6      	; 0x2e7a <dtoa_prf+0x104>
    2e74:	f6 01       	movw	r30, r12
    2e76:	41 93       	st	Z+, r20
    2e78:	6f 01       	movw	r12, r30
    2e7a:	e2 fe       	sbrs	r14, 2
    2e7c:	07 c0       	rjmp	.+14     	; 0x2e8c <dtoa_prf+0x116>
    2e7e:	89 e4       	ldi	r24, 0x49	; 73
    2e80:	f6 01       	movw	r30, r12
    2e82:	80 83       	st	Z, r24
    2e84:	8e e4       	ldi	r24, 0x4E	; 78
    2e86:	81 83       	std	Z+1, r24	; 0x01
    2e88:	86 e4       	ldi	r24, 0x46	; 70
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <dtoa_prf+0x122>
    2e8c:	89 e6       	ldi	r24, 0x69	; 105
    2e8e:	f6 01       	movw	r30, r12
    2e90:	80 83       	st	Z, r24
    2e92:	8e e6       	ldi	r24, 0x6E	; 110
    2e94:	81 83       	std	Z+1, r24	; 0x01
    2e96:	86 e6       	ldi	r24, 0x66	; 102
    2e98:	82 83       	std	Z+2, r24	; 0x02
    2e9a:	83 e0       	ldi	r24, 0x03	; 3
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	c8 0e       	add	r12, r24
    2ea0:	d9 1e       	adc	r13, r25
    2ea2:	81 2f       	mov	r24, r17
    2ea4:	f6 01       	movw	r30, r12
    2ea6:	90 e2       	ldi	r25, 0x20	; 32
    2ea8:	02 c0       	rjmp	.+4      	; 0x2eae <dtoa_prf+0x138>
    2eaa:	91 93       	st	Z+, r25
    2eac:	81 50       	subi	r24, 0x01	; 1
    2eae:	88 23       	and	r24, r24
    2eb0:	e1 f7       	brne	.-8      	; 0x2eaa <dtoa_prf+0x134>
    2eb2:	c1 0e       	add	r12, r17
    2eb4:	d1 1c       	adc	r13, r1
    2eb6:	f6 01       	movw	r30, r12
    2eb8:	10 82       	st	Z, r1
    2eba:	8e ef       	ldi	r24, 0xFE	; 254
    2ebc:	9f ef       	ldi	r25, 0xFF	; 255
    2ebe:	af c0       	rjmp	.+350    	; 0x301e <dtoa_prf+0x2a8>
    2ec0:	21 e0       	ldi	r18, 0x01	; 1
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	44 23       	and	r20, r20
    2ec6:	11 f4       	brne	.+4      	; 0x2ecc <dtoa_prf+0x156>
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	16 16       	cp	r1, r22
    2ece:	17 06       	cpc	r1, r23
    2ed0:	1c f4       	brge	.+6      	; 0x2ed8 <dtoa_prf+0x162>
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <dtoa_prf+0x166>
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	28 0f       	add	r18, r24
    2ede:	39 1f       	adc	r19, r25
    2ee0:	ff 20       	and	r15, r15
    2ee2:	21 f0       	breq	.+8      	; 0x2eec <dtoa_prf+0x176>
    2ee4:	8f 2d       	mov	r24, r15
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <dtoa_prf+0x17a>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	82 0f       	add	r24, r18
    2ef2:	93 1f       	adc	r25, r19
    2ef4:	21 2f       	mov	r18, r17
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	82 17       	cp	r24, r18
    2efa:	93 07       	cpc	r25, r19
    2efc:	1c f4       	brge	.+6      	; 0x2f04 <dtoa_prf+0x18e>
    2efe:	51 2f       	mov	r21, r17
    2f00:	58 1b       	sub	r21, r24
    2f02:	01 c0       	rjmp	.+2      	; 0x2f06 <dtoa_prf+0x190>
    2f04:	50 e0       	ldi	r21, 0x00	; 0
    2f06:	8e 2d       	mov	r24, r14
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	9c 01       	movw	r18, r24
    2f0c:	20 71       	andi	r18, 0x10	; 16
    2f0e:	30 70       	andi	r19, 0x00	; 0
    2f10:	e4 fc       	sbrc	r14, 4
    2f12:	0d c0       	rjmp	.+26     	; 0x2f2e <dtoa_prf+0x1b8>
    2f14:	e3 fc       	sbrc	r14, 3
    2f16:	0b c0       	rjmp	.+22     	; 0x2f2e <dtoa_prf+0x1b8>
    2f18:	85 2f       	mov	r24, r21
    2f1a:	f6 01       	movw	r30, r12
    2f1c:	90 e2       	ldi	r25, 0x20	; 32
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <dtoa_prf+0x1ae>
    2f20:	91 93       	st	Z+, r25
    2f22:	81 50       	subi	r24, 0x01	; 1
    2f24:	88 23       	and	r24, r24
    2f26:	e1 f7       	brne	.-8      	; 0x2f20 <dtoa_prf+0x1aa>
    2f28:	c5 0e       	add	r12, r21
    2f2a:	d1 1c       	adc	r13, r1
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
    2f2e:	44 23       	and	r20, r20
    2f30:	19 f0       	breq	.+6      	; 0x2f38 <dtoa_prf+0x1c2>
    2f32:	f6 01       	movw	r30, r12
    2f34:	41 93       	st	Z+, r20
    2f36:	6f 01       	movw	r12, r30
    2f38:	21 15       	cp	r18, r1
    2f3a:	31 05       	cpc	r19, r1
    2f3c:	59 f4       	brne	.+22     	; 0x2f54 <dtoa_prf+0x1de>
    2f3e:	85 2f       	mov	r24, r21
    2f40:	f6 01       	movw	r30, r12
    2f42:	90 e3       	ldi	r25, 0x30	; 48
    2f44:	02 c0       	rjmp	.+4      	; 0x2f4a <dtoa_prf+0x1d4>
    2f46:	91 93       	st	Z+, r25
    2f48:	81 50       	subi	r24, 0x01	; 1
    2f4a:	88 23       	and	r24, r24
    2f4c:	e1 f7       	brne	.-8      	; 0x2f46 <dtoa_prf+0x1d0>
    2f4e:	c5 0e       	add	r12, r21
    2f50:	d1 1c       	adc	r13, r1
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	b6 0e       	add	r11, r22
    2f56:	4a 81       	ldd	r20, Y+2	; 0x02
    2f58:	20 e1       	ldi	r18, 0x10	; 16
    2f5a:	62 2e       	mov	r6, r18
    2f5c:	71 2c       	mov	r7, r1
    2f5e:	6a 22       	and	r6, r26
    2f60:	7b 22       	and	r7, r27
    2f62:	a4 ff       	sbrs	r26, 4
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <dtoa_prf+0x1f6>
    2f66:	41 33       	cpi	r20, 0x31	; 49
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <dtoa_prf+0x1f6>
    2f6a:	ba 94       	dec	r11
    2f6c:	1b 14       	cp	r1, r11
    2f6e:	2c f4       	brge	.+10     	; 0x2f7a <dtoa_prf+0x204>
    2f70:	8b 2d       	mov	r24, r11
    2f72:	89 30       	cpi	r24, 0x09	; 9
    2f74:	18 f0       	brcs	.+6      	; 0x2f7c <dtoa_prf+0x206>
    2f76:	88 e0       	ldi	r24, 0x08	; 8
    2f78:	01 c0       	rjmp	.+2      	; 0x2f7c <dtoa_prf+0x206>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	9b 01       	movw	r18, r22
    2f7e:	77 ff       	sbrs	r23, 7
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <dtoa_prf+0x210>
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	a0 e0       	ldi	r26, 0x00	; 0
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	9e e2       	ldi	r25, 0x2E	; 46
    2f8c:	e9 2e       	mov	r14, r25
    2f8e:	4b 01       	movw	r8, r22
    2f90:	88 1a       	sub	r8, r24
    2f92:	91 08       	sbc	r9, r1
    2f94:	cb 01       	movw	r24, r22
    2f96:	82 1b       	sub	r24, r18
    2f98:	93 0b       	sbc	r25, r19
    2f9a:	8e 01       	movw	r16, r28
    2f9c:	0f 5f       	subi	r16, 0xFF	; 255
    2f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2fa0:	08 0f       	add	r16, r24
    2fa2:	19 1f       	adc	r17, r25
    2fa4:	8f 2d       	mov	r24, r15
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	aa 24       	eor	r10, r10
    2faa:	bb 24       	eor	r11, r11
    2fac:	a8 1a       	sub	r10, r24
    2fae:	b9 0a       	sbc	r11, r25
    2fb0:	ff ef       	ldi	r31, 0xFF	; 255
    2fb2:	2f 3f       	cpi	r18, 0xFF	; 255
    2fb4:	3f 07       	cpc	r19, r31
    2fb6:	19 f4       	brne	.+6      	; 0x2fbe <dtoa_prf+0x248>
    2fb8:	f6 01       	movw	r30, r12
    2fba:	e1 92       	st	Z+, r14
    2fbc:	6f 01       	movw	r12, r30
    2fbe:	62 17       	cp	r22, r18
    2fc0:	73 07       	cpc	r23, r19
    2fc2:	44 f0       	brlt	.+16     	; 0x2fd4 <dtoa_prf+0x25e>
    2fc4:	82 16       	cp	r8, r18
    2fc6:	93 06       	cpc	r9, r19
    2fc8:	2c f4       	brge	.+10     	; 0x2fd4 <dtoa_prf+0x25e>
    2fca:	f8 01       	movw	r30, r16
    2fcc:	ea 0f       	add	r30, r26
    2fce:	fb 1f       	adc	r31, r27
    2fd0:	81 81       	ldd	r24, Z+1	; 0x01
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <dtoa_prf+0x260>
    2fd4:	80 e3       	ldi	r24, 0x30	; 48
    2fd6:	21 50       	subi	r18, 0x01	; 1
    2fd8:	30 40       	sbci	r19, 0x00	; 0
    2fda:	11 96       	adiw	r26, 0x01	; 1
    2fdc:	2a 15       	cp	r18, r10
    2fde:	3b 05       	cpc	r19, r11
    2fe0:	24 f0       	brlt	.+8      	; 0x2fea <dtoa_prf+0x274>
    2fe2:	f6 01       	movw	r30, r12
    2fe4:	81 93       	st	Z+, r24
    2fe6:	6f 01       	movw	r12, r30
    2fe8:	e3 cf       	rjmp	.-58     	; 0x2fb0 <dtoa_prf+0x23a>
    2fea:	26 17       	cp	r18, r22
    2fec:	37 07       	cpc	r19, r23
    2fee:	41 f4       	brne	.+16     	; 0x3000 <dtoa_prf+0x28a>
    2ff0:	46 33       	cpi	r20, 0x36	; 54
    2ff2:	28 f4       	brcc	.+10     	; 0x2ffe <dtoa_prf+0x288>
    2ff4:	45 33       	cpi	r20, 0x35	; 53
    2ff6:	21 f4       	brne	.+8      	; 0x3000 <dtoa_prf+0x28a>
    2ff8:	61 14       	cp	r6, r1
    2ffa:	71 04       	cpc	r7, r1
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <dtoa_prf+0x28a>
    2ffe:	81 e3       	ldi	r24, 0x31	; 49
    3000:	f6 01       	movw	r30, r12
    3002:	81 93       	st	Z+, r24
    3004:	85 2f       	mov	r24, r21
    3006:	df 01       	movw	r26, r30
    3008:	90 e2       	ldi	r25, 0x20	; 32
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <dtoa_prf+0x29a>
    300c:	9d 93       	st	X+, r25
    300e:	81 50       	subi	r24, 0x01	; 1
    3010:	88 23       	and	r24, r24
    3012:	e1 f7       	brne	.-8      	; 0x300c <dtoa_prf+0x296>
    3014:	e5 0f       	add	r30, r21
    3016:	f1 1d       	adc	r31, r1
    3018:	10 82       	st	Z, r1
    301a:	80 e0       	ldi	r24, 0x00	; 0
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	29 96       	adiw	r28, 0x09	; 9
    3020:	ee e0       	ldi	r30, 0x0E	; 14
    3022:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__epilogue_restores__+0x8>

00003026 <__ftoa_engine>:
    3026:	28 30       	cpi	r18, 0x08	; 8
    3028:	08 f0       	brcs	.+2      	; 0x302c <__ftoa_engine+0x6>
    302a:	27 e0       	ldi	r18, 0x07	; 7
    302c:	33 27       	eor	r19, r19
    302e:	da 01       	movw	r26, r20
    3030:	99 0f       	add	r25, r25
    3032:	31 1d       	adc	r19, r1
    3034:	87 fd       	sbrc	r24, 7
    3036:	91 60       	ori	r25, 0x01	; 1
    3038:	00 96       	adiw	r24, 0x00	; 0
    303a:	61 05       	cpc	r22, r1
    303c:	71 05       	cpc	r23, r1
    303e:	39 f4       	brne	.+14     	; 0x304e <__ftoa_engine+0x28>
    3040:	32 60       	ori	r19, 0x02	; 2
    3042:	2e 5f       	subi	r18, 0xFE	; 254
    3044:	3d 93       	st	X+, r19
    3046:	30 e3       	ldi	r19, 0x30	; 48
    3048:	2a 95       	dec	r18
    304a:	e1 f7       	brne	.-8      	; 0x3044 <__ftoa_engine+0x1e>
    304c:	08 95       	ret
    304e:	9f 3f       	cpi	r25, 0xFF	; 255
    3050:	30 f0       	brcs	.+12     	; 0x305e <__ftoa_engine+0x38>
    3052:	80 38       	cpi	r24, 0x80	; 128
    3054:	71 05       	cpc	r23, r1
    3056:	61 05       	cpc	r22, r1
    3058:	09 f0       	breq	.+2      	; 0x305c <__ftoa_engine+0x36>
    305a:	3c 5f       	subi	r19, 0xFC	; 252
    305c:	3c 5f       	subi	r19, 0xFC	; 252
    305e:	3d 93       	st	X+, r19
    3060:	91 30       	cpi	r25, 0x01	; 1
    3062:	08 f0       	brcs	.+2      	; 0x3066 <__ftoa_engine+0x40>
    3064:	80 68       	ori	r24, 0x80	; 128
    3066:	91 1d       	adc	r25, r1
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	1f 93       	push	r17
    306e:	0f 93       	push	r16
    3070:	ff 92       	push	r15
    3072:	ef 92       	push	r14
    3074:	19 2f       	mov	r17, r25
    3076:	98 7f       	andi	r25, 0xF8	; 248
    3078:	96 95       	lsr	r25
    307a:	e9 2f       	mov	r30, r25
    307c:	96 95       	lsr	r25
    307e:	96 95       	lsr	r25
    3080:	e9 0f       	add	r30, r25
    3082:	ff 27       	eor	r31, r31
    3084:	ea 52       	subi	r30, 0x2A	; 42
    3086:	ff 4f       	sbci	r31, 0xFF	; 255
    3088:	99 27       	eor	r25, r25
    308a:	33 27       	eor	r19, r19
    308c:	ee 24       	eor	r14, r14
    308e:	ff 24       	eor	r15, r15
    3090:	a7 01       	movw	r20, r14
    3092:	e7 01       	movw	r28, r14
    3094:	05 90       	lpm	r0, Z+
    3096:	08 94       	sec
    3098:	07 94       	ror	r0
    309a:	28 f4       	brcc	.+10     	; 0x30a6 <__ftoa_engine+0x80>
    309c:	36 0f       	add	r19, r22
    309e:	e7 1e       	adc	r14, r23
    30a0:	f8 1e       	adc	r15, r24
    30a2:	49 1f       	adc	r20, r25
    30a4:	51 1d       	adc	r21, r1
    30a6:	66 0f       	add	r22, r22
    30a8:	77 1f       	adc	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	06 94       	lsr	r0
    30b0:	a1 f7       	brne	.-24     	; 0x309a <__ftoa_engine+0x74>
    30b2:	05 90       	lpm	r0, Z+
    30b4:	07 94       	ror	r0
    30b6:	28 f4       	brcc	.+10     	; 0x30c2 <__ftoa_engine+0x9c>
    30b8:	e7 0e       	add	r14, r23
    30ba:	f8 1e       	adc	r15, r24
    30bc:	49 1f       	adc	r20, r25
    30be:	56 1f       	adc	r21, r22
    30c0:	c1 1d       	adc	r28, r1
    30c2:	77 0f       	add	r23, r23
    30c4:	88 1f       	adc	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	66 1f       	adc	r22, r22
    30ca:	06 94       	lsr	r0
    30cc:	a1 f7       	brne	.-24     	; 0x30b6 <__ftoa_engine+0x90>
    30ce:	05 90       	lpm	r0, Z+
    30d0:	07 94       	ror	r0
    30d2:	28 f4       	brcc	.+10     	; 0x30de <__ftoa_engine+0xb8>
    30d4:	f8 0e       	add	r15, r24
    30d6:	49 1f       	adc	r20, r25
    30d8:	56 1f       	adc	r21, r22
    30da:	c7 1f       	adc	r28, r23
    30dc:	d1 1d       	adc	r29, r1
    30de:	88 0f       	add	r24, r24
    30e0:	99 1f       	adc	r25, r25
    30e2:	66 1f       	adc	r22, r22
    30e4:	77 1f       	adc	r23, r23
    30e6:	06 94       	lsr	r0
    30e8:	a1 f7       	brne	.-24     	; 0x30d2 <__ftoa_engine+0xac>
    30ea:	05 90       	lpm	r0, Z+
    30ec:	07 94       	ror	r0
    30ee:	20 f4       	brcc	.+8      	; 0x30f8 <__ftoa_engine+0xd2>
    30f0:	49 0f       	add	r20, r25
    30f2:	56 1f       	adc	r21, r22
    30f4:	c7 1f       	adc	r28, r23
    30f6:	d8 1f       	adc	r29, r24
    30f8:	99 0f       	add	r25, r25
    30fa:	66 1f       	adc	r22, r22
    30fc:	77 1f       	adc	r23, r23
    30fe:	88 1f       	adc	r24, r24
    3100:	06 94       	lsr	r0
    3102:	a9 f7       	brne	.-22     	; 0x30ee <__ftoa_engine+0xc8>
    3104:	84 91       	lpm	r24, Z
    3106:	10 95       	com	r17
    3108:	17 70       	andi	r17, 0x07	; 7
    310a:	41 f0       	breq	.+16     	; 0x311c <__ftoa_engine+0xf6>
    310c:	d6 95       	lsr	r29
    310e:	c7 95       	ror	r28
    3110:	57 95       	ror	r21
    3112:	47 95       	ror	r20
    3114:	f7 94       	ror	r15
    3116:	e7 94       	ror	r14
    3118:	1a 95       	dec	r17
    311a:	c1 f7       	brne	.-16     	; 0x310c <__ftoa_engine+0xe6>
    311c:	ec e7       	ldi	r30, 0x7C	; 124
    311e:	f0 e0       	ldi	r31, 0x00	; 0
    3120:	68 94       	set
    3122:	15 90       	lpm	r1, Z+
    3124:	15 91       	lpm	r17, Z+
    3126:	35 91       	lpm	r19, Z+
    3128:	65 91       	lpm	r22, Z+
    312a:	95 91       	lpm	r25, Z+
    312c:	05 90       	lpm	r0, Z+
    312e:	7f e2       	ldi	r23, 0x2F	; 47
    3130:	73 95       	inc	r23
    3132:	e1 18       	sub	r14, r1
    3134:	f1 0a       	sbc	r15, r17
    3136:	43 0b       	sbc	r20, r19
    3138:	56 0b       	sbc	r21, r22
    313a:	c9 0b       	sbc	r28, r25
    313c:	d0 09       	sbc	r29, r0
    313e:	c0 f7       	brcc	.-16     	; 0x3130 <__ftoa_engine+0x10a>
    3140:	e1 0c       	add	r14, r1
    3142:	f1 1e       	adc	r15, r17
    3144:	43 1f       	adc	r20, r19
    3146:	56 1f       	adc	r21, r22
    3148:	c9 1f       	adc	r28, r25
    314a:	d0 1d       	adc	r29, r0
    314c:	7e f4       	brtc	.+30     	; 0x316c <__ftoa_engine+0x146>
    314e:	70 33       	cpi	r23, 0x30	; 48
    3150:	11 f4       	brne	.+4      	; 0x3156 <__ftoa_engine+0x130>
    3152:	8a 95       	dec	r24
    3154:	e6 cf       	rjmp	.-52     	; 0x3122 <__ftoa_engine+0xfc>
    3156:	e8 94       	clt
    3158:	01 50       	subi	r16, 0x01	; 1
    315a:	30 f0       	brcs	.+12     	; 0x3168 <__ftoa_engine+0x142>
    315c:	08 0f       	add	r16, r24
    315e:	0a f4       	brpl	.+2      	; 0x3162 <__ftoa_engine+0x13c>
    3160:	00 27       	eor	r16, r16
    3162:	02 17       	cp	r16, r18
    3164:	08 f4       	brcc	.+2      	; 0x3168 <__ftoa_engine+0x142>
    3166:	20 2f       	mov	r18, r16
    3168:	23 95       	inc	r18
    316a:	02 2f       	mov	r16, r18
    316c:	7a 33       	cpi	r23, 0x3A	; 58
    316e:	28 f0       	brcs	.+10     	; 0x317a <__ftoa_engine+0x154>
    3170:	79 e3       	ldi	r23, 0x39	; 57
    3172:	7d 93       	st	X+, r23
    3174:	2a 95       	dec	r18
    3176:	e9 f7       	brne	.-6      	; 0x3172 <__ftoa_engine+0x14c>
    3178:	10 c0       	rjmp	.+32     	; 0x319a <__ftoa_engine+0x174>
    317a:	7d 93       	st	X+, r23
    317c:	2a 95       	dec	r18
    317e:	89 f6       	brne	.-94     	; 0x3122 <__ftoa_engine+0xfc>
    3180:	06 94       	lsr	r0
    3182:	97 95       	ror	r25
    3184:	67 95       	ror	r22
    3186:	37 95       	ror	r19
    3188:	17 95       	ror	r17
    318a:	17 94       	ror	r1
    318c:	e1 18       	sub	r14, r1
    318e:	f1 0a       	sbc	r15, r17
    3190:	43 0b       	sbc	r20, r19
    3192:	56 0b       	sbc	r21, r22
    3194:	c9 0b       	sbc	r28, r25
    3196:	d0 09       	sbc	r29, r0
    3198:	98 f0       	brcs	.+38     	; 0x31c0 <__ftoa_engine+0x19a>
    319a:	23 95       	inc	r18
    319c:	7e 91       	ld	r23, -X
    319e:	73 95       	inc	r23
    31a0:	7a 33       	cpi	r23, 0x3A	; 58
    31a2:	08 f0       	brcs	.+2      	; 0x31a6 <__ftoa_engine+0x180>
    31a4:	70 e3       	ldi	r23, 0x30	; 48
    31a6:	7c 93       	st	X, r23
    31a8:	20 13       	cpse	r18, r16
    31aa:	b8 f7       	brcc	.-18     	; 0x319a <__ftoa_engine+0x174>
    31ac:	7e 91       	ld	r23, -X
    31ae:	70 61       	ori	r23, 0x10	; 16
    31b0:	7d 93       	st	X+, r23
    31b2:	30 f0       	brcs	.+12     	; 0x31c0 <__ftoa_engine+0x19a>
    31b4:	83 95       	inc	r24
    31b6:	71 e3       	ldi	r23, 0x31	; 49
    31b8:	7d 93       	st	X+, r23
    31ba:	70 e3       	ldi	r23, 0x30	; 48
    31bc:	2a 95       	dec	r18
    31be:	e1 f7       	brne	.-8      	; 0x31b8 <__ftoa_engine+0x192>
    31c0:	11 24       	eor	r1, r1
    31c2:	ef 90       	pop	r14
    31c4:	ff 90       	pop	r15
    31c6:	0f 91       	pop	r16
    31c8:	1f 91       	pop	r17
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	99 27       	eor	r25, r25
    31d0:	87 fd       	sbrc	r24, 7
    31d2:	90 95       	com	r25
    31d4:	08 95       	ret

000031d6 <strrev>:
    31d6:	dc 01       	movw	r26, r24
    31d8:	fc 01       	movw	r30, r24
    31da:	67 2f       	mov	r22, r23
    31dc:	71 91       	ld	r23, Z+
    31de:	77 23       	and	r23, r23
    31e0:	e1 f7       	brne	.-8      	; 0x31da <strrev+0x4>
    31e2:	32 97       	sbiw	r30, 0x02	; 2
    31e4:	04 c0       	rjmp	.+8      	; 0x31ee <strrev+0x18>
    31e6:	7c 91       	ld	r23, X
    31e8:	6d 93       	st	X+, r22
    31ea:	70 83       	st	Z, r23
    31ec:	62 91       	ld	r22, -Z
    31ee:	ae 17       	cp	r26, r30
    31f0:	bf 07       	cpc	r27, r31
    31f2:	c8 f3       	brcs	.-14     	; 0x31e6 <strrev+0x10>
    31f4:	08 95       	ret

000031f6 <__eerd_block_m324pa>:
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22

000031fa <__eerd_blraw_m324pa>:
    31fa:	fc 01       	movw	r30, r24
    31fc:	f9 99       	sbic	0x1f, 1	; 31
    31fe:	fe cf       	rjmp	.-4      	; 0x31fc <__eerd_blraw_m324pa+0x2>
    3200:	06 c0       	rjmp	.+12     	; 0x320e <__eerd_blraw_m324pa+0x14>
    3202:	f2 bd       	out	0x22, r31	; 34
    3204:	e1 bd       	out	0x21, r30	; 33
    3206:	f8 9a       	sbi	0x1f, 0	; 31
    3208:	31 96       	adiw	r30, 0x01	; 1
    320a:	00 b4       	in	r0, 0x20	; 32
    320c:	0d 92       	st	X+, r0
    320e:	41 50       	subi	r20, 0x01	; 1
    3210:	50 40       	sbci	r21, 0x00	; 0
    3212:	b8 f7       	brcc	.-18     	; 0x3202 <__eerd_blraw_m324pa+0x8>
    3214:	08 95       	ret

00003216 <__prologue_saves__>:
    3216:	2f 92       	push	r2
    3218:	3f 92       	push	r3
    321a:	4f 92       	push	r4
    321c:	5f 92       	push	r5
    321e:	6f 92       	push	r6
    3220:	7f 92       	push	r7
    3222:	8f 92       	push	r8
    3224:	9f 92       	push	r9
    3226:	af 92       	push	r10
    3228:	bf 92       	push	r11
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	ca 1b       	sub	r28, r26
    3240:	db 0b       	sbc	r29, r27
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
    324c:	09 94       	ijmp

0000324e <__epilogue_restores__>:
    324e:	2a 88       	ldd	r2, Y+18	; 0x12
    3250:	39 88       	ldd	r3, Y+17	; 0x11
    3252:	48 88       	ldd	r4, Y+16	; 0x10
    3254:	5f 84       	ldd	r5, Y+15	; 0x0f
    3256:	6e 84       	ldd	r6, Y+14	; 0x0e
    3258:	7d 84       	ldd	r7, Y+13	; 0x0d
    325a:	8c 84       	ldd	r8, Y+12	; 0x0c
    325c:	9b 84       	ldd	r9, Y+11	; 0x0b
    325e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3260:	b9 84       	ldd	r11, Y+9	; 0x09
    3262:	c8 84       	ldd	r12, Y+8	; 0x08
    3264:	df 80       	ldd	r13, Y+7	; 0x07
    3266:	ee 80       	ldd	r14, Y+6	; 0x06
    3268:	fd 80       	ldd	r15, Y+5	; 0x05
    326a:	0c 81       	ldd	r16, Y+4	; 0x04
    326c:	1b 81       	ldd	r17, Y+3	; 0x03
    326e:	aa 81       	ldd	r26, Y+2	; 0x02
    3270:	b9 81       	ldd	r27, Y+1	; 0x01
    3272:	ce 0f       	add	r28, r30
    3274:	d1 1d       	adc	r29, r1
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	f8 94       	cli
    327a:	de bf       	out	0x3e, r29	; 62
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	cd bf       	out	0x3d, r28	; 61
    3280:	ed 01       	movw	r28, r26
    3282:	08 95       	ret

00003284 <_exit>:
    3284:	f8 94       	cli

00003286 <__stop_program>:
    3286:	ff cf       	rjmp	.-2      	; 0x3286 <__stop_program>

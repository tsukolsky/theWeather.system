
theWeather.system_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00002992  00002a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002992  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  0080016e  0080016e  00002ab4  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00002ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000033fc  00000000  00000000  00002ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000b4f  00000000  00000000  00005eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  00006a08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000019b0  00000000  00000000  00006b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004c5  00000000  00000000  00008538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c5d  00000000  00000000  000089fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000684  00000000  00000000  0000965c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008ce  00000000  00000000  00009ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011ea  00000000  00000000  0000a5ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  0000b798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       c:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__vector_3>
      10:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      14:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      18:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      20:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      24:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      28:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      2c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_11>
      30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      3c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      4c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      50:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      58:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      5c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      60:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      68:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      6c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      70:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      74:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      78:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <_ZN5clock7addHourEj+0x82>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49a>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff24>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <_ZN10thermostat12addDataPointEdd+0x188>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <_Z9ReceivePiv+0x192>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <__do_clear_bss+0x6>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13c>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff7e>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <_Z10PutUart0Chc+0x16>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_start>:
     176:	8d 0f       	add	r24, r29

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d8 e0       	ldi	r29, 0x08	; 8
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e2 e9       	ldi	r30, 0x92	; 146
     18c:	f9 e2       	ldi	r31, 0x29	; 41
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	ae 36       	cpi	r26, 0x6E	; 110
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	ae e6       	ldi	r26, 0x6E	; 110
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 39       	cpi	r26, 0x91	; 145
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>

000001aa <__do_global_ctors>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	c8 e7       	ldi	r28, 0x78	; 120
     1ae:	d1 e0       	ldi	r29, 0x01	; 1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__do_global_ctors+0x10>
     1b2:	22 97       	sbiw	r28, 0x02	; 2
     1b4:	fe 01       	movw	r30, r28
     1b6:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <__tablejump__>
     1ba:	c6 37       	cpi	r28, 0x76	; 118
     1bc:	d1 07       	cpc	r29, r17
     1be:	c9 f7       	brne	.-14     	; 0x1b2 <__do_global_ctors+0x8>
     1c0:	0e 94 c7 08 	call	0x118e	; 0x118e <main>
     1c4:	0c 94 c7 14 	jmp	0x298e	; 0x298e <_exit>

000001c8 <__bad_interrupt>:
     1c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001cc <_Z10PutUart0Chc>:
void PutUart0Ch(char ch);
void Print0(char string[]);

/**********************************************************************************************************************************/
void PutUart0Ch(char ch)
{
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	0f 92       	push	r0
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
     1d8:	00 00       	nop
     1da:	80 ec       	ldi	r24, 0xC0	; 192
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	80 72       	andi	r24, 0x20	; 32
     1e8:	90 70       	andi	r25, 0x00	; 0
     1ea:	21 e0       	ldi	r18, 0x01	; 1
     1ec:	00 97       	sbiw	r24, 0x00	; 0
     1ee:	09 f0       	breq	.+2      	; 0x1f2 <_Z10PutUart0Chc+0x26>
     1f0:	20 e0       	ldi	r18, 0x00	; 0
     1f2:	22 23       	and	r18, r18
     1f4:	91 f7       	brne	.-28     	; 0x1da <_Z10PutUart0Chc+0xe>
	UDR0 = ch;
     1f6:	86 ec       	ldi	r24, 0xC6	; 198
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	fc 01       	movw	r30, r24
     1fe:	20 83       	st	Z, r18
}
     200:	0f 90       	pop	r0
     202:	df 91       	pop	r29
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <_Z6Print0Pc>:
/**********************************************************************************************************************************/
void Print0(char string[])
{
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	00 d0       	rcall	.+0      	; 0x20e <_Z6Print0Pc+0x6>
     20e:	0f 92       	push	r0
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	9b 83       	std	Y+3, r25	; 0x03
     216:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     218:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     21a:	0e c0       	rjmp	.+28     	; 0x238 <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i]);  //send byte
     21c:	89 81       	ldd	r24, Y+1	; 0x01
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	2a 81       	ldd	r18, Y+2	; 0x02
     224:	3b 81       	ldd	r19, Y+3	; 0x03
     226:	82 0f       	add	r24, r18
     228:	93 1f       	adc	r25, r19
     22a:	fc 01       	movw	r30, r24
     22c:	80 81       	ld	r24, Z
     22e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z10PutUart0Chc>
		i += 1;
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	8f 5f       	subi	r24, 0xFF	; 255
     236:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{
	BYTE i;
	i = 0;

	while (string[i]) {
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	88 2f       	mov	r24, r24
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	2a 81       	ldd	r18, Y+2	; 0x02
     240:	3b 81       	ldd	r19, Y+3	; 0x03
     242:	82 0f       	add	r24, r18
     244:	93 1f       	adc	r25, r19
     246:	fc 01       	movw	r30, r24
     248:	90 81       	ld	r25, Z
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	99 23       	and	r25, r25
     24e:	09 f4       	brne	.+2      	; 0x252 <_Z6Print0Pc+0x4a>
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	88 23       	and	r24, r24
     254:	19 f7       	brne	.-58     	; 0x21c <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i]);  //send byte
		i += 1;
	}
}
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <_Z9ReceivePiv>:
/**********************************************************************************************************************************/
void ReceivePi(){
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	60 97       	sbiw	r28, 0x10	; 16
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
     276:	19 82       	std	Y+1, r1	; 0x01
     278:	1a 82       	std	Y+2, r1	; 0x02
	BOOL noDelimiter=fTrue;
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	8b 83       	std	Y+3, r24	; 0x03
	
	while (flagReceivePi){
     27e:	d9 c0       	rjmp	.+434    	; 0x432 <_Z9ReceivePiv+0x1d0>
		switch (state) {
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	88 2f       	mov	r24, r24
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	91 05       	cpc	r25, r1
     28a:	09 f4       	brne	.+2      	; 0x28e <_Z9ReceivePiv+0x2c>
     28c:	6b c0       	rjmp	.+214    	; 0x364 <_Z9ReceivePiv+0x102>
     28e:	83 30       	cpi	r24, 0x03	; 3
     290:	91 05       	cpc	r25, r1
     292:	3c f4       	brge	.+14     	; 0x2a2 <_Z9ReceivePiv+0x40>
     294:	00 97       	sbiw	r24, 0x00	; 0
     296:	71 f0       	breq	.+28     	; 0x2b4 <_Z9ReceivePiv+0x52>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	91 05       	cpc	r25, r1
     29c:	09 f4       	brne	.+2      	; 0x2a0 <_Z9ReceivePiv+0x3e>
     29e:	52 c0       	rjmp	.+164    	; 0x344 <_Z9ReceivePiv+0xe2>
     2a0:	c5 c0       	rjmp	.+394    	; 0x42c <_Z9ReceivePiv+0x1ca>
     2a2:	83 30       	cpi	r24, 0x03	; 3
     2a4:	91 05       	cpc	r25, r1
     2a6:	09 f4       	brne	.+2      	; 0x2aa <_Z9ReceivePiv+0x48>
     2a8:	97 c0       	rjmp	.+302    	; 0x3d8 <_Z9ReceivePiv+0x176>
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	91 05       	cpc	r25, r1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <_Z9ReceivePiv+0x50>
     2b0:	b6 c0       	rjmp	.+364    	; 0x41e <_Z9ReceivePiv+0x1bc>
     2b2:	bc c0       	rjmp	.+376    	; 0x42c <_Z9ReceivePiv+0x1ca>
			case 0:{
				//Send ACK
				Print0("ACK.");
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
				state=1;
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	8a 83       	std	Y+2, r24	; 0x02
				break;
     2c0:	b8 c0       	rjmp	.+368    	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
     2c2:	00 00       	nop
     2c4:	80 ec       	ldi	r24, 0xC0	; 192
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 23       	and	r24, r24
     2ce:	34 f0       	brlt	.+12     	; 0x2dc <_Z9ReceivePiv+0x7a>
     2d0:	80 91 72 01 	lds	r24, 0x0172
     2d4:	88 23       	and	r24, r24
     2d6:	11 f0       	breq	.+4      	; 0x2dc <_Z9ReceivePiv+0x7a>
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	01 c0       	rjmp	.+2      	; 0x2de <_Z9ReceivePiv+0x7c>
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	88 23       	and	r24, r24
     2e0:	89 f7       	brne	.-30     	; 0x2c4 <_Z9ReceivePiv+0x62>
					if (!flagReceivePi){break;state=3;}//had a timeout
     2e2:	80 91 72 01 	lds	r24, 0x0172
     2e6:	88 23       	and	r24, r24
     2e8:	d9 f1       	breq	.+118    	; 0x360 <_Z9ReceivePiv+0xfe>
					recChar=UDR0;
     2ea:	86 ec       	ldi	r24, 0xC6	; 198
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	fc 01       	movw	r30, r24
     2f0:	80 81       	ld	r24, Z
     2f2:	8e 83       	std	Y+6, r24	; 0x06
					recString[strLoc++]=recChar;
     2f4:	89 81       	ldd	r24, Y+1	; 0x01
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9e 01       	movw	r18, r28
     2fc:	29 5f       	subi	r18, 0xF9	; 249
     2fe:	3f 4f       	sbci	r19, 0xFF	; 255
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	2e 81       	ldd	r18, Y+6	; 0x06
     306:	fc 01       	movw	r30, r24
     308:	20 83       	st	Z, r18
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	89 83       	std	Y+1, r24	; 0x01
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
     310:	8e 81       	ldd	r24, Y+6	; 0x06
     312:	8e 32       	cpi	r24, 0x2E	; 46
     314:	19 f0       	breq	.+6      	; 0x31c <_Z9ReceivePiv+0xba>
     316:	8e 81       	ldd	r24, Y+6	; 0x06
     318:	88 23       	and	r24, r24
     31a:	71 f4       	brne	.+28     	; 0x338 <_Z9ReceivePiv+0xd6>
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	88 2f       	mov	r24, r24
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	9e 01       	movw	r18, r28
     324:	29 5f       	subi	r18, 0xF9	; 249
     326:	3f 4f       	sbci	r19, 0xFF	; 255
     328:	82 0f       	add	r24, r18
     32a:	93 1f       	adc	r25, r19
     32c:	fc 01       	movw	r30, r24
     32e:	10 82       	st	Z, r1
     330:	1b 82       	std	Y+3, r1	; 0x03
     332:	82 e0       	ldi	r24, 0x02	; 2
     334:	8a 83       	std	Y+2, r24	; 0x02
     336:	06 c0       	rjmp	.+12     	; 0x344 <_Z9ReceivePiv+0xe2>
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	8a 30       	cpi	r24, 0x0A	; 10
     33c:	18 f0       	brcs	.+6      	; 0x344 <_Z9ReceivePiv+0xe2>
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	8a 83       	std	Y+2, r24	; 0x02
     342:	1b 82       	std	Y+3, r1	; 0x03
				state=1;
				break;
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	88 23       	and	r24, r24
     348:	31 f0       	breq	.+12     	; 0x356 <_Z9ReceivePiv+0xf4>
     34a:	80 91 72 01 	lds	r24, 0x0172
     34e:	88 23       	and	r24, r24
     350:	11 f0       	breq	.+4      	; 0x356 <_Z9ReceivePiv+0xf4>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	01 c0       	rjmp	.+2      	; 0x358 <_Z9ReceivePiv+0xf6>
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	88 23       	and	r24, r24
     35a:	09 f0       	breq	.+2      	; 0x35e <_Z9ReceivePiv+0xfc>
     35c:	b2 cf       	rjmp	.-156    	; 0x2c2 <_Z9ReceivePiv+0x60>
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
     35e:	69 c0       	rjmp	.+210    	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
					if (!flagReceivePi){break;state=3;}//had a timeout
     360:	00 00       	nop
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
     362:	67 c0       	rjmp	.+206    	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
     364:	ce 01       	movw	r24, r28
     366:	07 96       	adiw	r24, 0x07	; 7
     368:	25 e0       	ldi	r18, 0x05	; 5
     36a:	31 e0       	ldi	r19, 0x01	; 1
     36c:	b9 01       	movw	r22, r18
     36e:	46 e0       	ldi	r20, 0x06	; 6
     370:	50 e0       	ldi	r21, 0x00	; 0
     372:	0e 94 0a 12 	call	0x2414	; 0x2414 <strncmp>
     376:	00 97       	sbiw	r24, 0x00	; 0
     378:	31 f4       	brne	.+12     	; 0x386 <_Z9ReceivePiv+0x124>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 71 01 	sts	0x0171, r24
     380:	83 e0       	ldi	r24, 0x03	; 3
     382:	8a 83       	std	Y+2, r24	; 0x02
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!"); state=3;}
				else if (!strncmp(recString,"save.",5)){Print0("Saving...");state=3; SaveDay();}
				else {state=4;}
				break;
     384:	56 c0       	rjmp	.+172    	; 0x432 <_Z9ReceivePiv+0x1d0>
				}//end while noDelimiter and receiving 
				break;
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!"); state=3;}
     386:	ce 01       	movw	r24, r28
     388:	07 96       	adiw	r24, 0x07	; 7
     38a:	2c e0       	ldi	r18, 0x0C	; 12
     38c:	31 e0       	ldi	r19, 0x01	; 1
     38e:	b9 01       	movw	r22, r18
     390:	43 e0       	ldi	r20, 0x03	; 3
     392:	50 e0       	ldi	r21, 0x00	; 0
     394:	0e 94 0a 12 	call	0x2414	; 0x2414 <strncmp>
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	39 f4       	brne	.+14     	; 0x3aa <_Z9ReceivePiv+0x148>
     39c:	80 e1       	ldi	r24, 0x10	; 16
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	8a 83       	std	Y+2, r24	; 0x02
				else if (!strncmp(recString,"save.",5)){Print0("Saving...");state=3; SaveDay();}
				else {state=4;}
				break;
     3a8:	44 c0       	rjmp	.+136    	; 0x432 <_Z9ReceivePiv+0x1d0>
				break;
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!"); state=3;}
				else if (!strncmp(recString,"save.",5)){Print0("Saving...");state=3; SaveDay();}
     3aa:	ce 01       	movw	r24, r28
     3ac:	07 96       	adiw	r24, 0x07	; 7
     3ae:	24 e2       	ldi	r18, 0x24	; 36
     3b0:	31 e0       	ldi	r19, 0x01	; 1
     3b2:	b9 01       	movw	r22, r18
     3b4:	45 e0       	ldi	r20, 0x05	; 5
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	0e 94 0a 12 	call	0x2414	; 0x2414 <strncmp>
     3bc:	00 97       	sbiw	r24, 0x00	; 0
     3be:	49 f4       	brne	.+18     	; 0x3d2 <_Z9ReceivePiv+0x170>
     3c0:	8a e2       	ldi	r24, 0x2A	; 42
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	8a 83       	std	Y+2, r24	; 0x02
     3cc:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z7SaveDayv>
				else {state=4;}
				break;
     3d0:	30 c0       	rjmp	.+96     	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 1
			case 2:{
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;state=3;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!"); state=3;}
				else if (!strncmp(recString,"save.",5)){Print0("Saving...");state=3; SaveDay();}
				else {state=4;}
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	8a 83       	std	Y+2, r24	; 0x02
				break;
     3d6:	2d c0       	rjmp	.+90     	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 2
			case 3:{
				//Graceful exit
				int i=0;
     3d8:	1d 82       	std	Y+5, r1	; 0x05
     3da:	1c 82       	std	Y+4, r1	; 0x04
				for (i=0;i<strLoc;i++){recString[strLoc]=NULL;}	//clear string memory
     3dc:	1d 82       	std	Y+5, r1	; 0x05
     3de:	1c 82       	std	Y+4, r1	; 0x04
     3e0:	0f c0       	rjmp	.+30     	; 0x400 <_Z9ReceivePiv+0x19e>
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	9e 01       	movw	r18, r28
     3ea:	29 5f       	subi	r18, 0xF9	; 249
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	fc 01       	movw	r30, r24
     3f4:	10 82       	st	Z, r1
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	9d 81       	ldd	r25, Y+5	; 0x05
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	9d 83       	std	Y+5, r25	; 0x05
     3fe:	8c 83       	std	Y+4, r24	; 0x04
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	28 2f       	mov	r18, r24
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	41 e0       	ldi	r20, 0x01	; 1
     408:	8c 81       	ldd	r24, Y+4	; 0x04
     40a:	9d 81       	ldd	r25, Y+5	; 0x05
     40c:	82 17       	cp	r24, r18
     40e:	93 07       	cpc	r25, r19
     410:	0c f0       	brlt	.+2      	; 0x414 <_Z9ReceivePiv+0x1b2>
     412:	40 e0       	ldi	r20, 0x00	; 0
     414:	44 23       	and	r20, r20
     416:	29 f7       	brne	.-54     	; 0x3e2 <_Z9ReceivePiv+0x180>
				flagReceivePi=fFalse;
     418:	10 92 72 01 	sts	0x0172, r1
				break;
     41c:	0a c0       	rjmp	.+20     	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 3
			case 4:{
				//Bad ACK or ask string
				Print0("Unknown query.");
     41e:	84 e3       	ldi	r24, 0x34	; 52
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
				state=3;
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	8a 83       	std	Y+2, r24	; 0x02
				break;
     42a:	03 c0       	rjmp	.+6      	; 0x432 <_Z9ReceivePiv+0x1d0>
			}//end case 4
			default:{flagReceivePi=fFalse;break;}			
     42c:	10 92 72 01 	sts	0x0172, r1
     430:	00 00       	nop
void ReceivePi(){
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
	BOOL noDelimiter=fTrue;
	
	while (flagReceivePi){
     432:	90 91 72 01 	lds	r25, 0x0172
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	99 23       	and	r25, r25
     43a:	09 f4       	brne	.+2      	; 0x43e <_Z9ReceivePiv+0x1dc>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	88 23       	and	r24, r24
     440:	09 f0       	breq	.+2      	; 0x444 <_Z9ReceivePiv+0x1e2>
     442:	1e cf       	rjmp	.-452    	; 0x280 <_Z9ReceivePiv+0x1e>
				break;
			}//end case 4
			default:{flagReceivePi=fFalse;break;}			
		}//end switch
	}//end while ReceivePi	
     444:	60 96       	adiw	r28, 0x10	; 16
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <_ZN10thermostatC1Ev>:
	private:
		double high,low,averageT, averageH;			//high temp, low temp, averagetemp, average humidity: all for the current day.
		WORD numReadings;
};

thermostat::thermostat(){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <_ZN10thermostatC1Ev+0x6>
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
	high=0.0;
     464:	29 81       	ldd	r18, Y+1	; 0x01
     466:	3a 81       	ldd	r19, Y+2	; 0x02
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	dc 01       	movw	r26, r24
     46e:	f9 01       	movw	r30, r18
     470:	80 83       	st	Z, r24
     472:	91 83       	std	Z+1, r25	; 0x01
     474:	a2 83       	std	Z+2, r26	; 0x02
     476:	b3 83       	std	Z+3, r27	; 0x03
	low=0.0;
     478:	29 81       	ldd	r18, Y+1	; 0x01
     47a:	3a 81       	ldd	r19, Y+2	; 0x02
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	dc 01       	movw	r26, r24
     482:	f9 01       	movw	r30, r18
     484:	84 83       	std	Z+4, r24	; 0x04
     486:	95 83       	std	Z+5, r25	; 0x05
     488:	a6 83       	std	Z+6, r26	; 0x06
     48a:	b7 83       	std	Z+7, r27	; 0x07
	averageT=0.0;
     48c:	29 81       	ldd	r18, Y+1	; 0x01
     48e:	3a 81       	ldd	r19, Y+2	; 0x02
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	dc 01       	movw	r26, r24
     496:	f9 01       	movw	r30, r18
     498:	80 87       	std	Z+8, r24	; 0x08
     49a:	91 87       	std	Z+9, r25	; 0x09
     49c:	a2 87       	std	Z+10, r26	; 0x0a
     49e:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=0.0;
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	3a 81       	ldd	r19, Y+2	; 0x02
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	dc 01       	movw	r26, r24
     4aa:	f9 01       	movw	r30, r18
     4ac:	84 87       	std	Z+12, r24	; 0x0c
     4ae:	95 87       	std	Z+13, r25	; 0x0d
     4b0:	a6 87       	std	Z+14, r26	; 0x0e
     4b2:	b7 87       	std	Z+15, r27	; 0x0f
	numReadings=0;
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	fc 01       	movw	r30, r24
     4ba:	11 8a       	std	Z+17, r1	; 0x11
     4bc:	10 8a       	std	Z+16, r1	; 0x10
}
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <_ZN10thermostat5resetEv>:

void thermostat::reset(){
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <_ZN10thermostat5resetEv+0x6>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	9a 83       	std	Y+2, r25	; 0x02
     4d4:	89 83       	std	Y+1, r24	; 0x01
	high=0.0;
     4d6:	29 81       	ldd	r18, Y+1	; 0x01
     4d8:	3a 81       	ldd	r19, Y+2	; 0x02
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	dc 01       	movw	r26, r24
     4e0:	f9 01       	movw	r30, r18
     4e2:	80 83       	st	Z, r24
     4e4:	91 83       	std	Z+1, r25	; 0x01
     4e6:	a2 83       	std	Z+2, r26	; 0x02
     4e8:	b3 83       	std	Z+3, r27	; 0x03
	low=0.0;
     4ea:	29 81       	ldd	r18, Y+1	; 0x01
     4ec:	3a 81       	ldd	r19, Y+2	; 0x02
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	dc 01       	movw	r26, r24
     4f4:	f9 01       	movw	r30, r18
     4f6:	84 83       	std	Z+4, r24	; 0x04
     4f8:	95 83       	std	Z+5, r25	; 0x05
     4fa:	a6 83       	std	Z+6, r26	; 0x06
     4fc:	b7 83       	std	Z+7, r27	; 0x07
	averageT=0.0;
     4fe:	29 81       	ldd	r18, Y+1	; 0x01
     500:	3a 81       	ldd	r19, Y+2	; 0x02
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	dc 01       	movw	r26, r24
     508:	f9 01       	movw	r30, r18
     50a:	80 87       	std	Z+8, r24	; 0x08
     50c:	91 87       	std	Z+9, r25	; 0x09
     50e:	a2 87       	std	Z+10, r26	; 0x0a
     510:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=0.0;
     512:	29 81       	ldd	r18, Y+1	; 0x01
     514:	3a 81       	ldd	r19, Y+2	; 0x02
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	dc 01       	movw	r26, r24
     51c:	f9 01       	movw	r30, r18
     51e:	84 87       	std	Z+12, r24	; 0x0c
     520:	95 87       	std	Z+13, r25	; 0x0d
     522:	a6 87       	std	Z+14, r26	; 0x0e
     524:	b7 87       	std	Z+15, r27	; 0x0f
	numReadings=0;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	9a 81       	ldd	r25, Y+2	; 0x02
     52a:	fc 01       	movw	r30, r24
     52c:	11 8a       	std	Z+17, r1	; 0x11
     52e:	10 8a       	std	Z+16, r1	; 0x10
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <_ZN10thermostat12addDataPointEdd>:

void thermostat::addDataPoint(double temp, double humidity){
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	2a 97       	sbiw	r28, 0x0a	; 10
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	9a 83       	std	Y+2, r25	; 0x02
     558:	89 83       	std	Y+1, r24	; 0x01
     55a:	4b 83       	std	Y+3, r20	; 0x03
     55c:	5c 83       	std	Y+4, r21	; 0x04
     55e:	6d 83       	std	Y+5, r22	; 0x05
     560:	7e 83       	std	Y+6, r23	; 0x06
     562:	0f 83       	std	Y+7, r16	; 0x07
     564:	18 87       	std	Y+8, r17	; 0x08
     566:	29 87       	std	Y+9, r18	; 0x09
     568:	3a 87       	std	Y+10, r19	; 0x0a
	numReadings++;
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	fc 01       	movw	r30, r24
     570:	80 89       	ldd	r24, Z+16	; 0x10
     572:	91 89       	ldd	r25, Z+17	; 0x11
     574:	9c 01       	movw	r18, r24
     576:	2f 5f       	subi	r18, 0xFF	; 255
     578:	3f 4f       	sbci	r19, 0xFF	; 255
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	fc 01       	movw	r30, r24
     580:	31 8b       	std	Z+17, r19	; 0x11
     582:	20 8b       	std	Z+16, r18	; 0x10
	averageT=(averageT*(numReadings-1)+temp)/numReadings;
     584:	89 81       	ldd	r24, Y+1	; 0x01
     586:	9a 81       	ldd	r25, Y+2	; 0x02
     588:	fc 01       	movw	r30, r24
     58a:	e0 84       	ldd	r14, Z+8	; 0x08
     58c:	f1 84       	ldd	r15, Z+9	; 0x09
     58e:	02 85       	ldd	r16, Z+10	; 0x0a
     590:	13 85       	ldd	r17, Z+11	; 0x0b
     592:	89 81       	ldd	r24, Y+1	; 0x01
     594:	9a 81       	ldd	r25, Y+2	; 0x02
     596:	fc 01       	movw	r30, r24
     598:	80 89       	ldd	r24, Z+16	; 0x10
     59a:	91 89       	ldd	r25, Z+17	; 0x11
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	cc 01       	movw	r24, r24
     5a0:	a0 e0       	ldi	r26, 0x00	; 0
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     5ac:	9b 01       	movw	r18, r22
     5ae:	ac 01       	movw	r20, r24
     5b0:	c8 01       	movw	r24, r16
     5b2:	b7 01       	movw	r22, r14
     5b4:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	bc 01       	movw	r22, r24
     5be:	cd 01       	movw	r24, r26
     5c0:	2b 81       	ldd	r18, Y+3	; 0x03
     5c2:	3c 81       	ldd	r19, Y+4	; 0x04
     5c4:	4d 81       	ldd	r20, Y+5	; 0x05
     5c6:	5e 81       	ldd	r21, Y+6	; 0x06
     5c8:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__addsf3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	7c 01       	movw	r14, r24
     5d2:	8d 01       	movw	r16, r26
     5d4:	89 81       	ldd	r24, Y+1	; 0x01
     5d6:	9a 81       	ldd	r25, Y+2	; 0x02
     5d8:	fc 01       	movw	r30, r24
     5da:	80 89       	ldd	r24, Z+16	; 0x10
     5dc:	91 89       	ldd	r25, Z+17	; 0x11
     5de:	cc 01       	movw	r24, r24
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	c8 01       	movw	r24, r16
     5f2:	b7 01       	movw	r22, r14
     5f4:	0e 94 03 10 	call	0x2006	; 0x2006 <__divsf3>
     5f8:	dc 01       	movw	r26, r24
     5fa:	cb 01       	movw	r24, r22
     5fc:	29 81       	ldd	r18, Y+1	; 0x01
     5fe:	3a 81       	ldd	r19, Y+2	; 0x02
     600:	f9 01       	movw	r30, r18
     602:	80 87       	std	Z+8, r24	; 0x08
     604:	91 87       	std	Z+9, r25	; 0x09
     606:	a2 87       	std	Z+10, r26	; 0x0a
     608:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=(averageH*(numReadings-1)+humidity)/numReadings;
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	fc 01       	movw	r30, r24
     610:	e4 84       	ldd	r14, Z+12	; 0x0c
     612:	f5 84       	ldd	r15, Z+13	; 0x0d
     614:	06 85       	ldd	r16, Z+14	; 0x0e
     616:	17 85       	ldd	r17, Z+15	; 0x0f
     618:	89 81       	ldd	r24, Y+1	; 0x01
     61a:	9a 81       	ldd	r25, Y+2	; 0x02
     61c:	fc 01       	movw	r30, r24
     61e:	80 89       	ldd	r24, Z+16	; 0x10
     620:	91 89       	ldd	r25, Z+17	; 0x11
     622:	01 97       	sbiw	r24, 0x01	; 1
     624:	cc 01       	movw	r24, r24
     626:	a0 e0       	ldi	r26, 0x00	; 0
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	bc 01       	movw	r22, r24
     62c:	cd 01       	movw	r24, r26
     62e:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24
     636:	c8 01       	movw	r24, r16
     638:	b7 01       	movw	r22, r14
     63a:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	bc 01       	movw	r22, r24
     644:	cd 01       	movw	r24, r26
     646:	2f 81       	ldd	r18, Y+7	; 0x07
     648:	38 85       	ldd	r19, Y+8	; 0x08
     64a:	49 85       	ldd	r20, Y+9	; 0x09
     64c:	5a 85       	ldd	r21, Y+10	; 0x0a
     64e:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__addsf3>
     652:	dc 01       	movw	r26, r24
     654:	cb 01       	movw	r24, r22
     656:	7c 01       	movw	r14, r24
     658:	8d 01       	movw	r16, r26
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	9a 81       	ldd	r25, Y+2	; 0x02
     65e:	fc 01       	movw	r30, r24
     660:	80 89       	ldd	r24, Z+16	; 0x10
     662:	91 89       	ldd	r25, Z+17	; 0x11
     664:	cc 01       	movw	r24, r24
     666:	a0 e0       	ldi	r26, 0x00	; 0
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	bc 01       	movw	r22, r24
     66c:	cd 01       	movw	r24, r26
     66e:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     672:	9b 01       	movw	r18, r22
     674:	ac 01       	movw	r20, r24
     676:	c8 01       	movw	r24, r16
     678:	b7 01       	movw	r22, r14
     67a:	0e 94 03 10 	call	0x2006	; 0x2006 <__divsf3>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	29 81       	ldd	r18, Y+1	; 0x01
     684:	3a 81       	ldd	r19, Y+2	; 0x02
     686:	f9 01       	movw	r30, r18
     688:	84 87       	std	Z+12, r24	; 0x0c
     68a:	95 87       	std	Z+13, r25	; 0x0d
     68c:	a6 87       	std	Z+14, r26	; 0x0e
     68e:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (temp>high){
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	9a 81       	ldd	r25, Y+2	; 0x02
     694:	fc 01       	movw	r30, r24
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	a2 81       	ldd	r26, Z+2	; 0x02
     69c:	b3 81       	ldd	r27, Z+3	; 0x03
     69e:	11 e0       	ldi	r17, 0x01	; 1
     6a0:	bc 01       	movw	r22, r24
     6a2:	cd 01       	movw	r24, r26
     6a4:	2b 81       	ldd	r18, Y+3	; 0x03
     6a6:	3c 81       	ldd	r19, Y+4	; 0x04
     6a8:	4d 81       	ldd	r20, Y+5	; 0x05
     6aa:	5e 81       	ldd	r21, Y+6	; 0x06
     6ac:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__cmpsf2>
     6b0:	88 23       	and	r24, r24
     6b2:	0c f0       	brlt	.+2      	; 0x6b6 <_ZN10thermostat12addDataPointEdd+0x17c>
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	11 23       	and	r17, r17
     6b8:	59 f0       	breq	.+22     	; 0x6d0 <_ZN10thermostat12addDataPointEdd+0x196>
		high=temp;
     6ba:	29 81       	ldd	r18, Y+1	; 0x01
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	ad 81       	ldd	r26, Y+5	; 0x05
     6c4:	be 81       	ldd	r27, Y+6	; 0x06
     6c6:	f9 01       	movw	r30, r18
     6c8:	80 83       	st	Z, r24
     6ca:	91 83       	std	Z+1, r25	; 0x01
     6cc:	a2 83       	std	Z+2, r26	; 0x02
     6ce:	b3 83       	std	Z+3, r27	; 0x03
	}
	//Seperate if statements just in case it is a high and a low.
	if (temp<low){
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	fc 01       	movw	r30, r24
     6d6:	84 81       	ldd	r24, Z+4	; 0x04
     6d8:	95 81       	ldd	r25, Z+5	; 0x05
     6da:	a6 81       	ldd	r26, Z+6	; 0x06
     6dc:	b7 81       	ldd	r27, Z+7	; 0x07
     6de:	11 e0       	ldi	r17, 0x01	; 1
     6e0:	bc 01       	movw	r22, r24
     6e2:	cd 01       	movw	r24, r26
     6e4:	2b 81       	ldd	r18, Y+3	; 0x03
     6e6:	3c 81       	ldd	r19, Y+4	; 0x04
     6e8:	4d 81       	ldd	r20, Y+5	; 0x05
     6ea:	5e 81       	ldd	r21, Y+6	; 0x06
     6ec:	0e 94 49 11 	call	0x2292	; 0x2292 <__gesf2>
     6f0:	18 16       	cp	r1, r24
     6f2:	0c f0       	brlt	.+2      	; 0x6f6 <_ZN10thermostat12addDataPointEdd+0x1bc>
     6f4:	10 e0       	ldi	r17, 0x00	; 0
     6f6:	11 23       	and	r17, r17
     6f8:	59 f0       	breq	.+22     	; 0x710 <_ZN10thermostat12addDataPointEdd+0x1d6>
		low=temp;
     6fa:	29 81       	ldd	r18, Y+1	; 0x01
     6fc:	3a 81       	ldd	r19, Y+2	; 0x02
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	ad 81       	ldd	r26, Y+5	; 0x05
     704:	be 81       	ldd	r27, Y+6	; 0x06
     706:	f9 01       	movw	r30, r18
     708:	84 83       	std	Z+4, r24	; 0x04
     70a:	95 83       	std	Z+5, r25	; 0x05
     70c:	a6 83       	std	Z+6, r26	; 0x06
     70e:	b7 83       	std	Z+7, r27	; 0x07
	}
}
     710:	2a 96       	adiw	r28, 0x0a	; 10
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	08 95       	ret

0000072a <_ZN10thermostat8saveDataEv>:

void thermostat::saveData(){
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <_ZN10thermostat8saveDataEv+0x6>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	9a 83       	std	Y+2, r25	; 0x02
     736:	89 83       	std	Y+1, r24	; 0x01
	SaveDay();			//Calls save day in 
     738:	0e 94 f1 06 	call	0xde2	; 0xde2 <_Z7SaveDayv>
	reset();			//reset thermostat.
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	0e 94 64 02 	call	0x4c8	; 0x4c8 <_ZN10thermostat5resetEv>
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	08 95       	ret

0000074e <_ZN10thermostat7getHighEv>:
double thermostat::getHigh(){
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <_ZN10thermostat7getHighEv+0x6>
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	89 83       	std	Y+1, r24	; 0x01
	return high;
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	fc 01       	movw	r30, r24
     762:	80 81       	ld	r24, Z
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	a2 81       	ldd	r26, Z+2	; 0x02
     768:	b3 81       	ldd	r27, Z+3	; 0x03
}
     76a:	bc 01       	movw	r22, r24
     76c:	cd 01       	movw	r24, r26
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <_ZN10thermostat6getLowEv>:

double thermostat::getLow(){
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	00 d0       	rcall	.+0      	; 0x77e <_ZN10thermostat6getLowEv+0x6>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9a 83       	std	Y+2, r25	; 0x02
     784:	89 83       	std	Y+1, r24	; 0x01
	return low;
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	fc 01       	movw	r30, r24
     78c:	84 81       	ldd	r24, Z+4	; 0x04
     78e:	95 81       	ldd	r25, Z+5	; 0x05
     790:	a6 81       	ldd	r26, Z+6	; 0x06
     792:	b7 81       	ldd	r27, Z+7	; 0x07
}
     794:	bc 01       	movw	r22, r24
     796:	cd 01       	movw	r24, r26
     798:	0f 90       	pop	r0
     79a:	0f 90       	pop	r0
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	08 95       	ret

000007a2 <_ZN10thermostat7getAveTEv>:

double thermostat::getAveT(){
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	00 d0       	rcall	.+0      	; 0x7a8 <_ZN10thermostat7getAveTEv+0x6>
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62
     7ac:	9a 83       	std	Y+2, r25	; 0x02
     7ae:	89 83       	std	Y+1, r24	; 0x01
	return averageT;
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	9a 81       	ldd	r25, Y+2	; 0x02
     7b4:	fc 01       	movw	r30, r24
     7b6:	80 85       	ldd	r24, Z+8	; 0x08
     7b8:	91 85       	ldd	r25, Z+9	; 0x09
     7ba:	a2 85       	ldd	r26, Z+10	; 0x0a
     7bc:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     7be:	bc 01       	movw	r22, r24
     7c0:	cd 01       	movw	r24, r26
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <_ZN10thermostat7getAveHEv>:

double thermostat::getAveH(){
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <_ZN10thermostat7getAveHEv+0x6>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
	return averageH;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	84 85       	ldd	r24, Z+12	; 0x0c
     7e2:	95 85       	ldd	r25, Z+13	; 0x0d
     7e4:	a6 85       	ldd	r26, Z+14	; 0x0e
     7e6:	b7 85       	ldd	r27, Z+15	; 0x0f
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <_ZN5clockC1Ev>:
		void addDay(WORD days);
		void addMonth(WORD months);
		void addYear(WORD years);
};

clock::clock(){
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	00 d0       	rcall	.+0      	; 0x7fc <_ZN5clockC1Ev+0x6>
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
	second=0;
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	10 82       	st	Z, r1
	minute=0;
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	9a 81       	ldd	r25, Y+2	; 0x02
     810:	fc 01       	movw	r30, r24
     812:	11 82       	std	Z+1, r1	; 0x01
	hour=0;
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	fc 01       	movw	r30, r24
     81a:	12 82       	std	Z+2, r1	; 0x02
	day=0;
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	9a 81       	ldd	r25, Y+2	; 0x02
     820:	fc 01       	movw	r30, r24
     822:	13 82       	std	Z+3, r1	; 0x03
	month=0;
     824:	89 81       	ldd	r24, Y+1	; 0x01
     826:	9a 81       	ldd	r25, Y+2	; 0x02
     828:	fc 01       	movw	r30, r24
     82a:	14 82       	std	Z+4, r1	; 0x04
	year=2013;
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	9a 81       	ldd	r25, Y+2	; 0x02
     830:	2d ed       	ldi	r18, 0xDD	; 221
     832:	37 e0       	ldi	r19, 0x07	; 7
     834:	fc 01       	movw	r30, r24
     836:	36 83       	std	Z+6, r19	; 0x06
     838:	25 83       	std	Z+5, r18	; 0x05
}
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <_ZN5clock9addSecondEj>:

void clock::addSecond(WORD seconds){
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	00 d0       	rcall	.+0      	; 0x84a <_ZN5clock9addSecondEj+0x6>
     84a:	00 d0       	rcall	.+0      	; 0x84c <_ZN5clock9addSecondEj+0x8>
     84c:	00 d0       	rcall	.+0      	; 0x84e <_ZN5clock9addSecondEj+0xa>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9c 83       	std	Y+4, r25	; 0x04
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	7e 83       	std	Y+6, r23	; 0x06
     858:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempSecond=second+seconds;
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	fc 01       	movw	r30, r24
     860:	80 81       	ld	r24, Z
     862:	28 2f       	mov	r18, r24
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	8d 81       	ldd	r24, Y+5	; 0x05
     868:	9e 81       	ldd	r25, Y+6	; 0x06
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	9a 83       	std	Y+2, r25	; 0x02
     870:	89 83       	std	Y+1, r24	; 0x01
	second=tempSecond%60;
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	9a 81       	ldd	r25, Y+2	; 0x02
     876:	2c e3       	ldi	r18, 0x3C	; 60
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	b9 01       	movw	r22, r18
     87c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     880:	28 2f       	mov	r18, r24
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	fc 01       	movw	r30, r24
     888:	20 83       	st	Z, r18
	if (tempSecond/60>=1){
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	9a 81       	ldd	r25, Y+2	; 0x02
     88e:	21 e0       	ldi	r18, 0x01	; 1
     890:	8c 33       	cpi	r24, 0x3C	; 60
     892:	91 05       	cpc	r25, r1
     894:	0c f4       	brge	.+2      	; 0x898 <_ZN5clock9addSecondEj+0x54>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	22 23       	and	r18, r18
     89a:	79 f0       	breq	.+30     	; 0x8ba <_ZN5clock9addSecondEj+0x76>
		addMinute(tempSecond/60);
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
     8a0:	2c e3       	ldi	r18, 0x3C	; 60
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	b9 01       	movw	r22, r18
     8a6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     8aa:	9b 01       	movw	r18, r22
     8ac:	c9 01       	movw	r24, r18
     8ae:	9c 01       	movw	r18, r24
     8b0:	8b 81       	ldd	r24, Y+3	; 0x03
     8b2:	9c 81       	ldd	r25, Y+4	; 0x04
     8b4:	b9 01       	movw	r22, r18
     8b6:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN5clock9addMinuteEj>
	}
}
     8ba:	26 96       	adiw	r28, 0x06	; 6
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <_ZN5clock9addMinuteEj>:

void clock::addMinute(WORD minutes){
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_ZN5clock9addMinuteEj+0x6>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_ZN5clock9addMinuteEj+0x8>
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <_ZN5clock9addMinuteEj+0xa>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	9c 83       	std	Y+4, r25	; 0x04
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	7e 83       	std	Y+6, r23	; 0x06
     8e0:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMinutes=minute+minutes;
     8e2:	8b 81       	ldd	r24, Y+3	; 0x03
     8e4:	9c 81       	ldd	r25, Y+4	; 0x04
     8e6:	fc 01       	movw	r30, r24
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
     8ea:	28 2f       	mov	r18, r24
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	8d 81       	ldd	r24, Y+5	; 0x05
     8f0:	9e 81       	ldd	r25, Y+6	; 0x06
     8f2:	82 0f       	add	r24, r18
     8f4:	93 1f       	adc	r25, r19
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
	minute=tempMinutes%60;
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	2c e3       	ldi	r18, 0x3C	; 60
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	b9 01       	movw	r22, r18
     904:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     908:	28 2f       	mov	r18, r24
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	fc 01       	movw	r30, r24
     910:	21 83       	std	Z+1, r18	; 0x01
	if (tempMinutes/60>=1){
     912:	89 81       	ldd	r24, Y+1	; 0x01
     914:	9a 81       	ldd	r25, Y+2	; 0x02
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	8c 33       	cpi	r24, 0x3C	; 60
     91a:	91 05       	cpc	r25, r1
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	22 23       	and	r18, r18
     922:	79 f0       	breq	.+30     	; 0x942 <__stack+0x43>
		addHour(tempMinutes/60);
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	9a 81       	ldd	r25, Y+2	; 0x02
     928:	2c e3       	ldi	r18, 0x3C	; 60
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	b9 01       	movw	r22, r18
     92e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     932:	9b 01       	movw	r18, r22
     934:	c9 01       	movw	r24, r18
     936:	9c 01       	movw	r18, r24
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	b9 01       	movw	r22, r18
     93e:	0e 94 aa 04 	call	0x954	; 0x954 <_ZN5clock7addHourEj>
	}
}
     942:	26 96       	adiw	r28, 0x06	; 6
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <_ZN5clock7addHourEj>:

void clock::addHour(WORD hours){
     954:	cf 93       	push	r28
     956:	df 93       	push	r29
     958:	00 d0       	rcall	.+0      	; 0x95a <_ZN5clock7addHourEj+0x6>
     95a:	00 d0       	rcall	.+0      	; 0x95c <_ZN5clock7addHourEj+0x8>
     95c:	00 d0       	rcall	.+0      	; 0x95e <_ZN5clock7addHourEj+0xa>
     95e:	cd b7       	in	r28, 0x3d	; 61
     960:	de b7       	in	r29, 0x3e	; 62
     962:	9c 83       	std	Y+4, r25	; 0x04
     964:	8b 83       	std	Y+3, r24	; 0x03
     966:	7e 83       	std	Y+6, r23	; 0x06
     968:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempHours=hour+hours;
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	fc 01       	movw	r30, r24
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	8d 81       	ldd	r24, Y+5	; 0x05
     978:	9e 81       	ldd	r25, Y+6	; 0x06
     97a:	82 0f       	add	r24, r18
     97c:	93 1f       	adc	r25, r19
     97e:	9a 83       	std	Y+2, r25	; 0x02
     980:	89 83       	std	Y+1, r24	; 0x01
	hour=tempHours%24;
     982:	89 81       	ldd	r24, Y+1	; 0x01
     984:	9a 81       	ldd	r25, Y+2	; 0x02
     986:	28 e1       	ldi	r18, 0x18	; 24
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     990:	28 2f       	mov	r18, r24
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	9c 81       	ldd	r25, Y+4	; 0x04
     996:	fc 01       	movw	r30, r24
     998:	22 83       	std	Z+2, r18	; 0x02
	if (tempHours>=1){
     99a:	89 81       	ldd	r24, Y+1	; 0x01
     99c:	9a 81       	ldd	r25, Y+2	; 0x02
     99e:	21 e0       	ldi	r18, 0x01	; 1
     9a0:	18 16       	cp	r1, r24
     9a2:	19 06       	cpc	r1, r25
     9a4:	0c f0       	brlt	.+2      	; 0x9a8 <_ZN5clock7addHourEj+0x54>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	22 23       	and	r18, r18
     9aa:	79 f0       	breq	.+30     	; 0x9ca <_ZN5clock7addHourEj+0x76>
		addDay(tempHours/24);
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	9a 81       	ldd	r25, Y+2	; 0x02
     9b0:	28 e1       	ldi	r18, 0x18	; 24
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	b9 01       	movw	r22, r18
     9b6:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     9ba:	9b 01       	movw	r18, r22
     9bc:	c9 01       	movw	r24, r18
     9be:	9c 01       	movw	r18, r24
     9c0:	8b 81       	ldd	r24, Y+3	; 0x03
     9c2:	9c 81       	ldd	r25, Y+4	; 0x04
     9c4:	b9 01       	movw	r22, r18
     9c6:	0e 94 ee 04 	call	0x9dc	; 0x9dc <_ZN5clock6addDayEj>
	}
}
     9ca:	26 96       	adiw	r28, 0x06	; 6
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <_ZN5clock6addDayEj>:

void clock::addDay(WORD days){
     9dc:	cf 93       	push	r28
     9de:	df 93       	push	r29
     9e0:	cd b7       	in	r28, 0x3d	; 61
     9e2:	de b7       	in	r29, 0x3e	; 62
     9e4:	27 97       	sbiw	r28, 0x07	; 7
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	f8 94       	cli
     9ea:	de bf       	out	0x3e, r29	; 62
     9ec:	0f be       	out	0x3f, r0	; 63
     9ee:	cd bf       	out	0x3d, r28	; 61
     9f0:	9d 83       	std	Y+5, r25	; 0x05
     9f2:	8c 83       	std	Y+4, r24	; 0x04
     9f4:	7f 83       	std	Y+7, r23	; 0x07
     9f6:	6e 83       	std	Y+6, r22	; 0x06
	//new day, need to save the average, high and low into eeprom
	theThermostat.saveData();
     9f8:	8a e7       	ldi	r24, 0x7A	; 122
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	0e 94 95 03 	call	0x72a	; 0x72a <_ZN10thermostat8saveDataEv>
	
	//Get the new day.
	volatile int tempDays=day+days;
     a00:	8c 81       	ldd	r24, Y+4	; 0x04
     a02:	9d 81       	ldd	r25, Y+5	; 0x05
     a04:	fc 01       	movw	r30, r24
     a06:	83 81       	ldd	r24, Z+3	; 0x03
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	8e 81       	ldd	r24, Y+6	; 0x06
     a0e:	9f 81       	ldd	r25, Y+7	; 0x07
     a10:	82 0f       	add	r24, r18
     a12:	93 1f       	adc	r25, r19
     a14:	9b 83       	std	Y+3, r25	; 0x03
     a16:	8a 83       	std	Y+2, r24	; 0x02
	BYTE currentMonth=month;
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	9d 81       	ldd	r25, Y+5	; 0x05
     a1c:	fc 01       	movw	r30, r24
     a1e:	84 81       	ldd	r24, Z+4	; 0x04
     a20:	89 83       	std	Y+1, r24	; 0x01
	if (tempDays/daysInMonths[currentMonth]>=1){
     a22:	8a 81       	ldd	r24, Y+2	; 0x02
     a24:	9b 81       	ldd	r25, Y+3	; 0x03
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	22 2f       	mov	r18, r18
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	2d 5b       	subi	r18, 0xBD	; 189
     a2e:	3e 4f       	sbci	r19, 0xFE	; 254
     a30:	f9 01       	movw	r30, r18
     a32:	20 81       	ld	r18, Z
     a34:	22 2f       	mov	r18, r18
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	b9 01       	movw	r22, r18
     a3a:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     a3e:	9b 01       	movw	r18, r22
     a40:	c9 01       	movw	r24, r18
     a42:	21 e0       	ldi	r18, 0x01	; 1
     a44:	18 16       	cp	r1, r24
     a46:	19 06       	cpc	r1, r25
     a48:	0c f0       	brlt	.+2      	; 0xa4c <_ZN5clock6addDayEj+0x70>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	22 23       	and	r18, r18
     a4e:	09 f4       	brne	.+2      	; 0xa52 <_ZN5clock6addDayEj+0x76>
     a50:	48 c0       	rjmp	.+144    	; 0xae2 <_ZN5clock6addDayEj+0x106>
		//See how many months we need to go forward.
		while (tempDays >= daysInMonths[currentMonth]){
     a52:	14 c0       	rjmp	.+40     	; 0xa7c <_ZN5clock6addDayEj+0xa0>
			tempDays-=daysInMonths[currentMonth];
     a54:	2a 81       	ldd	r18, Y+2	; 0x02
     a56:	3b 81       	ldd	r19, Y+3	; 0x03
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	8d 5b       	subi	r24, 0xBD	; 189
     a60:	9e 4f       	sbci	r25, 0xFE	; 254
     a62:	fc 01       	movw	r30, r24
     a64:	80 81       	ld	r24, Z
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	a9 01       	movw	r20, r18
     a6c:	48 1b       	sub	r20, r24
     a6e:	59 0b       	sbc	r21, r25
     a70:	ca 01       	movw	r24, r20
     a72:	9b 83       	std	Y+3, r25	; 0x03
     a74:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	89 83       	std	Y+1, r24	; 0x01
	//Get the new day.
	volatile int tempDays=day+days;
	BYTE currentMonth=month;
	if (tempDays/daysInMonths[currentMonth]>=1){
		//See how many months we need to go forward.
		while (tempDays >= daysInMonths[currentMonth]){
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	8d 5b       	subi	r24, 0xBD	; 189
     a84:	9e 4f       	sbci	r25, 0xFE	; 254
     a86:	fc 01       	movw	r30, r24
     a88:	80 81       	ld	r24, Z
     a8a:	28 2f       	mov	r18, r24
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	8a 81       	ldd	r24, Y+2	; 0x02
     a90:	9b 81       	ldd	r25, Y+3	; 0x03
     a92:	41 e0       	ldi	r20, 0x01	; 1
     a94:	82 17       	cp	r24, r18
     a96:	93 07       	cpc	r25, r19
     a98:	0c f4       	brge	.+2      	; 0xa9c <_ZN5clock6addDayEj+0xc0>
     a9a:	40 e0       	ldi	r20, 0x00	; 0
     a9c:	44 23       	and	r20, r20
     a9e:	d1 f6       	brne	.-76     	; 0xa54 <_ZN5clock6addDayEj+0x78>
			tempDays-=daysInMonths[currentMonth];
			currentMonth++;
		}
		if (tempDays>28 && currentMonth==2){
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	9b 81       	ldd	r25, Y+3	; 0x03
     aa4:	8d 31       	cpi	r24, 0x1D	; 29
     aa6:	91 05       	cpc	r25, r1
     aa8:	2c f0       	brlt	.+10     	; 0xab4 <_ZN5clock6addDayEj+0xd8>
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	82 30       	cpi	r24, 0x02	; 2
     aae:	11 f4       	brne	.+4      	; 0xab4 <_ZN5clock6addDayEj+0xd8>
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <_ZN5clock6addDayEj+0xda>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	88 23       	and	r24, r24
     ab8:	a1 f0       	breq	.+40     	; 0xae2 <_ZN5clock6addDayEj+0x106>
			tempDays-=daysInMonths[currentMonth];
     aba:	2a 81       	ldd	r18, Y+2	; 0x02
     abc:	3b 81       	ldd	r19, Y+3	; 0x03
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	8d 5b       	subi	r24, 0xBD	; 189
     ac6:	9e 4f       	sbci	r25, 0xFE	; 254
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a9 01       	movw	r20, r18
     ad2:	48 1b       	sub	r20, r24
     ad4:	59 0b       	sbc	r21, r25
     ad6:	ca 01       	movw	r24, r20
     ad8:	9b 83       	std	Y+3, r25	; 0x03
     ada:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	8f 5f       	subi	r24, 0xFF	; 255
     ae0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	days=tempDays;
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	9f 83       	std	Y+7, r25	; 0x07
     ae8:	8e 83       	std	Y+6, r24	; 0x06
	month=currentMonth;
     aea:	8c 81       	ldd	r24, Y+4	; 0x04
     aec:	9d 81       	ldd	r25, Y+5	; 0x05
     aee:	29 81       	ldd	r18, Y+1	; 0x01
     af0:	fc 01       	movw	r30, r24
     af2:	24 83       	std	Z+4, r18	; 0x04
}
     af4:	27 96       	adiw	r28, 0x07	; 7
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <_ZN5clock8addMonthEj>:

void clock::addMonth(WORD months){
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <_ZN5clock8addMonthEj+0x6>
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <_ZN5clock8addMonthEj+0x8>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <_ZN5clock8addMonthEj+0xa>
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	9c 83       	std	Y+4, r25	; 0x04
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	7e 83       	std	Y+6, r23	; 0x06
     b1a:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMonths=month+months;
     b1c:	8b 81       	ldd	r24, Y+3	; 0x03
     b1e:	9c 81       	ldd	r25, Y+4	; 0x04
     b20:	fc 01       	movw	r30, r24
     b22:	84 81       	ldd	r24, Z+4	; 0x04
     b24:	28 2f       	mov	r18, r24
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	8d 81       	ldd	r24, Y+5	; 0x05
     b2a:	9e 81       	ldd	r25, Y+6	; 0x06
     b2c:	82 0f       	add	r24, r18
     b2e:	93 1f       	adc	r25, r19
     b30:	9a 83       	std	Y+2, r25	; 0x02
     b32:	89 83       	std	Y+1, r24	; 0x01
	month=tempMonths%12;
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	9a 81       	ldd	r25, Y+2	; 0x02
     b38:	2c e0       	ldi	r18, 0x0C	; 12
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	b9 01       	movw	r22, r18
     b3e:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     b42:	28 2f       	mov	r18, r24
     b44:	8b 81       	ldd	r24, Y+3	; 0x03
     b46:	9c 81       	ldd	r25, Y+4	; 0x04
     b48:	fc 01       	movw	r30, r24
     b4a:	24 83       	std	Z+4, r18	; 0x04
	if (tempMonths/12>=1){
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	9a 81       	ldd	r25, Y+2	; 0x02
     b50:	21 e0       	ldi	r18, 0x01	; 1
     b52:	8c 30       	cpi	r24, 0x0C	; 12
     b54:	91 05       	cpc	r25, r1
     b56:	0c f4       	brge	.+2      	; 0xb5a <_ZN5clock8addMonthEj+0x54>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	22 23       	and	r18, r18
     b5c:	79 f0       	breq	.+30     	; 0xb7c <_ZN5clock8addMonthEj+0x76>
		addYear(tempMonths/12);
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	9a 81       	ldd	r25, Y+2	; 0x02
     b62:	2c e0       	ldi	r18, 0x0C	; 12
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	b9 01       	movw	r22, r18
     b68:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divmodhi4>
     b6c:	9b 01       	movw	r18, r22
     b6e:	c9 01       	movw	r24, r18
     b70:	9c 01       	movw	r18, r24
     b72:	8b 81       	ldd	r24, Y+3	; 0x03
     b74:	9c 81       	ldd	r25, Y+4	; 0x04
     b76:	b9 01       	movw	r22, r18
     b78:	0e 94 c7 05 	call	0xb8e	; 0xb8e <_ZN5clock7addYearEj>
	}
}
     b7c:	26 96       	adiw	r28, 0x06	; 6
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <_ZN5clock7addYearEj>:

void clock::addYear(WORD years){
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
     b92:	00 d0       	rcall	.+0      	; 0xb94 <_ZN5clock7addYearEj+0x6>
     b94:	00 d0       	rcall	.+0      	; 0xb96 <_ZN5clock7addYearEj+0x8>
     b96:	00 d0       	rcall	.+0      	; 0xb98 <_ZN5clock7addYearEj+0xa>
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	9c 83       	std	Y+4, r25	; 0x04
     b9e:	8b 83       	std	Y+3, r24	; 0x03
     ba0:	7e 83       	std	Y+6, r23	; 0x06
     ba2:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears=year+years;
     ba4:	8b 81       	ldd	r24, Y+3	; 0x03
     ba6:	9c 81       	ldd	r25, Y+4	; 0x04
     ba8:	fc 01       	movw	r30, r24
     baa:	25 81       	ldd	r18, Z+5	; 0x05
     bac:	36 81       	ldd	r19, Z+6	; 0x06
     bae:	8d 81       	ldd	r24, Y+5	; 0x05
     bb0:	9e 81       	ldd	r25, Y+6	; 0x06
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
	year=tempYears;
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	9c 01       	movw	r18, r24
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	fc 01       	movw	r30, r24
     bc6:	36 83       	std	Z+6, r19	; 0x06
     bc8:	25 83       	std	Z+5, r18	; 0x05
}
     bca:	26 96       	adiw	r28, 0x06	; 6
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <_ZN5clock9getSecondEv>:

/**********************************/
/*			Get Functions		  */
/**********************************/
BYTE clock::getSecond(){
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <_ZN5clock9getSecondEv+0x6>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	9a 83       	std	Y+2, r25	; 0x02
     be8:	89 83       	std	Y+1, r24	; 0x01
	return second;
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	9a 81       	ldd	r25, Y+2	; 0x02
     bee:	fc 01       	movw	r30, r24
     bf0:	80 81       	ld	r24, Z
}
     bf2:	0f 90       	pop	r0
     bf4:	0f 90       	pop	r0
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	08 95       	ret

00000bfc <_ZN5clock9getMinuteEv>:
BYTE clock::getMinute(){
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	00 d0       	rcall	.+0      	; 0xc02 <_ZN5clock9getMinuteEv+0x6>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
	return minute;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	fc 01       	movw	r30, r24
     c10:	81 81       	ldd	r24, Z+1	; 0x01
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <_ZN5clock7getHourEv>:
BYTE clock::getHour(){
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	00 d0       	rcall	.+0      	; 0xc22 <_ZN5clock7getHourEv+0x6>
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	9a 83       	std	Y+2, r25	; 0x02
     c28:	89 83       	std	Y+1, r24	; 0x01
	return hour;
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	fc 01       	movw	r30, r24
     c30:	82 81       	ldd	r24, Z+2	; 0x02
}
     c32:	0f 90       	pop	r0
     c34:	0f 90       	pop	r0
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <_ZN5clock6getDayEv>:
BYTE clock::getDay(){
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	00 d0       	rcall	.+0      	; 0xc42 <_ZN5clock6getDayEv+0x6>
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	return (day+1);
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	fc 01       	movw	r30, r24
     c50:	83 81       	ldd	r24, Z+3	; 0x03
     c52:	8f 5f       	subi	r24, 0xFF	; 255
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <_ZN5clock8getMonthEv>:
BYTE clock::getMonth(){
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 d0       	rcall	.+0      	; 0xc64 <_ZN5clock8getMonthEv+0x6>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
	return (month+1);
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	fc 01       	movw	r30, r24
     c72:	84 81       	ldd	r24, Z+4	; 0x04
     c74:	8f 5f       	subi	r24, 0xFF	; 255
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <_ZN5clock7getYearEv>:
WORD clock::getYear(){
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	00 d0       	rcall	.+0      	; 0xc86 <_ZN5clock7getYearEv+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
	return year;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	fc 01       	movw	r30, r24
     c94:	85 81       	ldd	r24, Z+5	; 0x05
     c96:	96 81       	ldd	r25, Z+6	; 0x06
     c98:	0f 90       	pop	r0
     c9a:	0f 90       	pop	r0
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <_Z8MoveDownh>:

//Total number of days stored
BYTE EEMEM eeTotalDays=0;
BYTE EEMEM eeOldestDay=0;

void MoveDown(BYTE whichDay){
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	66 97       	sbiw	r28, 0x16	; 22
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	8e 8b       	std	Y+22, r24	; 0x16
	//Get what day we are moving and all of it's data into temp variables
	BYTE offset=INITIAL_OFFSET+(whichDay)*BLOCK_SIZE;
     cb8:	8e 89       	ldd	r24, Y+22	; 0x16
     cba:	88 0f       	add	r24, r24
     cbc:	88 0f       	add	r24, r24
     cbe:	98 2f       	mov	r25, r24
     cc0:	99 0f       	add	r25, r25
     cc2:	99 0f       	add	r25, r25
     cc4:	89 0f       	add	r24, r25
     cc6:	8c 5f       	subi	r24, 0xFC	; 252
     cc8:	89 83       	std	Y+1, r24	; 0x01
	WORD dayT,monthT;
	dayT=eeprom_read_word((WORD *)(offset+DAY));
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	88 2f       	mov	r24, r24
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 26 12 	call	0x244c	; 0x244c <__eerd_word_m324pa>
     cd4:	9b 83       	std	Y+3, r25	; 0x03
     cd6:	8a 83       	std	Y+2, r24	; 0x02
	monthT=eeprom_read_word((WORD *)(offset+MONTH));
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	02 96       	adiw	r24, 0x02	; 2
     ce0:	0e 94 26 12 	call	0x244c	; 0x244c <__eerd_word_m324pa>
     ce4:	9d 83       	std	Y+5, r25	; 0x05
     ce6:	8c 83       	std	Y+4, r24	; 0x04
	float lowT=eeprom_read_float((float*)(offset+LOW));
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	88 2f       	mov	r24, r24
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	04 96       	adiw	r24, 0x04	; 4
     cf0:	0e 94 20 12 	call	0x2440	; 0x2440 <__eerd_dword_m324pa>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	8e 83       	std	Y+6, r24	; 0x06
     cfa:	9f 83       	std	Y+7, r25	; 0x07
     cfc:	a8 87       	std	Y+8, r26	; 0x08
     cfe:	b9 87       	std	Y+9, r27	; 0x09
	float highT=eeprom_read_float((float*)(offset+HIGH));
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	88 2f       	mov	r24, r24
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	08 96       	adiw	r24, 0x08	; 8
     d08:	0e 94 20 12 	call	0x2440	; 0x2440 <__eerd_dword_m324pa>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	8a 87       	std	Y+10, r24	; 0x0a
     d12:	9b 87       	std	Y+11, r25	; 0x0b
     d14:	ac 87       	std	Y+12, r26	; 0x0c
     d16:	bd 87       	std	Y+13, r27	; 0x0d
	float avgT=eeprom_read_float((float*)(offset+AVGT));
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0c 96       	adiw	r24, 0x0c	; 12
     d20:	0e 94 20 12 	call	0x2440	; 0x2440 <__eerd_dword_m324pa>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	8e 87       	std	Y+14, r24	; 0x0e
     d2a:	9f 87       	std	Y+15, r25	; 0x0f
     d2c:	a8 8b       	std	Y+16, r26	; 0x10
     d2e:	b9 8b       	std	Y+17, r27	; 0x11
	float avgH=eeprom_read_float((float *)(offset+AVGH));
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	88 2f       	mov	r24, r24
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	40 96       	adiw	r24, 0x10	; 16
     d38:	0e 94 20 12 	call	0x2440	; 0x2440 <__eerd_dword_m324pa>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	8a 8b       	std	Y+18, r24	; 0x12
     d42:	9b 8b       	std	Y+19, r25	; 0x13
     d44:	ac 8b       	std	Y+20, r26	; 0x14
     d46:	bd 8b       	std	Y+21, r27	; 0x15
	
	//Put all that data into the spot below this one. Offset is one block down
	offset-=BLOCK_SIZE;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	84 51       	subi	r24, 0x14	; 20
     d4c:	89 83       	std	Y+1, r24	; 0x01
	eeprom_update_word((WORD *)(offset+DAY),dayT);
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	2a 81       	ldd	r18, Y+2	; 0x02
     d56:	3b 81       	ldd	r19, Y+3	; 0x03
     d58:	b9 01       	movw	r22, r18
     d5a:	0e 94 4a 12 	call	0x2494	; 0x2494 <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),monthT);
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	88 2f       	mov	r24, r24
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 96       	adiw	r24, 0x02	; 2
     d66:	2c 81       	ldd	r18, Y+4	; 0x04
     d68:	3d 81       	ldd	r19, Y+5	; 0x05
     d6a:	b9 01       	movw	r22, r18
     d6c:	0e 94 4a 12 	call	0x2494	; 0x2494 <__eeupd_word_m324pa>
	eeprom_update_float((float*)(offset+LOW),lowT);
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	04 96       	adiw	r24, 0x04	; 4
     d78:	2e 81       	ldd	r18, Y+6	; 0x06
     d7a:	3f 81       	ldd	r19, Y+7	; 0x07
     d7c:	48 85       	ldd	r20, Y+8	; 0x08
     d7e:	59 85       	ldd	r21, Y+9	; 0x09
     d80:	ba 01       	movw	r22, r20
     d82:	a9 01       	movw	r20, r18
     d84:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+HIGH),highT);
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	08 96       	adiw	r24, 0x08	; 8
     d90:	2a 85       	ldd	r18, Y+10	; 0x0a
     d92:	3b 85       	ldd	r19, Y+11	; 0x0b
     d94:	4c 85       	ldd	r20, Y+12	; 0x0c
     d96:	5d 85       	ldd	r21, Y+13	; 0x0d
     d98:	ba 01       	movw	r22, r20
     d9a:	a9 01       	movw	r20, r18
     d9c:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGT),avgT);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0c 96       	adiw	r24, 0x0c	; 12
     da8:	2e 85       	ldd	r18, Y+14	; 0x0e
     daa:	3f 85       	ldd	r19, Y+15	; 0x0f
     dac:	48 89       	ldd	r20, Y+16	; 0x10
     dae:	59 89       	ldd	r21, Y+17	; 0x11
     db0:	ba 01       	movw	r22, r20
     db2:	a9 01       	movw	r20, r18
     db4:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGH),avgH);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	88 2f       	mov	r24, r24
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	40 96       	adiw	r24, 0x10	; 16
     dc0:	2a 89       	ldd	r18, Y+18	; 0x12
     dc2:	3b 89       	ldd	r19, Y+19	; 0x13
     dc4:	4c 89       	ldd	r20, Y+20	; 0x14
     dc6:	5d 89       	ldd	r21, Y+21	; 0x15
     dc8:	ba 01       	movw	r22, r20
     dca:	a9 01       	movw	r20, r18
     dcc:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
}
     dd0:	66 96       	adiw	r28, 0x16	; 22
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <_Z7SaveDayv>:

void SaveDay(){
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	00 d0       	rcall	.+0      	; 0xdec <_Z7SaveDayv+0xa>
     dec:	00 d0       	rcall	.+0      	; 0xdee <_Z7SaveDayv+0xc>
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	static BOOL allFull=fFalse;
	BYTE daysStored,oldestDay;
	WORD offset;
	
	//If we are all full, don't waste a read on the TotalDays, go right to OldestDay protocol
	if (!allFull){daysStored=eeprom_read_byte(&eeTotalDays);}
     df2:	80 91 90 01 	lds	r24, 0x0190
     df6:	88 23       	and	r24, r24
     df8:	29 f4       	brne	.+10     	; 0xe04 <_Z7SaveDayv+0x22>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 18 12 	call	0x2430	; 0x2430 <__eerd_byte_m324pa>
     e02:	89 83       	std	Y+1, r24	; 0x01
		
	//Get offset for where we are goign to store data.
	if (daysStored >= MAX_DAYS || allFull){
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	88 32       	cpi	r24, 0x28	; 40
     e08:	20 f4       	brcc	.+8      	; 0xe12 <_Z7SaveDayv+0x30>
     e0a:	80 91 90 01 	lds	r24, 0x0190
     e0e:	88 23       	and	r24, r24
     e10:	31 f1       	breq	.+76     	; 0xe5e <_Z7SaveDayv+0x7c>
		if (!allFull){allFull=fTrue;}
     e12:	80 91 90 01 	lds	r24, 0x0190
     e16:	88 23       	and	r24, r24
     e18:	19 f4       	brne	.+6      	; 0xe20 <_Z7SaveDayv+0x3e>
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 90 01 	sts	0x0190, r24
		oldestDay=eeprom_read_byte(&eeOldestDay);
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 18 12 	call	0x2430	; 0x2430 <__eerd_byte_m324pa>
     e28:	8c 83       	std	Y+4, r24	; 0x04
		//Offset is wherever the oldestDay is, which is the block size*absolute + initial.
		offset = INITIAL_OFFSET+(oldestDay)*BLOCK_SIZE;
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	9c 01       	movw	r18, r24
     e3a:	22 0f       	add	r18, r18
     e3c:	33 1f       	adc	r19, r19
     e3e:	22 0f       	add	r18, r18
     e40:	33 1f       	adc	r19, r19
     e42:	82 0f       	add	r24, r18
     e44:	93 1f       	adc	r25, r19
     e46:	04 96       	adiw	r24, 0x04	; 4
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
		//increment oldest day to next location.
		oldestDay++;
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	8c 83       	std	Y+4, r24	; 0x04
		eeprom_update_byte(&eeOldestDay,oldestDay);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	6c 81       	ldd	r22, Y+4	; 0x04
     e58:	0e 94 2c 12 	call	0x2458	; 0x2458 <__eeupd_byte_m324pa>
     e5c:	19 c0       	rjmp	.+50     	; 0xe90 <_Z7SaveDayv+0xae>
	} else {
		//Offset is how many days are stored. If 0 are stored, should be lowest location. if one is stored, should be the next location (block size up).
		offset = INITIAL_OFFSET+(daysStored)*BLOCK_SIZE;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	9c 01       	movw	r18, r24
     e6e:	22 0f       	add	r18, r18
     e70:	33 1f       	adc	r19, r19
     e72:	22 0f       	add	r18, r18
     e74:	33 1f       	adc	r19, r19
     e76:	82 0f       	add	r24, r18
     e78:	93 1f       	adc	r25, r19
     e7a:	04 96       	adiw	r24, 0x04	; 4
     e7c:	9b 83       	std	Y+3, r25	; 0x03
     e7e:	8a 83       	std	Y+2, r24	; 0x02
		daysStored++;
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	8f 5f       	subi	r24, 0xFF	; 255
     e84:	89 83       	std	Y+1, r24	; 0x01
		//Update how many days are stored.
		eeprom_update_byte(&eeTotalDays,daysStored);	
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	69 81       	ldd	r22, Y+1	; 0x01
     e8c:	0e 94 2c 12 	call	0x2458	; 0x2458 <__eeupd_byte_m324pa>
	}

	//Write the data to EEPROM
	eeprom_update_word((WORD *)(offset+DAY),(float)theClock.getDay());
     e90:	0a 81       	ldd	r16, Y+2	; 0x02
     e92:	1b 81       	ldd	r17, Y+3	; 0x03
     e94:	83 e7       	ldi	r24, 0x73	; 115
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_ZN5clock6getDayEv>
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9c 01       	movw	r18, r24
     ebe:	c8 01       	movw	r24, r16
     ec0:	b9 01       	movw	r22, r18
     ec2:	0e 94 4a 12 	call	0x2494	; 0x2494 <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),(float)theClock.getMonth());
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	02 96       	adiw	r24, 0x02	; 2
     ecc:	8c 01       	movw	r16, r24
     ece:	83 e7       	ldi	r24, 0x73	; 115
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5clock8getMonthEv>
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a0 e0       	ldi	r26, 0x00	; 0
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	bc 01       	movw	r22, r24
     ee0:	cd 01       	movw	r24, r26
     ee2:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9c 01       	movw	r18, r24
     ef8:	c8 01       	movw	r24, r16
     efa:	b9 01       	movw	r22, r18
     efc:	0e 94 4a 12 	call	0x2494	; 0x2494 <__eeupd_word_m324pa>
	eeprom_update_float((float *)(offset+LOW),(float)theThermostat.getLow());
     f00:	8a 81       	ldd	r24, Y+2	; 0x02
     f02:	9b 81       	ldd	r25, Y+3	; 0x03
     f04:	04 96       	adiw	r24, 0x04	; 4
     f06:	8c 01       	movw	r16, r24
     f08:	8a e7       	ldi	r24, 0x7A	; 122
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 bc 03 	call	0x778	; 0x778 <_ZN10thermostat6getLowEv>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	c8 01       	movw	r24, r16
     f16:	ba 01       	movw	r22, r20
     f18:	a9 01       	movw	r20, r18
     f1a:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+HIGH),(float)theThermostat.getHigh());
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	9b 81       	ldd	r25, Y+3	; 0x03
     f22:	08 96       	adiw	r24, 0x08	; 8
     f24:	8c 01       	movw	r16, r24
     f26:	8a e7       	ldi	r24, 0x7A	; 122
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 a7 03 	call	0x74e	; 0x74e <_ZN10thermostat7getHighEv>
     f2e:	9b 01       	movw	r18, r22
     f30:	ac 01       	movw	r20, r24
     f32:	c8 01       	movw	r24, r16
     f34:	ba 01       	movw	r22, r20
     f36:	a9 01       	movw	r20, r18
     f38:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGT),(float)theThermostat.getAveT());
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	9b 81       	ldd	r25, Y+3	; 0x03
     f40:	0c 96       	adiw	r24, 0x0c	; 12
     f42:	8c 01       	movw	r16, r24
     f44:	8a e7       	ldi	r24, 0x7A	; 122
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN10thermostat7getAveTEv>
     f4c:	9b 01       	movw	r18, r22
     f4e:	ac 01       	movw	r20, r24
     f50:	c8 01       	movw	r24, r16
     f52:	ba 01       	movw	r22, r20
     f54:	a9 01       	movw	r20, r18
     f56:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	9b 81       	ldd	r25, Y+3	; 0x03
     f5e:	40 96       	adiw	r24, 0x10	; 16
     f60:	8c 01       	movw	r16, r24
     f62:	8a e7       	ldi	r24, 0x7A	; 122
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	0e 94 e6 03 	call	0x7cc	; 0x7cc <_ZN10thermostat7getAveHEv>
     f6a:	9b 01       	movw	r18, r22
     f6c:	ac 01       	movw	r20, r24
     f6e:	c8 01       	movw	r24, r16
     f70:	ba 01       	movw	r22, r20
     f72:	a9 01       	movw	r20, r18
     f74:	0e 94 3e 12 	call	0x247c	; 0x247c <__eeupd_dword_m324pa>
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	0f 90       	pop	r0
     f80:	df 91       	pop	r29
     f82:	cf 91       	pop	r28
     f84:	1f 91       	pop	r17
     f86:	0f 91       	pop	r16
     f88:	08 95       	ret

00000f8a <_Z9DeleteDayh>:

void DeleteDay(BYTE whichDay){
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <_Z9DeleteDayh+0x6>
     f90:	00 d0       	rcall	.+0      	; 0xf92 <_Z9DeleteDayh+0x8>
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	8c 83       	std	Y+4, r24	; 0x04
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
     f98:	80 e0       	ldi	r24, 0x00	; 0
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 18 12 	call	0x2430	; 0x2430 <__eerd_byte_m324pa>
     fa0:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=whichDay+1; i<=daysStored; i++){
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	9a 83       	std	Y+2, r25	; 0x02
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <_Z9DeleteDayh+0x36>
		MoveDown(i);
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	0e 94 51 06 	call	0xca2	; 0xca2 <_Z8MoveDownh>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
}

void DeleteDay(BYTE whichDay){
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
	for(int i=whichDay+1; i<=daysStored; i++){
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
     fcc:	28 17       	cp	r18, r24
     fce:	39 07       	cpc	r19, r25
     fd0:	0c f4       	brge	.+2      	; 0xfd4 <_Z9DeleteDayh+0x4a>
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	44 23       	and	r20, r20
     fd6:	61 f7       	brne	.-40     	; 0xfb0 <_Z9DeleteDayh+0x26>
		MoveDown(i);
	}
	
	daysStored--;
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	8b 83       	std	Y+3, r24	; 0x03
	eeprom_update_byte(&eeTotalDays,daysStored);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	6b 81       	ldd	r22, Y+3	; 0x03
     fe4:	0e 94 2c 12 	call	0x2458	; 0x2458 <__eeupd_byte_m324pa>
     fe8:	0f 90       	pop	r0
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
     ff6:	1f 92       	push	r1
     ff8:	0f 92       	push	r0
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	0f 92       	push	r0
     ffe:	11 24       	eor	r1, r1
    1000:	2f 93       	push	r18
    1002:	3f 93       	push	r19
    1004:	4f 93       	push	r20
    1006:	5f 93       	push	r21
    1008:	6f 93       	push	r22
    100a:	7f 93       	push	r23
    100c:	8f 93       	push	r24
    100e:	9f 93       	push	r25
    1010:	af 93       	push	r26
    1012:	bf 93       	push	r27
    1014:	ef 93       	push	r30
    1016:	ff 93       	push	r31
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
	cli();
    1020:	f8 94       	cli
	prtDebug |= (1 << bnD1);	//should toggle amber LED on. 
    1022:	88 e2       	ldi	r24, 0x28	; 40
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	28 e2       	ldi	r18, 0x28	; 40
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	f9 01       	movw	r30, r18
    102c:	20 81       	ld	r18, Z
    102e:	20 61       	ori	r18, 0x10	; 16
    1030:	fc 01       	movw	r30, r24
    1032:	20 83       	st	Z, r18
	Wait_ms(200);
    1034:	88 ec       	ldi	r24, 0xC8	; 200
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	flagReceivePi=fTrue;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 72 01 	sts	0x0172, r24
	sei();
    1042:	78 94       	sei
}
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
	cli();
    1096:	f8 94       	cli
	static WORD timerTwoCount=0,receivePiTimer=0;
	
	//Toggle on the second
	if (timerTwoCount<PULSE_TIME/2){
    1098:	80 91 8c 01 	lds	r24, 0x018C
    109c:	90 91 8d 01 	lds	r25, 0x018D
    10a0:	8e 31       	cpi	r24, 0x1E	; 30
    10a2:	91 05       	cpc	r25, r1
    10a4:	50 f4       	brcc	.+20     	; 0x10ba <__vector_11+0x50>
		prtDebug |= (1 << bnD0);
    10a6:	88 e2       	ldi	r24, 0x28	; 40
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	28 e2       	ldi	r18, 0x28	; 40
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	28 60       	ori	r18, 0x08	; 8
    10b4:	fc 01       	movw	r30, r24
    10b6:	20 83       	st	Z, r18
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <__vector_11+0x62>
	} else {
		prtDebug &= ~(1 << bnD0);
    10ba:	88 e2       	ldi	r24, 0x28	; 40
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	28 e2       	ldi	r18, 0x28	; 40
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	f9 01       	movw	r30, r18
    10c4:	20 81       	ld	r18, Z
    10c6:	27 7f       	andi	r18, 0xF7	; 247
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
	}
	
	if (timerTwoCount++>=PULSE_TIME) {
    10cc:	80 91 8c 01 	lds	r24, 0x018C
    10d0:	90 91 8d 01 	lds	r25, 0x018D
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	8c 33       	cpi	r24, 0x3C	; 60
    10d8:	91 05       	cpc	r25, r1
    10da:	08 f4       	brcc	.+2      	; 0x10de <__vector_11+0x74>
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	01 96       	adiw	r24, 0x01	; 1
    10e0:	90 93 8d 01 	sts	0x018D, r25
    10e4:	80 93 8c 01 	sts	0x018C, r24
    10e8:	22 23       	and	r18, r18
    10ea:	79 f0       	breq	.+30     	; 0x110a <__vector_11+0xa0>
		BYTE lastSecond=theClock.getSecond();
    10ec:	83 e7       	ldi	r24, 0x73	; 115
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_ZN5clock9getSecondEv>
    10f4:	89 83       	std	Y+1, r24	; 0x01
		theClock.addSecond(1);  
    10f6:	83 e7       	ldi	r24, 0x73	; 115
    10f8:	91 e0       	ldi	r25, 0x01	; 1
    10fa:	61 e0       	ldi	r22, 0x01	; 1
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	0e 94 22 04 	call	0x844	; 0x844 <_ZN5clock9addSecondEj>
		timerTwoCount = 0;
    1102:	10 92 8d 01 	sts	0x018D, r1
    1106:	10 92 8c 01 	sts	0x018C, r1
	}		//toggles green, left LED. Should be on half second.
	
	//Receive Timeout	
	if (flagReceivePi && receivePiTimer<TIMEOUT){receivePiTimer++;}								//no timteout yet
    110a:	80 91 72 01 	lds	r24, 0x0172
    110e:	88 23       	and	r24, r24
    1110:	91 f0       	breq	.+36     	; 0x1136 <__vector_11+0xcc>
    1112:	80 91 8e 01 	lds	r24, 0x018E
    1116:	90 91 8f 01 	lds	r25, 0x018F
    111a:	f1 e0       	ldi	r31, 0x01	; 1
    111c:	8c 32       	cpi	r24, 0x2C	; 44
    111e:	9f 07       	cpc	r25, r31
    1120:	50 f4       	brcc	.+20     	; 0x1136 <__vector_11+0xcc>
    1122:	80 91 8e 01 	lds	r24, 0x018E
    1126:	90 91 8f 01 	lds	r25, 0x018F
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	90 93 8f 01 	sts	0x018F, r25
    1130:	80 93 8e 01 	sts	0x018E, r24
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <__vector_11+0xfa>
	else if (flagReceivePi && receivePiTimer>=TIMEOUT){receivePiTimer=0;flagReceivePi=fFalse;}	//timeout
    1136:	80 91 72 01 	lds	r24, 0x0172
    113a:	88 23       	and	r24, r24
    113c:	79 f0       	breq	.+30     	; 0x115c <__vector_11+0xf2>
    113e:	80 91 8e 01 	lds	r24, 0x018E
    1142:	90 91 8f 01 	lds	r25, 0x018F
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	8c 32       	cpi	r24, 0x2C	; 44
    114a:	92 07       	cpc	r25, r18
    114c:	38 f0       	brcs	.+14     	; 0x115c <__vector_11+0xf2>
    114e:	10 92 8f 01 	sts	0x018F, r1
    1152:	10 92 8e 01 	sts	0x018E, r1
    1156:	10 92 72 01 	sts	0x0172, r1
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <__vector_11+0xfa>
	else {receivePiTimer=0;}																	//make sure this statys at 0 and is reset if a successful receive happens		
    115c:	10 92 8f 01 	sts	0x018F, r1
    1160:	10 92 8e 01 	sts	0x018E, r1
	sei();
    1164:	78 94       	sei
}
    1166:	0f 90       	pop	r0
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	ff 91       	pop	r31
    116e:	ef 91       	pop	r30
    1170:	bf 91       	pop	r27
    1172:	af 91       	pop	r26
    1174:	9f 91       	pop	r25
    1176:	8f 91       	pop	r24
    1178:	7f 91       	pop	r23
    117a:	6f 91       	pop	r22
    117c:	5f 91       	pop	r21
    117e:	4f 91       	pop	r20
    1180:	3f 91       	pop	r19
    1182:	2f 91       	pop	r18
    1184:	0f 90       	pop	r0
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	0f 90       	pop	r0
    118a:	1f 90       	pop	r1
    118c:	18 95       	reti

0000118e <main>:


/*****************************************************************************************************************/
int main(void)
{	
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	cf 55       	subi	r28, 0x5F	; 95
    119c:	d0 40       	sbci	r29, 0x00	; 0
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    11a8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    11ac:	83 e3       	ldi	r24, 0x33	; 51
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 9f 0a 	call	0x153e	; 0x153e <_Z7AppInitj>
	ResetDebug();	//clear LED's
    11b4:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_Z10ResetDebugv>
	InitTimer2();
    11b8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <_Z10InitTimer2v>
	sei();
    11bc:	78 94       	sei
	Wait_sec(2);
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_Z8Wait_secj>
	prtDebug|=(1 << bnD4);
    11c6:	88 e2       	ldi	r24, 0x28	; 40
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	28 e2       	ldi	r18, 0x28	; 40
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	f9 01       	movw	r30, r18
    11d0:	20 81       	ld	r18, Z
    11d2:	20 68       	ori	r18, 0x80	; 128
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
	// main program loop
	while (fTrue) {	
		
		//IF receiving from the Pi
		if (flagReceivePi){
    11d8:	80 91 72 01 	lds	r24, 0x0172
    11dc:	88 23       	and	r24, r24
    11de:	79 f0       	breq	.+30     	; 0x11fe <main+0x70>
			Print0("Receiving.");
    11e0:	8f e4       	ldi	r24, 0x4F	; 79
    11e2:	91 e0       	ldi	r25, 0x01	; 1
    11e4:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
			ReceivePi();
    11e8:	0e 94 31 01 	call	0x262	; 0x262 <_Z9ReceivePiv>
			prtDebug &= ~(1 << bnD1);
    11ec:	88 e2       	ldi	r24, 0x28	; 40
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	28 e2       	ldi	r18, 0x28	; 40
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	2f 7e       	andi	r18, 0xEF	; 239
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
		}
		Wait_sec(1);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <_Z8Wait_secj>
		
		//If we were asked for stats, send them back.
		if (flagAllStats){
    1206:	80 91 71 01 	lds	r24, 0x0171
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <main+0x82>
    120e:	2b c1       	rjmp	.+598    	; 0x1466 <main+0x2d8>
			cli();
    1210:	f8 94       	cli
			Print0("Taking readings.");
    1212:	8a e5       	ldi	r24, 0x5A	; 90
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
			prtDebug |= (1 << bnD2);
    121a:	88 e2       	ldi	r24, 0x28	; 40
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	28 e2       	ldi	r18, 0x28	; 40
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	f9 01       	movw	r30, r18
    1224:	20 81       	ld	r18, Z
    1226:	20 62       	ori	r18, 0x20	; 32
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
			char printString[45];
			//Get all the data readings
			double adtTemp=GetTempADT();
    122c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <_Z10GetTempADTv>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	9c 83       	std	Y+4, r25	; 0x04
    1238:	ad 83       	std	Y+5, r26	; 0x05
    123a:	be 83       	std	Y+6, r27	; 0x06
			double tiTemp=GetTempTI(MYUBRR);
    123c:	83 e3       	ldi	r24, 0x33	; 51
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_Z9GetTempTIj>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	8f 83       	std	Y+7, r24	; 0x07
    124a:	98 87       	std	Y+8, r25	; 0x08
    124c:	a9 87       	std	Y+9, r26	; 0x09
    124e:	ba 87       	std	Y+10, r27	; 0x0a
			double thermTemp=GetTempTherm();
    1250:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_Z12GetTempThermv>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	8b 87       	std	Y+11, r24	; 0x0b
    125a:	9c 87       	std	Y+12, r25	; 0x0c
    125c:	ad 87       	std	Y+13, r26	; 0x0d
    125e:	be 87       	std	Y+14, r27	; 0x0e
			double humidity=GetHumidity();
    1260:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <_Z11GetHumidityv>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	8f 87       	std	Y+15, r24	; 0x0f
    126a:	98 8b       	std	Y+16, r25	; 0x10
    126c:	a9 8b       	std	Y+17, r26	; 0x11
    126e:	ba 8b       	std	Y+18, r27	; 0x12
			//Add the therm temp to the thermostat class long with the humidity.
			theThermostat.addDataPoint(thermTemp,humidity);
    1270:	8a e7       	ldi	r24, 0x7A	; 122
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	4b 85       	ldd	r20, Y+11	; 0x0b
    1276:	5c 85       	ldd	r21, Y+12	; 0x0c
    1278:	6d 85       	ldd	r22, Y+13	; 0x0d
    127a:	7e 85       	ldd	r23, Y+14	; 0x0e
    127c:	0f 85       	ldd	r16, Y+15	; 0x0f
    127e:	18 89       	ldd	r17, Y+16	; 0x10
    1280:	29 89       	ldd	r18, Y+17	; 0x11
    1282:	3a 89       	ldd	r19, Y+18	; 0x12
    1284:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN10thermostat12addDataPointEdd>
			//Declare strings to convert doubles into
			char adtStr[8],tiStr[8],thermStr[8],humidityStr[8];
			dtostrf(adtTemp,1,2,adtStr);
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	ad 81       	ldd	r26, Y+5	; 0x05
    128e:	be 81       	ldd	r27, Y+6	; 0x06
    1290:	fe 01       	movw	r30, r28
    1292:	73 96       	adiw	r30, 0x13	; 19
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	41 e0       	ldi	r20, 0x01	; 1
    129a:	22 e0       	ldi	r18, 0x02	; 2
    129c:	8f 01       	movw	r16, r30
    129e:	0e 94 dd 11 	call	0x23ba	; 0x23ba <dtostrf>
			dtostrf(thermTemp,1,2,thermStr);
    12a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a6:	ad 85       	ldd	r26, Y+13	; 0x0d
    12a8:	be 85       	ldd	r27, Y+14	; 0x0e
    12aa:	fe 01       	movw	r30, r28
    12ac:	b3 96       	adiw	r30, 0x23	; 35
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	22 e0       	ldi	r18, 0x02	; 2
    12b6:	8f 01       	movw	r16, r30
    12b8:	0e 94 dd 11 	call	0x23ba	; 0x23ba <dtostrf>
			dtostrf(tiTemp,1,2,tiStr);
    12bc:	8f 81       	ldd	r24, Y+7	; 0x07
    12be:	98 85       	ldd	r25, Y+8	; 0x08
    12c0:	a9 85       	ldd	r26, Y+9	; 0x09
    12c2:	ba 85       	ldd	r27, Y+10	; 0x0a
    12c4:	fe 01       	movw	r30, r28
    12c6:	7b 96       	adiw	r30, 0x1b	; 27
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	22 e0       	ldi	r18, 0x02	; 2
    12d0:	8f 01       	movw	r16, r30
    12d2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <dtostrf>
			dtostrf(humidity,1,2,humidityStr);
    12d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d8:	98 89       	ldd	r25, Y+16	; 0x10
    12da:	a9 89       	ldd	r26, Y+17	; 0x11
    12dc:	ba 89       	ldd	r27, Y+18	; 0x12
    12de:	fe 01       	movw	r30, r28
    12e0:	bb 96       	adiw	r30, 0x2b	; 43
    12e2:	bc 01       	movw	r22, r24
    12e4:	cd 01       	movw	r24, r26
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	22 e0       	ldi	r18, 0x02	; 2
    12ea:	8f 01       	movw	r16, r30
    12ec:	0e 94 dd 11 	call	0x23ba	; 0x23ba <dtostrf>
			//Make the output string
			strcpy(printString,"AD");
    12f0:	ce 01       	movw	r24, r28
    12f2:	c3 96       	adiw	r24, 0x33	; 51
    12f4:	2b e6       	ldi	r18, 0x6B	; 107
    12f6:	31 e0       	ldi	r19, 0x01	; 1
    12f8:	43 e0       	ldi	r20, 0x03	; 3
    12fa:	f9 01       	movw	r30, r18
    12fc:	00 80       	ld	r0, Z
    12fe:	2f 5f       	subi	r18, 0xFF	; 255
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	fc 01       	movw	r30, r24
    1304:	00 82       	st	Z, r0
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	41 50       	subi	r20, 0x01	; 1
    130a:	44 23       	and	r20, r20
    130c:	b1 f7       	brne	.-20     	; 0x12fa <main+0x16c>
			strcat(printString,adtStr);
    130e:	ce 01       	movw	r24, r28
    1310:	c3 96       	adiw	r24, 0x33	; 51
    1312:	9e 01       	movw	r18, r28
    1314:	2d 5e       	subi	r18, 0xED	; 237
    1316:	3f 4f       	sbci	r19, 0xFF	; 255
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <strcat>
			strcat(printString,"/TI");
    131e:	ce 01       	movw	r24, r28
    1320:	c3 96       	adiw	r24, 0x33	; 51
    1322:	9c 01       	movw	r18, r24
    1324:	f9 01       	movw	r30, r18
    1326:	01 90       	ld	r0, Z+
    1328:	00 20       	and	r0, r0
    132a:	e9 f7       	brne	.-6      	; 0x1326 <main+0x198>
    132c:	cf 01       	movw	r24, r30
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	82 1b       	sub	r24, r18
    1332:	93 0b       	sbc	r25, r19
    1334:	9e 01       	movw	r18, r28
    1336:	2d 5c       	subi	r18, 0xCD	; 205
    1338:	3f 4f       	sbci	r19, 0xFF	; 255
    133a:	28 0f       	add	r18, r24
    133c:	39 1f       	adc	r19, r25
    133e:	8f e2       	ldi	r24, 0x2F	; 47
    1340:	94 e5       	ldi	r25, 0x54	; 84
    1342:	a9 e4       	ldi	r26, 0x49	; 73
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	f9 01       	movw	r30, r18
    1348:	80 83       	st	Z, r24
    134a:	91 83       	std	Z+1, r25	; 0x01
    134c:	a2 83       	std	Z+2, r26	; 0x02
    134e:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,tiStr);
    1350:	ce 01       	movw	r24, r28
    1352:	c3 96       	adiw	r24, 0x33	; 51
    1354:	9e 01       	movw	r18, r28
    1356:	25 5e       	subi	r18, 0xE5	; 229
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	b9 01       	movw	r22, r18
    135c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <strcat>
			strcat(printString,"/TH");
    1360:	ce 01       	movw	r24, r28
    1362:	c3 96       	adiw	r24, 0x33	; 51
    1364:	9c 01       	movw	r18, r24
    1366:	f9 01       	movw	r30, r18
    1368:	01 90       	ld	r0, Z+
    136a:	00 20       	and	r0, r0
    136c:	e9 f7       	brne	.-6      	; 0x1368 <main+0x1da>
    136e:	cf 01       	movw	r24, r30
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	82 1b       	sub	r24, r18
    1374:	93 0b       	sbc	r25, r19
    1376:	9e 01       	movw	r18, r28
    1378:	2d 5c       	subi	r18, 0xCD	; 205
    137a:	3f 4f       	sbci	r19, 0xFF	; 255
    137c:	28 0f       	add	r18, r24
    137e:	39 1f       	adc	r19, r25
    1380:	8f e2       	ldi	r24, 0x2F	; 47
    1382:	94 e5       	ldi	r25, 0x54	; 84
    1384:	a8 e4       	ldi	r26, 0x48	; 72
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	f9 01       	movw	r30, r18
    138a:	80 83       	st	Z, r24
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	a2 83       	std	Z+2, r26	; 0x02
    1390:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,thermStr);
    1392:	ce 01       	movw	r24, r28
    1394:	c3 96       	adiw	r24, 0x33	; 51
    1396:	9e 01       	movw	r18, r28
    1398:	2d 5d       	subi	r18, 0xDD	; 221
    139a:	3f 4f       	sbci	r19, 0xFF	; 255
    139c:	b9 01       	movw	r22, r18
    139e:	0e 94 ff 11 	call	0x23fe	; 0x23fe <strcat>
			strcat(printString,"/HU");
    13a2:	ce 01       	movw	r24, r28
    13a4:	c3 96       	adiw	r24, 0x33	; 51
    13a6:	9c 01       	movw	r18, r24
    13a8:	f9 01       	movw	r30, r18
    13aa:	01 90       	ld	r0, Z+
    13ac:	00 20       	and	r0, r0
    13ae:	e9 f7       	brne	.-6      	; 0x13aa <main+0x21c>
    13b0:	cf 01       	movw	r24, r30
    13b2:	01 97       	sbiw	r24, 0x01	; 1
    13b4:	82 1b       	sub	r24, r18
    13b6:	93 0b       	sbc	r25, r19
    13b8:	9e 01       	movw	r18, r28
    13ba:	2d 5c       	subi	r18, 0xCD	; 205
    13bc:	3f 4f       	sbci	r19, 0xFF	; 255
    13be:	28 0f       	add	r18, r24
    13c0:	39 1f       	adc	r19, r25
    13c2:	8f e2       	ldi	r24, 0x2F	; 47
    13c4:	98 e4       	ldi	r25, 0x48	; 72
    13c6:	a5 e5       	ldi	r26, 0x55	; 85
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	f9 01       	movw	r30, r18
    13cc:	80 83       	st	Z, r24
    13ce:	91 83       	std	Z+1, r25	; 0x01
    13d0:	a2 83       	std	Z+2, r26	; 0x02
    13d2:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,humidityStr);
    13d4:	ce 01       	movw	r24, r28
    13d6:	c3 96       	adiw	r24, 0x33	; 51
    13d8:	9e 01       	movw	r18, r28
    13da:	25 5d       	subi	r18, 0xD5	; 213
    13dc:	3f 4f       	sbci	r19, 0xFF	; 255
    13de:	b9 01       	movw	r22, r18
    13e0:	0e 94 ff 11 	call	0x23fe	; 0x23fe <strcat>
			strcat(printString,"X");
    13e4:	ce 01       	movw	r24, r28
    13e6:	c3 96       	adiw	r24, 0x33	; 51
    13e8:	9c 01       	movw	r18, r24
    13ea:	f9 01       	movw	r30, r18
    13ec:	01 90       	ld	r0, Z+
    13ee:	00 20       	and	r0, r0
    13f0:	e9 f7       	brne	.-6      	; 0x13ec <main+0x25e>
    13f2:	cf 01       	movw	r24, r30
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	82 1b       	sub	r24, r18
    13f8:	93 0b       	sbc	r25, r19
    13fa:	9e 01       	movw	r18, r28
    13fc:	2d 5c       	subi	r18, 0xCD	; 205
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	82 0f       	add	r24, r18
    1402:	93 1f       	adc	r25, r19
    1404:	28 e5       	ldi	r18, 0x58	; 88
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	fc 01       	movw	r30, r24
    140a:	31 83       	std	Z+1, r19	; 0x01
    140c:	20 83       	st	Z, r18
			//Drop debug indicator light, print the string, exit while clearing the string in memory
			prtDebug &= ~(1 << bnD2);
    140e:	88 e2       	ldi	r24, 0x28	; 40
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	28 e2       	ldi	r18, 0x28	; 40
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	f9 01       	movw	r30, r18
    1418:	20 81       	ld	r18, Z
    141a:	2f 7d       	andi	r18, 0xDF	; 223
    141c:	fc 01       	movw	r30, r24
    141e:	20 83       	st	Z, r18
			Print0(printString);
    1420:	ce 01       	movw	r24, r28
    1422:	c3 96       	adiw	r24, 0x33	; 51
    1424:	0e 94 04 01 	call	0x208	; 0x208 <_Z6Print0Pc>
			flagAllStats=fFalse;
    1428:	10 92 71 01 	sts	0x0171, r1
			int i=0;
    142c:	1a 82       	std	Y+2, r1	; 0x02
    142e:	19 82       	std	Y+1, r1	; 0x01
			for (i=0;i<45;i++){printString[i]=NULL;}
    1430:	1a 82       	std	Y+2, r1	; 0x02
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	0e c0       	rjmp	.+28     	; 0x1452 <main+0x2c4>
    1436:	9e 01       	movw	r18, r28
    1438:	2d 5c       	subi	r18, 0xCD	; 205
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	9a 81       	ldd	r25, Y+2	; 0x02
    1440:	82 0f       	add	r24, r18
    1442:	93 1f       	adc	r25, r19
    1444:	fc 01       	movw	r30, r24
    1446:	10 82       	st	Z, r1
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	9a 81       	ldd	r25, Y+2	; 0x02
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	21 e0       	ldi	r18, 0x01	; 1
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	9a 81       	ldd	r25, Y+2	; 0x02
    1458:	8d 32       	cpi	r24, 0x2D	; 45
    145a:	91 05       	cpc	r25, r1
    145c:	0c f0       	brlt	.+2      	; 0x1460 <main+0x2d2>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	22 23       	and	r18, r18
    1462:	49 f7       	brne	.-46     	; 0x1436 <main+0x2a8>
			sei();
    1464:	78 94       	sei
		}		
		
		//Power save. Should sleep for ~10 seconds
		//Print0(" Going to sleep... ");
		prtDebug &= ~(1 << bnD4);
    1466:	88 e2       	ldi	r24, 0x28	; 40
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	28 e2       	ldi	r18, 0x28	; 40
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f9 01       	movw	r30, r18
    1470:	20 81       	ld	r18, Z
    1472:	2f 77       	andi	r18, 0x7F	; 127
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
		flagGoToSleep=fTrue;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 70 01 	sts	0x0170, r24
		sleepCnt=0;
    147e:	10 92 6f 01 	sts	0x016F, r1
    1482:	10 92 6e 01 	sts	0x016E, r1
		SMCR = (1 << SM1)|(1 << SM0);
    1486:	83 e5       	ldi	r24, 0x53	; 83
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	26 e0       	ldi	r18, 0x06	; 6
    148c:	fc 01       	movw	r30, r24
    148e:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    1490:	83 e5       	ldi	r24, 0x53	; 83
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	23 e5       	ldi	r18, 0x53	; 83
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	f9 01       	movw	r30, r18
    149a:	20 81       	ld	r18, Z
    149c:	21 60       	ori	r18, 0x01	; 1
    149e:	fc 01       	movw	r30, r24
    14a0:	20 83       	st	Z, r18
		while (!flagReceivePi){
    14a2:	0a c0       	rjmp	.+20     	; 0x14b8 <main+0x32a>
			asm volatile("SLEEP");
    14a4:	88 95       	sleep
			sleepCnt++;
    14a6:	80 91 6e 01 	lds	r24, 0x016E
    14aa:	90 91 6f 01 	lds	r25, 0x016F
    14ae:	01 96       	adiw	r24, 0x01	; 1
    14b0:	90 93 6f 01 	sts	0x016F, r25
    14b4:	80 93 6e 01 	sts	0x016E, r24
		prtDebug &= ~(1 << bnD4);
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (!flagReceivePi){
    14b8:	90 91 72 01 	lds	r25, 0x0172
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	99 23       	and	r25, r25
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <main+0x336>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	88 23       	and	r24, r24
    14c6:	71 f7       	brne	.-36     	; 0x14a4 <main+0x316>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
    14c8:	83 e5       	ldi	r24, 0x53	; 83
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	fc 01       	movw	r30, r24
    14ce:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
    14d0:	10 92 70 01 	sts	0x0170, r1
		prtDebug|=(1 << bnD4);
    14d4:	88 e2       	ldi	r24, 0x28	; 40
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	28 e2       	ldi	r18, 0x28	; 40
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	f9 01       	movw	r30, r18
    14de:	20 81       	ld	r18, Z
    14e0:	20 68       	ori	r18, 0x80	; 128
    14e2:	fc 01       	movw	r30, r24
    14e4:	20 83       	st	Z, r18
		Wait_ms(10);
    14e6:	8a e0       	ldi	r24, 0x0A	; 10
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	InitTimer2();
	sei();
	Wait_sec(2);
	prtDebug|=(1 << bnD4);
	// main program loop
	while (fTrue) {	
    14ee:	74 ce       	rjmp	.-792    	; 0x11d8 <main+0x4a>

000014f0 <_Z10DeviceInitv>:
	}  //end while fTrue
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
    14f8:	81 e2       	ldi	r24, 0x21	; 33
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	10 82       	st	Z, r1
	DDRB = 0;
    1500:	84 e2       	ldi	r24, 0x24	; 36
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	fc 01       	movw	r30, r24
    1506:	10 82       	st	Z, r1
	DDRC = 0;
    1508:	87 e2       	ldi	r24, 0x27	; 39
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	fc 01       	movw	r30, r24
    150e:	10 82       	st	Z, r1
	DDRD = 0;
    1510:	8a e2       	ldi	r24, 0x2A	; 42
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	10 82       	st	Z, r1

	PORTA = 0x00;
    1518:	82 e2       	ldi	r24, 0x22	; 34
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	fc 01       	movw	r30, r24
    151e:	10 82       	st	Z, r1
	PORTB = 0x00;
    1520:	85 e2       	ldi	r24, 0x25	; 37
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	fc 01       	movw	r30, r24
    1526:	10 82       	st	Z, r1
	PORTC = 0x00;
    1528:	88 e2       	ldi	r24, 0x28	; 40
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	fc 01       	movw	r30, r24
    152e:	10 82       	st	Z, r1
	PORTD = 0x00;
    1530:	8b e2       	ldi	r24, 0x2B	; 43
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	fc 01       	movw	r30, r24
    1536:	10 82       	st	Z, r1
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <_Z7AppInitj>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	00 d0       	rcall	.+0      	; 0x1544 <_Z7AppInitj+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <_Z7AppInitj+0x8>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <_Z7AppInitj+0xa>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
    1550:	84 ec       	ldi	r24, 0xC4	; 196
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	2d 81       	ldd	r18, Y+5	; 0x05
    1556:	fc 01       	movw	r30, r24
    1558:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
    155a:	85 ec       	ldi	r24, 0xC5	; 197
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	2d 81       	ldd	r18, Y+5	; 0x05
    1560:	3e 81       	ldd	r19, Y+6	; 0x06
    1562:	23 2f       	mov	r18, r19
    1564:	33 27       	eor	r19, r19
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    156a:	81 ec       	ldi	r24, 0xC1	; 193
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	28 e1       	ldi	r18, 0x18	; 24
    1570:	fc 01       	movw	r30, r24
    1572:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
    1574:	82 ec       	ldi	r24, 0xC2	; 194
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	26 e0       	ldi	r18, 0x06	; 6
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
    157e:	87 e2       	ldi	r24, 0x27	; 39
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	27 e2       	ldi	r18, 0x27	; 39
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	f9 01       	movw	r30, r18
    1588:	20 81       	ld	r18, Z
    158a:	28 6f       	ori	r18, 0xF8	; 248
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    1590:	84 e0       	ldi	r24, 0x04	; 4
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	9a 83       	std	Y+2, r25	; 0x02
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	1d c0       	rjmp	.+58     	; 0x15d4 <_Z7AppInitj+0x96>
		prtDebug |= (1 << i);
    159a:	88 e2       	ldi	r24, 0x28	; 40
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	28 e2       	ldi	r18, 0x28	; 40
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	f9 01       	movw	r30, r18
    15a4:	20 81       	ld	r18, Z
    15a6:	42 2f       	mov	r20, r18
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	09 80       	ldd	r0, Y+1	; 0x01
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <_Z7AppInitj+0x76>
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <_Z7AppInitj+0x72>
    15b8:	24 2b       	or	r18, r20
    15ba:	fc 01       	movw	r30, r24
    15bc:	20 83       	st	Z, r18
		Wait_ms(200);
    15be:	88 ec       	ldi	r24, 0xC8	; 200
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
		ResetDebug();
    15c6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_Z10ResetDebugv>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	9a 83       	std	Y+2, r25	; 0x02
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	88 30       	cpi	r24, 0x08	; 8
    15dc:	91 05       	cpc	r25, r1
    15de:	0c f0       	brlt	.+2      	; 0x15e2 <_Z7AppInitj+0xa4>
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	22 23       	and	r18, r18
    15e4:	d1 f6       	brne	.-76     	; 0x159a <_Z7AppInitj+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9c 83       	std	Y+4, r25	; 0x04
    15ec:	8b 83       	std	Y+3, r24	; 0x03
    15ee:	1d c0       	rjmp	.+58     	; 0x162a <_Z7AppInitj+0xec>
		prtDebug |= (1 << j);
    15f0:	88 e2       	ldi	r24, 0x28	; 40
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	28 e2       	ldi	r18, 0x28	; 40
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	f9 01       	movw	r30, r18
    15fa:	20 81       	ld	r18, Z
    15fc:	42 2f       	mov	r20, r18
    15fe:	21 e0       	ldi	r18, 0x01	; 1
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	0b 80       	ldd	r0, Y+3	; 0x03
    1604:	02 c0       	rjmp	.+4      	; 0x160a <_Z7AppInitj+0xcc>
    1606:	22 0f       	add	r18, r18
    1608:	33 1f       	adc	r19, r19
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <_Z7AppInitj+0xc8>
    160e:	24 2b       	or	r18, r20
    1610:	fc 01       	movw	r30, r24
    1612:	20 83       	st	Z, r18
		Wait_ms(200);
    1614:	88 ec       	ldi	r24, 0xC8	; 200
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
		ResetDebug();
    161c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_Z10ResetDebugv>
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9c 83       	std	Y+4, r25	; 0x04
    1628:	8b 83       	std	Y+3, r24	; 0x03
    162a:	21 e0       	ldi	r18, 0x01	; 1
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	84 30       	cpi	r24, 0x04	; 4
    1632:	91 05       	cpc	r25, r1
    1634:	0c f4       	brge	.+2      	; 0x1638 <_Z7AppInitj+0xfa>
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	22 23       	and	r18, r18
    163a:	d1 f6       	brne	.-76     	; 0x15f0 <_Z7AppInitj+0xb2>
		Wait_ms(200);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
    163c:	84 e2       	ldi	r24, 0x24	; 36
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	24 e2       	ldi	r18, 0x24	; 36
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	f9 01       	movw	r30, r18
    1646:	20 81       	ld	r18, Z
    1648:	20 6b       	ori	r18, 0xB0	; 176
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
    164e:	85 e2       	ldi	r24, 0x25	; 37
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	25 e2       	ldi	r18, 0x25	; 37
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	f9 01       	movw	r30, r18
    1658:	20 81       	ld	r18, Z
    165a:	20 69       	ori	r18, 0x90	; 144
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
    1660:	85 e2       	ldi	r24, 0x25	; 37
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	25 e2       	ldi	r18, 0x25	; 37
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	f9 01       	movw	r30, r18
    166a:	20 81       	ld	r18, Z
    166c:	2f 7b       	andi	r18, 0xBF	; 191
    166e:	fc 01       	movw	r30, r24
    1670:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
    1672:	85 e2       	ldi	r24, 0x25	; 37
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	25 e2       	ldi	r18, 0x25	; 37
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	20 81       	ld	r18, Z
    167e:	2f 7d       	andi	r18, 0xDF	; 223
    1680:	fc 01       	movw	r30, r24
    1682:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
    1684:	8c e4       	ldi	r24, 0x4C	; 76
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	2c e4       	ldi	r18, 0x4C	; 76
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	f9 01       	movw	r30, r18
    168e:	20 81       	ld	r18, Z
    1690:	23 65       	ori	r18, 0x53	; 83
    1692:	fc 01       	movw	r30, r24
    1694:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM1)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
    1696:	84 e6       	ldi	r24, 0x64	; 100
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	24 e6       	ldi	r18, 0x64	; 100
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	f9 01       	movw	r30, r18
    16a0:	20 81       	ld	r18, Z
    16a2:	2d 6f       	ori	r18, 0xFD	; 253
    16a4:	fc 01       	movw	r30, r24
    16a6:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
    16a8:	89 e6       	ldi	r24, 0x69	; 105
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	29 e6       	ldi	r18, 0x69	; 105
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	f9 01       	movw	r30, r18
    16b2:	20 81       	ld	r18, Z
    16b4:	20 63       	ori	r18, 0x30	; 48
    16b6:	fc 01       	movw	r30, r24
    16b8:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
    16ba:	8d e3       	ldi	r24, 0x3D	; 61
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	24 e0       	ldi	r18, 0x04	; 4
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
	
	//Initialize Booleans
	flagGoToSleep=fFalse;
    16c4:	10 92 70 01 	sts	0x0170, r1
	flagAllStats=fFalse;
    16c8:	10 92 71 01 	sts	0x0171, r1
	flagReceivePi=fFalse;
    16cc:	10 92 72 01 	sts	0x0172, r1
}
    16d0:	26 96       	adiw	r28, 0x06	; 6
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <_Z10InitTimer2v>:

/**********************************************************************************************************************************/
void InitTimer2(){
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
    16ea:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
    16ec:	84 e6       	ldi	r24, 0x64	; 100
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	24 e6       	ldi	r18, 0x64	; 100
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	f9 01       	movw	r30, r18
    16f6:	20 81       	ld	r18, Z
    16f8:	2f 7b       	andi	r18, 0xBF	; 191
    16fa:	fc 01       	movw	r30, r24
    16fc:	20 83       	st	Z, r18
	Wait_ms(1);	
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
    1706:	81 eb       	ldi	r24, 0xB1	; 177
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	21 eb       	ldi	r18, 0xB1	; 177
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	f9 01       	movw	r30, r18
    1710:	20 81       	ld	r18, Z
    1712:	27 60       	ori	r18, 0x07	; 7
    1714:	fc 01       	movw	r30, r24
    1716:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
    1718:	86 eb       	ldi	r24, 0xB6	; 182
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	fc 01       	movw	r30, r24
    171e:	80 81       	ld	r24, Z
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	81 71       	andi	r24, 0x11	; 17
    1726:	90 70       	andi	r25, 0x00	; 0
    1728:	21 e0       	ldi	r18, 0x01	; 1
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	09 f4       	brne	.+2      	; 0x1730 <_Z10InitTimer2v+0x4e>
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	22 23       	and	r18, r18
    1732:	91 f7       	brne	.-28     	; 0x1718 <_Z10InitTimer2v+0x36>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
    1734:	87 e3       	ldi	r24, 0x37	; 55
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	fc 01       	movw	r30, r24
    173c:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
    173e:	80 e7       	ldi	r24, 0x70	; 112
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	21 e0       	ldi	r18, 0x01	; 1
    1744:	fc 01       	movw	r30, r24
    1746:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
    1748:	78 94       	sei
}
    174a:	df 91       	pop	r29
    174c:	cf 91       	pop	r28
    174e:	08 95       	ret

00001750 <_Z9GetTempTIj>:
/**********************************************************************************************************************************/

double GetTempTI(unsigned int ubrr)
{
    1750:	cf 93       	push	r28
    1752:	df 93       	push	r29
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	28 97       	sbiw	r28, 0x08	; 8
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	f8 94       	cli
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	cd bf       	out	0x3d, r28	; 61
    1764:	98 87       	std	Y+8, r25	; 0x08
    1766:	8f 83       	std	Y+7, r24	; 0x07
	WORD tempDataTI = 0;
    1768:	1a 82       	std	Y+2, r1	; 0x02
    176a:	19 82       	std	Y+1, r1	; 0x01
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
    176c:	84 e6       	ldi	r24, 0x64	; 100
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	24 e6       	ldi	r18, 0x64	; 100
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	f9 01       	movw	r30, r18
    1776:	20 81       	ld	r18, Z
    1778:	2f 7e       	andi	r18, 0xEF	; 239
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
    177e:	8a e0       	ldi	r24, 0x0A	; 10
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	UBRR1 = 0;
    1786:	8c ec       	ldi	r24, 0xCC	; 204
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	fc 01       	movw	r30, r24
    178c:	11 82       	std	Z+1, r1	; 0x01
    178e:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
    1790:	8a e2       	ldi	r24, 0x2A	; 42
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	2a e2       	ldi	r18, 0x2A	; 42
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	f9 01       	movw	r30, r18
    179a:	20 81       	ld	r18, Z
    179c:	20 63       	ori	r18, 0x30	; 48
    179e:	fc 01       	movw	r30, r24
    17a0:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
    17a2:	8b e2       	ldi	r24, 0x2B	; 43
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	2b e2       	ldi	r18, 0x2B	; 43
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	20 63       	ori	r18, 0x30	; 48
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
    17b4:	8a ec       	ldi	r24, 0xCA	; 202
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	20 ec       	ldi	r18, 0xC0	; 192
    17ba:	fc 01       	movw	r30, r24
    17bc:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
    17be:	89 ec       	ldi	r24, 0xC9	; 201
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	28 e1       	ldi	r18, 0x18	; 24
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
    17c8:	8c ec       	ldi	r24, 0xCC	; 204
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	2f 81       	ldd	r18, Y+7	; 0x07
    17ce:	fc 01       	movw	r30, r24
    17d0:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
    17d2:	8d ec       	ldi	r24, 0xCD	; 205
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	2f 81       	ldd	r18, Y+7	; 0x07
    17d8:	38 85       	ldd	r19, Y+8	; 0x08
    17da:	23 2f       	mov	r18, r19
    17dc:	33 27       	eor	r19, r19
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
    17e2:	00 00       	nop
    17e4:	88 ec       	ldi	r24, 0xC8	; 200
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	fc 01       	movw	r30, r24
    17ea:	80 81       	ld	r24, Z
    17ec:	88 2f       	mov	r24, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	80 72       	andi	r24, 0x20	; 32
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	21 e0       	ldi	r18, 0x01	; 1
    17f6:	00 97       	sbiw	r24, 0x00	; 0
    17f8:	09 f0       	breq	.+2      	; 0x17fc <_Z9GetTempTIj+0xac>
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	22 23       	and	r18, r18
    17fe:	91 f7       	brne	.-28     	; 0x17e4 <_Z9GetTempTIj+0x94>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
    1800:	8b e2       	ldi	r24, 0x2B	; 43
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2b e2       	ldi	r18, 0x2B	; 43
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	f9 01       	movw	r30, r18
    180a:	20 81       	ld	r18, Z
    180c:	2f 7d       	andi	r18, 0xDF	; 223
    180e:	fc 01       	movw	r30, r24
    1810:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
    1812:	8e ec       	ldi	r24, 0xCE	; 206
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	fc 01       	movw	r30, r24
    1818:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
    181a:	00 00       	nop
    181c:	88 ec       	ldi	r24, 0xC8	; 200
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	80 95       	com	r24
    1826:	88 1f       	adc	r24, r24
    1828:	88 27       	eor	r24, r24
    182a:	88 1f       	adc	r24, r24
    182c:	88 23       	and	r24, r24
    182e:	b1 f7       	brne	.-20     	; 0x181c <_Z9GetTempTIj+0xcc>
	tempDataTI = (UDR1 << 8);	//first byte of data
    1830:	8e ec       	ldi	r24, 0xCE	; 206
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	fc 01       	movw	r30, r24
    1836:	80 81       	ld	r24, Z
    1838:	88 2f       	mov	r24, r24
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	98 2f       	mov	r25, r24
    183e:	88 27       	eor	r24, r24
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
    1844:	8e ec       	ldi	r24, 0xCE	; 206
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
    184c:	00 00       	nop
    184e:	88 ec       	ldi	r24, 0xC8	; 200
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	80 95       	com	r24
    1858:	88 1f       	adc	r24, r24
    185a:	88 27       	eor	r24, r24
    185c:	88 1f       	adc	r24, r24
    185e:	88 23       	and	r24, r24
    1860:	b1 f7       	brne	.-20     	; 0x184e <_Z9GetTempTIj+0xfe>
	tempDataTI |= UDR1;	
    1862:	8e ec       	ldi	r24, 0xCE	; 206
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	29 81       	ldd	r18, Y+1	; 0x01
    1870:	3a 81       	ldd	r19, Y+2	; 0x02
    1872:	82 2b       	or	r24, r18
    1874:	93 2b       	or	r25, r19
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
    187a:	8b e2       	ldi	r24, 0x2B	; 43
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	2b e2       	ldi	r18, 0x2B	; 43
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	f9 01       	movw	r30, r18
    1884:	20 81       	ld	r18, Z
    1886:	20 63       	ori	r18, 0x30	; 48
    1888:	fc 01       	movw	r30, r24
    188a:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
    188c:	8a ec       	ldi	r24, 0xCA	; 202
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	10 82       	st	Z, r1
	UCSR1B = 0;
    1894:	89 ec       	ldi	r24, 0xC9	; 201
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	fc 01       	movw	r30, r24
    189a:	10 82       	st	Z, r1
	UCSR1A = 0;
    189c:	88 ec       	ldi	r24, 0xC8	; 200
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	10 82       	st	Z, r1
	UBRR1L = 0;
    18a4:	8c ec       	ldi	r24, 0xCC	; 204
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	fc 01       	movw	r30, r24
    18aa:	10 82       	st	Z, r1
	UBRR1H = 0;
    18ac:	8d ec       	ldi	r24, 0xCD	; 205
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	fc 01       	movw	r30, r24
    18b2:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
    18b4:	84 e6       	ldi	r24, 0x64	; 100
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	24 e6       	ldi	r18, 0x64	; 100
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	f9 01       	movw	r30, r18
    18be:	20 81       	ld	r18, Z
    18c0:	20 61       	ori	r18, 0x10	; 16
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	double dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ca:	96 95       	lsr	r25
    18cc:	87 95       	ror	r24
    18ce:	96 95       	lsr	r25
    18d0:	87 95       	ror	r24
    18d2:	cc 01       	movw	r24, r24
    18d4:	a0 e0       	ldi	r26, 0x00	; 0
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	bc 01       	movw	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	5d e3       	ldi	r21, 0x3D	; 61
    18f0:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	26 e6       	ldi	r18, 0x66	; 102
    18fe:	36 e6       	ldi	r19, 0x66	; 102
    1900:	46 ee       	ldi	r20, 0xE6	; 230
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e0       	ldi	r20, 0x00	; 0
    1916:	52 e4       	ldi	r21, 0x42	; 66
    1918:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__addsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8b 83       	std	Y+3, r24	; 0x03
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	ad 83       	std	Y+5, r26	; 0x05
    1926:	be 83       	std	Y+6, r27	; 0x06

	return dataTI;	
    1928:	8b 81       	ldd	r24, Y+3	; 0x03
    192a:	9c 81       	ldd	r25, Y+4	; 0x04
    192c:	ad 81       	ldd	r26, Y+5	; 0x05
    192e:	be 81       	ldd	r27, Y+6	; 0x06
		
}
    1930:	bc 01       	movw	r22, r24
    1932:	cd 01       	movw	r24, r26
    1934:	28 96       	adiw	r28, 0x08	; 8
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	f8 94       	cli
    193a:	de bf       	out	0x3e, r29	; 62
    193c:	0f be       	out	0x3f, r0	; 63
    193e:	cd bf       	out	0x3d, r28	; 61
    1940:	df 91       	pop	r29
    1942:	cf 91       	pop	r28
    1944:	08 95       	ret

00001946 <_Z12GetTempThermv>:

/**********************************************************************************************************************************/
double  GetTempTherm()
{
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	28 97       	sbiw	r28, 0x08	; 8
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
    195a:	1c 82       	std	Y+4, r1	; 0x04
    195c:	1b 82       	std	Y+3, r1	; 0x03
	double dataTherm = 0;
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	dc 01       	movw	r26, r24
    1964:	8d 83       	std	Y+5, r24	; 0x05
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	af 83       	std	Y+7, r26	; 0x07
    196a:	b8 87       	std	Y+8, r27	; 0x08
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
    196c:	84 e6       	ldi	r24, 0x64	; 100
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	24 e6       	ldi	r18, 0x64	; 100
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	f9 01       	movw	r30, r18
    1976:	20 81       	ld	r18, Z
    1978:	2e 7f       	andi	r18, 0xFE	; 254
    197a:	fc 01       	movw	r30, r24
    197c:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
    197e:	8c e7       	ldi	r24, 0x7C	; 124
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	2c e7       	ldi	r18, 0x7C	; 124
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	f9 01       	movw	r30, r18
    1988:	20 81       	ld	r18, Z
    198a:	22 64       	ori	r18, 0x42	; 66
    198c:	fc 01       	movw	r30, r24
    198e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
    1990:	8a e7       	ldi	r24, 0x7A	; 122
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	2a e7       	ldi	r18, 0x7A	; 122
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	f9 01       	movw	r30, r18
    199a:	20 81       	ld	r18, Z
    199c:	27 68       	ori	r18, 0x87	; 135
    199e:	fc 01       	movw	r30, r24
    19a0:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    19a2:	8e e7       	ldi	r24, 0x7E	; 126
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	2b ef       	ldi	r18, 0xFB	; 251
    19a8:	fc 01       	movw	r30, r24
    19aa:	20 83       	st	Z, r18
	Wait_ms(10);
    19ac:	8a e0       	ldi	r24, 0x0A	; 10
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    19b4:	1a 82       	std	Y+2, r1	; 0x02
    19b6:	19 82       	std	Y+1, r1	; 0x01
    19b8:	1c c0       	rjmp	.+56     	; 0x19f2 <_Z12GetTempThermv+0xac>
    19ba:	8a e7       	ldi	r24, 0x7A	; 122
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	2a e7       	ldi	r18, 0x7A	; 122
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	f9 01       	movw	r30, r18
    19c4:	20 81       	ld	r18, Z
    19c6:	20 64       	ori	r18, 0x40	; 64
    19c8:	fc 01       	movw	r30, r24
    19ca:	20 83       	st	Z, r18
    19cc:	8a e7       	ldi	r24, 0x7A	; 122
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	fc 01       	movw	r30, r24
    19d2:	80 81       	ld	r24, Z
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	80 74       	andi	r24, 0x40	; 64
    19da:	90 70       	andi	r25, 0x00	; 0
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	00 97       	sbiw	r24, 0x00	; 0
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <_Z12GetTempThermv+0x9e>
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	22 23       	and	r18, r18
    19e6:	91 f7       	brne	.-28     	; 0x19cc <_Z12GetTempThermv+0x86>
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	01 96       	adiw	r24, 0x01	; 1
    19ee:	9a 83       	std	Y+2, r25	; 0x02
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	21 e0       	ldi	r18, 0x01	; 1
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	9a 81       	ldd	r25, Y+2	; 0x02
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	0c f0       	brlt	.+2      	; 0x1a00 <_Z12GetTempThermv+0xba>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	22 23       	and	r18, r18
    1a02:	d9 f6       	brne	.-74     	; 0x19ba <_Z12GetTempThermv+0x74>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
    1a04:	88 e7       	ldi	r24, 0x78	; 120
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	fc 01       	movw	r30, r24
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 83       	std	Y+4, r25	; 0x04
    1a12:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
    1a14:	89 e7       	ldi	r24, 0x79	; 121
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	fc 01       	movw	r30, r24
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	98 2f       	mov	r25, r24
    1a22:	88 27       	eor	r24, r24
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	82 2b       	or	r24, r18
    1a2a:	93 2b       	or	r25, r19
    1a2c:	9c 83       	std	Y+4, r25	; 0x04
    1a2e:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    1a30:	8a e7       	ldi	r24, 0x7A	; 122
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	10 82       	st	Z, r1
	ADMUX = 0;
    1a38:	8c e7       	ldi	r24, 0x7C	; 124
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
    1a40:	8e e7       	ldi	r24, 0x7E	; 126
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	2e e7       	ldi	r18, 0x7E	; 126
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	f9 01       	movw	r30, r18
    1a4a:	20 81       	ld	r18, Z
    1a4c:	24 60       	ori	r18, 0x04	; 4
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    1a52:	84 e6       	ldi	r24, 0x64	; 100
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	24 e6       	ldi	r18, 0x64	; 100
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	20 81       	ld	r18, Z
    1a5e:	21 60       	ori	r18, 0x01	; 1
    1a60:	fc 01       	movw	r30, r24
    1a62:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
    1a64:	22 ef       	ldi	r18, 0xF2	; 242
    1a66:	32 e0       	ldi	r19, 0x02	; 2
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6c:	a9 01       	movw	r20, r18
    1a6e:	48 1b       	sub	r20, r24
    1a70:	59 0b       	sbc	r21, r25
    1a72:	ca 01       	movw	r24, r20
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	cc 01       	movw	r24, r24
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	28 e4       	ldi	r18, 0x48	; 72
    1a94:	31 ee       	ldi	r19, 0xE1	; 225
    1a96:	4c e1       	ldi	r20, 0x1C	; 28
    1a98:	51 e4       	ldi	r21, 0x41	; 65
    1a9a:	0e 94 03 10 	call	0x2006	; 0x2006 <__divsf3>
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	cb 01       	movw	r24, r22
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	af 83       	std	Y+7, r26	; 0x07
    1aa8:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
    1aaa:	6d 81       	ldd	r22, Y+5	; 0x05
    1aac:	7e 81       	ldd	r23, Y+6	; 0x06
    1aae:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab0:	98 85       	ldd	r25, Y+8	; 0x08
    1ab2:	26 e6       	ldi	r18, 0x66	; 102
    1ab4:	36 e6       	ldi	r19, 0x66	; 102
    1ab6:	46 ee       	ldi	r20, 0xE6	; 230
    1ab8:	5f e3       	ldi	r21, 0x3F	; 63
    1aba:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	52 e4       	ldi	r21, 0x42	; 66
    1ace:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__addsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	af 83       	std	Y+7, r26	; 0x07
    1adc:	b8 87       	std	Y+8, r27	; 0x08
	
	return dataTherm;
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	af 81       	ldd	r26, Y+7	; 0x07
    1ae4:	b8 85       	ldd	r27, Y+8	; 0x08

		
}
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	28 96       	adiw	r28, 0x08	; 8
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	08 95       	ret

00001afc <_Z11GetHumidityv>:

/**********************************************************************************************************************************/	
double GetHumidity()
{
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	28 97       	sbiw	r28, 0x08	; 8
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
    1b10:	84 e6       	ldi	r24, 0x64	; 100
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	24 e6       	ldi	r18, 0x64	; 100
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	f9 01       	movw	r30, r18
    1b1a:	20 81       	ld	r18, Z
    1b1c:	2e 7f       	andi	r18, 0xFE	; 254
    1b1e:	fc 01       	movw	r30, r24
    1b20:	20 83       	st	Z, r18
	Wait_ms(10);						
    1b22:	8a e0       	ldi	r24, 0x0A	; 10
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
    1b2a:	8c e7       	ldi	r24, 0x7C	; 124
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	2c e7       	ldi	r18, 0x7C	; 124
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	f9 01       	movw	r30, r18
    1b34:	20 81       	ld	r18, Z
    1b36:	21 64       	ori	r18, 0x41	; 65
    1b38:	fc 01       	movw	r30, r24
    1b3a:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
    1b3c:	8a e7       	ldi	r24, 0x7A	; 122
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	2a e7       	ldi	r18, 0x7A	; 122
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	f9 01       	movw	r30, r18
    1b46:	20 81       	ld	r18, Z
    1b48:	27 68       	ori	r18, 0x87	; 135
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    1b4e:	8e e7       	ldi	r24, 0x7E	; 126
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	2d ef       	ldi	r18, 0xFD	; 253
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 83       	st	Z, r18
	Wait_ms(10);
    1b58:	8a e0       	ldi	r24, 0x0A	; 10
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    1b60:	1a 82       	std	Y+2, r1	; 0x02
    1b62:	19 82       	std	Y+1, r1	; 0x01
    1b64:	1c c0       	rjmp	.+56     	; 0x1b9e <_Z11GetHumidityv+0xa2>
    1b66:	8a e7       	ldi	r24, 0x7A	; 122
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	2a e7       	ldi	r18, 0x7A	; 122
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	f9 01       	movw	r30, r18
    1b70:	20 81       	ld	r18, Z
    1b72:	20 64       	ori	r18, 0x40	; 64
    1b74:	fc 01       	movw	r30, r24
    1b76:	20 83       	st	Z, r18
    1b78:	8a e7       	ldi	r24, 0x7A	; 122
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	80 74       	andi	r24, 0x40	; 64
    1b86:	90 70       	andi	r25, 0x00	; 0
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	09 f4       	brne	.+2      	; 0x1b90 <_Z11GetHumidityv+0x94>
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	22 23       	and	r18, r18
    1b92:	91 f7       	brne	.-28     	; 0x1b78 <_Z11GetHumidityv+0x7c>
    1b94:	89 81       	ldd	r24, Y+1	; 0x01
    1b96:	9a 81       	ldd	r25, Y+2	; 0x02
    1b98:	01 96       	adiw	r24, 0x01	; 1
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	21 e0       	ldi	r18, 0x01	; 1
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <_Z11GetHumidityv+0xb0>
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	22 23       	and	r18, r18
    1bae:	d9 f6       	brne	.-74     	; 0x1b66 <_Z11GetHumidityv+0x6a>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
    1bb0:	88 e7       	ldi	r24, 0x78	; 120
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	80 81       	ld	r24, Z
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
    1bc0:	89 e7       	ldi	r24, 0x79	; 121
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	98 2f       	mov	r25, r24
    1bce:	88 27       	eor	r24, r24
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd4:	82 2b       	or	r24, r18
    1bd6:	93 2b       	or	r25, r19
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    1bdc:	8a e7       	ldi	r24, 0x7A	; 122
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	fc 01       	movw	r30, r24
    1be2:	10 82       	st	Z, r1
	ADMUX = 0;
    1be4:	8c e7       	ldi	r24, 0x7C	; 124
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	fc 01       	movw	r30, r24
    1bea:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
    1bec:	8e e7       	ldi	r24, 0x7E	; 126
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	2e e7       	ldi	r18, 0x7E	; 126
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	f9 01       	movw	r30, r18
    1bf6:	20 81       	ld	r18, Z
    1bf8:	22 60       	ori	r18, 0x02	; 2
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    1bfe:	84 e6       	ldi	r24, 0x64	; 100
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	24 e6       	ldi	r18, 0x64	; 100
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	21 60       	ori	r18, 0x01	; 1
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18

	//Get actual humidity
	double humidityResultDouble = (double)humidityResult;
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	9c 81       	ldd	r25, Y+4	; 0x04
    1c14:	cc 01       	movw	r24, r24
    1c16:	a0 e0       	ldi	r26, 0x00	; 0
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	bc 01       	movw	r22, r24
    1c1c:	cd 01       	movw	r24, r26
    1c1e:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	af 83       	std	Y+7, r26	; 0x07
    1c2c:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
    1c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c30:	7e 81       	ldd	r23, Y+6	; 0x06
    1c32:	8f 81       	ldd	r24, Y+7	; 0x07
    1c34:	98 85       	ldd	r25, Y+8	; 0x08
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4b e1       	ldi	r20, 0x1B	; 27
    1c3c:	53 e4       	ldi	r21, 0x43	; 67
    1c3e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8d 83       	std	Y+5, r24	; 0x05
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	af 83       	std	Y+7, r26	; 0x07
    1c4c:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble /= HUMIDITY_CONVERTER;	//get actual humidity	
    1c4e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c50:	7e 81       	ldd	r23, Y+6	; 0x06
    1c52:	8f 81       	ldd	r24, Y+7	; 0x07
    1c54:	98 85       	ldd	r25, Y+8	; 0x08
    1c56:	23 e7       	ldi	r18, 0x73	; 115
    1c58:	38 e6       	ldi	r19, 0x68	; 104
    1c5a:	4d e9       	ldi	r20, 0x9D	; 157
    1c5c:	50 e4       	ldi	r21, 0x40	; 64
    1c5e:	0e 94 03 10 	call	0x2006	; 0x2006 <__divsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8d 83       	std	Y+5, r24	; 0x05
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	af 83       	std	Y+7, r26	; 0x07
    1c6c:	b8 87       	std	Y+8, r27	; 0x08
	
	return humidityResultDouble;
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	af 81       	ldd	r26, Y+7	; 0x07
    1c74:	b8 85       	ldd	r27, Y+8	; 0x08
}
    1c76:	bc 01       	movw	r22, r24
    1c78:	cd 01       	movw	r24, r26
    1c7a:	28 96       	adiw	r28, 0x08	; 8
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	df 91       	pop	r29
    1c88:	cf 91       	pop	r28
    1c8a:	08 95       	ret

00001c8c <_Z10GetTempADTv>:
/**********************************************************************************************************************************/	

double GetTempADT()
{
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <_Z10GetTempADTv+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <_Z10GetTempADTv+0x8>
    1c94:	00 d0       	rcall	.+0      	; 0x1c96 <_Z10GetTempADTv+0xa>
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	WORD rawDataAD = 0;
    1c9a:	1a 82       	std	Y+2, r1	; 0x02
    1c9c:	19 82       	std	Y+1, r1	; 0x01
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
    1c9e:	84 e6       	ldi	r24, 0x64	; 100
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	24 e6       	ldi	r18, 0x64	; 100
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	f9 01       	movw	r30, r18
    1ca8:	20 81       	ld	r18, Z
    1caa:	2b 7f       	andi	r18, 0xFB	; 251
    1cac:	fc 01       	movw	r30, r24
    1cae:	20 83       	st	Z, r18
	Wait_ms(10);
    1cb0:	8a e0       	ldi	r24, 0x0A	; 10
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
    1cb8:	85 e2       	ldi	r24, 0x25	; 37
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	25 e2       	ldi	r18, 0x25	; 37
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	f9 01       	movw	r30, r18
    1cc2:	20 81       	ld	r18, Z
    1cc4:	2f 7e       	andi	r18, 0xEF	; 239
    1cc6:	fc 01       	movw	r30, r24
    1cc8:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
    1cca:	8e e4       	ldi	r24, 0x4E	; 78
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	fc 01       	movw	r30, r24
    1cd0:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
    1cd2:	00 00       	nop
    1cd4:	8d e4       	ldi	r24, 0x4D	; 77
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	fc 01       	movw	r30, r24
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 95       	com	r24
    1cde:	88 1f       	adc	r24, r24
    1ce0:	88 27       	eor	r24, r24
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	88 23       	and	r24, r24
    1ce6:	b1 f7       	brne	.-20     	; 0x1cd4 <_Z10GetTempADTv+0x48>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
    1ce8:	8e e4       	ldi	r24, 0x4E	; 78
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	fc 01       	movw	r30, r24
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	98 2f       	mov	r25, r24
    1cf6:	88 27       	eor	r24, r24
    1cf8:	9a 83       	std	Y+2, r25	; 0x02
    1cfa:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
    1cfc:	8e e4       	ldi	r24, 0x4E	; 78
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	fc 01       	movw	r30, r24
    1d02:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
    1d04:	00 00       	nop
    1d06:	8d e4       	ldi	r24, 0x4D	; 77
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	80 95       	com	r24
    1d10:	88 1f       	adc	r24, r24
    1d12:	88 27       	eor	r24, r24
    1d14:	88 1f       	adc	r24, r24
    1d16:	88 23       	and	r24, r24
    1d18:	b1 f7       	brne	.-20     	; 0x1d06 <_Z10GetTempADTv+0x7a>
	rawDataAD |= SPDR0;					//get second byte, store in low order
    1d1a:	8e e4       	ldi	r24, 0x4E	; 78
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	fc 01       	movw	r30, r24
    1d20:	80 81       	ld	r24, Z
    1d22:	88 2f       	mov	r24, r24
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	29 81       	ldd	r18, Y+1	; 0x01
    1d28:	3a 81       	ldd	r19, Y+2	; 0x02
    1d2a:	82 2b       	or	r24, r18
    1d2c:	93 2b       	or	r25, r19
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
    1d32:	84 e6       	ldi	r24, 0x64	; 100
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	24 e6       	ldi	r18, 0x64	; 100
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	f9 01       	movw	r30, r18
    1d3c:	20 81       	ld	r18, Z
    1d3e:	24 60       	ori	r18, 0x04	; 4
    1d40:	fc 01       	movw	r30, r24
    1d42:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
    1d44:	85 e2       	ldi	r24, 0x25	; 37
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	25 e2       	ldi	r18, 0x25	; 37
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	f9 01       	movw	r30, r18
    1d4e:	20 81       	ld	r18, Z
    1d50:	20 69       	ori	r18, 0x90	; 144
    1d52:	fc 01       	movw	r30, r24
    1d54:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
    1d56:	8a e0       	ldi	r24, 0x0A	; 10
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <_Z7Wait_msj>
	
	//Convert number into Celsius, then Fahrenheit
	double dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	cc 01       	movw	r24, r24
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 97 10 	call	0x212e	; 0x212e <__floatunsisf>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e0       	ldi	r20, 0x00	; 0
    1d7e:	5d e3       	ldi	r21, 0x3D	; 61
    1d80:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	26 e6       	ldi	r18, 0x66	; 102
    1d8e:	36 e6       	ldi	r19, 0x66	; 102
    1d90:	46 ee       	ldi	r20, 0xE6	; 230
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 4d 11 	call	0x229a	; 0x229a <__mulsf3>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	52 e4       	ldi	r21, 0x42	; 66
    1da8:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <__addsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8b 83       	std	Y+3, r24	; 0x03
    1db2:	9c 83       	std	Y+4, r25	; 0x04
    1db4:	ad 83       	std	Y+5, r26	; 0x05
    1db6:	be 83       	std	Y+6, r27	; 0x06
	
	return dataAD;
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	ad 81       	ldd	r26, Y+5	; 0x05
    1dbe:	be 81       	ldd	r27, Y+6	; 0x06
}
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	26 96       	adiw	r28, 0x06	; 6
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	08 95       	ret

00001dd6 <_Z10ResetDebugv>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <_Z10ResetDebugv+0x6>
    1ddc:	cd b7       	in	r28, 0x3d	; 61
    1dde:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
    1de0:	88 e2       	ldi	r24, 0x28	; 40
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	fc 01       	movw	r30, r24
    1de6:	90 81       	ld	r25, Z
    1de8:	80 ef       	ldi	r24, 0xF0	; 240
    1dea:	89 27       	eor	r24, r25
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	9a 83       	std	Y+2, r25	; 0x02
    1df2:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
    1df4:	88 e2       	ldi	r24, 0x28	; 40
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	28 e2       	ldi	r18, 0x28	; 40
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	f9 01       	movw	r30, r18
    1dfe:	30 81       	ld	r19, Z
    1e00:	29 81       	ldd	r18, Y+1	; 0x01
    1e02:	23 23       	and	r18, r19
    1e04:	fc 01       	movw	r30, r24
    1e06:	20 83       	st	Z, r18
}
    1e08:	0f 90       	pop	r0
    1e0a:	0f 90       	pop	r0
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	08 95       	ret

00001e12 <_Z8Wait_secj>:
/**********************************************************************************************************************************/
void Wait_sec(WORD delay){
    1e12:	cf 93       	push	r28
    1e14:	df 93       	push	r29
    1e16:	00 d0       	rcall	.+0      	; 0x1e18 <_Z8Wait_secj+0x6>
    1e18:	00 d0       	rcall	.+0      	; 0x1e1a <_Z8Wait_secj+0x8>
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
	WORD exitTime=((theClock.getSecond()+delay)%60);
    1e22:	83 e7       	ldi	r24, 0x73	; 115
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_ZN5clock9getSecondEv>
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	82 0f       	add	r24, r18
    1e34:	93 1f       	adc	r25, r19
    1e36:	2c e3       	ldi	r18, 0x3C	; 60
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	b9 01       	movw	r22, r18
    1e3c:	0e 94 b0 11 	call	0x2360	; 0x2360 <__udivmodhi4>
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
	while (theClock.getSecond() != exitTime);
    1e44:	00 00       	nop
    1e46:	83 e7       	ldi	r24, 0x73	; 115
    1e48:	91 e0       	ldi	r25, 0x01	; 1
    1e4a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <_ZN5clock9getSecondEv>
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	9a 81       	ldd	r25, Y+2	; 0x02
    1e58:	28 17       	cp	r18, r24
    1e5a:	39 07       	cpc	r19, r25
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <_Z8Wait_secj+0x4e>
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	44 23       	and	r20, r20
    1e62:	89 f7       	brne	.-30     	; 0x1e46 <_Z8Wait_secj+0x34>
}
    1e64:	0f 90       	pop	r0
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <_Z7Wait_msj>:
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
    1e72:	cf 93       	push	r28
    1e74:	df 93       	push	r29
    1e76:	00 d0       	rcall	.+0      	; 0x1e78 <_Z7Wait_msj+0x6>
    1e78:	00 d0       	rcall	.+0      	; 0x1e7a <_Z7Wait_msj+0x8>
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9c 83       	std	Y+4, r25	; 0x04
    1e80:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
    1e82:	18 c0       	rjmp	.+48     	; 0x1eb4 <_Z7Wait_msj+0x42>
		for( i = 0; i < 400; i++){
    1e84:	1a 82       	std	Y+2, r1	; 0x02
    1e86:	19 82       	std	Y+1, r1	; 0x01
    1e88:	06 c0       	rjmp	.+12     	; 0x1e96 <_Z7Wait_msj+0x24>
			asm volatile("nop");
    1e8a:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
    1e8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	21 e0       	ldi	r18, 0x01	; 1
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	31 e0       	ldi	r19, 0x01	; 1
    1e9e:	80 39       	cpi	r24, 0x90	; 144
    1ea0:	93 07       	cpc	r25, r19
    1ea2:	08 f0       	brcs	.+2      	; 0x1ea6 <_Z7Wait_msj+0x34>
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	22 23       	and	r18, r18
    1ea8:	81 f7       	brne	.-32     	; 0x1e8a <_Z7Wait_msj+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
    1eb4:	21 e0       	ldi	r18, 0x01	; 1
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <_Z7Wait_msj+0x4e>
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	22 23       	and	r18, r18
    1ec2:	01 f7       	brne	.-64     	; 0x1e84 <_Z7Wait_msj+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <_Z41__static_initialization_and_destruction_0ii>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	00 d0       	rcall	.+0      	; 0x1ed8 <_Z41__static_initialization_and_destruction_0ii+0x6>
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <_Z41__static_initialization_and_destruction_0ii+0x8>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	9a 83       	std	Y+2, r25	; 0x02
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	7c 83       	std	Y+4, r23	; 0x04
    1ee4:	6b 83       	std	Y+3, r22	; 0x03
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	91 05       	cpc	r25, r1
    1eee:	71 f4       	brne	.+28     	; 0x1f0c <_Z41__static_initialization_and_destruction_0ii+0x3a>
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	2f ef       	ldi	r18, 0xFF	; 255
    1ef6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ef8:	92 07       	cpc	r25, r18
    1efa:	41 f4       	brne	.+16     	; 0x1f0c <_Z41__static_initialization_and_destruction_0ii+0x3a>
/* ------------------------------------------------------------ */

WORD sleepCnt=0;									//originally used to map how long the device sleeps, can now be used for downtime?
BOOL flagGoToSleep, flagAllStats,flagReceivePi;

clock theClock;
    1efc:	83 e7       	ldi	r24, 0x73	; 115
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <_ZN5clockC1Ev>
thermostat theThermostat;
    1f04:	8a e7       	ldi	r24, 0x7A	; 122
    1f06:	91 e0       	ldi	r25, 0x01	; 1
    1f08:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN10thermostatC1Ev>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	df 91       	pop	r29
    1f16:	cf 91       	pop	r28
    1f18:	08 95       	ret

00001f1a <_GLOBAL__sub_I__Z10PutUart0Chc>:
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	6f ef       	ldi	r22, 0xFF	; 255
    1f28:	7f ef       	ldi	r23, 0xFF	; 255
    1f2a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_Z41__static_initialization_and_destruction_0ii>
    1f2e:	df 91       	pop	r29
    1f30:	cf 91       	pop	r28
    1f32:	08 95       	ret

00001f34 <__subsf3>:
    1f34:	50 58       	subi	r21, 0x80	; 128

00001f36 <__addsf3>:
    1f36:	bb 27       	eor	r27, r27
    1f38:	aa 27       	eor	r26, r26
    1f3a:	0e d0       	rcall	.+28     	; 0x1f58 <__addsf3x>
    1f3c:	70 c1       	rjmp	.+736    	; 0x221e <__fp_round>
    1f3e:	61 d1       	rcall	.+706    	; 0x2202 <__fp_pscA>
    1f40:	30 f0       	brcs	.+12     	; 0x1f4e <__addsf3+0x18>
    1f42:	66 d1       	rcall	.+716    	; 0x2210 <__fp_pscB>
    1f44:	20 f0       	brcs	.+8      	; 0x1f4e <__addsf3+0x18>
    1f46:	31 f4       	brne	.+12     	; 0x1f54 <__addsf3+0x1e>
    1f48:	9f 3f       	cpi	r25, 0xFF	; 255
    1f4a:	11 f4       	brne	.+4      	; 0x1f50 <__addsf3+0x1a>
    1f4c:	1e f4       	brtc	.+6      	; 0x1f54 <__addsf3+0x1e>
    1f4e:	56 c1       	rjmp	.+684    	; 0x21fc <__fp_nan>
    1f50:	0e f4       	brtc	.+2      	; 0x1f54 <__addsf3+0x1e>
    1f52:	e0 95       	com	r30
    1f54:	e7 fb       	bst	r30, 7
    1f56:	4c c1       	rjmp	.+664    	; 0x21f0 <__fp_inf>

00001f58 <__addsf3x>:
    1f58:	e9 2f       	mov	r30, r25
    1f5a:	72 d1       	rcall	.+740    	; 0x2240 <__fp_split3>
    1f5c:	80 f3       	brcs	.-32     	; 0x1f3e <__addsf3+0x8>
    1f5e:	ba 17       	cp	r27, r26
    1f60:	62 07       	cpc	r22, r18
    1f62:	73 07       	cpc	r23, r19
    1f64:	84 07       	cpc	r24, r20
    1f66:	95 07       	cpc	r25, r21
    1f68:	18 f0       	brcs	.+6      	; 0x1f70 <__addsf3x+0x18>
    1f6a:	71 f4       	brne	.+28     	; 0x1f88 <__addsf3x+0x30>
    1f6c:	9e f5       	brtc	.+102    	; 0x1fd4 <__addsf3x+0x7c>
    1f6e:	8a c1       	rjmp	.+788    	; 0x2284 <__fp_zero>
    1f70:	0e f4       	brtc	.+2      	; 0x1f74 <__addsf3x+0x1c>
    1f72:	e0 95       	com	r30
    1f74:	0b 2e       	mov	r0, r27
    1f76:	ba 2f       	mov	r27, r26
    1f78:	a0 2d       	mov	r26, r0
    1f7a:	0b 01       	movw	r0, r22
    1f7c:	b9 01       	movw	r22, r18
    1f7e:	90 01       	movw	r18, r0
    1f80:	0c 01       	movw	r0, r24
    1f82:	ca 01       	movw	r24, r20
    1f84:	a0 01       	movw	r20, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	ff 27       	eor	r31, r31
    1f8a:	59 1b       	sub	r21, r25
    1f8c:	99 f0       	breq	.+38     	; 0x1fb4 <__addsf3x+0x5c>
    1f8e:	59 3f       	cpi	r21, 0xF9	; 249
    1f90:	50 f4       	brcc	.+20     	; 0x1fa6 <__addsf3x+0x4e>
    1f92:	50 3e       	cpi	r21, 0xE0	; 224
    1f94:	68 f1       	brcs	.+90     	; 0x1ff0 <__addsf3x+0x98>
    1f96:	1a 16       	cp	r1, r26
    1f98:	f0 40       	sbci	r31, 0x00	; 0
    1f9a:	a2 2f       	mov	r26, r18
    1f9c:	23 2f       	mov	r18, r19
    1f9e:	34 2f       	mov	r19, r20
    1fa0:	44 27       	eor	r20, r20
    1fa2:	58 5f       	subi	r21, 0xF8	; 248
    1fa4:	f3 cf       	rjmp	.-26     	; 0x1f8c <__addsf3x+0x34>
    1fa6:	46 95       	lsr	r20
    1fa8:	37 95       	ror	r19
    1faa:	27 95       	ror	r18
    1fac:	a7 95       	ror	r26
    1fae:	f0 40       	sbci	r31, 0x00	; 0
    1fb0:	53 95       	inc	r21
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__addsf3x+0x4e>
    1fb4:	7e f4       	brtc	.+30     	; 0x1fd4 <__addsf3x+0x7c>
    1fb6:	1f 16       	cp	r1, r31
    1fb8:	ba 0b       	sbc	r27, r26
    1fba:	62 0b       	sbc	r22, r18
    1fbc:	73 0b       	sbc	r23, r19
    1fbe:	84 0b       	sbc	r24, r20
    1fc0:	ba f0       	brmi	.+46     	; 0x1ff0 <__addsf3x+0x98>
    1fc2:	91 50       	subi	r25, 0x01	; 1
    1fc4:	a1 f0       	breq	.+40     	; 0x1fee <__addsf3x+0x96>
    1fc6:	ff 0f       	add	r31, r31
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	66 1f       	adc	r22, r22
    1fcc:	77 1f       	adc	r23, r23
    1fce:	88 1f       	adc	r24, r24
    1fd0:	c2 f7       	brpl	.-16     	; 0x1fc2 <__addsf3x+0x6a>
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <__addsf3x+0x98>
    1fd4:	ba 0f       	add	r27, r26
    1fd6:	62 1f       	adc	r22, r18
    1fd8:	73 1f       	adc	r23, r19
    1fda:	84 1f       	adc	r24, r20
    1fdc:	48 f4       	brcc	.+18     	; 0x1ff0 <__addsf3x+0x98>
    1fde:	87 95       	ror	r24
    1fe0:	77 95       	ror	r23
    1fe2:	67 95       	ror	r22
    1fe4:	b7 95       	ror	r27
    1fe6:	f7 95       	ror	r31
    1fe8:	9e 3f       	cpi	r25, 0xFE	; 254
    1fea:	08 f0       	brcs	.+2      	; 0x1fee <__addsf3x+0x96>
    1fec:	b3 cf       	rjmp	.-154    	; 0x1f54 <__addsf3+0x1e>
    1fee:	93 95       	inc	r25
    1ff0:	88 0f       	add	r24, r24
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <__addsf3x+0x9e>
    1ff4:	99 27       	eor	r25, r25
    1ff6:	ee 0f       	add	r30, r30
    1ff8:	97 95       	ror	r25
    1ffa:	87 95       	ror	r24
    1ffc:	08 95       	ret

00001ffe <__cmpsf2>:
    1ffe:	d4 d0       	rcall	.+424    	; 0x21a8 <__fp_cmp>
    2000:	08 f4       	brcc	.+2      	; 0x2004 <__cmpsf2+0x6>
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	08 95       	ret

00002006 <__divsf3>:
    2006:	0c d0       	rcall	.+24     	; 0x2020 <__divsf3x>
    2008:	0a c1       	rjmp	.+532    	; 0x221e <__fp_round>
    200a:	02 d1       	rcall	.+516    	; 0x2210 <__fp_pscB>
    200c:	40 f0       	brcs	.+16     	; 0x201e <__divsf3+0x18>
    200e:	f9 d0       	rcall	.+498    	; 0x2202 <__fp_pscA>
    2010:	30 f0       	brcs	.+12     	; 0x201e <__divsf3+0x18>
    2012:	21 f4       	brne	.+8      	; 0x201c <__divsf3+0x16>
    2014:	5f 3f       	cpi	r21, 0xFF	; 255
    2016:	19 f0       	breq	.+6      	; 0x201e <__divsf3+0x18>
    2018:	eb c0       	rjmp	.+470    	; 0x21f0 <__fp_inf>
    201a:	51 11       	cpse	r21, r1
    201c:	34 c1       	rjmp	.+616    	; 0x2286 <__fp_szero>
    201e:	ee c0       	rjmp	.+476    	; 0x21fc <__fp_nan>

00002020 <__divsf3x>:
    2020:	0f d1       	rcall	.+542    	; 0x2240 <__fp_split3>
    2022:	98 f3       	brcs	.-26     	; 0x200a <__divsf3+0x4>

00002024 <__divsf3_pse>:
    2024:	99 23       	and	r25, r25
    2026:	c9 f3       	breq	.-14     	; 0x201a <__divsf3+0x14>
    2028:	55 23       	and	r21, r21
    202a:	b1 f3       	breq	.-20     	; 0x2018 <__divsf3+0x12>
    202c:	95 1b       	sub	r25, r21
    202e:	55 0b       	sbc	r21, r21
    2030:	bb 27       	eor	r27, r27
    2032:	aa 27       	eor	r26, r26
    2034:	62 17       	cp	r22, r18
    2036:	73 07       	cpc	r23, r19
    2038:	84 07       	cpc	r24, r20
    203a:	38 f0       	brcs	.+14     	; 0x204a <__divsf3_pse+0x26>
    203c:	9f 5f       	subi	r25, 0xFF	; 255
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	44 1f       	adc	r20, r20
    2046:	aa 1f       	adc	r26, r26
    2048:	a9 f3       	breq	.-22     	; 0x2034 <__divsf3_pse+0x10>
    204a:	33 d0       	rcall	.+102    	; 0x20b2 <__divsf3_pse+0x8e>
    204c:	0e 2e       	mov	r0, r30
    204e:	3a f0       	brmi	.+14     	; 0x205e <__divsf3_pse+0x3a>
    2050:	e0 e8       	ldi	r30, 0x80	; 128
    2052:	30 d0       	rcall	.+96     	; 0x20b4 <__divsf3_pse+0x90>
    2054:	91 50       	subi	r25, 0x01	; 1
    2056:	50 40       	sbci	r21, 0x00	; 0
    2058:	e6 95       	lsr	r30
    205a:	00 1c       	adc	r0, r0
    205c:	ca f7       	brpl	.-14     	; 0x2050 <__divsf3_pse+0x2c>
    205e:	29 d0       	rcall	.+82     	; 0x20b2 <__divsf3_pse+0x8e>
    2060:	fe 2f       	mov	r31, r30
    2062:	27 d0       	rcall	.+78     	; 0x20b2 <__divsf3_pse+0x8e>
    2064:	66 0f       	add	r22, r22
    2066:	77 1f       	adc	r23, r23
    2068:	88 1f       	adc	r24, r24
    206a:	bb 1f       	adc	r27, r27
    206c:	26 17       	cp	r18, r22
    206e:	37 07       	cpc	r19, r23
    2070:	48 07       	cpc	r20, r24
    2072:	ab 07       	cpc	r26, r27
    2074:	b0 e8       	ldi	r27, 0x80	; 128
    2076:	09 f0       	breq	.+2      	; 0x207a <__divsf3_pse+0x56>
    2078:	bb 0b       	sbc	r27, r27
    207a:	80 2d       	mov	r24, r0
    207c:	bf 01       	movw	r22, r30
    207e:	ff 27       	eor	r31, r31
    2080:	93 58       	subi	r25, 0x83	; 131
    2082:	5f 4f       	sbci	r21, 0xFF	; 255
    2084:	2a f0       	brmi	.+10     	; 0x2090 <__divsf3_pse+0x6c>
    2086:	9e 3f       	cpi	r25, 0xFE	; 254
    2088:	51 05       	cpc	r21, r1
    208a:	68 f0       	brcs	.+26     	; 0x20a6 <__divsf3_pse+0x82>
    208c:	b1 c0       	rjmp	.+354    	; 0x21f0 <__fp_inf>
    208e:	fb c0       	rjmp	.+502    	; 0x2286 <__fp_szero>
    2090:	5f 3f       	cpi	r21, 0xFF	; 255
    2092:	ec f3       	brlt	.-6      	; 0x208e <__divsf3_pse+0x6a>
    2094:	98 3e       	cpi	r25, 0xE8	; 232
    2096:	dc f3       	brlt	.-10     	; 0x208e <__divsf3_pse+0x6a>
    2098:	86 95       	lsr	r24
    209a:	77 95       	ror	r23
    209c:	67 95       	ror	r22
    209e:	b7 95       	ror	r27
    20a0:	f7 95       	ror	r31
    20a2:	9f 5f       	subi	r25, 0xFF	; 255
    20a4:	c9 f7       	brne	.-14     	; 0x2098 <__divsf3_pse+0x74>
    20a6:	88 0f       	add	r24, r24
    20a8:	91 1d       	adc	r25, r1
    20aa:	96 95       	lsr	r25
    20ac:	87 95       	ror	r24
    20ae:	97 f9       	bld	r25, 7
    20b0:	08 95       	ret
    20b2:	e1 e0       	ldi	r30, 0x01	; 1
    20b4:	66 0f       	add	r22, r22
    20b6:	77 1f       	adc	r23, r23
    20b8:	88 1f       	adc	r24, r24
    20ba:	bb 1f       	adc	r27, r27
    20bc:	62 17       	cp	r22, r18
    20be:	73 07       	cpc	r23, r19
    20c0:	84 07       	cpc	r24, r20
    20c2:	ba 07       	cpc	r27, r26
    20c4:	20 f0       	brcs	.+8      	; 0x20ce <__divsf3_pse+0xaa>
    20c6:	62 1b       	sub	r22, r18
    20c8:	73 0b       	sbc	r23, r19
    20ca:	84 0b       	sbc	r24, r20
    20cc:	ba 0b       	sbc	r27, r26
    20ce:	ee 1f       	adc	r30, r30
    20d0:	88 f7       	brcc	.-30     	; 0x20b4 <__divsf3_pse+0x90>
    20d2:	e0 95       	com	r30
    20d4:	08 95       	ret

000020d6 <__fixunssfsi>:
    20d6:	bc d0       	rcall	.+376    	; 0x2250 <__fp_splitA>
    20d8:	88 f0       	brcs	.+34     	; 0x20fc <__fixunssfsi+0x26>
    20da:	9f 57       	subi	r25, 0x7F	; 127
    20dc:	90 f0       	brcs	.+36     	; 0x2102 <__fixunssfsi+0x2c>
    20de:	b9 2f       	mov	r27, r25
    20e0:	99 27       	eor	r25, r25
    20e2:	b7 51       	subi	r27, 0x17	; 23
    20e4:	a0 f0       	brcs	.+40     	; 0x210e <__fixunssfsi+0x38>
    20e6:	d1 f0       	breq	.+52     	; 0x211c <__fixunssfsi+0x46>
    20e8:	66 0f       	add	r22, r22
    20ea:	77 1f       	adc	r23, r23
    20ec:	88 1f       	adc	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	1a f0       	brmi	.+6      	; 0x20f8 <__fixunssfsi+0x22>
    20f2:	ba 95       	dec	r27
    20f4:	c9 f7       	brne	.-14     	; 0x20e8 <__fixunssfsi+0x12>
    20f6:	12 c0       	rjmp	.+36     	; 0x211c <__fixunssfsi+0x46>
    20f8:	b1 30       	cpi	r27, 0x01	; 1
    20fa:	81 f0       	breq	.+32     	; 0x211c <__fixunssfsi+0x46>
    20fc:	c3 d0       	rcall	.+390    	; 0x2284 <__fp_zero>
    20fe:	b1 e0       	ldi	r27, 0x01	; 1
    2100:	08 95       	ret
    2102:	c0 c0       	rjmp	.+384    	; 0x2284 <__fp_zero>
    2104:	67 2f       	mov	r22, r23
    2106:	78 2f       	mov	r23, r24
    2108:	88 27       	eor	r24, r24
    210a:	b8 5f       	subi	r27, 0xF8	; 248
    210c:	39 f0       	breq	.+14     	; 0x211c <__fixunssfsi+0x46>
    210e:	b9 3f       	cpi	r27, 0xF9	; 249
    2110:	cc f3       	brlt	.-14     	; 0x2104 <__fixunssfsi+0x2e>
    2112:	86 95       	lsr	r24
    2114:	77 95       	ror	r23
    2116:	67 95       	ror	r22
    2118:	b3 95       	inc	r27
    211a:	d9 f7       	brne	.-10     	; 0x2112 <__fixunssfsi+0x3c>
    211c:	3e f4       	brtc	.+14     	; 0x212c <__fixunssfsi+0x56>
    211e:	90 95       	com	r25
    2120:	80 95       	com	r24
    2122:	70 95       	com	r23
    2124:	61 95       	neg	r22
    2126:	7f 4f       	sbci	r23, 0xFF	; 255
    2128:	8f 4f       	sbci	r24, 0xFF	; 255
    212a:	9f 4f       	sbci	r25, 0xFF	; 255
    212c:	08 95       	ret

0000212e <__floatunsisf>:
    212e:	e8 94       	clt
    2130:	09 c0       	rjmp	.+18     	; 0x2144 <__floatsisf+0x12>

00002132 <__floatsisf>:
    2132:	97 fb       	bst	r25, 7
    2134:	3e f4       	brtc	.+14     	; 0x2144 <__floatsisf+0x12>
    2136:	90 95       	com	r25
    2138:	80 95       	com	r24
    213a:	70 95       	com	r23
    213c:	61 95       	neg	r22
    213e:	7f 4f       	sbci	r23, 0xFF	; 255
    2140:	8f 4f       	sbci	r24, 0xFF	; 255
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	99 23       	and	r25, r25
    2146:	a9 f0       	breq	.+42     	; 0x2172 <__floatsisf+0x40>
    2148:	f9 2f       	mov	r31, r25
    214a:	96 e9       	ldi	r25, 0x96	; 150
    214c:	bb 27       	eor	r27, r27
    214e:	93 95       	inc	r25
    2150:	f6 95       	lsr	r31
    2152:	87 95       	ror	r24
    2154:	77 95       	ror	r23
    2156:	67 95       	ror	r22
    2158:	b7 95       	ror	r27
    215a:	f1 11       	cpse	r31, r1
    215c:	f8 cf       	rjmp	.-16     	; 0x214e <__floatsisf+0x1c>
    215e:	fa f4       	brpl	.+62     	; 0x219e <__floatsisf+0x6c>
    2160:	bb 0f       	add	r27, r27
    2162:	11 f4       	brne	.+4      	; 0x2168 <__floatsisf+0x36>
    2164:	60 ff       	sbrs	r22, 0
    2166:	1b c0       	rjmp	.+54     	; 0x219e <__floatsisf+0x6c>
    2168:	6f 5f       	subi	r22, 0xFF	; 255
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	8f 4f       	sbci	r24, 0xFF	; 255
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	16 c0       	rjmp	.+44     	; 0x219e <__floatsisf+0x6c>
    2172:	88 23       	and	r24, r24
    2174:	11 f0       	breq	.+4      	; 0x217a <__floatsisf+0x48>
    2176:	96 e9       	ldi	r25, 0x96	; 150
    2178:	11 c0       	rjmp	.+34     	; 0x219c <__floatsisf+0x6a>
    217a:	77 23       	and	r23, r23
    217c:	21 f0       	breq	.+8      	; 0x2186 <__floatsisf+0x54>
    217e:	9e e8       	ldi	r25, 0x8E	; 142
    2180:	87 2f       	mov	r24, r23
    2182:	76 2f       	mov	r23, r22
    2184:	05 c0       	rjmp	.+10     	; 0x2190 <__floatsisf+0x5e>
    2186:	66 23       	and	r22, r22
    2188:	71 f0       	breq	.+28     	; 0x21a6 <__floatsisf+0x74>
    218a:	96 e8       	ldi	r25, 0x86	; 134
    218c:	86 2f       	mov	r24, r22
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	60 e0       	ldi	r22, 0x00	; 0
    2192:	2a f0       	brmi	.+10     	; 0x219e <__floatsisf+0x6c>
    2194:	9a 95       	dec	r25
    2196:	66 0f       	add	r22, r22
    2198:	77 1f       	adc	r23, r23
    219a:	88 1f       	adc	r24, r24
    219c:	da f7       	brpl	.-10     	; 0x2194 <__floatsisf+0x62>
    219e:	88 0f       	add	r24, r24
    21a0:	96 95       	lsr	r25
    21a2:	87 95       	ror	r24
    21a4:	97 f9       	bld	r25, 7
    21a6:	08 95       	ret

000021a8 <__fp_cmp>:
    21a8:	99 0f       	add	r25, r25
    21aa:	00 08       	sbc	r0, r0
    21ac:	55 0f       	add	r21, r21
    21ae:	aa 0b       	sbc	r26, r26
    21b0:	e0 e8       	ldi	r30, 0x80	; 128
    21b2:	fe ef       	ldi	r31, 0xFE	; 254
    21b4:	16 16       	cp	r1, r22
    21b6:	17 06       	cpc	r1, r23
    21b8:	e8 07       	cpc	r30, r24
    21ba:	f9 07       	cpc	r31, r25
    21bc:	c0 f0       	brcs	.+48     	; 0x21ee <__fp_cmp+0x46>
    21be:	12 16       	cp	r1, r18
    21c0:	13 06       	cpc	r1, r19
    21c2:	e4 07       	cpc	r30, r20
    21c4:	f5 07       	cpc	r31, r21
    21c6:	98 f0       	brcs	.+38     	; 0x21ee <__fp_cmp+0x46>
    21c8:	62 1b       	sub	r22, r18
    21ca:	73 0b       	sbc	r23, r19
    21cc:	84 0b       	sbc	r24, r20
    21ce:	95 0b       	sbc	r25, r21
    21d0:	39 f4       	brne	.+14     	; 0x21e0 <__fp_cmp+0x38>
    21d2:	0a 26       	eor	r0, r26
    21d4:	61 f0       	breq	.+24     	; 0x21ee <__fp_cmp+0x46>
    21d6:	23 2b       	or	r18, r19
    21d8:	24 2b       	or	r18, r20
    21da:	25 2b       	or	r18, r21
    21dc:	21 f4       	brne	.+8      	; 0x21e6 <__fp_cmp+0x3e>
    21de:	08 95       	ret
    21e0:	0a 26       	eor	r0, r26
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__fp_cmp+0x3e>
    21e4:	a1 40       	sbci	r26, 0x01	; 1
    21e6:	a6 95       	lsr	r26
    21e8:	8f ef       	ldi	r24, 0xFF	; 255
    21ea:	81 1d       	adc	r24, r1
    21ec:	81 1d       	adc	r24, r1
    21ee:	08 95       	ret

000021f0 <__fp_inf>:
    21f0:	97 f9       	bld	r25, 7
    21f2:	9f 67       	ori	r25, 0x7F	; 127
    21f4:	80 e8       	ldi	r24, 0x80	; 128
    21f6:	70 e0       	ldi	r23, 0x00	; 0
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	08 95       	ret

000021fc <__fp_nan>:
    21fc:	9f ef       	ldi	r25, 0xFF	; 255
    21fe:	80 ec       	ldi	r24, 0xC0	; 192
    2200:	08 95       	ret

00002202 <__fp_pscA>:
    2202:	00 24       	eor	r0, r0
    2204:	0a 94       	dec	r0
    2206:	16 16       	cp	r1, r22
    2208:	17 06       	cpc	r1, r23
    220a:	18 06       	cpc	r1, r24
    220c:	09 06       	cpc	r0, r25
    220e:	08 95       	ret

00002210 <__fp_pscB>:
    2210:	00 24       	eor	r0, r0
    2212:	0a 94       	dec	r0
    2214:	12 16       	cp	r1, r18
    2216:	13 06       	cpc	r1, r19
    2218:	14 06       	cpc	r1, r20
    221a:	05 06       	cpc	r0, r21
    221c:	08 95       	ret

0000221e <__fp_round>:
    221e:	09 2e       	mov	r0, r25
    2220:	03 94       	inc	r0
    2222:	00 0c       	add	r0, r0
    2224:	11 f4       	brne	.+4      	; 0x222a <__fp_round+0xc>
    2226:	88 23       	and	r24, r24
    2228:	52 f0       	brmi	.+20     	; 0x223e <__fp_round+0x20>
    222a:	bb 0f       	add	r27, r27
    222c:	40 f4       	brcc	.+16     	; 0x223e <__fp_round+0x20>
    222e:	bf 2b       	or	r27, r31
    2230:	11 f4       	brne	.+4      	; 0x2236 <__fp_round+0x18>
    2232:	60 ff       	sbrs	r22, 0
    2234:	04 c0       	rjmp	.+8      	; 0x223e <__fp_round+0x20>
    2236:	6f 5f       	subi	r22, 0xFF	; 255
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	8f 4f       	sbci	r24, 0xFF	; 255
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	08 95       	ret

00002240 <__fp_split3>:
    2240:	57 fd       	sbrc	r21, 7
    2242:	90 58       	subi	r25, 0x80	; 128
    2244:	44 0f       	add	r20, r20
    2246:	55 1f       	adc	r21, r21
    2248:	59 f0       	breq	.+22     	; 0x2260 <__fp_splitA+0x10>
    224a:	5f 3f       	cpi	r21, 0xFF	; 255
    224c:	71 f0       	breq	.+28     	; 0x226a <__fp_splitA+0x1a>
    224e:	47 95       	ror	r20

00002250 <__fp_splitA>:
    2250:	88 0f       	add	r24, r24
    2252:	97 fb       	bst	r25, 7
    2254:	99 1f       	adc	r25, r25
    2256:	61 f0       	breq	.+24     	; 0x2270 <__fp_splitA+0x20>
    2258:	9f 3f       	cpi	r25, 0xFF	; 255
    225a:	79 f0       	breq	.+30     	; 0x227a <__fp_splitA+0x2a>
    225c:	87 95       	ror	r24
    225e:	08 95       	ret
    2260:	12 16       	cp	r1, r18
    2262:	13 06       	cpc	r1, r19
    2264:	14 06       	cpc	r1, r20
    2266:	55 1f       	adc	r21, r21
    2268:	f2 cf       	rjmp	.-28     	; 0x224e <__fp_split3+0xe>
    226a:	46 95       	lsr	r20
    226c:	f1 df       	rcall	.-30     	; 0x2250 <__fp_splitA>
    226e:	08 c0       	rjmp	.+16     	; 0x2280 <__fp_splitA+0x30>
    2270:	16 16       	cp	r1, r22
    2272:	17 06       	cpc	r1, r23
    2274:	18 06       	cpc	r1, r24
    2276:	99 1f       	adc	r25, r25
    2278:	f1 cf       	rjmp	.-30     	; 0x225c <__fp_splitA+0xc>
    227a:	86 95       	lsr	r24
    227c:	71 05       	cpc	r23, r1
    227e:	61 05       	cpc	r22, r1
    2280:	08 94       	sec
    2282:	08 95       	ret

00002284 <__fp_zero>:
    2284:	e8 94       	clt

00002286 <__fp_szero>:
    2286:	bb 27       	eor	r27, r27
    2288:	66 27       	eor	r22, r22
    228a:	77 27       	eor	r23, r23
    228c:	cb 01       	movw	r24, r22
    228e:	97 f9       	bld	r25, 7
    2290:	08 95       	ret

00002292 <__gesf2>:
    2292:	8a df       	rcall	.-236    	; 0x21a8 <__fp_cmp>
    2294:	08 f4       	brcc	.+2      	; 0x2298 <__gesf2+0x6>
    2296:	8f ef       	ldi	r24, 0xFF	; 255
    2298:	08 95       	ret

0000229a <__mulsf3>:
    229a:	0b d0       	rcall	.+22     	; 0x22b2 <__mulsf3x>
    229c:	c0 cf       	rjmp	.-128    	; 0x221e <__fp_round>
    229e:	b1 df       	rcall	.-158    	; 0x2202 <__fp_pscA>
    22a0:	28 f0       	brcs	.+10     	; 0x22ac <__mulsf3+0x12>
    22a2:	b6 df       	rcall	.-148    	; 0x2210 <__fp_pscB>
    22a4:	18 f0       	brcs	.+6      	; 0x22ac <__mulsf3+0x12>
    22a6:	95 23       	and	r25, r21
    22a8:	09 f0       	breq	.+2      	; 0x22ac <__mulsf3+0x12>
    22aa:	a2 cf       	rjmp	.-188    	; 0x21f0 <__fp_inf>
    22ac:	a7 cf       	rjmp	.-178    	; 0x21fc <__fp_nan>
    22ae:	11 24       	eor	r1, r1
    22b0:	ea cf       	rjmp	.-44     	; 0x2286 <__fp_szero>

000022b2 <__mulsf3x>:
    22b2:	c6 df       	rcall	.-116    	; 0x2240 <__fp_split3>
    22b4:	a0 f3       	brcs	.-24     	; 0x229e <__mulsf3+0x4>

000022b6 <__mulsf3_pse>:
    22b6:	95 9f       	mul	r25, r21
    22b8:	d1 f3       	breq	.-12     	; 0x22ae <__mulsf3+0x14>
    22ba:	95 0f       	add	r25, r21
    22bc:	50 e0       	ldi	r21, 0x00	; 0
    22be:	55 1f       	adc	r21, r21
    22c0:	62 9f       	mul	r22, r18
    22c2:	f0 01       	movw	r30, r0
    22c4:	72 9f       	mul	r23, r18
    22c6:	bb 27       	eor	r27, r27
    22c8:	f0 0d       	add	r31, r0
    22ca:	b1 1d       	adc	r27, r1
    22cc:	63 9f       	mul	r22, r19
    22ce:	aa 27       	eor	r26, r26
    22d0:	f0 0d       	add	r31, r0
    22d2:	b1 1d       	adc	r27, r1
    22d4:	aa 1f       	adc	r26, r26
    22d6:	64 9f       	mul	r22, r20
    22d8:	66 27       	eor	r22, r22
    22da:	b0 0d       	add	r27, r0
    22dc:	a1 1d       	adc	r26, r1
    22de:	66 1f       	adc	r22, r22
    22e0:	82 9f       	mul	r24, r18
    22e2:	22 27       	eor	r18, r18
    22e4:	b0 0d       	add	r27, r0
    22e6:	a1 1d       	adc	r26, r1
    22e8:	62 1f       	adc	r22, r18
    22ea:	73 9f       	mul	r23, r19
    22ec:	b0 0d       	add	r27, r0
    22ee:	a1 1d       	adc	r26, r1
    22f0:	62 1f       	adc	r22, r18
    22f2:	83 9f       	mul	r24, r19
    22f4:	a0 0d       	add	r26, r0
    22f6:	61 1d       	adc	r22, r1
    22f8:	22 1f       	adc	r18, r18
    22fa:	74 9f       	mul	r23, r20
    22fc:	33 27       	eor	r19, r19
    22fe:	a0 0d       	add	r26, r0
    2300:	61 1d       	adc	r22, r1
    2302:	23 1f       	adc	r18, r19
    2304:	84 9f       	mul	r24, r20
    2306:	60 0d       	add	r22, r0
    2308:	21 1d       	adc	r18, r1
    230a:	82 2f       	mov	r24, r18
    230c:	76 2f       	mov	r23, r22
    230e:	6a 2f       	mov	r22, r26
    2310:	11 24       	eor	r1, r1
    2312:	9f 57       	subi	r25, 0x7F	; 127
    2314:	50 40       	sbci	r21, 0x00	; 0
    2316:	8a f0       	brmi	.+34     	; 0x233a <__mulsf3_pse+0x84>
    2318:	e1 f0       	breq	.+56     	; 0x2352 <__mulsf3_pse+0x9c>
    231a:	88 23       	and	r24, r24
    231c:	4a f0       	brmi	.+18     	; 0x2330 <__mulsf3_pse+0x7a>
    231e:	ee 0f       	add	r30, r30
    2320:	ff 1f       	adc	r31, r31
    2322:	bb 1f       	adc	r27, r27
    2324:	66 1f       	adc	r22, r22
    2326:	77 1f       	adc	r23, r23
    2328:	88 1f       	adc	r24, r24
    232a:	91 50       	subi	r25, 0x01	; 1
    232c:	50 40       	sbci	r21, 0x00	; 0
    232e:	a9 f7       	brne	.-22     	; 0x231a <__mulsf3_pse+0x64>
    2330:	9e 3f       	cpi	r25, 0xFE	; 254
    2332:	51 05       	cpc	r21, r1
    2334:	70 f0       	brcs	.+28     	; 0x2352 <__mulsf3_pse+0x9c>
    2336:	5c cf       	rjmp	.-328    	; 0x21f0 <__fp_inf>
    2338:	a6 cf       	rjmp	.-180    	; 0x2286 <__fp_szero>
    233a:	5f 3f       	cpi	r21, 0xFF	; 255
    233c:	ec f3       	brlt	.-6      	; 0x2338 <__mulsf3_pse+0x82>
    233e:	98 3e       	cpi	r25, 0xE8	; 232
    2340:	dc f3       	brlt	.-10     	; 0x2338 <__mulsf3_pse+0x82>
    2342:	86 95       	lsr	r24
    2344:	77 95       	ror	r23
    2346:	67 95       	ror	r22
    2348:	b7 95       	ror	r27
    234a:	f7 95       	ror	r31
    234c:	e7 95       	ror	r30
    234e:	9f 5f       	subi	r25, 0xFF	; 255
    2350:	c1 f7       	brne	.-16     	; 0x2342 <__mulsf3_pse+0x8c>
    2352:	fe 2b       	or	r31, r30
    2354:	88 0f       	add	r24, r24
    2356:	91 1d       	adc	r25, r1
    2358:	96 95       	lsr	r25
    235a:	87 95       	ror	r24
    235c:	97 f9       	bld	r25, 7
    235e:	08 95       	ret

00002360 <__udivmodhi4>:
    2360:	aa 1b       	sub	r26, r26
    2362:	bb 1b       	sub	r27, r27
    2364:	51 e1       	ldi	r21, 0x11	; 17
    2366:	07 c0       	rjmp	.+14     	; 0x2376 <__udivmodhi4_ep>

00002368 <__udivmodhi4_loop>:
    2368:	aa 1f       	adc	r26, r26
    236a:	bb 1f       	adc	r27, r27
    236c:	a6 17       	cp	r26, r22
    236e:	b7 07       	cpc	r27, r23
    2370:	10 f0       	brcs	.+4      	; 0x2376 <__udivmodhi4_ep>
    2372:	a6 1b       	sub	r26, r22
    2374:	b7 0b       	sbc	r27, r23

00002376 <__udivmodhi4_ep>:
    2376:	88 1f       	adc	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	5a 95       	dec	r21
    237c:	a9 f7       	brne	.-22     	; 0x2368 <__udivmodhi4_loop>
    237e:	80 95       	com	r24
    2380:	90 95       	com	r25
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	08 95       	ret

00002388 <__divmodhi4>:
    2388:	97 fb       	bst	r25, 7
    238a:	09 2e       	mov	r0, r25
    238c:	07 26       	eor	r0, r23
    238e:	0a d0       	rcall	.+20     	; 0x23a4 <__divmodhi4_neg1>
    2390:	77 fd       	sbrc	r23, 7
    2392:	04 d0       	rcall	.+8      	; 0x239c <__divmodhi4_neg2>
    2394:	e5 df       	rcall	.-54     	; 0x2360 <__udivmodhi4>
    2396:	06 d0       	rcall	.+12     	; 0x23a4 <__divmodhi4_neg1>
    2398:	00 20       	and	r0, r0
    239a:	1a f4       	brpl	.+6      	; 0x23a2 <__divmodhi4_exit>

0000239c <__divmodhi4_neg2>:
    239c:	70 95       	com	r23
    239e:	61 95       	neg	r22
    23a0:	7f 4f       	sbci	r23, 0xFF	; 255

000023a2 <__divmodhi4_exit>:
    23a2:	08 95       	ret

000023a4 <__divmodhi4_neg1>:
    23a4:	f6 f7       	brtc	.-4      	; 0x23a2 <__divmodhi4_exit>
    23a6:	90 95       	com	r25
    23a8:	81 95       	neg	r24
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	08 95       	ret

000023ae <__tablejump2__>:
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31

000023b2 <__tablejump__>:
    23b2:	05 90       	lpm	r0, Z+
    23b4:	f4 91       	lpm	r31, Z
    23b6:	e0 2d       	mov	r30, r0
    23b8:	09 94       	ijmp

000023ba <dtostrf>:
    23ba:	ef 92       	push	r14
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	32 2f       	mov	r19, r18
    23c4:	c0 2f       	mov	r28, r16
    23c6:	47 ff       	sbrs	r20, 7
    23c8:	02 c0       	rjmp	.+4      	; 0x23ce <dtostrf+0x14>
    23ca:	a4 e1       	ldi	r26, 0x14	; 20
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <dtostrf+0x16>
    23ce:	a4 e0       	ldi	r26, 0x04	; 4
    23d0:	e4 2f       	mov	r30, r20
    23d2:	ff 27       	eor	r31, r31
    23d4:	e7 fd       	sbrc	r30, 7
    23d6:	f0 95       	com	r31
    23d8:	f7 ff       	sbrs	r31, 7
    23da:	03 c0       	rjmp	.+6      	; 0x23e2 <dtostrf+0x28>
    23dc:	f0 95       	com	r31
    23de:	e1 95       	neg	r30
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	4c 2f       	mov	r20, r28
    23e4:	51 2f       	mov	r21, r17
    23e6:	2e 2f       	mov	r18, r30
    23e8:	03 2f       	mov	r16, r19
    23ea:	ea 2e       	mov	r14, r26
    23ec:	0e 94 50 12 	call	0x24a0	; 0x24a0 <dtoa_prf>
    23f0:	8c 2f       	mov	r24, r28
    23f2:	91 2f       	mov	r25, r17
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ef 90       	pop	r14
    23fc:	08 95       	ret

000023fe <strcat>:
    23fe:	fb 01       	movw	r30, r22
    2400:	dc 01       	movw	r26, r24
    2402:	0d 90       	ld	r0, X+
    2404:	00 20       	and	r0, r0
    2406:	e9 f7       	brne	.-6      	; 0x2402 <strcat+0x4>
    2408:	11 97       	sbiw	r26, 0x01	; 1
    240a:	01 90       	ld	r0, Z+
    240c:	0d 92       	st	X+, r0
    240e:	00 20       	and	r0, r0
    2410:	e1 f7       	brne	.-8      	; 0x240a <strcat+0xc>
    2412:	08 95       	ret

00002414 <strncmp>:
    2414:	fb 01       	movw	r30, r22
    2416:	dc 01       	movw	r26, r24
    2418:	41 50       	subi	r20, 0x01	; 1
    241a:	50 40       	sbci	r21, 0x00	; 0
    241c:	30 f0       	brcs	.+12     	; 0x242a <strncmp+0x16>
    241e:	8d 91       	ld	r24, X+
    2420:	01 90       	ld	r0, Z+
    2422:	80 19       	sub	r24, r0
    2424:	19 f4       	brne	.+6      	; 0x242c <strncmp+0x18>
    2426:	00 20       	and	r0, r0
    2428:	b9 f7       	brne	.-18     	; 0x2418 <strncmp+0x4>
    242a:	88 1b       	sub	r24, r24
    242c:	99 0b       	sbc	r25, r25
    242e:	08 95       	ret

00002430 <__eerd_byte_m324pa>:
    2430:	f9 99       	sbic	0x1f, 1	; 31
    2432:	fe cf       	rjmp	.-4      	; 0x2430 <__eerd_byte_m324pa>
    2434:	92 bd       	out	0x22, r25	; 34
    2436:	81 bd       	out	0x21, r24	; 33
    2438:	f8 9a       	sbi	0x1f, 0	; 31
    243a:	99 27       	eor	r25, r25
    243c:	80 b5       	in	r24, 0x20	; 32
    243e:	08 95       	ret

00002440 <__eerd_dword_m324pa>:
    2440:	a6 e1       	ldi	r26, 0x16	; 22
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	44 e0       	ldi	r20, 0x04	; 4
    2446:	50 e0       	ldi	r21, 0x00	; 0
    2448:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__eerd_blraw_m324pa>

0000244c <__eerd_word_m324pa>:
    244c:	a8 e1       	ldi	r26, 0x18	; 24
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	42 e0       	ldi	r20, 0x02	; 2
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__eerd_blraw_m324pa>

00002458 <__eeupd_byte_m324pa>:
    2458:	26 2f       	mov	r18, r22

0000245a <__eeupd_r18_m324pa>:
    245a:	f9 99       	sbic	0x1f, 1	; 31
    245c:	fe cf       	rjmp	.-4      	; 0x245a <__eeupd_r18_m324pa>
    245e:	92 bd       	out	0x22, r25	; 34
    2460:	81 bd       	out	0x21, r24	; 33
    2462:	f8 9a       	sbi	0x1f, 0	; 31
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	00 b4       	in	r0, 0x20	; 32
    2468:	02 16       	cp	r0, r18
    246a:	39 f0       	breq	.+14     	; 0x247a <__eeupd_r18_m324pa+0x20>
    246c:	1f ba       	out	0x1f, r1	; 31
    246e:	20 bd       	out	0x20, r18	; 32
    2470:	0f b6       	in	r0, 0x3f	; 63
    2472:	f8 94       	cli
    2474:	fa 9a       	sbi	0x1f, 2	; 31
    2476:	f9 9a       	sbi	0x1f, 1	; 31
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	08 95       	ret

0000247c <__eeupd_dword_m324pa>:
    247c:	03 96       	adiw	r24, 0x03	; 3
    247e:	27 2f       	mov	r18, r23
    2480:	0e 94 2d 12 	call	0x245a	; 0x245a <__eeupd_r18_m324pa>
    2484:	0e 94 2c 12 	call	0x2458	; 0x2458 <__eeupd_byte_m324pa>
    2488:	25 2f       	mov	r18, r21
    248a:	0e 94 2d 12 	call	0x245a	; 0x245a <__eeupd_r18_m324pa>
    248e:	24 2f       	mov	r18, r20
    2490:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__eeupd_r18_m324pa>

00002494 <__eeupd_word_m324pa>:
    2494:	01 96       	adiw	r24, 0x01	; 1
    2496:	27 2f       	mov	r18, r23
    2498:	0e 94 2d 12 	call	0x245a	; 0x245a <__eeupd_r18_m324pa>
    249c:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__eeupd_byte_m324pa>

000024a0 <dtoa_prf>:
    24a0:	a9 e0       	ldi	r26, 0x09	; 9
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e6 e5       	ldi	r30, 0x56	; 86
    24a6:	f2 e1       	ldi	r31, 0x12	; 18
    24a8:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__prologue_saves__+0x8>
    24ac:	6a 01       	movw	r12, r20
    24ae:	12 2f       	mov	r17, r18
    24b0:	f0 2e       	mov	r15, r16
    24b2:	2b e3       	ldi	r18, 0x3B	; 59
    24b4:	20 17       	cp	r18, r16
    24b6:	18 f0       	brcs	.+6      	; 0x24be <dtoa_prf+0x1e>
    24b8:	b0 2e       	mov	r11, r16
    24ba:	b3 94       	inc	r11
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <dtoa_prf+0x22>
    24be:	3c e3       	ldi	r19, 0x3C	; 60
    24c0:	b3 2e       	mov	r11, r19
    24c2:	ae 01       	movw	r20, r28
    24c4:	4f 5f       	subi	r20, 0xFF	; 255
    24c6:	5f 4f       	sbci	r21, 0xFF	; 255
    24c8:	27 e0       	ldi	r18, 0x07	; 7
    24ca:	0b 2d       	mov	r16, r11
    24cc:	0e 94 a8 13 	call	0x2750	; 0x2750 <__ftoa_engine>
    24d0:	bc 01       	movw	r22, r24
    24d2:	a9 81       	ldd	r26, Y+1	; 0x01
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	cd 01       	movw	r24, r26
    24d8:	89 70       	andi	r24, 0x09	; 9
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	91 05       	cpc	r25, r1
    24e0:	31 f0       	breq	.+12     	; 0x24ee <dtoa_prf+0x4e>
    24e2:	e1 fc       	sbrc	r14, 1
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <dtoa_prf+0x52>
    24e6:	e0 fe       	sbrs	r14, 0
    24e8:	06 c0       	rjmp	.+12     	; 0x24f6 <dtoa_prf+0x56>
    24ea:	40 e2       	ldi	r20, 0x20	; 32
    24ec:	05 c0       	rjmp	.+10     	; 0x24f8 <dtoa_prf+0x58>
    24ee:	4d e2       	ldi	r20, 0x2D	; 45
    24f0:	03 c0       	rjmp	.+6      	; 0x24f8 <dtoa_prf+0x58>
    24f2:	4b e2       	ldi	r20, 0x2B	; 43
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <dtoa_prf+0x58>
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	a3 ff       	sbrs	r26, 3
    24fa:	36 c0       	rjmp	.+108    	; 0x2568 <dtoa_prf+0xc8>
    24fc:	44 23       	and	r20, r20
    24fe:	11 f0       	breq	.+4      	; 0x2504 <dtoa_prf+0x64>
    2500:	84 e0       	ldi	r24, 0x04	; 4
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <dtoa_prf+0x66>
    2504:	83 e0       	ldi	r24, 0x03	; 3
    2506:	81 17       	cp	r24, r17
    2508:	10 f4       	brcc	.+4      	; 0x250e <dtoa_prf+0x6e>
    250a:	18 1b       	sub	r17, r24
    250c:	01 c0       	rjmp	.+2      	; 0x2510 <dtoa_prf+0x70>
    250e:	10 e0       	ldi	r17, 0x00	; 0
    2510:	e4 fc       	sbrc	r14, 4
    2512:	0b c0       	rjmp	.+22     	; 0x252a <dtoa_prf+0x8a>
    2514:	91 2f       	mov	r25, r17
    2516:	f6 01       	movw	r30, r12
    2518:	80 e2       	ldi	r24, 0x20	; 32
    251a:	02 c0       	rjmp	.+4      	; 0x2520 <dtoa_prf+0x80>
    251c:	81 93       	st	Z+, r24
    251e:	91 50       	subi	r25, 0x01	; 1
    2520:	99 23       	and	r25, r25
    2522:	e1 f7       	brne	.-8      	; 0x251c <dtoa_prf+0x7c>
    2524:	c1 0e       	add	r12, r17
    2526:	d1 1c       	adc	r13, r1
    2528:	10 e0       	ldi	r17, 0x00	; 0
    252a:	44 23       	and	r20, r20
    252c:	19 f0       	breq	.+6      	; 0x2534 <dtoa_prf+0x94>
    252e:	f6 01       	movw	r30, r12
    2530:	41 93       	st	Z+, r20
    2532:	6f 01       	movw	r12, r30
    2534:	e2 fe       	sbrs	r14, 2
    2536:	05 c0       	rjmp	.+10     	; 0x2542 <dtoa_prf+0xa2>
    2538:	8e e4       	ldi	r24, 0x4E	; 78
    253a:	f6 01       	movw	r30, r12
    253c:	80 83       	st	Z, r24
    253e:	91 e4       	ldi	r25, 0x41	; 65
    2540:	04 c0       	rjmp	.+8      	; 0x254a <dtoa_prf+0xaa>
    2542:	8e e6       	ldi	r24, 0x6E	; 110
    2544:	f6 01       	movw	r30, r12
    2546:	80 83       	st	Z, r24
    2548:	91 e6       	ldi	r25, 0x61	; 97
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	82 83       	std	Z+2, r24	; 0x02
    254e:	83 e0       	ldi	r24, 0x03	; 3
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	c8 0e       	add	r12, r24
    2554:	d9 1e       	adc	r13, r25
    2556:	81 2f       	mov	r24, r17
    2558:	f6 01       	movw	r30, r12
    255a:	90 e2       	ldi	r25, 0x20	; 32
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <dtoa_prf+0xc2>
    255e:	91 93       	st	Z+, r25
    2560:	81 50       	subi	r24, 0x01	; 1
    2562:	88 23       	and	r24, r24
    2564:	e1 f7       	brne	.-8      	; 0x255e <dtoa_prf+0xbe>
    2566:	3a c0       	rjmp	.+116    	; 0x25dc <dtoa_prf+0x13c>
    2568:	a2 ff       	sbrs	r26, 2
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <dtoa_prf+0x14a>
    256c:	44 23       	and	r20, r20
    256e:	11 f0       	breq	.+4      	; 0x2574 <dtoa_prf+0xd4>
    2570:	84 e0       	ldi	r24, 0x04	; 4
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <dtoa_prf+0xd6>
    2574:	83 e0       	ldi	r24, 0x03	; 3
    2576:	81 17       	cp	r24, r17
    2578:	10 f4       	brcc	.+4      	; 0x257e <dtoa_prf+0xde>
    257a:	18 1b       	sub	r17, r24
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <dtoa_prf+0xe0>
    257e:	10 e0       	ldi	r17, 0x00	; 0
    2580:	e4 fc       	sbrc	r14, 4
    2582:	0b c0       	rjmp	.+22     	; 0x259a <dtoa_prf+0xfa>
    2584:	91 2f       	mov	r25, r17
    2586:	f6 01       	movw	r30, r12
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	02 c0       	rjmp	.+4      	; 0x2590 <dtoa_prf+0xf0>
    258c:	81 93       	st	Z+, r24
    258e:	91 50       	subi	r25, 0x01	; 1
    2590:	99 23       	and	r25, r25
    2592:	e1 f7       	brne	.-8      	; 0x258c <dtoa_prf+0xec>
    2594:	c1 0e       	add	r12, r17
    2596:	d1 1c       	adc	r13, r1
    2598:	10 e0       	ldi	r17, 0x00	; 0
    259a:	44 23       	and	r20, r20
    259c:	19 f0       	breq	.+6      	; 0x25a4 <dtoa_prf+0x104>
    259e:	f6 01       	movw	r30, r12
    25a0:	41 93       	st	Z+, r20
    25a2:	6f 01       	movw	r12, r30
    25a4:	e2 fe       	sbrs	r14, 2
    25a6:	07 c0       	rjmp	.+14     	; 0x25b6 <dtoa_prf+0x116>
    25a8:	89 e4       	ldi	r24, 0x49	; 73
    25aa:	f6 01       	movw	r30, r12
    25ac:	80 83       	st	Z, r24
    25ae:	8e e4       	ldi	r24, 0x4E	; 78
    25b0:	81 83       	std	Z+1, r24	; 0x01
    25b2:	86 e4       	ldi	r24, 0x46	; 70
    25b4:	06 c0       	rjmp	.+12     	; 0x25c2 <dtoa_prf+0x122>
    25b6:	89 e6       	ldi	r24, 0x69	; 105
    25b8:	f6 01       	movw	r30, r12
    25ba:	80 83       	st	Z, r24
    25bc:	8e e6       	ldi	r24, 0x6E	; 110
    25be:	81 83       	std	Z+1, r24	; 0x01
    25c0:	86 e6       	ldi	r24, 0x66	; 102
    25c2:	82 83       	std	Z+2, r24	; 0x02
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	c8 0e       	add	r12, r24
    25ca:	d9 1e       	adc	r13, r25
    25cc:	81 2f       	mov	r24, r17
    25ce:	f6 01       	movw	r30, r12
    25d0:	90 e2       	ldi	r25, 0x20	; 32
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <dtoa_prf+0x138>
    25d4:	91 93       	st	Z+, r25
    25d6:	81 50       	subi	r24, 0x01	; 1
    25d8:	88 23       	and	r24, r24
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <dtoa_prf+0x134>
    25dc:	c1 0e       	add	r12, r17
    25de:	d1 1c       	adc	r13, r1
    25e0:	f6 01       	movw	r30, r12
    25e2:	10 82       	st	Z, r1
    25e4:	8e ef       	ldi	r24, 0xFE	; 254
    25e6:	9f ef       	ldi	r25, 0xFF	; 255
    25e8:	af c0       	rjmp	.+350    	; 0x2748 <dtoa_prf+0x2a8>
    25ea:	21 e0       	ldi	r18, 0x01	; 1
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	44 23       	and	r20, r20
    25f0:	11 f4       	brne	.+4      	; 0x25f6 <dtoa_prf+0x156>
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	16 16       	cp	r1, r22
    25f8:	17 06       	cpc	r1, r23
    25fa:	1c f4       	brge	.+6      	; 0x2602 <dtoa_prf+0x162>
    25fc:	cb 01       	movw	r24, r22
    25fe:	01 96       	adiw	r24, 0x01	; 1
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <dtoa_prf+0x166>
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	28 0f       	add	r18, r24
    2608:	39 1f       	adc	r19, r25
    260a:	ff 20       	and	r15, r15
    260c:	21 f0       	breq	.+8      	; 0x2616 <dtoa_prf+0x176>
    260e:	8f 2d       	mov	r24, r15
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	02 c0       	rjmp	.+4      	; 0x261a <dtoa_prf+0x17a>
    2616:	80 e0       	ldi	r24, 0x00	; 0
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	21 2f       	mov	r18, r17
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	82 17       	cp	r24, r18
    2624:	93 07       	cpc	r25, r19
    2626:	1c f4       	brge	.+6      	; 0x262e <dtoa_prf+0x18e>
    2628:	51 2f       	mov	r21, r17
    262a:	58 1b       	sub	r21, r24
    262c:	01 c0       	rjmp	.+2      	; 0x2630 <dtoa_prf+0x190>
    262e:	50 e0       	ldi	r21, 0x00	; 0
    2630:	8e 2d       	mov	r24, r14
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9c 01       	movw	r18, r24
    2636:	20 71       	andi	r18, 0x10	; 16
    2638:	30 70       	andi	r19, 0x00	; 0
    263a:	e4 fc       	sbrc	r14, 4
    263c:	0d c0       	rjmp	.+26     	; 0x2658 <dtoa_prf+0x1b8>
    263e:	e3 fc       	sbrc	r14, 3
    2640:	0b c0       	rjmp	.+22     	; 0x2658 <dtoa_prf+0x1b8>
    2642:	85 2f       	mov	r24, r21
    2644:	f6 01       	movw	r30, r12
    2646:	90 e2       	ldi	r25, 0x20	; 32
    2648:	02 c0       	rjmp	.+4      	; 0x264e <dtoa_prf+0x1ae>
    264a:	91 93       	st	Z+, r25
    264c:	81 50       	subi	r24, 0x01	; 1
    264e:	88 23       	and	r24, r24
    2650:	e1 f7       	brne	.-8      	; 0x264a <dtoa_prf+0x1aa>
    2652:	c5 0e       	add	r12, r21
    2654:	d1 1c       	adc	r13, r1
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	44 23       	and	r20, r20
    265a:	19 f0       	breq	.+6      	; 0x2662 <dtoa_prf+0x1c2>
    265c:	f6 01       	movw	r30, r12
    265e:	41 93       	st	Z+, r20
    2660:	6f 01       	movw	r12, r30
    2662:	21 15       	cp	r18, r1
    2664:	31 05       	cpc	r19, r1
    2666:	59 f4       	brne	.+22     	; 0x267e <dtoa_prf+0x1de>
    2668:	85 2f       	mov	r24, r21
    266a:	f6 01       	movw	r30, r12
    266c:	90 e3       	ldi	r25, 0x30	; 48
    266e:	02 c0       	rjmp	.+4      	; 0x2674 <dtoa_prf+0x1d4>
    2670:	91 93       	st	Z+, r25
    2672:	81 50       	subi	r24, 0x01	; 1
    2674:	88 23       	and	r24, r24
    2676:	e1 f7       	brne	.-8      	; 0x2670 <dtoa_prf+0x1d0>
    2678:	c5 0e       	add	r12, r21
    267a:	d1 1c       	adc	r13, r1
    267c:	50 e0       	ldi	r21, 0x00	; 0
    267e:	b6 0e       	add	r11, r22
    2680:	4a 81       	ldd	r20, Y+2	; 0x02
    2682:	20 e1       	ldi	r18, 0x10	; 16
    2684:	62 2e       	mov	r6, r18
    2686:	71 2c       	mov	r7, r1
    2688:	6a 22       	and	r6, r26
    268a:	7b 22       	and	r7, r27
    268c:	a4 ff       	sbrs	r26, 4
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <dtoa_prf+0x1f6>
    2690:	41 33       	cpi	r20, 0x31	; 49
    2692:	09 f4       	brne	.+2      	; 0x2696 <dtoa_prf+0x1f6>
    2694:	ba 94       	dec	r11
    2696:	1b 14       	cp	r1, r11
    2698:	2c f4       	brge	.+10     	; 0x26a4 <dtoa_prf+0x204>
    269a:	8b 2d       	mov	r24, r11
    269c:	89 30       	cpi	r24, 0x09	; 9
    269e:	18 f0       	brcs	.+6      	; 0x26a6 <dtoa_prf+0x206>
    26a0:	88 e0       	ldi	r24, 0x08	; 8
    26a2:	01 c0       	rjmp	.+2      	; 0x26a6 <dtoa_prf+0x206>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	9b 01       	movw	r18, r22
    26a8:	77 ff       	sbrs	r23, 7
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <dtoa_prf+0x210>
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	a0 e0       	ldi	r26, 0x00	; 0
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	9e e2       	ldi	r25, 0x2E	; 46
    26b6:	e9 2e       	mov	r14, r25
    26b8:	4b 01       	movw	r8, r22
    26ba:	88 1a       	sub	r8, r24
    26bc:	91 08       	sbc	r9, r1
    26be:	cb 01       	movw	r24, r22
    26c0:	82 1b       	sub	r24, r18
    26c2:	93 0b       	sbc	r25, r19
    26c4:	8e 01       	movw	r16, r28
    26c6:	0f 5f       	subi	r16, 0xFF	; 255
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	08 0f       	add	r16, r24
    26cc:	19 1f       	adc	r17, r25
    26ce:	8f 2d       	mov	r24, r15
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	aa 24       	eor	r10, r10
    26d4:	bb 24       	eor	r11, r11
    26d6:	a8 1a       	sub	r10, r24
    26d8:	b9 0a       	sbc	r11, r25
    26da:	ff ef       	ldi	r31, 0xFF	; 255
    26dc:	2f 3f       	cpi	r18, 0xFF	; 255
    26de:	3f 07       	cpc	r19, r31
    26e0:	19 f4       	brne	.+6      	; 0x26e8 <dtoa_prf+0x248>
    26e2:	f6 01       	movw	r30, r12
    26e4:	e1 92       	st	Z+, r14
    26e6:	6f 01       	movw	r12, r30
    26e8:	62 17       	cp	r22, r18
    26ea:	73 07       	cpc	r23, r19
    26ec:	44 f0       	brlt	.+16     	; 0x26fe <dtoa_prf+0x25e>
    26ee:	82 16       	cp	r8, r18
    26f0:	93 06       	cpc	r9, r19
    26f2:	2c f4       	brge	.+10     	; 0x26fe <dtoa_prf+0x25e>
    26f4:	f8 01       	movw	r30, r16
    26f6:	ea 0f       	add	r30, r26
    26f8:	fb 1f       	adc	r31, r27
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	01 c0       	rjmp	.+2      	; 0x2700 <dtoa_prf+0x260>
    26fe:	80 e3       	ldi	r24, 0x30	; 48
    2700:	21 50       	subi	r18, 0x01	; 1
    2702:	30 40       	sbci	r19, 0x00	; 0
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	2a 15       	cp	r18, r10
    2708:	3b 05       	cpc	r19, r11
    270a:	24 f0       	brlt	.+8      	; 0x2714 <dtoa_prf+0x274>
    270c:	f6 01       	movw	r30, r12
    270e:	81 93       	st	Z+, r24
    2710:	6f 01       	movw	r12, r30
    2712:	e3 cf       	rjmp	.-58     	; 0x26da <dtoa_prf+0x23a>
    2714:	26 17       	cp	r18, r22
    2716:	37 07       	cpc	r19, r23
    2718:	41 f4       	brne	.+16     	; 0x272a <dtoa_prf+0x28a>
    271a:	46 33       	cpi	r20, 0x36	; 54
    271c:	28 f4       	brcc	.+10     	; 0x2728 <dtoa_prf+0x288>
    271e:	45 33       	cpi	r20, 0x35	; 53
    2720:	21 f4       	brne	.+8      	; 0x272a <dtoa_prf+0x28a>
    2722:	61 14       	cp	r6, r1
    2724:	71 04       	cpc	r7, r1
    2726:	09 f4       	brne	.+2      	; 0x272a <dtoa_prf+0x28a>
    2728:	81 e3       	ldi	r24, 0x31	; 49
    272a:	f6 01       	movw	r30, r12
    272c:	81 93       	st	Z+, r24
    272e:	85 2f       	mov	r24, r21
    2730:	df 01       	movw	r26, r30
    2732:	90 e2       	ldi	r25, 0x20	; 32
    2734:	02 c0       	rjmp	.+4      	; 0x273a <dtoa_prf+0x29a>
    2736:	9d 93       	st	X+, r25
    2738:	81 50       	subi	r24, 0x01	; 1
    273a:	88 23       	and	r24, r24
    273c:	e1 f7       	brne	.-8      	; 0x2736 <dtoa_prf+0x296>
    273e:	e5 0f       	add	r30, r21
    2740:	f1 1d       	adc	r31, r1
    2742:	10 82       	st	Z, r1
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	29 96       	adiw	r28, 0x09	; 9
    274a:	ee e0       	ldi	r30, 0x0E	; 14
    274c:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__epilogue_restores__+0x8>

00002750 <__ftoa_engine>:
    2750:	28 30       	cpi	r18, 0x08	; 8
    2752:	08 f0       	brcs	.+2      	; 0x2756 <__ftoa_engine+0x6>
    2754:	27 e0       	ldi	r18, 0x07	; 7
    2756:	33 27       	eor	r19, r19
    2758:	da 01       	movw	r26, r20
    275a:	99 0f       	add	r25, r25
    275c:	31 1d       	adc	r19, r1
    275e:	87 fd       	sbrc	r24, 7
    2760:	91 60       	ori	r25, 0x01	; 1
    2762:	00 96       	adiw	r24, 0x00	; 0
    2764:	61 05       	cpc	r22, r1
    2766:	71 05       	cpc	r23, r1
    2768:	39 f4       	brne	.+14     	; 0x2778 <__ftoa_engine+0x28>
    276a:	32 60       	ori	r19, 0x02	; 2
    276c:	2e 5f       	subi	r18, 0xFE	; 254
    276e:	3d 93       	st	X+, r19
    2770:	30 e3       	ldi	r19, 0x30	; 48
    2772:	2a 95       	dec	r18
    2774:	e1 f7       	brne	.-8      	; 0x276e <__ftoa_engine+0x1e>
    2776:	08 95       	ret
    2778:	9f 3f       	cpi	r25, 0xFF	; 255
    277a:	30 f0       	brcs	.+12     	; 0x2788 <__ftoa_engine+0x38>
    277c:	80 38       	cpi	r24, 0x80	; 128
    277e:	71 05       	cpc	r23, r1
    2780:	61 05       	cpc	r22, r1
    2782:	09 f0       	breq	.+2      	; 0x2786 <__ftoa_engine+0x36>
    2784:	3c 5f       	subi	r19, 0xFC	; 252
    2786:	3c 5f       	subi	r19, 0xFC	; 252
    2788:	3d 93       	st	X+, r19
    278a:	91 30       	cpi	r25, 0x01	; 1
    278c:	08 f0       	brcs	.+2      	; 0x2790 <__ftoa_engine+0x40>
    278e:	80 68       	ori	r24, 0x80	; 128
    2790:	91 1d       	adc	r25, r1
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	1f 93       	push	r17
    2798:	0f 93       	push	r16
    279a:	ff 92       	push	r15
    279c:	ef 92       	push	r14
    279e:	19 2f       	mov	r17, r25
    27a0:	98 7f       	andi	r25, 0xF8	; 248
    27a2:	96 95       	lsr	r25
    27a4:	e9 2f       	mov	r30, r25
    27a6:	96 95       	lsr	r25
    27a8:	96 95       	lsr	r25
    27aa:	e9 0f       	add	r30, r25
    27ac:	ff 27       	eor	r31, r31
    27ae:	ea 52       	subi	r30, 0x2A	; 42
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	99 27       	eor	r25, r25
    27b4:	33 27       	eor	r19, r19
    27b6:	ee 24       	eor	r14, r14
    27b8:	ff 24       	eor	r15, r15
    27ba:	a7 01       	movw	r20, r14
    27bc:	e7 01       	movw	r28, r14
    27be:	05 90       	lpm	r0, Z+
    27c0:	08 94       	sec
    27c2:	07 94       	ror	r0
    27c4:	28 f4       	brcc	.+10     	; 0x27d0 <__ftoa_engine+0x80>
    27c6:	36 0f       	add	r19, r22
    27c8:	e7 1e       	adc	r14, r23
    27ca:	f8 1e       	adc	r15, r24
    27cc:	49 1f       	adc	r20, r25
    27ce:	51 1d       	adc	r21, r1
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	88 1f       	adc	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	06 94       	lsr	r0
    27da:	a1 f7       	brne	.-24     	; 0x27c4 <__ftoa_engine+0x74>
    27dc:	05 90       	lpm	r0, Z+
    27de:	07 94       	ror	r0
    27e0:	28 f4       	brcc	.+10     	; 0x27ec <__ftoa_engine+0x9c>
    27e2:	e7 0e       	add	r14, r23
    27e4:	f8 1e       	adc	r15, r24
    27e6:	49 1f       	adc	r20, r25
    27e8:	56 1f       	adc	r21, r22
    27ea:	c1 1d       	adc	r28, r1
    27ec:	77 0f       	add	r23, r23
    27ee:	88 1f       	adc	r24, r24
    27f0:	99 1f       	adc	r25, r25
    27f2:	66 1f       	adc	r22, r22
    27f4:	06 94       	lsr	r0
    27f6:	a1 f7       	brne	.-24     	; 0x27e0 <__ftoa_engine+0x90>
    27f8:	05 90       	lpm	r0, Z+
    27fa:	07 94       	ror	r0
    27fc:	28 f4       	brcc	.+10     	; 0x2808 <__ftoa_engine+0xb8>
    27fe:	f8 0e       	add	r15, r24
    2800:	49 1f       	adc	r20, r25
    2802:	56 1f       	adc	r21, r22
    2804:	c7 1f       	adc	r28, r23
    2806:	d1 1d       	adc	r29, r1
    2808:	88 0f       	add	r24, r24
    280a:	99 1f       	adc	r25, r25
    280c:	66 1f       	adc	r22, r22
    280e:	77 1f       	adc	r23, r23
    2810:	06 94       	lsr	r0
    2812:	a1 f7       	brne	.-24     	; 0x27fc <__ftoa_engine+0xac>
    2814:	05 90       	lpm	r0, Z+
    2816:	07 94       	ror	r0
    2818:	20 f4       	brcc	.+8      	; 0x2822 <__ftoa_engine+0xd2>
    281a:	49 0f       	add	r20, r25
    281c:	56 1f       	adc	r21, r22
    281e:	c7 1f       	adc	r28, r23
    2820:	d8 1f       	adc	r29, r24
    2822:	99 0f       	add	r25, r25
    2824:	66 1f       	adc	r22, r22
    2826:	77 1f       	adc	r23, r23
    2828:	88 1f       	adc	r24, r24
    282a:	06 94       	lsr	r0
    282c:	a9 f7       	brne	.-22     	; 0x2818 <__ftoa_engine+0xc8>
    282e:	84 91       	lpm	r24, Z
    2830:	10 95       	com	r17
    2832:	17 70       	andi	r17, 0x07	; 7
    2834:	41 f0       	breq	.+16     	; 0x2846 <__ftoa_engine+0xf6>
    2836:	d6 95       	lsr	r29
    2838:	c7 95       	ror	r28
    283a:	57 95       	ror	r21
    283c:	47 95       	ror	r20
    283e:	f7 94       	ror	r15
    2840:	e7 94       	ror	r14
    2842:	1a 95       	dec	r17
    2844:	c1 f7       	brne	.-16     	; 0x2836 <__ftoa_engine+0xe6>
    2846:	ec e7       	ldi	r30, 0x7C	; 124
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	68 94       	set
    284c:	15 90       	lpm	r1, Z+
    284e:	15 91       	lpm	r17, Z+
    2850:	35 91       	lpm	r19, Z+
    2852:	65 91       	lpm	r22, Z+
    2854:	95 91       	lpm	r25, Z+
    2856:	05 90       	lpm	r0, Z+
    2858:	7f e2       	ldi	r23, 0x2F	; 47
    285a:	73 95       	inc	r23
    285c:	e1 18       	sub	r14, r1
    285e:	f1 0a       	sbc	r15, r17
    2860:	43 0b       	sbc	r20, r19
    2862:	56 0b       	sbc	r21, r22
    2864:	c9 0b       	sbc	r28, r25
    2866:	d0 09       	sbc	r29, r0
    2868:	c0 f7       	brcc	.-16     	; 0x285a <__ftoa_engine+0x10a>
    286a:	e1 0c       	add	r14, r1
    286c:	f1 1e       	adc	r15, r17
    286e:	43 1f       	adc	r20, r19
    2870:	56 1f       	adc	r21, r22
    2872:	c9 1f       	adc	r28, r25
    2874:	d0 1d       	adc	r29, r0
    2876:	7e f4       	brtc	.+30     	; 0x2896 <__ftoa_engine+0x146>
    2878:	70 33       	cpi	r23, 0x30	; 48
    287a:	11 f4       	brne	.+4      	; 0x2880 <__ftoa_engine+0x130>
    287c:	8a 95       	dec	r24
    287e:	e6 cf       	rjmp	.-52     	; 0x284c <__ftoa_engine+0xfc>
    2880:	e8 94       	clt
    2882:	01 50       	subi	r16, 0x01	; 1
    2884:	30 f0       	brcs	.+12     	; 0x2892 <__ftoa_engine+0x142>
    2886:	08 0f       	add	r16, r24
    2888:	0a f4       	brpl	.+2      	; 0x288c <__ftoa_engine+0x13c>
    288a:	00 27       	eor	r16, r16
    288c:	02 17       	cp	r16, r18
    288e:	08 f4       	brcc	.+2      	; 0x2892 <__ftoa_engine+0x142>
    2890:	20 2f       	mov	r18, r16
    2892:	23 95       	inc	r18
    2894:	02 2f       	mov	r16, r18
    2896:	7a 33       	cpi	r23, 0x3A	; 58
    2898:	28 f0       	brcs	.+10     	; 0x28a4 <__ftoa_engine+0x154>
    289a:	79 e3       	ldi	r23, 0x39	; 57
    289c:	7d 93       	st	X+, r23
    289e:	2a 95       	dec	r18
    28a0:	e9 f7       	brne	.-6      	; 0x289c <__ftoa_engine+0x14c>
    28a2:	10 c0       	rjmp	.+32     	; 0x28c4 <__ftoa_engine+0x174>
    28a4:	7d 93       	st	X+, r23
    28a6:	2a 95       	dec	r18
    28a8:	89 f6       	brne	.-94     	; 0x284c <__ftoa_engine+0xfc>
    28aa:	06 94       	lsr	r0
    28ac:	97 95       	ror	r25
    28ae:	67 95       	ror	r22
    28b0:	37 95       	ror	r19
    28b2:	17 95       	ror	r17
    28b4:	17 94       	ror	r1
    28b6:	e1 18       	sub	r14, r1
    28b8:	f1 0a       	sbc	r15, r17
    28ba:	43 0b       	sbc	r20, r19
    28bc:	56 0b       	sbc	r21, r22
    28be:	c9 0b       	sbc	r28, r25
    28c0:	d0 09       	sbc	r29, r0
    28c2:	98 f0       	brcs	.+38     	; 0x28ea <__ftoa_engine+0x19a>
    28c4:	23 95       	inc	r18
    28c6:	7e 91       	ld	r23, -X
    28c8:	73 95       	inc	r23
    28ca:	7a 33       	cpi	r23, 0x3A	; 58
    28cc:	08 f0       	brcs	.+2      	; 0x28d0 <__ftoa_engine+0x180>
    28ce:	70 e3       	ldi	r23, 0x30	; 48
    28d0:	7c 93       	st	X, r23
    28d2:	20 13       	cpse	r18, r16
    28d4:	b8 f7       	brcc	.-18     	; 0x28c4 <__ftoa_engine+0x174>
    28d6:	7e 91       	ld	r23, -X
    28d8:	70 61       	ori	r23, 0x10	; 16
    28da:	7d 93       	st	X+, r23
    28dc:	30 f0       	brcs	.+12     	; 0x28ea <__ftoa_engine+0x19a>
    28de:	83 95       	inc	r24
    28e0:	71 e3       	ldi	r23, 0x31	; 49
    28e2:	7d 93       	st	X+, r23
    28e4:	70 e3       	ldi	r23, 0x30	; 48
    28e6:	2a 95       	dec	r18
    28e8:	e1 f7       	brne	.-8      	; 0x28e2 <__ftoa_engine+0x192>
    28ea:	11 24       	eor	r1, r1
    28ec:	ef 90       	pop	r14
    28ee:	ff 90       	pop	r15
    28f0:	0f 91       	pop	r16
    28f2:	1f 91       	pop	r17
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	99 27       	eor	r25, r25
    28fa:	87 fd       	sbrc	r24, 7
    28fc:	90 95       	com	r25
    28fe:	08 95       	ret

00002900 <__eerd_block_m324pa>:
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22

00002904 <__eerd_blraw_m324pa>:
    2904:	fc 01       	movw	r30, r24
    2906:	f9 99       	sbic	0x1f, 1	; 31
    2908:	fe cf       	rjmp	.-4      	; 0x2906 <__eerd_blraw_m324pa+0x2>
    290a:	06 c0       	rjmp	.+12     	; 0x2918 <__eerd_blraw_m324pa+0x14>
    290c:	f2 bd       	out	0x22, r31	; 34
    290e:	e1 bd       	out	0x21, r30	; 33
    2910:	f8 9a       	sbi	0x1f, 0	; 31
    2912:	31 96       	adiw	r30, 0x01	; 1
    2914:	00 b4       	in	r0, 0x20	; 32
    2916:	0d 92       	st	X+, r0
    2918:	41 50       	subi	r20, 0x01	; 1
    291a:	50 40       	sbci	r21, 0x00	; 0
    291c:	b8 f7       	brcc	.-18     	; 0x290c <__eerd_blraw_m324pa+0x8>
    291e:	08 95       	ret

00002920 <__prologue_saves__>:
    2920:	2f 92       	push	r2
    2922:	3f 92       	push	r3
    2924:	4f 92       	push	r4
    2926:	5f 92       	push	r5
    2928:	6f 92       	push	r6
    292a:	7f 92       	push	r7
    292c:	8f 92       	push	r8
    292e:	9f 92       	push	r9
    2930:	af 92       	push	r10
    2932:	bf 92       	push	r11
    2934:	cf 92       	push	r12
    2936:	df 92       	push	r13
    2938:	ef 92       	push	r14
    293a:	ff 92       	push	r15
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	ca 1b       	sub	r28, r26
    294a:	db 0b       	sbc	r29, r27
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	09 94       	ijmp

00002958 <__epilogue_restores__>:
    2958:	2a 88       	ldd	r2, Y+18	; 0x12
    295a:	39 88       	ldd	r3, Y+17	; 0x11
    295c:	48 88       	ldd	r4, Y+16	; 0x10
    295e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2960:	6e 84       	ldd	r6, Y+14	; 0x0e
    2962:	7d 84       	ldd	r7, Y+13	; 0x0d
    2964:	8c 84       	ldd	r8, Y+12	; 0x0c
    2966:	9b 84       	ldd	r9, Y+11	; 0x0b
    2968:	aa 84       	ldd	r10, Y+10	; 0x0a
    296a:	b9 84       	ldd	r11, Y+9	; 0x09
    296c:	c8 84       	ldd	r12, Y+8	; 0x08
    296e:	df 80       	ldd	r13, Y+7	; 0x07
    2970:	ee 80       	ldd	r14, Y+6	; 0x06
    2972:	fd 80       	ldd	r15, Y+5	; 0x05
    2974:	0c 81       	ldd	r16, Y+4	; 0x04
    2976:	1b 81       	ldd	r17, Y+3	; 0x03
    2978:	aa 81       	ldd	r26, Y+2	; 0x02
    297a:	b9 81       	ldd	r27, Y+1	; 0x01
    297c:	ce 0f       	add	r28, r30
    297e:	d1 1d       	adc	r29, r1
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	de bf       	out	0x3e, r29	; 62
    2986:	0f be       	out	0x3f, r0	; 63
    2988:	cd bf       	out	0x3d, r28	; 61
    298a:	ed 01       	movw	r28, r26
    298c:	08 95       	ret

0000298e <_exit>:
    298e:	f8 94       	cli

00002990 <__stop_program>:
    2990:	ff cf       	rjmp	.-2      	; 0x2990 <__stop_program>

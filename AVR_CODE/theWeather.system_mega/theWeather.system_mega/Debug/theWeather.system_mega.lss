
theWeather.system_mega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  00003210  000032c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003210  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  00800172  00800172  00003336  2**0
                  ALLOC
  3 .eeprom       00000002  00810000  00810000  00003336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .stab         000037ec  00000000  00000000  00003338  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000cd6  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000180  00000000  00000000  00007800  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001dad  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004f7  00000000  00000000  0000972d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000d45  00000000  00000000  00009c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000840  00000000  00000000  0000a96c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b28  00000000  00000000  0000b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001585  00000000  00000000  0000bcd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000020  00000000  00000000  0000d259  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bc 00 	jmp	0x178	; 0x178 <__ctors_end>
       4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
       c:	0c 94 fb 0b 	jmp	0x17f6	; 0x17f6 <__vector_3>
      10:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      14:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      18:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      20:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      24:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      28:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      2c:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_11>
      30:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      38:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      3c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      48:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      4c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      50:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      54:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      58:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      5c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      60:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      64:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      68:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      6c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      70:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      74:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      78:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__bad_interrupt>
      7c:	00 40       	sbci	r16, 0x00	; 0
      7e:	7a 10       	cpse	r7, r10
      80:	f3 5a       	subi	r31, 0xA3	; 163
      82:	00 a0       	lds	r16, 0x00
      84:	72 4e       	sbci	r23, 0xE2	; 226
      86:	18 09       	sbc	r17, r8
      88:	00 10       	cpse	r0, r0
      8a:	a5 d4       	rcall	.+2378   	; 0x9d6 <_ZN5clockC1Ev+0x10>
      8c:	e8 00       	.word	0x00e8	; ????
      8e:	00 e8       	ldi	r16, 0x80	; 128
      90:	76 48       	sbci	r23, 0x86	; 134
      92:	17 00       	.word	0x0017	; ????
      94:	00 e4       	ldi	r16, 0x40	; 64
      96:	0b 54       	subi	r16, 0x4B	; 75
      98:	02 00       	.word	0x0002	; ????
      9a:	00 ca       	rjmp	.-3072   	; 0xfffff49c <__eeprom_end+0xff7ef49a>
      9c:	9a 3b       	cpi	r25, 0xBA	; 186
      9e:	00 00       	nop
      a0:	00 e1       	ldi	r16, 0x10	; 16
      a2:	f5 05       	cpc	r31, r5
      a4:	00 00       	nop
      a6:	80 96       	adiw	r24, 0x20	; 32
      a8:	98 00       	.word	0x0098	; ????
      aa:	00 00       	nop
      ac:	40 42       	sbci	r20, 0x20	; 32
      ae:	0f 00       	.word	0x000f	; ????
      b0:	00 00       	nop
      b2:	a0 86       	std	Z+8, r10	; 0x08
      b4:	01 00       	.word	0x0001	; ????
      b6:	00 00       	nop
      b8:	10 27       	eor	r17, r16
      ba:	00 00       	nop
      bc:	00 00       	nop
      be:	e8 03       	fmulsu	r22, r16
      c0:	00 00       	nop
      c2:	00 00       	nop
      c4:	64 00       	.word	0x0064	; ????
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	0a 00       	.word	0x000a	; ????
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	01 00       	.word	0x0001	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	2c 76       	andi	r18, 0x6C	; 108
      d8:	d8 88       	ldd	r13, Y+16	; 0x10
      da:	dc 67       	ori	r29, 0x7C	; 124
      dc:	4f 08       	sbc	r4, r15
      de:	23 df       	rcall	.-442    	; 0xffffff26 <__eeprom_end+0xff7eff24>
      e0:	c1 df       	rcall	.-126    	; 0x64 <__SREG__+0x25>
      e2:	ae 59       	subi	r26, 0x9E	; 158
      e4:	e1 b1       	in	r30, 0x01	; 1
      e6:	b7 96       	adiw	r30, 0x27	; 39
      e8:	e5 e3       	ldi	r30, 0x35	; 53
      ea:	e4 53       	subi	r30, 0x34	; 52
      ec:	c6 3a       	cpi	r28, 0xA6	; 166
      ee:	e6 51       	subi	r30, 0x16	; 22
      f0:	99 76       	andi	r25, 0x69	; 105
      f2:	96 e8       	ldi	r25, 0x86	; 134
      f4:	e6 c2       	rjmp	.+1484   	; 0x6c2 <_ZN10thermostat9PrintWeekEv+0x136>
      f6:	84 26       	eor	r8, r20
      f8:	eb 89       	ldd	r30, Y+19	; 0x13
      fa:	8c 9b       	sbis	0x11, 4	; 17
      fc:	62 ed       	ldi	r22, 0xD2	; 210
      fe:	40 7c       	andi	r20, 0xC0	; 192
     100:	6f fc       	.word	0xfc6f	; ????
     102:	ef bc       	out	0x2f, r14	; 47
     104:	9c 9f       	mul	r25, r28
     106:	40 f2       	brcs	.-112    	; 0x98 <__SREG__+0x59>
     108:	ba a5       	lds	r27, 0x6a
     10a:	6f a5       	lds	r22, 0x6f
     10c:	f4 90       	lpm	r15, Z
     10e:	05 5a       	subi	r16, 0xA5	; 165
     110:	2a f7       	brpl	.-54     	; 0xdc <__SREG__+0x9d>
     112:	5c 93       	st	X, r21
     114:	6b 6c       	ori	r22, 0xCB	; 203
     116:	f9 67       	ori	r31, 0x79	; 121
     118:	6d c1       	rjmp	.+730    	; 0x3f4 <_ZN10thermostat9addTheDayEv+0xfc>
     11a:	1b fc       	.word	0xfc1b	; ????
     11c:	e0 e4       	ldi	r30, 0x40	; 64
     11e:	0d 47       	sbci	r16, 0x7D	; 125
     120:	fe f5       	brtc	.+126    	; 0x1a0 <__do_clear_bss+0x6>
     122:	20 e6       	ldi	r18, 0x60	; 96
     124:	b5 00       	.word	0x00b5	; ????
     126:	d0 ed       	ldi	r29, 0xD0	; 208
     128:	90 2e       	mov	r9, r16
     12a:	03 00       	.word	0x0003	; ????
     12c:	94 35       	cpi	r25, 0x54	; 84
     12e:	77 05       	cpc	r23, r7
     130:	00 80       	ld	r0, Z
     132:	84 1e       	adc	r8, r20
     134:	08 00       	.word	0x0008	; ????
     136:	00 20       	and	r0, r0
     138:	4e 0a       	sbc	r4, r30
     13a:	00 00       	nop
     13c:	00 c8       	rjmp	.-4096   	; 0xfffff13e <__eeprom_end+0xff7ef13c>
     13e:	0c 33       	cpi	r16, 0x3C	; 60
     140:	33 33       	cpi	r19, 0x33	; 51
     142:	33 0f       	add	r19, r19
     144:	98 6e       	ori	r25, 0xE8	; 232
     146:	12 83       	std	Z+2, r17	; 0x02
     148:	11 41       	sbci	r17, 0x11	; 17
     14a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     14c:	21 14       	cp	r2, r1
     14e:	89 3b       	cpi	r24, 0xB9	; 185
     150:	e6 55       	subi	r30, 0x56	; 86
     152:	16 cf       	rjmp	.-468    	; 0xffffff80 <__eeprom_end+0xff7eff7e>
     154:	fe e6       	ldi	r31, 0x6E	; 110
     156:	db 18       	sub	r13, r11
     158:	d1 84       	ldd	r13, Z+9	; 0x09
     15a:	4b 38       	cpi	r20, 0x8B	; 139
     15c:	1b f7       	brvc	.-58     	; 0x124 <__SREG__+0xe5>
     15e:	7c 1d       	adc	r23, r12
     160:	90 1d       	adc	r25, r0
     162:	a4 bb       	out	0x14, r26	; 20
     164:	e4 24       	eor	r14, r4
     166:	20 32       	cpi	r18, 0x20	; 32
     168:	84 72       	andi	r24, 0x24	; 36
     16a:	5e 22       	and	r5, r30
     16c:	81 00       	.word	0x0081	; ????
     16e:	c9 f1       	breq	.+114    	; 0x1e2 <_ZN10thermostatC1Ev+0x16>
     170:	24 ec       	ldi	r18, 0xC4	; 196
     172:	a1 e5       	ldi	r26, 0x51	; 81
     174:	3d 27       	eor	r19, r29

00000176 <__ctors_start>:
     176:	80 13       	cpse	r24, r16

00000178 <__ctors_end>:
     178:	11 24       	eor	r1, r1
     17a:	1f be       	out	0x3f, r1	; 63
     17c:	cf ef       	ldi	r28, 0xFF	; 255
     17e:	d8 e0       	ldi	r29, 0x08	; 8
     180:	de bf       	out	0x3e, r29	; 62
     182:	cd bf       	out	0x3d, r28	; 61

00000184 <__do_copy_data>:
     184:	11 e0       	ldi	r17, 0x01	; 1
     186:	a0 e0       	ldi	r26, 0x00	; 0
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	e0 e1       	ldi	r30, 0x10	; 16
     18c:	f2 e3       	ldi	r31, 0x32	; 50
     18e:	02 c0       	rjmp	.+4      	; 0x194 <__do_copy_data+0x10>
     190:	05 90       	lpm	r0, Z+
     192:	0d 92       	st	X+, r0
     194:	a2 37       	cpi	r26, 0x72	; 114
     196:	b1 07       	cpc	r27, r17
     198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0xc>

0000019a <__do_clear_bss>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a2 e7       	ldi	r26, 0x72	; 114
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a7 3a       	cpi	r26, 0xA7	; 167
     1a6:	b1 07       	cpc	r27, r17
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>

000001aa <__do_global_ctors>:
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	c8 e7       	ldi	r28, 0x78	; 120
     1ae:	d1 e0       	ldi	r29, 0x01	; 1
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <__do_global_ctors+0x10>
     1b2:	22 97       	sbiw	r28, 0x02	; 2
     1b4:	fe 01       	movw	r30, r28
     1b6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__tablejump__>
     1ba:	c6 37       	cpi	r28, 0x76	; 118
     1bc:	d1 07       	cpc	r29, r17
     1be:	c9 f7       	brne	.-14     	; 0x1b2 <__do_global_ctors+0x8>
     1c0:	0e 94 c7 0c 	call	0x198e	; 0x198e <main>
     1c4:	0c 94 06 19 	jmp	0x320c	; 0x320c <_exit>

000001c8 <__bad_interrupt>:
     1c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001cc <_ZN10thermostatC1Ev>:
		double weekHigh,weekLow,weekAverageT,weekAverageH;
		WORD numDayReadings;
		BYTE howManyDays;
};

thermostat::thermostat(){
     1cc:	cf 93       	push	r28
     1ce:	df 93       	push	r29
     1d0:	00 d0       	rcall	.+0      	; 0x1d2 <_ZN10thermostatC1Ev+0x6>
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
     1d6:	9a 83       	std	Y+2, r25	; 0x02
     1d8:	89 83       	std	Y+1, r24	; 0x01
	reset();
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	9a 81       	ldd	r25, Y+2	; 0x02
     1de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN10thermostat5resetEv>
}
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	df 91       	pop	r29
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <_ZN10thermostat5resetEv>:

void thermostat::reset(){
     1ec:	cf 93       	push	r28
     1ee:	df 93       	push	r29
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_ZN10thermostat5resetEv+0x6>
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
     1f6:	9a 83       	std	Y+2, r25	; 0x02
     1f8:	89 83       	std	Y+1, r24	; 0x01
	resetDay();
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	9a 81       	ldd	r25, Y+2	; 0x02
     1fe:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10thermostat8resetDayEv>
	resetWeek();
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	9a 81       	ldd	r25, Y+2	; 0x02
     206:	0e 94 44 01 	call	0x288	; 0x288 <_ZN10thermostat9resetWeekEv>
}
     20a:	0f 90       	pop	r0
     20c:	0f 90       	pop	r0
     20e:	df 91       	pop	r29
     210:	cf 91       	pop	r28
     212:	08 95       	ret

00000214 <_ZN10thermostat8resetDayEv>:

void thermostat::resetDay(){
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	00 d0       	rcall	.+0      	; 0x21a <_ZN10thermostat8resetDayEv+0x6>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9a 83       	std	Y+2, r25	; 0x02
     220:	89 83       	std	Y+1, r24	; 0x01
	high=0.0;
     222:	29 81       	ldd	r18, Y+1	; 0x01
     224:	3a 81       	ldd	r19, Y+2	; 0x02
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	dc 01       	movw	r26, r24
     22c:	f9 01       	movw	r30, r18
     22e:	80 83       	st	Z, r24
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	a2 83       	std	Z+2, r26	; 0x02
     234:	b3 83       	std	Z+3, r27	; 0x03
	low=1000.0;
     236:	29 81       	ldd	r18, Y+1	; 0x01
     238:	3a 81       	ldd	r19, Y+2	; 0x02
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	aa e7       	ldi	r26, 0x7A	; 122
     240:	b4 e4       	ldi	r27, 0x44	; 68
     242:	f9 01       	movw	r30, r18
     244:	84 83       	std	Z+4, r24	; 0x04
     246:	95 83       	std	Z+5, r25	; 0x05
     248:	a6 83       	std	Z+6, r26	; 0x06
     24a:	b7 83       	std	Z+7, r27	; 0x07
	averageT=0.0;
     24c:	29 81       	ldd	r18, Y+1	; 0x01
     24e:	3a 81       	ldd	r19, Y+2	; 0x02
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	dc 01       	movw	r26, r24
     256:	f9 01       	movw	r30, r18
     258:	80 87       	std	Z+8, r24	; 0x08
     25a:	91 87       	std	Z+9, r25	; 0x09
     25c:	a2 87       	std	Z+10, r26	; 0x0a
     25e:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=0.0;
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	3a 81       	ldd	r19, Y+2	; 0x02
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	dc 01       	movw	r26, r24
     26a:	f9 01       	movw	r30, r18
     26c:	84 87       	std	Z+12, r24	; 0x0c
     26e:	95 87       	std	Z+13, r25	; 0x0d
     270:	a6 87       	std	Z+14, r26	; 0x0e
     272:	b7 87       	std	Z+15, r27	; 0x0f
	numDayReadings=0;	
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	9a 81       	ldd	r25, Y+2	; 0x02
     278:	fc 01       	movw	r30, r24
     27a:	11 a2       	lds	r17, 0x91
     27c:	10 a2       	lds	r17, 0x90
}
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <_ZN10thermostat9resetWeekEv>:

void thermostat::resetWeek(){
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	00 d0       	rcall	.+0      	; 0x28e <_ZN10thermostat9resetWeekEv+0x6>
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	9a 83       	std	Y+2, r25	; 0x02
     294:	89 83       	std	Y+1, r24	; 0x01
	howManyDays=0;
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	12 a2       	lds	r17, 0x92
	weekHigh=0;
     29e:	29 81       	ldd	r18, Y+1	; 0x01
     2a0:	3a 81       	ldd	r19, Y+2	; 0x02
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	dc 01       	movw	r26, r24
     2a8:	f9 01       	movw	r30, r18
     2aa:	80 8b       	std	Z+16, r24	; 0x10
     2ac:	91 8b       	std	Z+17, r25	; 0x11
     2ae:	a2 8b       	std	Z+18, r26	; 0x12
     2b0:	b3 8b       	std	Z+19, r27	; 0x13
	weekLow=0;
     2b2:	29 81       	ldd	r18, Y+1	; 0x01
     2b4:	3a 81       	ldd	r19, Y+2	; 0x02
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	dc 01       	movw	r26, r24
     2bc:	f9 01       	movw	r30, r18
     2be:	84 8b       	std	Z+20, r24	; 0x14
     2c0:	95 8b       	std	Z+21, r25	; 0x15
     2c2:	a6 8b       	std	Z+22, r26	; 0x16
     2c4:	b7 8b       	std	Z+23, r27	; 0x17
	weekAverageH=0;
     2c6:	29 81       	ldd	r18, Y+1	; 0x01
     2c8:	3a 81       	ldd	r19, Y+2	; 0x02
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	dc 01       	movw	r26, r24
     2d0:	f9 01       	movw	r30, r18
     2d2:	84 8f       	std	Z+28, r24	; 0x1c
     2d4:	95 8f       	std	Z+29, r25	; 0x1d
     2d6:	a6 8f       	std	Z+30, r26	; 0x1e
     2d8:	b7 8f       	std	Z+31, r27	; 0x1f
	weekAverageT=0;	
     2da:	29 81       	ldd	r18, Y+1	; 0x01
     2dc:	3a 81       	ldd	r19, Y+2	; 0x02
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	dc 01       	movw	r26, r24
     2e4:	f9 01       	movw	r30, r18
     2e6:	80 8f       	std	Z+24, r24	; 0x18
     2e8:	91 8f       	std	Z+25, r25	; 0x19
     2ea:	a2 8f       	std	Z+26, r26	; 0x1a
     2ec:	b3 8f       	std	Z+27, r27	; 0x1b
}
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	df 91       	pop	r29
     2f4:	cf 91       	pop	r28
     2f6:	08 95       	ret

000002f8 <_ZN10thermostat9addTheDayEv>:

void thermostat::addTheDay(){
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	00 d0       	rcall	.+0      	; 0x306 <_ZN10thermostat9addTheDayEv+0xe>
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	9a 83       	std	Y+2, r25	; 0x02
     30c:	89 83       	std	Y+1, r24	; 0x01
	//Add this day to the average of things
	howManyDays++;
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	9a 81       	ldd	r25, Y+2	; 0x02
     312:	fc 01       	movw	r30, r24
     314:	82 a1       	lds	r24, 0x42
     316:	28 2f       	mov	r18, r24
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	9a 81       	ldd	r25, Y+2	; 0x02
     31e:	fc 01       	movw	r30, r24
     320:	22 a3       	lds	r18, 0x52
	weekHigh=(weekHigh*(howManyDays-1) + high)/howManyDays;
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	9a 81       	ldd	r25, Y+2	; 0x02
     326:	fc 01       	movw	r30, r24
     328:	e0 88       	ldd	r14, Z+16	; 0x10
     32a:	f1 88       	ldd	r15, Z+17	; 0x11
     32c:	02 89       	ldd	r16, Z+18	; 0x12
     32e:	13 89       	ldd	r17, Z+19	; 0x13
     330:	89 81       	ldd	r24, Y+1	; 0x01
     332:	9a 81       	ldd	r25, Y+2	; 0x02
     334:	fc 01       	movw	r30, r24
     336:	82 a1       	lds	r24, 0x42
     338:	88 2f       	mov	r24, r24
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	bc 01       	movw	r22, r24
     348:	cd 01       	movw	r24, r26
     34a:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     34e:	9b 01       	movw	r18, r22
     350:	ac 01       	movw	r20, r24
     352:	c8 01       	movw	r24, r16
     354:	b7 01       	movw	r22, r14
     356:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     35a:	dc 01       	movw	r26, r24
     35c:	cb 01       	movw	r24, r22
     35e:	29 81       	ldd	r18, Y+1	; 0x01
     360:	3a 81       	ldd	r19, Y+2	; 0x02
     362:	f9 01       	movw	r30, r18
     364:	20 81       	ld	r18, Z
     366:	31 81       	ldd	r19, Z+1	; 0x01
     368:	42 81       	ldd	r20, Z+2	; 0x02
     36a:	53 81       	ldd	r21, Z+3	; 0x03
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     374:	dc 01       	movw	r26, r24
     376:	cb 01       	movw	r24, r22
     378:	7c 01       	movw	r14, r24
     37a:	8d 01       	movw	r16, r26
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	9a 81       	ldd	r25, Y+2	; 0x02
     380:	fc 01       	movw	r30, r24
     382:	82 a1       	lds	r24, 0x42
     384:	88 2f       	mov	r24, r24
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	aa 27       	eor	r26, r26
     38a:	97 fd       	sbrc	r25, 7
     38c:	a0 95       	com	r26
     38e:	ba 2f       	mov	r27, r26
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	c8 01       	movw	r24, r16
     39e:	b7 01       	movw	r22, r14
     3a0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	f9 01       	movw	r30, r18
     3ae:	80 8b       	std	Z+16, r24	; 0x10
     3b0:	91 8b       	std	Z+17, r25	; 0x11
     3b2:	a2 8b       	std	Z+18, r26	; 0x12
     3b4:	b3 8b       	std	Z+19, r27	; 0x13
	weekLow=(weekLow*(howManyDays-1)+low)/howManyDays;
     3b6:	89 81       	ldd	r24, Y+1	; 0x01
     3b8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ba:	fc 01       	movw	r30, r24
     3bc:	e4 88       	ldd	r14, Z+20	; 0x14
     3be:	f5 88       	ldd	r15, Z+21	; 0x15
     3c0:	06 89       	ldd	r16, Z+22	; 0x16
     3c2:	17 89       	ldd	r17, Z+23	; 0x17
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	fc 01       	movw	r30, r24
     3ca:	82 a1       	lds	r24, 0x42
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	aa 27       	eor	r26, r26
     3d4:	97 fd       	sbrc	r25, 7
     3d6:	a0 95       	com	r26
     3d8:	ba 2f       	mov	r27, r26
     3da:	bc 01       	movw	r22, r24
     3dc:	cd 01       	movw	r24, r26
     3de:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     3e2:	9b 01       	movw	r18, r22
     3e4:	ac 01       	movw	r20, r24
     3e6:	c8 01       	movw	r24, r16
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     3ee:	dc 01       	movw	r26, r24
     3f0:	cb 01       	movw	r24, r22
     3f2:	29 81       	ldd	r18, Y+1	; 0x01
     3f4:	3a 81       	ldd	r19, Y+2	; 0x02
     3f6:	f9 01       	movw	r30, r18
     3f8:	24 81       	ldd	r18, Z+4	; 0x04
     3fa:	35 81       	ldd	r19, Z+5	; 0x05
     3fc:	46 81       	ldd	r20, Z+6	; 0x06
     3fe:	57 81       	ldd	r21, Z+7	; 0x07
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	7c 01       	movw	r14, r24
     40e:	8d 01       	movw	r16, r26
     410:	89 81       	ldd	r24, Y+1	; 0x01
     412:	9a 81       	ldd	r25, Y+2	; 0x02
     414:	fc 01       	movw	r30, r24
     416:	82 a1       	lds	r24, 0x42
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	aa 27       	eor	r26, r26
     41e:	97 fd       	sbrc	r25, 7
     420:	a0 95       	com	r26
     422:	ba 2f       	mov	r27, r26
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     42c:	9b 01       	movw	r18, r22
     42e:	ac 01       	movw	r20, r24
     430:	c8 01       	movw	r24, r16
     432:	b7 01       	movw	r22, r14
     434:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     438:	dc 01       	movw	r26, r24
     43a:	cb 01       	movw	r24, r22
     43c:	29 81       	ldd	r18, Y+1	; 0x01
     43e:	3a 81       	ldd	r19, Y+2	; 0x02
     440:	f9 01       	movw	r30, r18
     442:	84 8b       	std	Z+20, r24	; 0x14
     444:	95 8b       	std	Z+21, r25	; 0x15
     446:	a6 8b       	std	Z+22, r26	; 0x16
     448:	b7 8b       	std	Z+23, r27	; 0x17
	weekAverageH=(weekAverageH*(howManyDays-1)+averageH)/howManyDays;
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	9a 81       	ldd	r25, Y+2	; 0x02
     44e:	fc 01       	movw	r30, r24
     450:	e4 8c       	ldd	r14, Z+28	; 0x1c
     452:	f5 8c       	ldd	r15, Z+29	; 0x1d
     454:	06 8d       	ldd	r16, Z+30	; 0x1e
     456:	17 8d       	ldd	r17, Z+31	; 0x1f
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	fc 01       	movw	r30, r24
     45e:	82 a1       	lds	r24, 0x42
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	01 97       	sbiw	r24, 0x01	; 1
     466:	aa 27       	eor	r26, r26
     468:	97 fd       	sbrc	r25, 7
     46a:	a0 95       	com	r26
     46c:	ba 2f       	mov	r27, r26
     46e:	bc 01       	movw	r22, r24
     470:	cd 01       	movw	r24, r26
     472:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     476:	9b 01       	movw	r18, r22
     478:	ac 01       	movw	r20, r24
     47a:	c8 01       	movw	r24, r16
     47c:	b7 01       	movw	r22, r14
     47e:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	29 81       	ldd	r18, Y+1	; 0x01
     488:	3a 81       	ldd	r19, Y+2	; 0x02
     48a:	f9 01       	movw	r30, r18
     48c:	24 85       	ldd	r18, Z+12	; 0x0c
     48e:	35 85       	ldd	r19, Z+13	; 0x0d
     490:	46 85       	ldd	r20, Z+14	; 0x0e
     492:	57 85       	ldd	r21, Z+15	; 0x0f
     494:	bc 01       	movw	r22, r24
     496:	cd 01       	movw	r24, r26
     498:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	7c 01       	movw	r14, r24
     4a2:	8d 01       	movw	r16, r26
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	fc 01       	movw	r30, r24
     4aa:	82 a1       	lds	r24, 0x42
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	aa 27       	eor	r26, r26
     4b2:	97 fd       	sbrc	r25, 7
     4b4:	a0 95       	com	r26
     4b6:	ba 2f       	mov	r27, r26
     4b8:	bc 01       	movw	r22, r24
     4ba:	cd 01       	movw	r24, r26
     4bc:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     4c0:	9b 01       	movw	r18, r22
     4c2:	ac 01       	movw	r20, r24
     4c4:	c8 01       	movw	r24, r16
     4c6:	b7 01       	movw	r22, r14
     4c8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     4cc:	dc 01       	movw	r26, r24
     4ce:	cb 01       	movw	r24, r22
     4d0:	29 81       	ldd	r18, Y+1	; 0x01
     4d2:	3a 81       	ldd	r19, Y+2	; 0x02
     4d4:	f9 01       	movw	r30, r18
     4d6:	84 8f       	std	Z+28, r24	; 0x1c
     4d8:	95 8f       	std	Z+29, r25	; 0x1d
     4da:	a6 8f       	std	Z+30, r26	; 0x1e
     4dc:	b7 8f       	std	Z+31, r27	; 0x1f
	weekAverageT=(weekAverageT*(howManyDays-1)+averageT)/howManyDays;
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	fc 01       	movw	r30, r24
     4e4:	e0 8c       	ldd	r14, Z+24	; 0x18
     4e6:	f1 8c       	ldd	r15, Z+25	; 0x19
     4e8:	02 8d       	ldd	r16, Z+26	; 0x1a
     4ea:	13 8d       	ldd	r17, Z+27	; 0x1b
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	fc 01       	movw	r30, r24
     4f2:	82 a1       	lds	r24, 0x42
     4f4:	88 2f       	mov	r24, r24
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	aa 27       	eor	r26, r26
     4fc:	97 fd       	sbrc	r25, 7
     4fe:	a0 95       	com	r26
     500:	ba 2f       	mov	r27, r26
     502:	bc 01       	movw	r22, r24
     504:	cd 01       	movw	r24, r26
     506:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     50a:	9b 01       	movw	r18, r22
     50c:	ac 01       	movw	r20, r24
     50e:	c8 01       	movw	r24, r16
     510:	b7 01       	movw	r22, r14
     512:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     516:	dc 01       	movw	r26, r24
     518:	cb 01       	movw	r24, r22
     51a:	29 81       	ldd	r18, Y+1	; 0x01
     51c:	3a 81       	ldd	r19, Y+2	; 0x02
     51e:	f9 01       	movw	r30, r18
     520:	20 85       	ldd	r18, Z+8	; 0x08
     522:	31 85       	ldd	r19, Z+9	; 0x09
     524:	42 85       	ldd	r20, Z+10	; 0x0a
     526:	53 85       	ldd	r21, Z+11	; 0x0b
     528:	bc 01       	movw	r22, r24
     52a:	cd 01       	movw	r24, r26
     52c:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	7c 01       	movw	r14, r24
     536:	8d 01       	movw	r16, r26
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	fc 01       	movw	r30, r24
     53e:	82 a1       	lds	r24, 0x42
     540:	88 2f       	mov	r24, r24
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	aa 27       	eor	r26, r26
     546:	97 fd       	sbrc	r25, 7
     548:	a0 95       	com	r26
     54a:	ba 2f       	mov	r27, r26
     54c:	bc 01       	movw	r22, r24
     54e:	cd 01       	movw	r24, r26
     550:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	c8 01       	movw	r24, r16
     55a:	b7 01       	movw	r22, r14
     55c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	29 81       	ldd	r18, Y+1	; 0x01
     566:	3a 81       	ldd	r19, Y+2	; 0x02
     568:	f9 01       	movw	r30, r18
     56a:	80 8f       	std	Z+24, r24	; 0x18
     56c:	91 8f       	std	Z+25, r25	; 0x19
     56e:	a2 8f       	std	Z+26, r26	; 0x1a
     570:	b3 8f       	std	Z+27, r27	; 0x1b
	resetDay();
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	0e 94 0a 01 	call	0x214	; 0x214 <_ZN10thermostat8resetDayEv>
}
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	1f 91       	pop	r17
     584:	0f 91       	pop	r16
     586:	ff 90       	pop	r15
     588:	ef 90       	pop	r14
     58a:	08 95       	ret

0000058c <_ZN10thermostat9PrintWeekEv>:

void thermostat::PrintWeek(){
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	6a 97       	sbiw	r28, 0x1a	; 26
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	9a 8f       	std	Y+26, r25	; 0x1a
     5a6:	89 8f       	std	Y+25, r24	; 0x19
	if (howManyDays==0){
     5a8:	89 8d       	ldd	r24, Y+25	; 0x19
     5aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ac:	fc 01       	movw	r30, r24
     5ae:	82 a1       	lds	r24, 0x42
     5b0:	88 23       	and	r24, r24
     5b2:	c1 f5       	brne	.+112    	; 0x624 <_ZN10thermostat9PrintWeekEv+0x98>
		weekAverageT=averageT;
     5b4:	89 8d       	ldd	r24, Y+25	; 0x19
     5b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5b8:	fc 01       	movw	r30, r24
     5ba:	80 85       	ldd	r24, Z+8	; 0x08
     5bc:	91 85       	ldd	r25, Z+9	; 0x09
     5be:	a2 85       	ldd	r26, Z+10	; 0x0a
     5c0:	b3 85       	ldd	r27, Z+11	; 0x0b
     5c2:	29 8d       	ldd	r18, Y+25	; 0x19
     5c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5c6:	f9 01       	movw	r30, r18
     5c8:	80 8f       	std	Z+24, r24	; 0x18
     5ca:	91 8f       	std	Z+25, r25	; 0x19
     5cc:	a2 8f       	std	Z+26, r26	; 0x1a
     5ce:	b3 8f       	std	Z+27, r27	; 0x1b
		weekAverageH=averageH;
     5d0:	89 8d       	ldd	r24, Y+25	; 0x19
     5d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5d4:	fc 01       	movw	r30, r24
     5d6:	84 85       	ldd	r24, Z+12	; 0x0c
     5d8:	95 85       	ldd	r25, Z+13	; 0x0d
     5da:	a6 85       	ldd	r26, Z+14	; 0x0e
     5dc:	b7 85       	ldd	r27, Z+15	; 0x0f
     5de:	29 8d       	ldd	r18, Y+25	; 0x19
     5e0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5e2:	f9 01       	movw	r30, r18
     5e4:	84 8f       	std	Z+28, r24	; 0x1c
     5e6:	95 8f       	std	Z+29, r25	; 0x1d
     5e8:	a6 8f       	std	Z+30, r26	; 0x1e
     5ea:	b7 8f       	std	Z+31, r27	; 0x1f
		weekHigh=high;
     5ec:	89 8d       	ldd	r24, Y+25	; 0x19
     5ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	91 81       	ldd	r25, Z+1	; 0x01
     5f6:	a2 81       	ldd	r26, Z+2	; 0x02
     5f8:	b3 81       	ldd	r27, Z+3	; 0x03
     5fa:	29 8d       	ldd	r18, Y+25	; 0x19
     5fc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5fe:	f9 01       	movw	r30, r18
     600:	80 8b       	std	Z+16, r24	; 0x10
     602:	91 8b       	std	Z+17, r25	; 0x11
     604:	a2 8b       	std	Z+18, r26	; 0x12
     606:	b3 8b       	std	Z+19, r27	; 0x13
		weekLow=low;
     608:	89 8d       	ldd	r24, Y+25	; 0x19
     60a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     60c:	fc 01       	movw	r30, r24
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	95 81       	ldd	r25, Z+5	; 0x05
     612:	a6 81       	ldd	r26, Z+6	; 0x06
     614:	b7 81       	ldd	r27, Z+7	; 0x07
     616:	29 8d       	ldd	r18, Y+25	; 0x19
     618:	3a 8d       	ldd	r19, Y+26	; 0x1a
     61a:	f9 01       	movw	r30, r18
     61c:	84 8b       	std	Z+20, r24	; 0x14
     61e:	95 8b       	std	Z+21, r25	; 0x15
     620:	a6 8b       	std	Z+22, r26	; 0x16
     622:	b7 8b       	std	Z+23, r27	; 0x17
	}
	char weekHighStr[6],weekLowStr[6],weekAveHStr[6],weekAveTStr[6];
	dtostrf(weekHigh,0,2,weekHighStr);
     624:	89 8d       	ldd	r24, Y+25	; 0x19
     626:	9a 8d       	ldd	r25, Y+26	; 0x1a
     628:	fc 01       	movw	r30, r24
     62a:	80 89       	ldd	r24, Z+16	; 0x10
     62c:	91 89       	ldd	r25, Z+17	; 0x11
     62e:	a2 89       	ldd	r26, Z+18	; 0x12
     630:	b3 89       	ldd	r27, Z+19	; 0x13
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	22 e0       	ldi	r18, 0x02	; 2
     63a:	fe 01       	movw	r30, r28
     63c:	31 96       	adiw	r30, 0x01	; 1
     63e:	8f 01       	movw	r16, r30
     640:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
	dtostrf(weekLow,0,2,weekLowStr);
     644:	89 8d       	ldd	r24, Y+25	; 0x19
     646:	9a 8d       	ldd	r25, Y+26	; 0x1a
     648:	fc 01       	movw	r30, r24
     64a:	84 89       	ldd	r24, Z+20	; 0x14
     64c:	95 89       	ldd	r25, Z+21	; 0x15
     64e:	a6 89       	ldd	r26, Z+22	; 0x16
     650:	b7 89       	ldd	r27, Z+23	; 0x17
     652:	fe 01       	movw	r30, r28
     654:	37 96       	adiw	r30, 0x07	; 7
     656:	bc 01       	movw	r22, r24
     658:	cd 01       	movw	r24, r26
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	22 e0       	ldi	r18, 0x02	; 2
     65e:	8f 01       	movw	r16, r30
     660:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
	dtostrf(weekAverageH,0,2,weekAveHStr);
     664:	89 8d       	ldd	r24, Y+25	; 0x19
     666:	9a 8d       	ldd	r25, Y+26	; 0x1a
     668:	fc 01       	movw	r30, r24
     66a:	84 8d       	ldd	r24, Z+28	; 0x1c
     66c:	95 8d       	ldd	r25, Z+29	; 0x1d
     66e:	a6 8d       	ldd	r26, Z+30	; 0x1e
     670:	b7 8d       	ldd	r27, Z+31	; 0x1f
     672:	fe 01       	movw	r30, r28
     674:	3d 96       	adiw	r30, 0x0d	; 13
     676:	bc 01       	movw	r22, r24
     678:	cd 01       	movw	r24, r26
     67a:	40 e0       	ldi	r20, 0x00	; 0
     67c:	22 e0       	ldi	r18, 0x02	; 2
     67e:	8f 01       	movw	r16, r30
     680:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
	dtostrf(weekAverageT,0,2,weekAveTStr);
     684:	89 8d       	ldd	r24, Y+25	; 0x19
     686:	9a 8d       	ldd	r25, Y+26	; 0x1a
     688:	fc 01       	movw	r30, r24
     68a:	80 8d       	ldd	r24, Z+24	; 0x18
     68c:	91 8d       	ldd	r25, Z+25	; 0x19
     68e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     690:	b3 8d       	ldd	r27, Z+27	; 0x1b
     692:	fe 01       	movw	r30, r28
     694:	73 96       	adiw	r30, 0x13	; 19
     696:	bc 01       	movw	r22, r24
     698:	cd 01       	movw	r24, r26
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	22 e0       	ldi	r18, 0x02	; 2
     69e:	8f 01       	movw	r16, r30
     6a0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
	Print0("WH");
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0(weekHighStr);
     6ac:	ce 01       	movw	r24, r28
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0("/WL");
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0(weekLowStr);
     6bc:	ce 01       	movw	r24, r28
     6be:	07 96       	adiw	r24, 0x07	; 7
     6c0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0("/WT");
     6c4:	87 e0       	ldi	r24, 0x07	; 7
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0(weekAveTStr);
     6cc:	ce 01       	movw	r24, r28
     6ce:	43 96       	adiw	r24, 0x13	; 19
     6d0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0("/Wh");
     6d4:	8b e0       	ldi	r24, 0x0B	; 11
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0(weekAveHStr);
     6dc:	ce 01       	movw	r24, r28
     6de:	0d 96       	adiw	r24, 0x0d	; 13
     6e0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0("XXX");
     6e4:	8f e0       	ldi	r24, 0x0F	; 15
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	resetWeek();
     6ec:	89 8d       	ldd	r24, Y+25	; 0x19
     6ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6f0:	0e 94 44 01 	call	0x288	; 0x288 <_ZN10thermostat9resetWeekEv>
}
     6f4:	6a 96       	adiw	r28, 0x1a	; 26
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	0f 91       	pop	r16
     708:	08 95       	ret

0000070a <_ZN10thermostat12addDataPointEdd>:

void thermostat::addDataPoint(double temp, double humidity){
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	2a 97       	sbiw	r28, 0x0a	; 10
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
     72a:	4b 83       	std	Y+3, r20	; 0x03
     72c:	5c 83       	std	Y+4, r21	; 0x04
     72e:	6d 83       	std	Y+5, r22	; 0x05
     730:	7e 83       	std	Y+6, r23	; 0x06
     732:	0f 83       	std	Y+7, r16	; 0x07
     734:	18 87       	std	Y+8, r17	; 0x08
     736:	29 87       	std	Y+9, r18	; 0x09
     738:	3a 87       	std	Y+10, r19	; 0x0a
	numDayReadings++;
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	fc 01       	movw	r30, r24
     740:	80 a1       	lds	r24, 0x40
     742:	91 a1       	lds	r25, 0x41
     744:	9c 01       	movw	r18, r24
     746:	2f 5f       	subi	r18, 0xFF	; 255
     748:	3f 4f       	sbci	r19, 0xFF	; 255
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	fc 01       	movw	r30, r24
     750:	31 a3       	lds	r19, 0x51
     752:	20 a3       	lds	r18, 0x50
	averageT=(averageT*(numDayReadings-1)+temp)/numDayReadings;
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	9a 81       	ldd	r25, Y+2	; 0x02
     758:	fc 01       	movw	r30, r24
     75a:	e0 84       	ldd	r14, Z+8	; 0x08
     75c:	f1 84       	ldd	r15, Z+9	; 0x09
     75e:	02 85       	ldd	r16, Z+10	; 0x0a
     760:	13 85       	ldd	r17, Z+11	; 0x0b
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	9a 81       	ldd	r25, Y+2	; 0x02
     766:	fc 01       	movw	r30, r24
     768:	80 a1       	lds	r24, 0x40
     76a:	91 a1       	lds	r25, 0x41
     76c:	01 97       	sbiw	r24, 0x01	; 1
     76e:	cc 01       	movw	r24, r24
     770:	a0 e0       	ldi	r26, 0x00	; 0
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	bc 01       	movw	r22, r24
     776:	cd 01       	movw	r24, r26
     778:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
     780:	c8 01       	movw	r24, r16
     782:	b7 01       	movw	r22, r14
     784:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	bc 01       	movw	r22, r24
     78e:	cd 01       	movw	r24, r26
     790:	2b 81       	ldd	r18, Y+3	; 0x03
     792:	3c 81       	ldd	r19, Y+4	; 0x04
     794:	4d 81       	ldd	r20, Y+5	; 0x05
     796:	5e 81       	ldd	r21, Y+6	; 0x06
     798:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     79c:	dc 01       	movw	r26, r24
     79e:	cb 01       	movw	r24, r22
     7a0:	7c 01       	movw	r14, r24
     7a2:	8d 01       	movw	r16, r26
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	9a 81       	ldd	r25, Y+2	; 0x02
     7a8:	fc 01       	movw	r30, r24
     7aa:	80 a1       	lds	r24, 0x40
     7ac:	91 a1       	lds	r25, 0x41
     7ae:	cc 01       	movw	r24, r24
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	bc 01       	movw	r22, r24
     7b6:	cd 01       	movw	r24, r26
     7b8:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
     7c0:	c8 01       	movw	r24, r16
     7c2:	b7 01       	movw	r22, r14
     7c4:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	29 81       	ldd	r18, Y+1	; 0x01
     7ce:	3a 81       	ldd	r19, Y+2	; 0x02
     7d0:	f9 01       	movw	r30, r18
     7d2:	80 87       	std	Z+8, r24	; 0x08
     7d4:	91 87       	std	Z+9, r25	; 0x09
     7d6:	a2 87       	std	Z+10, r26	; 0x0a
     7d8:	b3 87       	std	Z+11, r27	; 0x0b
	averageH=(averageH*(numDayReadings-1)+humidity)/numDayReadings;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	e4 84       	ldd	r14, Z+12	; 0x0c
     7e2:	f5 84       	ldd	r15, Z+13	; 0x0d
     7e4:	06 85       	ldd	r16, Z+14	; 0x0e
     7e6:	17 85       	ldd	r17, Z+15	; 0x0f
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	9a 81       	ldd	r25, Y+2	; 0x02
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 a1       	lds	r24, 0x40
     7f0:	91 a1       	lds	r25, 0x41
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	cc 01       	movw	r24, r24
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	cd 01       	movw	r24, r26
     7fe:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	c8 01       	movw	r24, r16
     808:	b7 01       	movw	r22, r14
     80a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
     80e:	dc 01       	movw	r26, r24
     810:	cb 01       	movw	r24, r22
     812:	bc 01       	movw	r22, r24
     814:	cd 01       	movw	r24, r26
     816:	2f 81       	ldd	r18, Y+7	; 0x07
     818:	38 85       	ldd	r19, Y+8	; 0x08
     81a:	49 85       	ldd	r20, Y+9	; 0x09
     81c:	5a 85       	ldd	r21, Y+10	; 0x0a
     81e:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	7c 01       	movw	r14, r24
     828:	8d 01       	movw	r16, r26
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	fc 01       	movw	r30, r24
     830:	80 a1       	lds	r24, 0x40
     832:	91 a1       	lds	r25, 0x41
     834:	cc 01       	movw	r24, r24
     836:	a0 e0       	ldi	r26, 0x00	; 0
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	bc 01       	movw	r22, r24
     83c:	cd 01       	movw	r24, r26
     83e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c8 01       	movw	r24, r16
     848:	b7 01       	movw	r22, r14
     84a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	29 81       	ldd	r18, Y+1	; 0x01
     854:	3a 81       	ldd	r19, Y+2	; 0x02
     856:	f9 01       	movw	r30, r18
     858:	84 87       	std	Z+12, r24	; 0x0c
     85a:	95 87       	std	Z+13, r25	; 0x0d
     85c:	a6 87       	std	Z+14, r26	; 0x0e
     85e:	b7 87       	std	Z+15, r27	; 0x0f
	
	if (temp>high){
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	fc 01       	movw	r30, r24
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	a2 81       	ldd	r26, Z+2	; 0x02
     86c:	b3 81       	ldd	r27, Z+3	; 0x03
     86e:	11 e0       	ldi	r17, 0x01	; 1
     870:	bc 01       	movw	r22, r24
     872:	cd 01       	movw	r24, r26
     874:	2b 81       	ldd	r18, Y+3	; 0x03
     876:	3c 81       	ldd	r19, Y+4	; 0x04
     878:	4d 81       	ldd	r20, Y+5	; 0x05
     87a:	5e 81       	ldd	r21, Y+6	; 0x06
     87c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__cmpsf2>
     880:	88 23       	and	r24, r24
     882:	0c f0       	brlt	.+2      	; 0x886 <_ZN10thermostat12addDataPointEdd+0x17c>
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	11 23       	and	r17, r17
     888:	59 f0       	breq	.+22     	; 0x8a0 <_ZN10thermostat12addDataPointEdd+0x196>
		high=temp;
     88a:	29 81       	ldd	r18, Y+1	; 0x01
     88c:	3a 81       	ldd	r19, Y+2	; 0x02
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	9c 81       	ldd	r25, Y+4	; 0x04
     892:	ad 81       	ldd	r26, Y+5	; 0x05
     894:	be 81       	ldd	r27, Y+6	; 0x06
     896:	f9 01       	movw	r30, r18
     898:	80 83       	st	Z, r24
     89a:	91 83       	std	Z+1, r25	; 0x01
     89c:	a2 83       	std	Z+2, r26	; 0x02
     89e:	b3 83       	std	Z+3, r27	; 0x03
	}
	//Seperate if statements just in case it is a high and a low.
	if (temp<low){
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
     8a2:	9a 81       	ldd	r25, Y+2	; 0x02
     8a4:	fc 01       	movw	r30, r24
     8a6:	84 81       	ldd	r24, Z+4	; 0x04
     8a8:	95 81       	ldd	r25, Z+5	; 0x05
     8aa:	a6 81       	ldd	r26, Z+6	; 0x06
     8ac:	b7 81       	ldd	r27, Z+7	; 0x07
     8ae:	11 e0       	ldi	r17, 0x01	; 1
     8b0:	bc 01       	movw	r22, r24
     8b2:	cd 01       	movw	r24, r26
     8b4:	2b 81       	ldd	r18, Y+3	; 0x03
     8b6:	3c 81       	ldd	r19, Y+4	; 0x04
     8b8:	4d 81       	ldd	r20, Y+5	; 0x05
     8ba:	5e 81       	ldd	r21, Y+6	; 0x06
     8bc:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <__gesf2>
     8c0:	18 16       	cp	r1, r24
     8c2:	0c f0       	brlt	.+2      	; 0x8c6 <_ZN10thermostat12addDataPointEdd+0x1bc>
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	11 23       	and	r17, r17
     8c8:	59 f0       	breq	.+22     	; 0x8e0 <_ZN10thermostat12addDataPointEdd+0x1d6>
		low=temp;
     8ca:	29 81       	ldd	r18, Y+1	; 0x01
     8cc:	3a 81       	ldd	r19, Y+2	; 0x02
     8ce:	8b 81       	ldd	r24, Y+3	; 0x03
     8d0:	9c 81       	ldd	r25, Y+4	; 0x04
     8d2:	ad 81       	ldd	r26, Y+5	; 0x05
     8d4:	be 81       	ldd	r27, Y+6	; 0x06
     8d6:	f9 01       	movw	r30, r18
     8d8:	84 83       	std	Z+4, r24	; 0x04
     8da:	95 83       	std	Z+5, r25	; 0x05
     8dc:	a6 83       	std	Z+6, r26	; 0x06
     8de:	b7 83       	std	Z+7, r27	; 0x07
	}
}
     8e0:	2a 96       	adiw	r28, 0x0a	; 10
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	08 95       	ret

000008fa <_ZN10thermostat8saveDataEv>:

void thermostat::saveData(){
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	00 d0       	rcall	.+0      	; 0x900 <__stack+0x1>
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
	SaveDay();			//Calls save day in 
     908:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z7SaveDayv>
	reset();			//reset thermostat.
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	9a 81       	ldd	r25, Y+2	; 0x02
     910:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN10thermostat5resetEv>
}
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <_ZN10thermostat7getHighEv>:
double thermostat::getHigh(){
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	00 d0       	rcall	.+0      	; 0x924 <_ZN10thermostat7getHighEv+0x6>
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
     928:	9a 83       	std	Y+2, r25	; 0x02
     92a:	89 83       	std	Y+1, r24	; 0x01
	return high;
     92c:	89 81       	ldd	r24, Y+1	; 0x01
     92e:	9a 81       	ldd	r25, Y+2	; 0x02
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	a2 81       	ldd	r26, Z+2	; 0x02
     938:	b3 81       	ldd	r27, Z+3	; 0x03
}
     93a:	bc 01       	movw	r22, r24
     93c:	cd 01       	movw	r24, r26
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	08 95       	ret

00000948 <_ZN10thermostat6getLowEv>:

double thermostat::getLow(){
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	00 d0       	rcall	.+0      	; 0x94e <_ZN10thermostat6getLowEv+0x6>
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
     952:	9a 83       	std	Y+2, r25	; 0x02
     954:	89 83       	std	Y+1, r24	; 0x01
	return low;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	9a 81       	ldd	r25, Y+2	; 0x02
     95a:	fc 01       	movw	r30, r24
     95c:	84 81       	ldd	r24, Z+4	; 0x04
     95e:	95 81       	ldd	r25, Z+5	; 0x05
     960:	a6 81       	ldd	r26, Z+6	; 0x06
     962:	b7 81       	ldd	r27, Z+7	; 0x07
}
     964:	bc 01       	movw	r22, r24
     966:	cd 01       	movw	r24, r26
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <_ZN10thermostat7getAveTEv>:

double thermostat::getAveT(){
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	00 d0       	rcall	.+0      	; 0x978 <_ZN10thermostat7getAveTEv+0x6>
     978:	cd b7       	in	r28, 0x3d	; 61
     97a:	de b7       	in	r29, 0x3e	; 62
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 83       	std	Y+1, r24	; 0x01
	return averageT;
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	9a 81       	ldd	r25, Y+2	; 0x02
     984:	fc 01       	movw	r30, r24
     986:	80 85       	ldd	r24, Z+8	; 0x08
     988:	91 85       	ldd	r25, Z+9	; 0x09
     98a:	a2 85       	ldd	r26, Z+10	; 0x0a
     98c:	b3 85       	ldd	r27, Z+11	; 0x0b
}
     98e:	bc 01       	movw	r22, r24
     990:	cd 01       	movw	r24, r26
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <_ZN10thermostat7getAveHEv>:

double thermostat::getAveH(){
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <_ZN10thermostat7getAveHEv+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
	return averageH;
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	fc 01       	movw	r30, r24
     9b0:	84 85       	ldd	r24, Z+12	; 0x0c
     9b2:	95 85       	ldd	r25, Z+13	; 0x0d
     9b4:	a6 85       	ldd	r26, Z+14	; 0x0e
     9b6:	b7 85       	ldd	r27, Z+15	; 0x0f
     9b8:	bc 01       	movw	r22, r24
     9ba:	cd 01       	movw	r24, r26
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	08 95       	ret

000009c6 <_ZN5clockC1Ev>:
		void addDay(WORD days);
		void addMonth(WORD months);
		void addYear(WORD years);
};

clock::clock(){
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <_ZN5clockC1Ev+0x6>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	9a 83       	std	Y+2, r25	; 0x02
     9d2:	89 83       	std	Y+1, r24	; 0x01
	second=0;
     9d4:	89 81       	ldd	r24, Y+1	; 0x01
     9d6:	9a 81       	ldd	r25, Y+2	; 0x02
     9d8:	fc 01       	movw	r30, r24
     9da:	10 82       	st	Z, r1
	minute=0;
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	9a 81       	ldd	r25, Y+2	; 0x02
     9e0:	fc 01       	movw	r30, r24
     9e2:	11 82       	std	Z+1, r1	; 0x01
	hour=0;
     9e4:	89 81       	ldd	r24, Y+1	; 0x01
     9e6:	9a 81       	ldd	r25, Y+2	; 0x02
     9e8:	fc 01       	movw	r30, r24
     9ea:	12 82       	std	Z+2, r1	; 0x02
	day=0;
     9ec:	89 81       	ldd	r24, Y+1	; 0x01
     9ee:	9a 81       	ldd	r25, Y+2	; 0x02
     9f0:	fc 01       	movw	r30, r24
     9f2:	13 82       	std	Z+3, r1	; 0x03
	month=0;
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	fc 01       	movw	r30, r24
     9fa:	14 82       	std	Z+4, r1	; 0x04
	year=2013;
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	2d ed       	ldi	r18, 0xDD	; 221
     a02:	37 e0       	ldi	r19, 0x07	; 7
     a04:	fc 01       	movw	r30, r24
     a06:	36 83       	std	Z+6, r19	; 0x06
     a08:	25 83       	std	Z+5, r18	; 0x05
}
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <_ZN5clock7setTimeEjjj>:

void clock::setTime(WORD hours, WORD minutes, WORD seconds){
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	28 97       	sbiw	r28, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	de bf       	out	0x3e, r29	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	cd bf       	out	0x3d, r28	; 61
     a28:	9a 83       	std	Y+2, r25	; 0x02
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	7c 83       	std	Y+4, r23	; 0x04
     a2e:	6b 83       	std	Y+3, r22	; 0x03
     a30:	5e 83       	std	Y+6, r21	; 0x06
     a32:	4d 83       	std	Y+5, r20	; 0x05
     a34:	38 87       	std	Y+8, r19	; 0x08
     a36:	2f 83       	std	Y+7, r18	; 0x07
	hour=hours;
     a38:	2b 81       	ldd	r18, Y+3	; 0x03
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	9a 81       	ldd	r25, Y+2	; 0x02
     a3e:	fc 01       	movw	r30, r24
     a40:	22 83       	std	Z+2, r18	; 0x02
	minute=minutes;
     a42:	2d 81       	ldd	r18, Y+5	; 0x05
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	9a 81       	ldd	r25, Y+2	; 0x02
     a48:	fc 01       	movw	r30, r24
     a4a:	21 83       	std	Z+1, r18	; 0x01
	second=seconds;
     a4c:	2f 81       	ldd	r18, Y+7	; 0x07
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	9a 81       	ldd	r25, Y+2	; 0x02
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
}
     a56:	28 96       	adiw	r28, 0x08	; 8
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_ZN5clock9printTimeEv>:

void clock::printTime(){
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	2b 97       	sbiw	r28, 0x0b	; 11
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
     a7c:	9b 87       	std	Y+11, r25	; 0x0b
     a7e:	8a 87       	std	Y+10, r24	; 0x0a
	char str1[3],str2[3],str3[3];
	utoa(hour,str1,10);
     a80:	8a 85       	ldd	r24, Y+10	; 0x0a
     a82:	9b 85       	ldd	r25, Y+11	; 0x0b
     a84:	fc 01       	movw	r30, r24
     a86:	82 81       	ldd	r24, Z+2	; 0x02
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9e 01       	movw	r18, r28
     a8e:	2f 5f       	subi	r18, 0xFF	; 255
     a90:	3f 4f       	sbci	r19, 0xFF	; 255
     a92:	b9 01       	movw	r22, r18
     a94:	4a e0       	ldi	r20, 0x0A	; 10
     a96:	50 e0       	ldi	r21, 0x00	; 0
     a98:	0e 94 31 16 	call	0x2c62	; 0x2c62 <utoa>
	utoa(minute,str2,10);
     a9c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a9e:	9b 85       	ldd	r25, Y+11	; 0x0b
     aa0:	fc 01       	movw	r30, r24
     aa2:	81 81       	ldd	r24, Z+1	; 0x01
     aa4:	88 2f       	mov	r24, r24
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9e 01       	movw	r18, r28
     aaa:	2c 5f       	subi	r18, 0xFC	; 252
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	b9 01       	movw	r22, r18
     ab0:	4a e0       	ldi	r20, 0x0A	; 10
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	0e 94 31 16 	call	0x2c62	; 0x2c62 <utoa>
	utoa(second,str3,10);
     ab8:	8a 85       	ldd	r24, Y+10	; 0x0a
     aba:	9b 85       	ldd	r25, Y+11	; 0x0b
     abc:	fc 01       	movw	r30, r24
     abe:	80 81       	ld	r24, Z
     ac0:	88 2f       	mov	r24, r24
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	9e 01       	movw	r18, r28
     ac6:	29 5f       	subi	r18, 0xF9	; 249
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	b9 01       	movw	r22, r18
     acc:	4a e0       	ldi	r20, 0x0A	; 10
     ace:	50 e0       	ldi	r21, 0x00	; 0
     ad0:	0e 94 31 16 	call	0x2c62	; 0x2c62 <utoa>
	Print0(str1);
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	PutUart0Ch(':');
     adc:	8a e3       	ldi	r24, 0x3A	; 58
     ade:	0e 94 bc 07 	call	0xf78	; 0xf78 <_Z10PutUart0Chc>
	Print0(str2);
     ae2:	ce 01       	movw	r24, r28
     ae4:	04 96       	adiw	r24, 0x04	; 4
     ae6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	PutUart0Ch(':');
     aea:	8a e3       	ldi	r24, 0x3A	; 58
     aec:	0e 94 bc 07 	call	0xf78	; 0xf78 <_Z10PutUart0Chc>
	Print0(str3);
     af0:	ce 01       	movw	r24, r28
     af2:	07 96       	adiw	r24, 0x07	; 7
     af4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
	Print0("XXX");
     af8:	8f e0       	ldi	r24, 0x0F	; 15
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
}
     b00:	2b 96       	adiw	r28, 0x0b	; 11
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	f8 94       	cli
     b06:	de bf       	out	0x3e, r29	; 62
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	cd bf       	out	0x3d, r28	; 61
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <_ZN5clock9addSecondEj>:

void clock::addSecond(WORD seconds){
     b12:	cf 93       	push	r28
     b14:	df 93       	push	r29
     b16:	00 d0       	rcall	.+0      	; 0xb18 <_ZN5clock9addSecondEj+0x6>
     b18:	00 d0       	rcall	.+0      	; 0xb1a <_ZN5clock9addSecondEj+0x8>
     b1a:	00 d0       	rcall	.+0      	; 0xb1c <_ZN5clock9addSecondEj+0xa>
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	7e 83       	std	Y+6, r23	; 0x06
     b26:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempSecond=second+seconds;
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	fc 01       	movw	r30, r24
     b2e:	80 81       	ld	r24, Z
     b30:	28 2f       	mov	r18, r24
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	8d 81       	ldd	r24, Y+5	; 0x05
     b36:	9e 81       	ldd	r25, Y+6	; 0x06
     b38:	82 0f       	add	r24, r18
     b3a:	93 1f       	adc	r25, r19
     b3c:	9a 83       	std	Y+2, r25	; 0x02
     b3e:	89 83       	std	Y+1, r24	; 0x01
	second=tempSecond%60;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	2c e3       	ldi	r18, 0x3C	; 60
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	b9 01       	movw	r22, r18
     b4a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     b4e:	28 2f       	mov	r18, r24
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18
	if (tempSecond/60>=1){
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	8c 33       	cpi	r24, 0x3C	; 60
     b60:	91 05       	cpc	r25, r1
     b62:	0c f4       	brge	.+2      	; 0xb66 <_ZN5clock9addSecondEj+0x54>
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	22 23       	and	r18, r18
     b68:	79 f0       	breq	.+30     	; 0xb88 <_ZN5clock9addSecondEj+0x76>
		addMinute(tempSecond/60);
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	2c e3       	ldi	r18, 0x3C	; 60
     b70:	30 e0       	ldi	r19, 0x00	; 0
     b72:	b9 01       	movw	r22, r18
     b74:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     b78:	9b 01       	movw	r18, r22
     b7a:	c9 01       	movw	r24, r18
     b7c:	9c 01       	movw	r18, r24
     b7e:	8b 81       	ldd	r24, Y+3	; 0x03
     b80:	9c 81       	ldd	r25, Y+4	; 0x04
     b82:	b9 01       	movw	r22, r18
     b84:	0e 94 cd 05 	call	0xb9a	; 0xb9a <_ZN5clock9addMinuteEj>
	}
}
     b88:	26 96       	adiw	r28, 0x06	; 6
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
     b94:	df 91       	pop	r29
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <_ZN5clock9addMinuteEj>:

void clock::addMinute(WORD minutes){
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <_ZN5clock9addMinuteEj+0x6>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <_ZN5clock9addMinuteEj+0x8>
     ba2:	00 d0       	rcall	.+0      	; 0xba4 <_ZN5clock9addMinuteEj+0xa>
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	9c 83       	std	Y+4, r25	; 0x04
     baa:	8b 83       	std	Y+3, r24	; 0x03
     bac:	7e 83       	std	Y+6, r23	; 0x06
     bae:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMinutes=minute+minutes;
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	fc 01       	movw	r30, r24
     bb6:	81 81       	ldd	r24, Z+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	8d 81       	ldd	r24, Y+5	; 0x05
     bbe:	9e 81       	ldd	r25, Y+6	; 0x06
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	9a 83       	std	Y+2, r25	; 0x02
     bc6:	89 83       	std	Y+1, r24	; 0x01
	minute=tempMinutes%60;
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	9a 81       	ldd	r25, Y+2	; 0x02
     bcc:	2c e3       	ldi	r18, 0x3C	; 60
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	b9 01       	movw	r22, r18
     bd2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     bd6:	28 2f       	mov	r18, r24
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	fc 01       	movw	r30, r24
     bde:	21 83       	std	Z+1, r18	; 0x01
	if (tempMinutes/60>=1){
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	8c 33       	cpi	r24, 0x3C	; 60
     be8:	91 05       	cpc	r25, r1
     bea:	0c f4       	brge	.+2      	; 0xbee <_ZN5clock9addMinuteEj+0x54>
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	22 23       	and	r18, r18
     bf0:	79 f0       	breq	.+30     	; 0xc10 <_ZN5clock9addMinuteEj+0x76>
		addHour(tempMinutes/60);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	2c e3       	ldi	r18, 0x3C	; 60
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	b9 01       	movw	r22, r18
     bfc:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     c00:	9b 01       	movw	r18, r22
     c02:	c9 01       	movw	r24, r18
     c04:	9c 01       	movw	r18, r24
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	b9 01       	movw	r22, r18
     c0c:	0e 94 11 06 	call	0xc22	; 0xc22 <_ZN5clock7addHourEj>
	}
}
     c10:	26 96       	adiw	r28, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <_ZN5clock7addHourEj>:

void clock::addHour(WORD hours){
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	00 d0       	rcall	.+0      	; 0xc28 <_ZN5clock7addHourEj+0x6>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <_ZN5clock7addHourEj+0x8>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <_ZN5clock7addHourEj+0xa>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	9c 83       	std	Y+4, r25	; 0x04
     c32:	8b 83       	std	Y+3, r24	; 0x03
     c34:	7e 83       	std	Y+6, r23	; 0x06
     c36:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempHours=hour+hours;
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	9c 81       	ldd	r25, Y+4	; 0x04
     c3c:	fc 01       	movw	r30, r24
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	9a 83       	std	Y+2, r25	; 0x02
     c4e:	89 83       	std	Y+1, r24	; 0x01
	hour=tempHours%24;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	28 e1       	ldi	r18, 0x18	; 24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	b9 01       	movw	r22, r18
     c5a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     c5e:	28 2f       	mov	r18, r24
     c60:	8b 81       	ldd	r24, Y+3	; 0x03
     c62:	9c 81       	ldd	r25, Y+4	; 0x04
     c64:	fc 01       	movw	r30, r24
     c66:	22 83       	std	Z+2, r18	; 0x02
	if (tempHours>=1){
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	18 16       	cp	r1, r24
     c70:	19 06       	cpc	r1, r25
     c72:	0c f0       	brlt	.+2      	; 0xc76 <_ZN5clock7addHourEj+0x54>
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	22 23       	and	r18, r18
     c78:	79 f0       	breq	.+30     	; 0xc98 <_ZN5clock7addHourEj+0x76>
		addDay(tempHours/24);
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	28 e1       	ldi	r18, 0x18	; 24
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	b9 01       	movw	r22, r18
     c84:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     c88:	9b 01       	movw	r18, r22
     c8a:	c9 01       	movw	r24, r18
     c8c:	9c 01       	movw	r18, r24
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	9c 81       	ldd	r25, Y+4	; 0x04
     c92:	b9 01       	movw	r22, r18
     c94:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5clock6addDayEj>
	}
}
     c98:	26 96       	adiw	r28, 0x06	; 6
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <_ZN5clock6addDayEj>:

void clock::addDay(WORD days){
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	27 97       	sbiw	r28, 0x07	; 7
     cb4:	0f b6       	in	r0, 0x3f	; 63
     cb6:	f8 94       	cli
     cb8:	de bf       	out	0x3e, r29	; 62
     cba:	0f be       	out	0x3f, r0	; 63
     cbc:	cd bf       	out	0x3d, r28	; 61
     cbe:	9d 83       	std	Y+5, r25	; 0x05
     cc0:	8c 83       	std	Y+4, r24	; 0x04
     cc2:	7f 83       	std	Y+7, r23	; 0x07
     cc4:	6e 83       	std	Y+6, r22	; 0x06
	//new day, need to save the average, high and low into eeprom
	theThermostat.saveData();
     cc6:	8f e7       	ldi	r24, 0x7F	; 127
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_ZN10thermostat8saveDataEv>
	theThermostat.addTheDay();
     cce:	8f e7       	ldi	r24, 0x7F	; 127
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <_ZN10thermostat9addTheDayEv>
	
	//Get the new day.
	volatile int tempDays=day+days;
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	9d 81       	ldd	r25, Y+5	; 0x05
     cda:	fc 01       	movw	r30, r24
     cdc:	83 81       	ldd	r24, Z+3	; 0x03
     cde:	28 2f       	mov	r18, r24
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	9b 83       	std	Y+3, r25	; 0x03
     cec:	8a 83       	std	Y+2, r24	; 0x02
	BYTE currentMonth=month;
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	fc 01       	movw	r30, r24
     cf4:	84 81       	ldd	r24, Z+4	; 0x04
     cf6:	89 83       	std	Y+1, r24	; 0x01
	if (tempDays/daysInMonths[currentMonth]>=1){
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	29 81       	ldd	r18, Y+1	; 0x01
     cfe:	22 2f       	mov	r18, r18
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	2d 5e       	subi	r18, 0xED	; 237
     d04:	3e 4f       	sbci	r19, 0xFE	; 254
     d06:	f9 01       	movw	r30, r18
     d08:	20 81       	ld	r18, Z
     d0a:	22 2f       	mov	r18, r18
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	b9 01       	movw	r22, r18
     d10:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     d14:	9b 01       	movw	r18, r22
     d16:	c9 01       	movw	r24, r18
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	18 16       	cp	r1, r24
     d1c:	19 06       	cpc	r1, r25
     d1e:	0c f0       	brlt	.+2      	; 0xd22 <_ZN5clock6addDayEj+0x78>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	22 23       	and	r18, r18
     d24:	09 f4       	brne	.+2      	; 0xd28 <_ZN5clock6addDayEj+0x7e>
     d26:	48 c0       	rjmp	.+144    	; 0xdb8 <_ZN5clock6addDayEj+0x10e>
		//See how many months we need to go forward.
		while (tempDays >= daysInMonths[currentMonth]){
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <_ZN5clock6addDayEj+0xa8>
			tempDays-=daysInMonths[currentMonth];
     d2a:	2a 81       	ldd	r18, Y+2	; 0x02
     d2c:	3b 81       	ldd	r19, Y+3	; 0x03
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	8d 5e       	subi	r24, 0xED	; 237
     d36:	9e 4f       	sbci	r25, 0xFE	; 254
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a9 01       	movw	r20, r18
     d42:	48 1b       	sub	r20, r24
     d44:	59 0b       	sbc	r21, r25
     d46:	ca 01       	movw	r24, r20
     d48:	9b 83       	std	Y+3, r25	; 0x03
     d4a:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	8f 5f       	subi	r24, 0xFF	; 255
     d50:	89 83       	std	Y+1, r24	; 0x01
	//Get the new day.
	volatile int tempDays=day+days;
	BYTE currentMonth=month;
	if (tempDays/daysInMonths[currentMonth]>=1){
		//See how many months we need to go forward.
		while (tempDays >= daysInMonths[currentMonth]){
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	8d 5e       	subi	r24, 0xED	; 237
     d5a:	9e 4f       	sbci	r25, 0xFE	; 254
     d5c:	fc 01       	movw	r30, r24
     d5e:	80 81       	ld	r24, Z
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	8a 81       	ldd	r24, Y+2	; 0x02
     d66:	9b 81       	ldd	r25, Y+3	; 0x03
     d68:	41 e0       	ldi	r20, 0x01	; 1
     d6a:	82 17       	cp	r24, r18
     d6c:	93 07       	cpc	r25, r19
     d6e:	0c f4       	brge	.+2      	; 0xd72 <_ZN5clock6addDayEj+0xc8>
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	44 23       	and	r20, r20
     d74:	d1 f6       	brne	.-76     	; 0xd2a <_ZN5clock6addDayEj+0x80>
			tempDays-=daysInMonths[currentMonth];
			currentMonth++;
		}
		if (tempDays>28 && currentMonth==2){
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	8d 31       	cpi	r24, 0x1D	; 29
     d7c:	91 05       	cpc	r25, r1
     d7e:	2c f0       	brlt	.+10     	; 0xd8a <_ZN5clock6addDayEj+0xe0>
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	11 f4       	brne	.+4      	; 0xd8a <_ZN5clock6addDayEj+0xe0>
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	01 c0       	rjmp	.+2      	; 0xd8c <_ZN5clock6addDayEj+0xe2>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	88 23       	and	r24, r24
     d8e:	a1 f0       	breq	.+40     	; 0xdb8 <_ZN5clock6addDayEj+0x10e>
			tempDays-=daysInMonths[currentMonth];
     d90:	2a 81       	ldd	r18, Y+2	; 0x02
     d92:	3b 81       	ldd	r19, Y+3	; 0x03
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	8d 5e       	subi	r24, 0xED	; 237
     d9c:	9e 4f       	sbci	r25, 0xFE	; 254
     d9e:	fc 01       	movw	r30, r24
     da0:	80 81       	ld	r24, Z
     da2:	88 2f       	mov	r24, r24
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a9 01       	movw	r20, r18
     da8:	48 1b       	sub	r20, r24
     daa:	59 0b       	sbc	r21, r25
     dac:	ca 01       	movw	r24, r20
     dae:	9b 83       	std	Y+3, r25	; 0x03
     db0:	8a 83       	std	Y+2, r24	; 0x02
			currentMonth++;
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	days=tempDays;
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	9f 83       	std	Y+7, r25	; 0x07
     dbe:	8e 83       	std	Y+6, r24	; 0x06
	month=currentMonth;
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	9d 81       	ldd	r25, Y+5	; 0x05
     dc4:	29 81       	ldd	r18, Y+1	; 0x01
     dc6:	fc 01       	movw	r30, r24
     dc8:	24 83       	std	Z+4, r18	; 0x04
}
     dca:	27 96       	adiw	r28, 0x07	; 7
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <_ZN5clock8addMonthEj>:

void clock::addMonth(WORD months){
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
     de0:	00 d0       	rcall	.+0      	; 0xde2 <_ZN5clock8addMonthEj+0x6>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <_ZN5clock8addMonthEj+0x8>
     de4:	00 d0       	rcall	.+0      	; 0xde6 <_ZN5clock8addMonthEj+0xa>
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	9c 83       	std	Y+4, r25	; 0x04
     dec:	8b 83       	std	Y+3, r24	; 0x03
     dee:	7e 83       	std	Y+6, r23	; 0x06
     df0:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempMonths=month+months;
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	fc 01       	movw	r30, r24
     df8:	84 81       	ldd	r24, Z+4	; 0x04
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	82 0f       	add	r24, r18
     e04:	93 1f       	adc	r25, r19
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	89 83       	std	Y+1, r24	; 0x01
	month=tempMonths%12;
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	9a 81       	ldd	r25, Y+2	; 0x02
     e0e:	2c e0       	ldi	r18, 0x0C	; 12
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	b9 01       	movw	r22, r18
     e14:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     e18:	28 2f       	mov	r18, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	9c 81       	ldd	r25, Y+4	; 0x04
     e1e:	fc 01       	movw	r30, r24
     e20:	24 83       	std	Z+4, r18	; 0x04
	if (tempMonths/12>=1){
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	8c 30       	cpi	r24, 0x0C	; 12
     e2a:	91 05       	cpc	r25, r1
     e2c:	0c f4       	brge	.+2      	; 0xe30 <_ZN5clock8addMonthEj+0x54>
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	22 23       	and	r18, r18
     e32:	79 f0       	breq	.+30     	; 0xe52 <_ZN5clock8addMonthEj+0x76>
		addYear(tempMonths/12);
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	2c e0       	ldi	r18, 0x0C	; 12
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	b9 01       	movw	r22, r18
     e3e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__divmodhi4>
     e42:	9b 01       	movw	r18, r22
     e44:	c9 01       	movw	r24, r18
     e46:	9c 01       	movw	r18, r24
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	9c 81       	ldd	r25, Y+4	; 0x04
     e4c:	b9 01       	movw	r22, r18
     e4e:	0e 94 32 07 	call	0xe64	; 0xe64 <_ZN5clock7addYearEj>
	}
}
     e52:	26 96       	adiw	r28, 0x06	; 6
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <_ZN5clock7addYearEj>:

void clock::addYear(WORD years){
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	00 d0       	rcall	.+0      	; 0xe6a <_ZN5clock7addYearEj+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <_ZN5clock7addYearEj+0x8>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <_ZN5clock7addYearEj+0xa>
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
     e76:	7e 83       	std	Y+6, r23	; 0x06
     e78:	6d 83       	std	Y+5, r22	; 0x05
	volatile int tempYears=year+years;
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	9c 81       	ldd	r25, Y+4	; 0x04
     e7e:	fc 01       	movw	r30, r24
     e80:	25 81       	ldd	r18, Z+5	; 0x05
     e82:	36 81       	ldd	r19, Z+6	; 0x06
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
	year=tempYears;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	9c 01       	movw	r18, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	fc 01       	movw	r30, r24
     e9c:	36 83       	std	Z+6, r19	; 0x06
     e9e:	25 83       	std	Z+5, r18	; 0x05
}
     ea0:	26 96       	adiw	r28, 0x06	; 6
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <_ZN5clock9getSecondEv>:

/**********************************/
/*			Get Functions		  */
/**********************************/
BYTE clock::getSecond(){
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	00 d0       	rcall	.+0      	; 0xeb8 <_ZN5clock9getSecondEv+0x6>
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	9a 83       	std	Y+2, r25	; 0x02
     ebe:	89 83       	std	Y+1, r24	; 0x01
	return second;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	08 95       	ret

00000ed2 <_ZN5clock9getMinuteEv>:
BYTE clock::getMinute(){
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	00 d0       	rcall	.+0      	; 0xed8 <_ZN5clock9getMinuteEv+0x6>
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	9a 83       	std	Y+2, r25	; 0x02
     ede:	89 83       	std	Y+1, r24	; 0x01
	return minute;
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	fc 01       	movw	r30, r24
     ee6:	81 81       	ldd	r24, Z+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <_ZN5clock7getHourEv>:
BYTE clock::getHour(){
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <_ZN5clock7getHourEv+0x6>
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	9a 83       	std	Y+2, r25	; 0x02
     efe:	89 83       	std	Y+1, r24	; 0x01
	return hour;
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
     f04:	fc 01       	movw	r30, r24
     f06:	82 81       	ldd	r24, Z+2	; 0x02
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <_ZN5clock6getDayEv>:
BYTE clock::getDay(){
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	00 d0       	rcall	.+0      	; 0xf18 <_ZN5clock6getDayEv+0x6>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	89 83       	std	Y+1, r24	; 0x01
	return (day+1);
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	fc 01       	movw	r30, r24
     f26:	83 81       	ldd	r24, Z+3	; 0x03
     f28:	8f 5f       	subi	r24, 0xFF	; 255
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <_ZN5clock8getMonthEv>:
BYTE clock::getMonth(){
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	00 d0       	rcall	.+0      	; 0xf3a <_ZN5clock8getMonthEv+0x6>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
	return (month+1);
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	fc 01       	movw	r30, r24
     f48:	84 81       	ldd	r24, Z+4	; 0x04
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	08 95       	ret

00000f56 <_ZN5clock7getYearEv>:
WORD clock::getYear(){
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <_ZN5clock7getYearEv+0x6>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
	return year;
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	85 81       	ldd	r24, Z+5	; 0x05
     f6c:	96 81       	ldd	r25, Z+6	; 0x06
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <_Z10PutUart0Chc>:
void PutUart0Ch(char ch);
void Print0(char string[]);

/**********************************************************************************************************************************/
void PutUart0Ch(char ch)
{
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSR0A & (1 << UDRE0)));
     f84:	00 00       	nop
     f86:	80 ec       	ldi	r24, 0xC0	; 192
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	fc 01       	movw	r30, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	88 2f       	mov	r24, r24
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 72       	andi	r24, 0x20	; 32
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	21 e0       	ldi	r18, 0x01	; 1
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	09 f0       	breq	.+2      	; 0xf9e <_Z10PutUart0Chc+0x26>
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	22 23       	and	r18, r18
     fa0:	91 f7       	brne	.-28     	; 0xf86 <_Z10PutUart0Chc+0xe>
	UDR0 = ch;
     fa2:	86 ec       	ldi	r24, 0xC6	; 198
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	29 81       	ldd	r18, Y+1	; 0x01
     fa8:	fc 01       	movw	r30, r24
     faa:	20 83       	st	Z, r18
}
     fac:	0f 90       	pop	r0
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <_Z6Print0Pc>:
/**********************************************************************************************************************************/
void Print0(char string[])
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	00 d0       	rcall	.+0      	; 0xfba <_Z6Print0Pc+0x6>
     fba:	0f 92       	push	r0
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9b 83       	std	Y+3, r25	; 0x03
     fc2:	8a 83       	std	Y+2, r24	; 0x02
	BYTE i;
	i = 0;
     fc4:	19 82       	std	Y+1, r1	; 0x01

	while (string[i]) {
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <_Z6Print0Pc+0x30>
		PutUart0Ch(string[i]);  //send byte
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	2a 81       	ldd	r18, Y+2	; 0x02
     fd0:	3b 81       	ldd	r19, Y+3	; 0x03
     fd2:	82 0f       	add	r24, r18
     fd4:	93 1f       	adc	r25, r19
     fd6:	fc 01       	movw	r30, r24
     fd8:	80 81       	ld	r24, Z
     fda:	0e 94 bc 07 	call	0xf78	; 0xf78 <_Z10PutUart0Chc>
		i += 1;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	89 83       	std	Y+1, r24	; 0x01
void Print0(char string[])
{
	BYTE i;
	i = 0;

	while (string[i]) {
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	88 2f       	mov	r24, r24
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	2a 81       	ldd	r18, Y+2	; 0x02
     fec:	3b 81       	ldd	r19, Y+3	; 0x03
     fee:	82 0f       	add	r24, r18
     ff0:	93 1f       	adc	r25, r19
     ff2:	fc 01       	movw	r30, r24
     ff4:	90 81       	ld	r25, Z
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	99 23       	and	r25, r25
     ffa:	09 f4       	brne	.+2      	; 0xffe <_Z6Print0Pc+0x4a>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	88 23       	and	r24, r24
    1000:	19 f7       	brne	.-58     	; 0xfc8 <_Z6Print0Pc+0x14>
		PutUart0Ch(string[i]);  //send byte
		i += 1;
	}
}
    1002:	0f 90       	pop	r0
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <_Z9ReceivePiv>:
/**********************************************************************************************************************************/
void ReceivePi(){
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	69 97       	sbiw	r28, 0x19	; 25
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
    1022:	19 82       	std	Y+1, r1	; 0x01
    1024:	1a 82       	std	Y+2, r1	; 0x02
	BOOL noDelimiter=fTrue;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	8b 83       	std	Y+3, r24	; 0x03
	
	while (flagReceivePi){
    102a:	30 c1       	rjmp	.+608    	; 0x128c <_Z9ReceivePiv+0x27e>
		switch (state) {
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	88 2f       	mov	r24, r24
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <_Z9ReceivePiv+0x2c>
    1038:	6f c0       	rjmp	.+222    	; 0x1118 <_Z9ReceivePiv+0x10a>
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	3c f4       	brge	.+14     	; 0x104e <_Z9ReceivePiv+0x40>
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	91 f0       	breq	.+36     	; 0x1068 <_Z9ReceivePiv+0x5a>
    1044:	81 30       	cpi	r24, 0x01	; 1
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <_Z9ReceivePiv+0x3e>
    104a:	56 c0       	rjmp	.+172    	; 0x10f8 <_Z9ReceivePiv+0xea>
    104c:	1c c1       	rjmp	.+568    	; 0x1286 <_Z9ReceivePiv+0x278>
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	91 05       	cpc	r25, r1
    1052:	09 f4       	brne	.+2      	; 0x1056 <_Z9ReceivePiv+0x48>
    1054:	e1 c0       	rjmp	.+450    	; 0x1218 <_Z9ReceivePiv+0x20a>
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	91 05       	cpc	r25, r1
    105a:	0c f4       	brge	.+2      	; 0x105e <_Z9ReceivePiv+0x50>
    105c:	ba c0       	rjmp	.+372    	; 0x11d2 <_Z9ReceivePiv+0x1c4>
    105e:	85 30       	cpi	r24, 0x05	; 5
    1060:	91 05       	cpc	r25, r1
    1062:	09 f4       	brne	.+2      	; 0x1066 <_Z9ReceivePiv+0x58>
    1064:	e0 c0       	rjmp	.+448    	; 0x1226 <_Z9ReceivePiv+0x218>
    1066:	0f c1       	rjmp	.+542    	; 0x1286 <_Z9ReceivePiv+0x278>
			case 0:{
				//Send ACK
				Print0("ACK.");
    1068:	8f e1       	ldi	r24, 0x1F	; 31
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
				state=1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8a 83       	std	Y+2, r24	; 0x02
				break;
    1074:	0b c1       	rjmp	.+534    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
    1076:	00 00       	nop
    1078:	80 ec       	ldi	r24, 0xC0	; 192
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	fc 01       	movw	r30, r24
    107e:	80 81       	ld	r24, Z
    1080:	88 23       	and	r24, r24
    1082:	34 f0       	brlt	.+12     	; 0x1090 <_Z9ReceivePiv+0x82>
    1084:	80 91 76 01 	lds	r24, 0x0176
    1088:	88 23       	and	r24, r24
    108a:	11 f0       	breq	.+4      	; 0x1090 <_Z9ReceivePiv+0x82>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <_Z9ReceivePiv+0x84>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	88 23       	and	r24, r24
    1094:	89 f7       	brne	.-30     	; 0x1078 <_Z9ReceivePiv+0x6a>
					if (!flagReceivePi){break;state=3;}//had a timeout
    1096:	80 91 76 01 	lds	r24, 0x0176
    109a:	88 23       	and	r24, r24
    109c:	d9 f1       	breq	.+118    	; 0x1114 <_Z9ReceivePiv+0x106>
					recChar=UDR0;
    109e:	86 ec       	ldi	r24, 0xC6	; 198
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	80 81       	ld	r24, Z
    10a6:	8e 83       	std	Y+6, r24	; 0x06
					recString[strLoc++]=recChar;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9e 01       	movw	r18, r28
    10b0:	23 5f       	subi	r18, 0xF3	; 243
    10b2:	3f 4f       	sbci	r19, 0xFF	; 255
    10b4:	82 0f       	add	r24, r18
    10b6:	93 1f       	adc	r25, r19
    10b8:	2e 81       	ldd	r18, Y+6	; 0x06
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	89 83       	std	Y+1, r24	; 0x01
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	8e 32       	cpi	r24, 0x2E	; 46
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <_Z9ReceivePiv+0xc2>
    10ca:	8e 81       	ldd	r24, Y+6	; 0x06
    10cc:	88 23       	and	r24, r24
    10ce:	71 f4       	brne	.+28     	; 0x10ec <_Z9ReceivePiv+0xde>
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9e 01       	movw	r18, r28
    10d8:	23 5f       	subi	r18, 0xF3	; 243
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	82 0f       	add	r24, r18
    10de:	93 1f       	adc	r25, r19
    10e0:	fc 01       	movw	r30, r24
    10e2:	10 82       	st	Z, r1
    10e4:	1b 82       	std	Y+3, r1	; 0x03
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <_Z9ReceivePiv+0xea>
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	8a 30       	cpi	r24, 0x0A	; 10
    10f0:	18 f0       	brcs	.+6      	; 0x10f8 <_Z9ReceivePiv+0xea>
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	8a 83       	std	Y+2, r24	; 0x02
    10f6:	1b 82       	std	Y+3, r1	; 0x03
				state=1;
				break;
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 23       	and	r24, r24
    10fc:	31 f0       	breq	.+12     	; 0x110a <_Z9ReceivePiv+0xfc>
    10fe:	80 91 76 01 	lds	r24, 0x0176
    1102:	88 23       	and	r24, r24
    1104:	11 f0       	breq	.+4      	; 0x110a <_Z9ReceivePiv+0xfc>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <_Z9ReceivePiv+0xfe>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	88 23       	and	r24, r24
    110e:	09 f0       	breq	.+2      	; 0x1112 <_Z9ReceivePiv+0x104>
    1110:	b2 cf       	rjmp	.-156    	; 0x1076 <_Z9ReceivePiv+0x68>
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
    1112:	bc c0       	rjmp	.+376    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 0
			case 1:{
				//Receive the string coming back
				while (noDelimiter && flagReceivePi){
					while (!(UCSR0A & (1 << RXC0)) && flagReceivePi);//wiat for a character to come in on uart
					if (!flagReceivePi){break;state=3;}//had a timeout
    1114:	00 00       	nop
					recString[strLoc++]=recChar;
					if (recChar=='.'||recChar=='\0'){recString[strLoc]='\0';noDelimiter=fFalse; state=2;}
					else if (strLoc>=10){state=4;noDelimiter=fFalse;}
					else;
				}//end while noDelimiter and receiving 
				break;
    1116:	ba c0       	rjmp	.+372    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 1
			case 2:{
				state=3;
    1118:	83 e0       	ldi	r24, 0x03	; 3
    111a:	8a 83       	std	Y+2, r24	; 0x02
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
    111c:	ce 01       	movw	r24, r28
    111e:	0d 96       	adiw	r24, 0x0d	; 13
    1120:	24 e2       	ldi	r18, 0x24	; 36
    1122:	31 e0       	ldi	r19, 0x01	; 1
    1124:	b9 01       	movw	r22, r18
    1126:	46 e0       	ldi	r20, 0x06	; 6
    1128:	50 e0       	ldi	r21, 0x00	; 0
    112a:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strncmp>
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	21 f4       	brne	.+8      	; 0x113a <_Z9ReceivePiv+0x12c>
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 75 01 	sts	0x0175, r24
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    1138:	a9 c0       	rjmp	.+338    	; 0x128c <_Z9ReceivePiv+0x27e>
				break;
			}//end case 1
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
    113a:	ce 01       	movw	r24, r28
    113c:	0d 96       	adiw	r24, 0x0d	; 13
    113e:	2b e2       	ldi	r18, 0x2B	; 43
    1140:	31 e0       	ldi	r19, 0x01	; 1
    1142:	b9 01       	movw	r22, r18
    1144:	43 e0       	ldi	r20, 0x03	; 3
    1146:	50 e0       	ldi	r21, 0x00	; 0
    1148:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strncmp>
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	29 f4       	brne	.+10     	; 0x115a <_Z9ReceivePiv+0x14c>
    1150:	8f e2       	ldi	r24, 0x2F	; 47
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    1158:	99 c0       	rjmp	.+306    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 1
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
    115a:	ce 01       	movw	r24, r28
    115c:	0d 96       	adiw	r24, 0x0d	; 13
    115e:	23 e4       	ldi	r18, 0x43	; 67
    1160:	31 e0       	ldi	r19, 0x01	; 1
    1162:	b9 01       	movw	r22, r18
    1164:	45 e0       	ldi	r20, 0x05	; 5
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strncmp>
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	39 f4       	brne	.+14     	; 0x117e <_Z9ReceivePiv+0x170>
    1170:	89 e4       	ldi	r24, 0x49	; 73
    1172:	91 e0       	ldi	r25, 0x01	; 1
    1174:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
    1178:	0e 94 f6 09 	call	0x13ec	; 0x13ec <_Z7SaveDayv>
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    117c:	87 c0       	rjmp	.+270    	; 0x128c <_Z9ReceivePiv+0x27e>
			case 2:{
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
    117e:	ce 01       	movw	r24, r28
    1180:	0d 96       	adiw	r24, 0x0d	; 13
    1182:	23 e5       	ldi	r18, 0x53	; 83
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	b9 01       	movw	r22, r18
    1188:	46 e0       	ldi	r20, 0x06	; 6
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strncmp>
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	21 f4       	brne	.+8      	; 0x119c <_Z9ReceivePiv+0x18e>
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 77 01 	sts	0x0177, r24
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    119a:	78 c0       	rjmp	.+240    	; 0x128c <_Z9ReceivePiv+0x27e>
				state=3;
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
    119c:	ce 01       	movw	r24, r28
    119e:	0d 96       	adiw	r24, 0x0d	; 13
    11a0:	29 e5       	ldi	r18, 0x59	; 89
    11a2:	31 e0       	ldi	r19, 0x01	; 1
    11a4:	b9 01       	movw	r22, r18
    11a6:	45 e0       	ldi	r20, 0x05	; 5
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <strncmp>
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	29 f4       	brne	.+10     	; 0x11bc <_Z9ReceivePiv+0x1ae>
    11b2:	88 e7       	ldi	r24, 0x78	; 120
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN5clock9printTimeEv>
				else if (recString[0]='T'){state=5;}
				else {state=4;}
				break;
    11ba:	68 c0       	rjmp	.+208    	; 0x128c <_Z9ReceivePiv+0x27e>
				if (!strncmp(recString,"STATS.",6)){flagAllStats=fTrue;}
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
    11bc:	84 e5       	ldi	r24, 0x54	; 84
    11be:	8d 87       	std	Y+13, r24	; 0x0d
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	88 23       	and	r24, r24
    11c4:	19 f0       	breq	.+6      	; 0x11cc <_Z9ReceivePiv+0x1be>
    11c6:	85 e0       	ldi	r24, 0x05	; 5
    11c8:	8a 83       	std	Y+2, r24	; 0x02
				else {state=4;}
				break;
    11ca:	60 c0       	rjmp	.+192    	; 0x128c <_Z9ReceivePiv+0x27e>
				else if (!strncmp(recString,"Hi.",3)){Print0("Hello Raspberry Pi!");}
				else if (!strncmp(recString,"save.",5)){Print0("Saving..."); SaveDay();}
				else if (!strncmp(recString,"WEEK.",6)){flagSendWeek=fTrue;}
				else if (!strncmp(recString,"time.",5)){theClock.printTime();}
				else if (recString[0]='T'){state=5;}
				else {state=4;}
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	8a 83       	std	Y+2, r24	; 0x02
				break;
    11d0:	5d c0       	rjmp	.+186    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 2
			case 3:{
				//Graceful exit
				int i=0;
    11d2:	1d 82       	std	Y+5, r1	; 0x05
    11d4:	1c 82       	std	Y+4, r1	; 0x04
				for (i=0;i<strLoc;i++){recString[strLoc]=NULL;}	//clear string memory
    11d6:	1d 82       	std	Y+5, r1	; 0x05
    11d8:	1c 82       	std	Y+4, r1	; 0x04
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <_Z9ReceivePiv+0x1ec>
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	88 2f       	mov	r24, r24
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9e 01       	movw	r18, r28
    11e4:	23 5f       	subi	r18, 0xF3	; 243
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	10 82       	st	Z, r1
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	9d 83       	std	Y+5, r25	; 0x05
    11f8:	8c 83       	std	Y+4, r24	; 0x04
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	41 e0       	ldi	r20, 0x01	; 1
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	9d 81       	ldd	r25, Y+5	; 0x05
    1206:	82 17       	cp	r24, r18
    1208:	93 07       	cpc	r25, r19
    120a:	0c f0       	brlt	.+2      	; 0x120e <_Z9ReceivePiv+0x200>
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	44 23       	and	r20, r20
    1210:	29 f7       	brne	.-54     	; 0x11dc <_Z9ReceivePiv+0x1ce>
				flagReceivePi=fFalse;
    1212:	10 92 76 01 	sts	0x0176, r1
				break;
    1216:	3a c0       	rjmp	.+116    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 3
			case 4:{
				//Bad ACK or ask string
				Print0("Unknown query.");
    1218:	8f e5       	ldi	r24, 0x5F	; 95
    121a:	91 e0       	ldi	r25, 0x01	; 1
    121c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
				state=3;
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	8a 83       	std	Y+2, r24	; 0x02
				break;
    1224:	33 c0       	rjmp	.+102    	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 4
			case 5:{
				char tempString[3];
				tempString[0]=recString[1];
    1226:	8e 85       	ldd	r24, Y+14	; 0x0e
    1228:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[2];
    122a:	8f 85       	ldd	r24, Y+15	; 0x0f
    122c:	88 8f       	std	Y+24, r24	; 0x18
				tempString[2]='\0';
    122e:	19 8e       	std	Y+25, r1	; 0x19
				WORD hour=atoi(tempString);
    1230:	ce 01       	movw	r24, r28
    1232:	47 96       	adiw	r24, 0x17	; 23
    1234:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <atoi>
    1238:	98 87       	std	Y+8, r25	; 0x08
    123a:	8f 83       	std	Y+7, r24	; 0x07
				tempString[0]=recString[3];
    123c:	88 89       	ldd	r24, Y+16	; 0x10
    123e:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[4];
    1240:	89 89       	ldd	r24, Y+17	; 0x11
    1242:	88 8f       	std	Y+24, r24	; 0x18
				WORD minute=atoi(tempString);
    1244:	ce 01       	movw	r24, r28
    1246:	47 96       	adiw	r24, 0x17	; 23
    1248:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <atoi>
    124c:	9a 87       	std	Y+10, r25	; 0x0a
    124e:	89 87       	std	Y+9, r24	; 0x09
				tempString[0]=recString[5];
    1250:	8a 89       	ldd	r24, Y+18	; 0x12
    1252:	8f 8b       	std	Y+23, r24	; 0x17
				tempString[1]=recString[6];				
    1254:	8b 89       	ldd	r24, Y+19	; 0x13
    1256:	88 8f       	std	Y+24, r24	; 0x18
				WORD second=atoi(tempString);
    1258:	ce 01       	movw	r24, r28
    125a:	47 96       	adiw	r24, 0x17	; 23
    125c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <atoi>
    1260:	9c 87       	std	Y+12, r25	; 0x0c
    1262:	8b 87       	std	Y+11, r24	; 0x0b
				theClock.setTime(hour,minute,second);
    1264:	88 e7       	ldi	r24, 0x78	; 120
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	6f 81       	ldd	r22, Y+7	; 0x07
    126a:	78 85       	ldd	r23, Y+8	; 0x08
    126c:	49 85       	ldd	r20, Y+9	; 0x09
    126e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1270:	2b 85       	ldd	r18, Y+11	; 0x0b
    1272:	3c 85       	ldd	r19, Y+12	; 0x0c
    1274:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN5clock7setTimeEjjj>
				theClock.printTime();
    1278:	88 e7       	ldi	r24, 0x78	; 120
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 34 05 	call	0xa68	; 0xa68 <_ZN5clock9printTimeEv>
				state=3;
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	8a 83       	std	Y+2, r24	; 0x02
				break;
    1284:	03 c0       	rjmp	.+6      	; 0x128c <_Z9ReceivePiv+0x27e>
			}//end case 5
			default:{flagReceivePi=fFalse;break;}			
    1286:	10 92 76 01 	sts	0x0176, r1
    128a:	00 00       	nop
void ReceivePi(){
	char recChar, recString[10];
	BYTE strLoc=0,state=0;
	BOOL noDelimiter=fTrue;
	
	while (flagReceivePi){
    128c:	90 91 76 01 	lds	r25, 0x0176
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	99 23       	and	r25, r25
    1294:	09 f4       	brne	.+2      	; 0x1298 <_Z9ReceivePiv+0x28a>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	88 23       	and	r24, r24
    129a:	09 f0       	breq	.+2      	; 0x129e <_Z9ReceivePiv+0x290>
    129c:	c7 ce       	rjmp	.-626    	; 0x102c <_Z9ReceivePiv+0x1e>
				break;
			}//end case 5
			default:{flagReceivePi=fFalse;break;}			
		}//end switch
	}//end while ReceivePi	
    129e:	69 96       	adiw	r28, 0x19	; 25
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	08 95       	ret

000012b0 <_Z8MoveDownh>:

//Total number of days stored
BYTE EEMEM eeTotalDays=0;
BYTE EEMEM eeOldestDay=0;

void MoveDown(BYTE whichDay){
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	67 97       	sbiw	r28, 0x17	; 23
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	8f 8b       	std	Y+23, r24	; 0x17
	//Get what day we are moving and all of it's data into temp variables
	WORD offset=INITIAL_OFFSET+(whichDay)*BLOCK_SIZE;
    12c6:	8f 89       	ldd	r24, Y+23	; 0x17
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	88 0f       	add	r24, r24
    12ce:	99 1f       	adc	r25, r25
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	9c 01       	movw	r18, r24
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	04 96       	adiw	r24, 0x04	; 4
    12e4:	9a 83       	std	Y+2, r25	; 0x02
    12e6:	89 83       	std	Y+1, r24	; 0x01
	WORD dayT,monthT;
	dayT=eeprom_read_word((WORD *)(offset+DAY));
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	0e 94 55 16 	call	0x2caa	; 0x2caa <__eerd_word_m324pa>
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
	monthT=eeprom_read_word((WORD *)(offset+MONTH));
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	02 96       	adiw	r24, 0x02	; 2
    12fa:	0e 94 55 16 	call	0x2caa	; 0x2caa <__eerd_word_m324pa>
    12fe:	9e 83       	std	Y+6, r25	; 0x06
    1300:	8d 83       	std	Y+5, r24	; 0x05
	float lowT=eeprom_read_float((float*)(offset+LOW));
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	9a 81       	ldd	r25, Y+2	; 0x02
    1306:	04 96       	adiw	r24, 0x04	; 4
    1308:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__eerd_dword_m324pa>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	float highT=eeprom_read_float((float*)(offset+HIGH));
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	9a 81       	ldd	r25, Y+2	; 0x02
    131c:	08 96       	adiw	r24, 0x08	; 8
    131e:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__eerd_dword_m324pa>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8b 87       	std	Y+11, r24	; 0x0b
    1328:	9c 87       	std	Y+12, r25	; 0x0c
    132a:	ad 87       	std	Y+13, r26	; 0x0d
    132c:	be 87       	std	Y+14, r27	; 0x0e
	float avgT=eeprom_read_float((float*)(offset+AVGT));
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	0c 96       	adiw	r24, 0x0c	; 12
    1334:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__eerd_dword_m324pa>
    1338:	dc 01       	movw	r26, r24
    133a:	cb 01       	movw	r24, r22
    133c:	8f 87       	std	Y+15, r24	; 0x0f
    133e:	98 8b       	std	Y+16, r25	; 0x10
    1340:	a9 8b       	std	Y+17, r26	; 0x11
    1342:	ba 8b       	std	Y+18, r27	; 0x12
	float avgH=eeprom_read_float((float *)(offset+AVGH));
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	40 96       	adiw	r24, 0x10	; 16
    134a:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <__eerd_dword_m324pa>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	8b 8b       	std	Y+19, r24	; 0x13
    1354:	9c 8b       	std	Y+20, r25	; 0x14
    1356:	ad 8b       	std	Y+21, r26	; 0x15
    1358:	be 8b       	std	Y+22, r27	; 0x16
	
	//Put all that data into the spot below this one. Offset is one block down
	offset-=BLOCK_SIZE;
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	9a 81       	ldd	r25, Y+2	; 0x02
    135e:	44 97       	sbiw	r24, 0x14	; 20
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	eeprom_update_word((WORD *)(offset+DAY),dayT);
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	2b 81       	ldd	r18, Y+3	; 0x03
    136a:	3c 81       	ldd	r19, Y+4	; 0x04
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),monthT);
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	9a 81       	ldd	r25, Y+2	; 0x02
    1376:	02 96       	adiw	r24, 0x02	; 2
    1378:	2d 81       	ldd	r18, Y+5	; 0x05
    137a:	3e 81       	ldd	r19, Y+6	; 0x06
    137c:	b9 01       	movw	r22, r18
    137e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__eeupd_word_m324pa>
	eeprom_update_float((float*)(offset+LOW),lowT);
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	9a 81       	ldd	r25, Y+2	; 0x02
    1386:	04 96       	adiw	r24, 0x04	; 4
    1388:	2f 81       	ldd	r18, Y+7	; 0x07
    138a:	38 85       	ldd	r19, Y+8	; 0x08
    138c:	49 85       	ldd	r20, Y+9	; 0x09
    138e:	5a 85       	ldd	r21, Y+10	; 0x0a
    1390:	ba 01       	movw	r22, r20
    1392:	a9 01       	movw	r20, r18
    1394:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+HIGH),highT);
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	9a 81       	ldd	r25, Y+2	; 0x02
    139c:	08 96       	adiw	r24, 0x08	; 8
    139e:	2b 85       	ldd	r18, Y+11	; 0x0b
    13a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    13a4:	5e 85       	ldd	r21, Y+14	; 0x0e
    13a6:	ba 01       	movw	r22, r20
    13a8:	a9 01       	movw	r20, r18
    13aa:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGT),avgT);
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	0c 96       	adiw	r24, 0x0c	; 12
    13b4:	2f 85       	ldd	r18, Y+15	; 0x0f
    13b6:	38 89       	ldd	r19, Y+16	; 0x10
    13b8:	49 89       	ldd	r20, Y+17	; 0x11
    13ba:	5a 89       	ldd	r21, Y+18	; 0x12
    13bc:	ba 01       	movw	r22, r20
    13be:	a9 01       	movw	r20, r18
    13c0:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float*)(offset+AVGH),avgH);
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	9a 81       	ldd	r25, Y+2	; 0x02
    13c8:	40 96       	adiw	r24, 0x10	; 16
    13ca:	2b 89       	ldd	r18, Y+19	; 0x13
    13cc:	3c 89       	ldd	r19, Y+20	; 0x14
    13ce:	4d 89       	ldd	r20, Y+21	; 0x15
    13d0:	5e 89       	ldd	r21, Y+22	; 0x16
    13d2:	ba 01       	movw	r22, r20
    13d4:	a9 01       	movw	r20, r18
    13d6:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
}
    13da:	67 96       	adiw	r28, 0x17	; 23
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <_Z7SaveDayv>:

void SaveDay(){
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	00 d0       	rcall	.+0      	; 0x13f6 <_Z7SaveDayv+0xa>
    13f6:	00 d0       	rcall	.+0      	; 0x13f8 <_Z7SaveDayv+0xc>
    13f8:	cd b7       	in	r28, 0x3d	; 61
    13fa:	de b7       	in	r29, 0x3e	; 62
	static BOOL allFull=fFalse;
	BYTE daysStored,oldestDay;
	WORD offset;
	
	//If we are all full, don't waste a read on the TotalDays, go right to OldestDay protocol
	if (!allFull){daysStored=eeprom_read_byte(&eeTotalDays);}
    13fc:	80 91 a6 01 	lds	r24, 0x01A6
    1400:	88 23       	and	r24, r24
    1402:	29 f4       	brne	.+10     	; 0x140e <_Z7SaveDayv+0x22>
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__eerd_byte_m324pa>
    140c:	89 83       	std	Y+1, r24	; 0x01
		
	//Get offset for where we are goign to store data.
	if (daysStored >= MAX_DAYS || allFull){
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	88 32       	cpi	r24, 0x28	; 40
    1412:	20 f4       	brcc	.+8      	; 0x141c <_Z7SaveDayv+0x30>
    1414:	80 91 a6 01 	lds	r24, 0x01A6
    1418:	88 23       	and	r24, r24
    141a:	31 f1       	breq	.+76     	; 0x1468 <_Z7SaveDayv+0x7c>
		if (!allFull){allFull=fTrue;}
    141c:	80 91 a6 01 	lds	r24, 0x01A6
    1420:	88 23       	and	r24, r24
    1422:	19 f4       	brne	.+6      	; 0x142a <_Z7SaveDayv+0x3e>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	80 93 a6 01 	sts	0x01A6, r24
		oldestDay=eeprom_read_byte(&eeOldestDay);
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__eerd_byte_m324pa>
    1432:	8c 83       	std	Y+4, r24	; 0x04
		//Offset is wherever the oldestDay is, which is the block size*absolute + initial.
		offset = INITIAL_OFFSET+(oldestDay)*BLOCK_SIZE;
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	9c 01       	movw	r18, r24
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	04 96       	adiw	r24, 0x04	; 4
    1452:	9b 83       	std	Y+3, r25	; 0x03
    1454:	8a 83       	std	Y+2, r24	; 0x02
		//increment oldest day to next location.
		oldestDay++;
    1456:	8c 81       	ldd	r24, Y+4	; 0x04
    1458:	8f 5f       	subi	r24, 0xFF	; 255
    145a:	8c 83       	std	Y+4, r24	; 0x04
		eeprom_update_byte(&eeOldestDay,oldestDay);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	6c 81       	ldd	r22, Y+4	; 0x04
    1462:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__eeupd_byte_m324pa>
    1466:	19 c0       	rjmp	.+50     	; 0x149a <_Z7SaveDayv+0xae>
	} else {
		//Offset is how many days are stored. If 0 are stored, should be lowest location. if one is stored, should be the next location (block size up).
		offset = INITIAL_OFFSET+(daysStored)*BLOCK_SIZE;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	9c 01       	movw	r18, r24
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	22 0f       	add	r18, r18
    147e:	33 1f       	adc	r19, r19
    1480:	82 0f       	add	r24, r18
    1482:	93 1f       	adc	r25, r19
    1484:	04 96       	adiw	r24, 0x04	; 4
    1486:	9b 83       	std	Y+3, r25	; 0x03
    1488:	8a 83       	std	Y+2, r24	; 0x02
		daysStored++;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	8f 5f       	subi	r24, 0xFF	; 255
    148e:	89 83       	std	Y+1, r24	; 0x01
		//Update how many days are stored.
		eeprom_update_byte(&eeTotalDays,daysStored);	
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	69 81       	ldd	r22, Y+1	; 0x01
    1496:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__eeupd_byte_m324pa>
	}

	//Write the data to EEPROM
	eeprom_update_word((WORD *)(offset+DAY),(float)theClock.getDay());
    149a:	0a 81       	ldd	r16, Y+2	; 0x02
    149c:	1b 81       	ldd	r17, Y+3	; 0x03
    149e:	88 e7       	ldi	r24, 0x78	; 120
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZN5clock6getDayEv>
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	bc 01       	movw	r22, r24
    14b0:	cd 01       	movw	r24, r26
    14b2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    14b6:	dc 01       	movw	r26, r24
    14b8:	cb 01       	movw	r24, r22
    14ba:	bc 01       	movw	r22, r24
    14bc:	cd 01       	movw	r24, r26
    14be:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9c 01       	movw	r18, r24
    14c8:	c8 01       	movw	r24, r16
    14ca:	b9 01       	movw	r22, r18
    14cc:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__eeupd_word_m324pa>
	eeprom_update_word((WORD *)(offset+MONTH),(float)theClock.getMonth());
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	9b 81       	ldd	r25, Y+3	; 0x03
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	8c 01       	movw	r16, r24
    14d8:	88 e7       	ldi	r24, 0x78	; 120
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 9a 07 	call	0xf34	; 0xf34 <_ZN5clock8getMonthEv>
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	bc 01       	movw	r22, r24
    14f6:	cd 01       	movw	r24, r26
    14f8:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9c 01       	movw	r18, r24
    1502:	c8 01       	movw	r24, r16
    1504:	b9 01       	movw	r22, r18
    1506:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__eeupd_word_m324pa>
	eeprom_update_float((float *)(offset+LOW),(float)theThermostat.getLow());
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	04 96       	adiw	r24, 0x04	; 4
    1510:	8c 01       	movw	r16, r24
    1512:	8f e7       	ldi	r24, 0x7F	; 127
    1514:	91 e0       	ldi	r25, 0x01	; 1
    1516:	0e 94 a4 04 	call	0x948	; 0x948 <_ZN10thermostat6getLowEv>
    151a:	9b 01       	movw	r18, r22
    151c:	ac 01       	movw	r20, r24
    151e:	c8 01       	movw	r24, r16
    1520:	ba 01       	movw	r22, r20
    1522:	a9 01       	movw	r20, r18
    1524:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+HIGH),(float)theThermostat.getHigh());
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	9b 81       	ldd	r25, Y+3	; 0x03
    152c:	08 96       	adiw	r24, 0x08	; 8
    152e:	8c 01       	movw	r16, r24
    1530:	8f e7       	ldi	r24, 0x7F	; 127
    1532:	91 e0       	ldi	r25, 0x01	; 1
    1534:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN10thermostat7getHighEv>
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	c8 01       	movw	r24, r16
    153e:	ba 01       	movw	r22, r20
    1540:	a9 01       	movw	r20, r18
    1542:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGT),(float)theThermostat.getAveT());
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	9b 81       	ldd	r25, Y+3	; 0x03
    154a:	0c 96       	adiw	r24, 0x0c	; 12
    154c:	8c 01       	movw	r16, r24
    154e:	8f e7       	ldi	r24, 0x7F	; 127
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN10thermostat7getAveTEv>
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	c8 01       	movw	r24, r16
    155c:	ba 01       	movw	r22, r20
    155e:	a9 01       	movw	r20, r18
    1560:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	9b 81       	ldd	r25, Y+3	; 0x03
    1568:	40 96       	adiw	r24, 0x10	; 16
    156a:	8c 01       	movw	r16, r24
    156c:	8f e7       	ldi	r24, 0x7F	; 127
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 ce 04 	call	0x99c	; 0x99c <_ZN10thermostat7getAveHEv>
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	c8 01       	movw	r24, r16
    157a:	ba 01       	movw	r22, r20
    157c:	a9 01       	movw	r20, r18
    157e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <__eeupd_dword_m324pa>
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	1f 91       	pop	r17
    1590:	0f 91       	pop	r16
    1592:	08 95       	ret

00001594 <_Z9DeleteDayh>:

void DeleteDay(BYTE whichDay){
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29
    1598:	00 d0       	rcall	.+0      	; 0x159a <_Z9DeleteDayh+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <_Z9DeleteDayh+0x8>
    159c:	cd b7       	in	r28, 0x3d	; 61
    159e:	de b7       	in	r29, 0x3e	; 62
    15a0:	8c 83       	std	Y+4, r24	; 0x04
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <__eerd_byte_m324pa>
    15aa:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=whichDay+1; i<=daysStored; i++){
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	88 2f       	mov	r24, r24
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	9a 83       	std	Y+2, r25	; 0x02
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <_Z9DeleteDayh+0x36>
		MoveDown(i);
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_Z8MoveDownh>
	eeprom_update_float((float *)(offset+AVGH),(float)theThermostat.getAveH());
}

void DeleteDay(BYTE whichDay){
	BYTE daysStored=eeprom_read_byte(&eeTotalDays);
	for(int i=whichDay+1; i<=daysStored; i++){
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	41 e0       	ldi	r20, 0x01	; 1
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	28 17       	cp	r18, r24
    15d8:	39 07       	cpc	r19, r25
    15da:	0c f4       	brge	.+2      	; 0x15de <_Z9DeleteDayh+0x4a>
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	44 23       	and	r20, r20
    15e0:	61 f7       	brne	.-40     	; 0x15ba <_Z9DeleteDayh+0x26>
		MoveDown(i);
	}
	
	daysStored--;
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	81 50       	subi	r24, 0x01	; 1
    15e6:	8b 83       	std	Y+3, r24	; 0x03
	eeprom_update_byte(&eeTotalDays,daysStored);
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	6b 81       	ldd	r22, Y+3	; 0x03
    15ee:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__eeupd_byte_m324pa>
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	08 95       	ret

00001600 <_Z11getTempTinyv>:
void TWI_write_data(BYTE data);




BYTE getTempTiny(){
    1600:	cf 93       	push	r28
    1602:	df 93       	push	r29
    1604:	0f 92       	push	r0
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	//Initialize as the master
	TWI_init_master();
    160a:	0e 94 24 0b 	call	0x1648	; 0x1648 <_Z15TWI_init_masterv>
	//Send the start condition
	TWI_start();
    160e:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z9TWI_startv>
	//Send the 7-bit slave address, data direction bit (0)
	TWI_read_address(tiny);			//slave address should be 1010
    1612:	84 e1       	ldi	r24, 0x14	; 20
    1614:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_Z16TWI_read_addressh>
	//Send the data.
	TWI_write_data(0x4);			//4 represents=>SendThermTemp
    1618:	84 e0       	ldi	r24, 0x04	; 4
    161a:	0e 94 88 0b 	call	0x1710	; 0x1710 <_Z14TWI_write_datah>
	//Send Stop Condition
	TWI_stop();
    161e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_Z8TWI_stopv>
	
	//Wait two seconds before getting data off the bus
	Wait_sec(2);
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_Z8Wait_secj>
	
	//Send Start Condition
	TWI_start();
    162a:	0e 94 34 0b 	call	0x1668	; 0x1668 <_Z9TWI_startv>
	//Send slave address with read instruction
	TWI_read_address(tiny+1);
    162e:	85 e1       	ldi	r24, 0x15	; 21
    1630:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <_Z16TWI_read_addressh>
	//Read the data from the line
	BYTE output=TWI_read_data();
    1634:	0e 94 b6 0b 	call	0x176c	; 0x176c <_Z13TWI_read_datav>
    1638:	89 83       	std	Y+1, r24	; 0x01
	//Send Stop Condition
	TWI_stop();
    163a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <_Z8TWI_stopv>
	
	return output;
    163e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1640:	0f 90       	pop	r0
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	08 95       	ret

00001648 <_Z15TWI_init_masterv>:


//Initialize Master
void TWI_init_master(void){
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
	TWBR=0x01;		//Bit rate
    1650:	88 eb       	ldi	r24, 0xB8	; 184
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	21 e0       	ldi	r18, 0x01	; 1
    1656:	fc 01       	movw	r30, r24
    1658:	20 83       	st	Z, r18
	TWSR=(0<<TWPS1)|(0<<TWPS0); 
    165a:	89 eb       	ldi	r24, 0xB9	; 185
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	fc 01       	movw	r30, r24
    1660:	10 82       	st	Z, r1
}
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <_Z9TWI_startv>:

void TWI_start(void){
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1670:	8c eb       	ldi	r24, 0xBC	; 188
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	24 ea       	ldi	r18, 0xA4	; 164
    1676:	fc 01       	movw	r30, r24
    1678:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
    167a:	00 00       	nop
    167c:	8c eb       	ldi	r24, 0xBC	; 188
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	fc 01       	movw	r30, r24
    1682:	80 81       	ld	r24, Z
    1684:	80 95       	com	r24
    1686:	88 1f       	adc	r24, r24
    1688:	88 27       	eor	r24, r24
    168a:	88 1f       	adc	r24, r24
    168c:	88 23       	and	r24, r24
    168e:	b1 f7       	brne	.-20     	; 0x167c <_Z9TWI_startv+0x14>
	while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
    1690:	89 eb       	ldi	r24, 0xB9	; 185
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	fc 01       	movw	r30, r24
    1696:	80 81       	ld	r24, Z
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	88 7f       	andi	r24, 0xF8	; 248
    169e:	90 70       	andi	r25, 0x00	; 0
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	88 30       	cpi	r24, 0x08	; 8
    16a4:	91 05       	cpc	r25, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <_Z9TWI_startv+0x42>
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	22 23       	and	r18, r18
    16ac:	89 f7       	brne	.-30     	; 0x1690 <_Z9TWI_startv+0x28>
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <_Z16TWI_read_addressh>:

void TWI_read_address(BYTE data)
{
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
    16b8:	0f 92       	push	r0
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
    16be:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;    // Address and read instruction (read=1, write=0) in low bit.
    16c0:	8b eb       	ldi	r24, 0xBB	; 187
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	29 81       	ldd	r18, Y+1	; 0x01
    16c6:	fc 01       	movw	r30, r24
    16c8:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    16ca:	8c eb       	ldi	r24, 0xBC	; 188
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	24 e8       	ldi	r18, 0x84	; 132
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
    16d4:	00 00       	nop
    16d6:	8c eb       	ldi	r24, 0xBC	; 188
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	80 95       	com	r24
    16e0:	88 1f       	adc	r24, r24
    16e2:	88 27       	eor	r24, r24
    16e4:	88 1f       	adc	r24, r24
    16e6:	88 23       	and	r24, r24
    16e8:	b1 f7       	brne	.-20     	; 0x16d6 <_Z16TWI_read_addressh+0x22>
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
    16ea:	89 eb       	ldi	r24, 0xB9	; 185
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	fc 01       	movw	r30, r24
    16f0:	80 81       	ld	r24, Z
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	88 7f       	andi	r24, 0xF8	; 248
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	21 e0       	ldi	r18, 0x01	; 1
    16fc:	80 34       	cpi	r24, 0x40	; 64
    16fe:	91 05       	cpc	r25, r1
    1700:	09 f4       	brne	.+2      	; 0x1704 <_Z16TWI_read_addressh+0x50>
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	22 23       	and	r18, r18
    1706:	89 f7       	brne	.-30     	; 0x16ea <_Z16TWI_read_addressh+0x36>
}
    1708:	0f 90       	pop	r0
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	08 95       	ret

00001710 <_Z14TWI_write_datah>:

void TWI_write_data(BYTE data)
{
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;    // put data in TWDR, direction bit (write=0, read=1).
    171c:	8b eb       	ldi	r24, 0xBB	; 187
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	29 81       	ldd	r18, Y+1	; 0x01
    1722:	fc 01       	movw	r30, r24
    1724:	20 83       	st	Z, r18
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    1726:	8c eb       	ldi	r24, 0xBC	; 188
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	24 e8       	ldi	r18, 0x84	; 132
    172c:	fc 01       	movw	r30, r24
    172e:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    1730:	00 00       	nop
    1732:	8c eb       	ldi	r24, 0xBC	; 188
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	80 95       	com	r24
    173c:	88 1f       	adc	r24, r24
    173e:	88 27       	eor	r24, r24
    1740:	88 1f       	adc	r24, r24
    1742:	88 23       	and	r24, r24
    1744:	b1 f7       	brne	.-20     	; 0x1732 <_Z14TWI_write_datah+0x22>
	while((TWSR & 0xF8) != 0x28); // Check for the acknoledgement
    1746:	89 eb       	ldi	r24, 0xB9	; 185
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	fc 01       	movw	r30, r24
    174c:	80 81       	ld	r24, Z
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	88 7f       	andi	r24, 0xF8	; 248
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	21 e0       	ldi	r18, 0x01	; 1
    1758:	88 32       	cpi	r24, 0x28	; 40
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <_Z14TWI_write_datah+0x50>
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	22 23       	and	r18, r18
    1762:	89 f7       	brne	.-30     	; 0x1746 <_Z14TWI_write_datah+0x36>
}
    1764:	0f 90       	pop	r0
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <_Z13TWI_read_datav>:

BYTE TWI_read_data(void)
{
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
    1774:	8c eb       	ldi	r24, 0xBC	; 188
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	24 e8       	ldi	r18, 0x84	; 132
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
    177e:	00 00       	nop
    1780:	8c eb       	ldi	r24, 0xBC	; 188
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	80 81       	ld	r24, Z
    1788:	80 95       	com	r24
    178a:	88 1f       	adc	r24, r24
    178c:	88 27       	eor	r24, r24
    178e:	88 1f       	adc	r24, r24
    1790:	88 23       	and	r24, r24
    1792:	b1 f7       	brne	.-20     	; 0x1780 <_Z13TWI_read_datav+0x14>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
    1794:	89 eb       	ldi	r24, 0xB9	; 185
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	80 81       	ld	r24, Z
    179c:	88 2f       	mov	r24, r24
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	90 70       	andi	r25, 0x00	; 0
    17a4:	21 e0       	ldi	r18, 0x01	; 1
    17a6:	88 35       	cpi	r24, 0x58	; 88
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <_Z13TWI_read_datav+0x42>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	22 23       	and	r18, r18
    17b0:	89 f7       	brne	.-30     	; 0x1794 <_Z13TWI_read_datav+0x28>
	return TWDR;
    17b2:	8b eb       	ldi	r24, 0xBB	; 187
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	fc 01       	movw	r30, r24
    17b8:	80 81       	ld	r24, Z
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <_Z8TWI_stopv>:
void TWI_stop(void)
{
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    17c8:	8c eb       	ldi	r24, 0xBC	; 188
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	24 e9       	ldi	r18, 0x94	; 148
    17ce:	fc 01       	movw	r30, r24
    17d0:	20 83       	st	Z, r18
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
    17d2:	00 00       	nop
    17d4:	8c eb       	ldi	r24, 0xBC	; 188
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	fc 01       	movw	r30, r24
    17da:	80 81       	ld	r24, Z
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	80 71       	andi	r24, 0x10	; 16
    17e2:	90 70       	andi	r25, 0x00	; 0
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	09 f0       	breq	.+2      	; 0x17ec <_Z8TWI_stopv+0x2c>
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	22 23       	and	r18, r18
    17ee:	91 f7       	brne	.-28     	; 0x17d4 <_Z8TWI_stopv+0x14>
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <__vector_3>:

/* ------------------------------------------------------------ */
/*				Interrupt Service Routines						*/
/* ------------------------------------------------------------ */

ISR(INT2_vect){
    17f6:	1f 92       	push	r1
    17f8:	0f 92       	push	r0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	0f 92       	push	r0
    17fe:	11 24       	eor	r1, r1
    1800:	2f 93       	push	r18
    1802:	3f 93       	push	r19
    1804:	4f 93       	push	r20
    1806:	5f 93       	push	r21
    1808:	6f 93       	push	r22
    180a:	7f 93       	push	r23
    180c:	8f 93       	push	r24
    180e:	9f 93       	push	r25
    1810:	af 93       	push	r26
    1812:	bf 93       	push	r27
    1814:	ef 93       	push	r30
    1816:	ff 93       	push	r31
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	cli();
    1820:	f8 94       	cli
	prtDebug |= (1 << bnD1);	//should toggle amber LED on. 
    1822:	88 e2       	ldi	r24, 0x28	; 40
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	28 e2       	ldi	r18, 0x28	; 40
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	f9 01       	movw	r30, r18
    182c:	20 81       	ld	r18, Z
    182e:	20 61       	ori	r18, 0x10	; 16
    1830:	fc 01       	movw	r30, r24
    1832:	20 83       	st	Z, r18
	Wait_ms(200);
    1834:	88 ec       	ldi	r24, 0xC8	; 200
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	flagReceivePi=fTrue;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	80 93 76 01 	sts	0x0176, r24
	sei();
    1842:	78 94       	sei
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <__vector_11>:

//used for sleeping.
ISR(TIMER2_OVF_vect){
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	2f 93       	push	r18
    1876:	3f 93       	push	r19
    1878:	4f 93       	push	r20
    187a:	5f 93       	push	r21
    187c:	6f 93       	push	r22
    187e:	7f 93       	push	r23
    1880:	8f 93       	push	r24
    1882:	9f 93       	push	r25
    1884:	af 93       	push	r26
    1886:	bf 93       	push	r27
    1888:	ef 93       	push	r30
    188a:	ff 93       	push	r31
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	0f 92       	push	r0
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	cli();
    1896:	f8 94       	cli
	static WORD timerTwoCount=0,receivePiTimer=0;
	
	//Toggle on the second
	if (timerTwoCount<PULSE_TIME/2){
    1898:	80 91 a2 01 	lds	r24, 0x01A2
    189c:	90 91 a3 01 	lds	r25, 0x01A3
    18a0:	8e 31       	cpi	r24, 0x1E	; 30
    18a2:	91 05       	cpc	r25, r1
    18a4:	50 f4       	brcc	.+20     	; 0x18ba <__vector_11+0x50>
		prtDebug |= (1 << bnD0);
    18a6:	88 e2       	ldi	r24, 0x28	; 40
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	28 e2       	ldi	r18, 0x28	; 40
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	f9 01       	movw	r30, r18
    18b0:	20 81       	ld	r18, Z
    18b2:	28 60       	ori	r18, 0x08	; 8
    18b4:	fc 01       	movw	r30, r24
    18b6:	20 83       	st	Z, r18
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <__vector_11+0x62>
	} else {
		prtDebug &= ~(1 << bnD0);
    18ba:	88 e2       	ldi	r24, 0x28	; 40
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	28 e2       	ldi	r18, 0x28	; 40
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	27 7f       	andi	r18, 0xF7	; 247
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
	}
	
	if (timerTwoCount++>=PULSE_TIME) {
    18cc:	80 91 a2 01 	lds	r24, 0x01A2
    18d0:	90 91 a3 01 	lds	r25, 0x01A3
    18d4:	21 e0       	ldi	r18, 0x01	; 1
    18d6:	8c 33       	cpi	r24, 0x3C	; 60
    18d8:	91 05       	cpc	r25, r1
    18da:	08 f4       	brcc	.+2      	; 0x18de <__vector_11+0x74>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	90 93 a3 01 	sts	0x01A3, r25
    18e4:	80 93 a2 01 	sts	0x01A2, r24
    18e8:	22 23       	and	r18, r18
    18ea:	79 f0       	breq	.+30     	; 0x190a <__vector_11+0xa0>
		BYTE lastSecond=theClock.getSecond();
    18ec:	88 e7       	ldi	r24, 0x78	; 120
    18ee:	91 e0       	ldi	r25, 0x01	; 1
    18f0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5clock9getSecondEv>
    18f4:	89 83       	std	Y+1, r24	; 0x01
		theClock.addSecond(1);  
    18f6:	88 e7       	ldi	r24, 0x78	; 120
    18f8:	91 e0       	ldi	r25, 0x01	; 1
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	0e 94 89 05 	call	0xb12	; 0xb12 <_ZN5clock9addSecondEj>
		timerTwoCount = 0;
    1902:	10 92 a3 01 	sts	0x01A3, r1
    1906:	10 92 a2 01 	sts	0x01A2, r1
	}		//toggles green, left LED. Should be on half second.
	
	//Receive Timeout	
	if (flagReceivePi && receivePiTimer<TIMEOUT){receivePiTimer++;}								//no timteout yet
    190a:	80 91 76 01 	lds	r24, 0x0176
    190e:	88 23       	and	r24, r24
    1910:	91 f0       	breq	.+36     	; 0x1936 <__vector_11+0xcc>
    1912:	80 91 a4 01 	lds	r24, 0x01A4
    1916:	90 91 a5 01 	lds	r25, 0x01A5
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	8c 32       	cpi	r24, 0x2C	; 44
    191e:	9f 07       	cpc	r25, r31
    1920:	50 f4       	brcc	.+20     	; 0x1936 <__vector_11+0xcc>
    1922:	80 91 a4 01 	lds	r24, 0x01A4
    1926:	90 91 a5 01 	lds	r25, 0x01A5
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	90 93 a5 01 	sts	0x01A5, r25
    1930:	80 93 a4 01 	sts	0x01A4, r24
    1934:	17 c0       	rjmp	.+46     	; 0x1964 <__vector_11+0xfa>
	else if (flagReceivePi && receivePiTimer>=TIMEOUT){receivePiTimer=0;flagReceivePi=fFalse;}	//timeout
    1936:	80 91 76 01 	lds	r24, 0x0176
    193a:	88 23       	and	r24, r24
    193c:	79 f0       	breq	.+30     	; 0x195c <__vector_11+0xf2>
    193e:	80 91 a4 01 	lds	r24, 0x01A4
    1942:	90 91 a5 01 	lds	r25, 0x01A5
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	8c 32       	cpi	r24, 0x2C	; 44
    194a:	92 07       	cpc	r25, r18
    194c:	38 f0       	brcs	.+14     	; 0x195c <__vector_11+0xf2>
    194e:	10 92 a5 01 	sts	0x01A5, r1
    1952:	10 92 a4 01 	sts	0x01A4, r1
    1956:	10 92 76 01 	sts	0x0176, r1
    195a:	04 c0       	rjmp	.+8      	; 0x1964 <__vector_11+0xfa>
	else {receivePiTimer=0;}																	//make sure this statys at 0 and is reset if a successful receive happens		
    195c:	10 92 a5 01 	sts	0x01A5, r1
    1960:	10 92 a4 01 	sts	0x01A4, r1
	sei();
    1964:	78 94       	sei
}
    1966:	0f 90       	pop	r0
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	ff 91       	pop	r31
    196e:	ef 91       	pop	r30
    1970:	bf 91       	pop	r27
    1972:	af 91       	pop	r26
    1974:	9f 91       	pop	r25
    1976:	8f 91       	pop	r24
    1978:	7f 91       	pop	r23
    197a:	6f 91       	pop	r22
    197c:	5f 91       	pop	r21
    197e:	4f 91       	pop	r20
    1980:	3f 91       	pop	r19
    1982:	2f 91       	pop	r18
    1984:	0f 90       	pop	r0
    1986:	0f be       	out	0x3f, r0	; 63
    1988:	0f 90       	pop	r0
    198a:	1f 90       	pop	r1
    198c:	18 95       	reti

0000198e <main>:


/*****************************************************************************************************************/
int main(void)
{	
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	c4 56       	subi	r28, 0x64	; 100
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
	DeviceInit();
    19a8:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <_Z10DeviceInitv>
	AppInit(MYUBRR);
    19ac:	83 e3       	ldi	r24, 0x33	; 51
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_Z7AppInitj>
	ResetDebug();	//clear LED's
    19b4:	0e 94 de 12 	call	0x25bc	; 0x25bc <_Z10ResetDebugv>
	InitTimer2();
    19b8:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <_Z10InitTimer2v>
	sei();
    19bc:	78 94       	sei
	Wait_sec(2);
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_Z8Wait_secj>
	prtDebug|=(1 << bnD4);
    19c6:	88 e2       	ldi	r24, 0x28	; 40
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	28 e2       	ldi	r18, 0x28	; 40
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	f9 01       	movw	r30, r18
    19d0:	20 81       	ld	r18, Z
    19d2:	20 68       	ori	r18, 0x80	; 128
    19d4:	fc 01       	movw	r30, r24
    19d6:	20 83       	st	Z, r18
	// main program loop
	while (fTrue) {	
		
		//IF receiving from the Pi
		if (flagReceivePi){
    19d8:	80 91 76 01 	lds	r24, 0x0176
    19dc:	88 23       	and	r24, r24
    19de:	59 f0       	breq	.+22     	; 0x19f6 <main+0x68>
			//Print0("Receiving.");
			ReceivePi();
    19e0:	0e 94 07 08 	call	0x100e	; 0x100e <_Z9ReceivePiv>
			prtDebug &= ~(1 << bnD1);
    19e4:	88 e2       	ldi	r24, 0x28	; 40
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	28 e2       	ldi	r18, 0x28	; 40
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	f9 01       	movw	r30, r18
    19ee:	20 81       	ld	r18, Z
    19f0:	2f 7e       	andi	r18, 0xEF	; 239
    19f2:	fc 01       	movw	r30, r24
    19f4:	20 83       	st	Z, r18
		}
		Wait_sec(1);
    19f6:	81 e0       	ldi	r24, 0x01	; 1
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_Z8Wait_secj>
		
		//Print the week, does implicit things
		if (flagSendWeek){
    19fe:	80 91 77 01 	lds	r24, 0x0177
    1a02:	88 23       	and	r24, r24
    1a04:	31 f0       	breq	.+12     	; 0x1a12 <main+0x84>
			theThermostat.PrintWeek();
    1a06:	8f e7       	ldi	r24, 0x7F	; 127
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN10thermostat9PrintWeekEv>
			flagSendWeek=fFalse;
    1a0e:	10 92 77 01 	sts	0x0177, r1
		}
		
		//If we were asked for stats, send them back.
		if (flagAllStats){
    1a12:	80 91 75 01 	lds	r24, 0x0175
    1a16:	88 23       	and	r24, r24
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <main+0x8e>
    1a1a:	16 c1       	rjmp	.+556    	; 0x1c48 <main+0x2ba>
			cli();
    1a1c:	f8 94       	cli
			//Print0("Taking readings.");
			prtDebug |= (1 << bnD2);
    1a1e:	88 e2       	ldi	r24, 0x28	; 40
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	28 e2       	ldi	r18, 0x28	; 40
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	f9 01       	movw	r30, r18
    1a28:	20 81       	ld	r18, Z
    1a2a:	20 62       	ori	r18, 0x20	; 32
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	20 83       	st	Z, r18
			char printString[50];
			//Get all the data readings
			double adtTemp=GetTempADT();
    1a30:	0e 94 39 12 	call	0x2472	; 0x2472 <_Z10GetTempADTv>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	8b 83       	std	Y+3, r24	; 0x03
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	ad 83       	std	Y+5, r26	; 0x05
    1a3e:	be 83       	std	Y+6, r27	; 0x06
			double tiTemp=GetTempTI(MYUBRR);
    1a40:	83 e3       	ldi	r24, 0x33	; 51
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_Z9GetTempTIj>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	8f 83       	std	Y+7, r24	; 0x07
    1a4e:	98 87       	std	Y+8, r25	; 0x08
    1a50:	a9 87       	std	Y+9, r26	; 0x09
    1a52:	ba 87       	std	Y+10, r27	; 0x0a
			double thermTemp=GetTempTherm();
    1a54:	0e 94 96 10 	call	0x212c	; 0x212c <_Z12GetTempThermv>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	8b 87       	std	Y+11, r24	; 0x0b
    1a5e:	9c 87       	std	Y+12, r25	; 0x0c
    1a60:	ad 87       	std	Y+13, r26	; 0x0d
    1a62:	be 87       	std	Y+14, r27	; 0x0e
			double humidity=GetHumidity();
    1a64:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_Z11GetHumidityv>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8f 87       	std	Y+15, r24	; 0x0f
    1a6e:	98 8b       	std	Y+16, r25	; 0x10
    1a70:	a9 8b       	std	Y+17, r26	; 0x11
    1a72:	ba 8b       	std	Y+18, r27	; 0x12
			//Add the therm temp to the thermostat class long with the humidity.
			theThermostat.addDataPoint(thermTemp,humidity);
    1a74:	8f e7       	ldi	r24, 0x7F	; 127
    1a76:	91 e0       	ldi	r25, 0x01	; 1
    1a78:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a7a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a7c:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a7e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a80:	0f 85       	ldd	r16, Y+15	; 0x0f
    1a82:	18 89       	ldd	r17, Y+16	; 0x10
    1a84:	29 89       	ldd	r18, Y+17	; 0x11
    1a86:	3a 89       	ldd	r19, Y+18	; 0x12
    1a88:	0e 94 85 03 	call	0x70a	; 0x70a <_ZN10thermostat12addDataPointEdd>
			//Declare strings to convert doubles into
			char adtStr[8],tiStr[8],thermStr[8],humidityStr[8];
			dtostrf(adtTemp,1,2,adtStr);
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a90:	ad 81       	ldd	r26, Y+5	; 0x05
    1a92:	be 81       	ldd	r27, Y+6	; 0x06
    1a94:	fe 01       	movw	r30, r28
    1a96:	73 96       	adiw	r30, 0x13	; 19
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	41 e0       	ldi	r20, 0x01	; 1
    1a9e:	22 e0       	ldi	r18, 0x02	; 2
    1aa0:	8f 01       	movw	r16, r30
    1aa2:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
			dtostrf(thermTemp,1,2,thermStr);
    1aa6:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aa8:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aaa:	ad 85       	ldd	r26, Y+13	; 0x0d
    1aac:	be 85       	ldd	r27, Y+14	; 0x0e
    1aae:	fe 01       	movw	r30, r28
    1ab0:	b3 96       	adiw	r30, 0x23	; 35
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	22 e0       	ldi	r18, 0x02	; 2
    1aba:	8f 01       	movw	r16, r30
    1abc:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
			dtostrf(tiTemp,1,2,tiStr);
    1ac0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac2:	98 85       	ldd	r25, Y+8	; 0x08
    1ac4:	a9 85       	ldd	r26, Y+9	; 0x09
    1ac6:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ac8:	fe 01       	movw	r30, r28
    1aca:	7b 96       	adiw	r30, 0x1b	; 27
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	22 e0       	ldi	r18, 0x02	; 2
    1ad4:	8f 01       	movw	r16, r30
    1ad6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
			dtostrf(humidity,1,2,humidityStr);
    1ada:	8f 85       	ldd	r24, Y+15	; 0x0f
    1adc:	98 89       	ldd	r25, Y+16	; 0x10
    1ade:	a9 89       	ldd	r26, Y+17	; 0x11
    1ae0:	ba 89       	ldd	r27, Y+18	; 0x12
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	bb 96       	adiw	r30, 0x2b	; 43
    1ae6:	bc 01       	movw	r22, r24
    1ae8:	cd 01       	movw	r24, r26
    1aea:	41 e0       	ldi	r20, 0x01	; 1
    1aec:	22 e0       	ldi	r18, 0x02	; 2
    1aee:	8f 01       	movw	r16, r30
    1af0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <dtostrf>
			//Make the output string
			strcpy(printString,"AD");
    1af4:	ce 01       	movw	r24, r28
    1af6:	c3 96       	adiw	r24, 0x33	; 51
    1af8:	2e e6       	ldi	r18, 0x6E	; 110
    1afa:	31 e0       	ldi	r19, 0x01	; 1
    1afc:	43 e0       	ldi	r20, 0x03	; 3
    1afe:	f9 01       	movw	r30, r18
    1b00:	00 80       	ld	r0, Z
    1b02:	2f 5f       	subi	r18, 0xFF	; 255
    1b04:	3f 4f       	sbci	r19, 0xFF	; 255
    1b06:	fc 01       	movw	r30, r24
    1b08:	00 82       	st	Z, r0
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	41 50       	subi	r20, 0x01	; 1
    1b0e:	44 23       	and	r20, r20
    1b10:	b1 f7       	brne	.-20     	; 0x1afe <main+0x170>
			strcat(printString,adtStr);
    1b12:	ce 01       	movw	r24, r28
    1b14:	c3 96       	adiw	r24, 0x33	; 51
    1b16:	9e 01       	movw	r18, r28
    1b18:	2d 5e       	subi	r18, 0xED	; 237
    1b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b1c:	b9 01       	movw	r22, r18
    1b1e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <strcat>
			strcat(printString,"/TI");
    1b22:	ce 01       	movw	r24, r28
    1b24:	c3 96       	adiw	r24, 0x33	; 51
    1b26:	9c 01       	movw	r18, r24
    1b28:	f9 01       	movw	r30, r18
    1b2a:	01 90       	ld	r0, Z+
    1b2c:	00 20       	and	r0, r0
    1b2e:	e9 f7       	brne	.-6      	; 0x1b2a <main+0x19c>
    1b30:	cf 01       	movw	r24, r30
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	82 1b       	sub	r24, r18
    1b36:	93 0b       	sbc	r25, r19
    1b38:	9e 01       	movw	r18, r28
    1b3a:	2d 5c       	subi	r18, 0xCD	; 205
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	28 0f       	add	r18, r24
    1b40:	39 1f       	adc	r19, r25
    1b42:	8f e2       	ldi	r24, 0x2F	; 47
    1b44:	94 e5       	ldi	r25, 0x54	; 84
    1b46:	a9 e4       	ldi	r26, 0x49	; 73
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,tiStr);
    1b54:	ce 01       	movw	r24, r28
    1b56:	c3 96       	adiw	r24, 0x33	; 51
    1b58:	9e 01       	movw	r18, r28
    1b5a:	25 5e       	subi	r18, 0xE5	; 229
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	b9 01       	movw	r22, r18
    1b60:	0e 94 10 16 	call	0x2c20	; 0x2c20 <strcat>
			strcat(printString,"/TH");
    1b64:	ce 01       	movw	r24, r28
    1b66:	c3 96       	adiw	r24, 0x33	; 51
    1b68:	9c 01       	movw	r18, r24
    1b6a:	f9 01       	movw	r30, r18
    1b6c:	01 90       	ld	r0, Z+
    1b6e:	00 20       	and	r0, r0
    1b70:	e9 f7       	brne	.-6      	; 0x1b6c <main+0x1de>
    1b72:	cf 01       	movw	r24, r30
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	82 1b       	sub	r24, r18
    1b78:	93 0b       	sbc	r25, r19
    1b7a:	9e 01       	movw	r18, r28
    1b7c:	2d 5c       	subi	r18, 0xCD	; 205
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	28 0f       	add	r18, r24
    1b82:	39 1f       	adc	r19, r25
    1b84:	8f e2       	ldi	r24, 0x2F	; 47
    1b86:	94 e5       	ldi	r25, 0x54	; 84
    1b88:	a8 e4       	ldi	r26, 0x48	; 72
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	f9 01       	movw	r30, r18
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,thermStr);
    1b96:	ce 01       	movw	r24, r28
    1b98:	c3 96       	adiw	r24, 0x33	; 51
    1b9a:	9e 01       	movw	r18, r28
    1b9c:	2d 5d       	subi	r18, 0xDD	; 221
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	b9 01       	movw	r22, r18
    1ba2:	0e 94 10 16 	call	0x2c20	; 0x2c20 <strcat>
			strcat(printString,"/HU");
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	c3 96       	adiw	r24, 0x33	; 51
    1baa:	9c 01       	movw	r18, r24
    1bac:	f9 01       	movw	r30, r18
    1bae:	01 90       	ld	r0, Z+
    1bb0:	00 20       	and	r0, r0
    1bb2:	e9 f7       	brne	.-6      	; 0x1bae <main+0x220>
    1bb4:	cf 01       	movw	r24, r30
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	82 1b       	sub	r24, r18
    1bba:	93 0b       	sbc	r25, r19
    1bbc:	9e 01       	movw	r18, r28
    1bbe:	2d 5c       	subi	r18, 0xCD	; 205
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	28 0f       	add	r18, r24
    1bc4:	39 1f       	adc	r19, r25
    1bc6:	8f e2       	ldi	r24, 0x2F	; 47
    1bc8:	98 e4       	ldi	r25, 0x48	; 72
    1bca:	a5 e5       	ldi	r26, 0x55	; 85
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	f9 01       	movw	r30, r18
    1bd0:	80 83       	st	Z, r24
    1bd2:	91 83       	std	Z+1, r25	; 0x01
    1bd4:	a2 83       	std	Z+2, r26	; 0x02
    1bd6:	b3 83       	std	Z+3, r27	; 0x03
			strcat(printString,humidityStr);
    1bd8:	ce 01       	movw	r24, r28
    1bda:	c3 96       	adiw	r24, 0x33	; 51
    1bdc:	9e 01       	movw	r18, r28
    1bde:	25 5d       	subi	r18, 0xD5	; 213
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	b9 01       	movw	r22, r18
    1be4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <strcat>
			//Drop debug indicator light, print the string, exit while clearing the string in memory
			prtDebug &= ~(1 << bnD2);
    1be8:	88 e2       	ldi	r24, 0x28	; 40
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	28 e2       	ldi	r18, 0x28	; 40
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	20 81       	ld	r18, Z
    1bf4:	2f 7d       	andi	r18, 0xDF	; 223
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	20 83       	st	Z, r18
			Print0(printString);
    1bfa:	ce 01       	movw	r24, r28
    1bfc:	c3 96       	adiw	r24, 0x33	; 51
    1bfe:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
			Print0("XXX");
    1c02:	8f e0       	ldi	r24, 0x0F	; 15
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 da 07 	call	0xfb4	; 0xfb4 <_Z6Print0Pc>
			flagAllStats=fFalse;
    1c0a:	10 92 75 01 	sts	0x0175, r1
			int i=0;
    1c0e:	1a 82       	std	Y+2, r1	; 0x02
    1c10:	19 82       	std	Y+1, r1	; 0x01
			for (i=0;i<50;i++){printString[i]=NULL;}
    1c12:	1a 82       	std	Y+2, r1	; 0x02
    1c14:	19 82       	std	Y+1, r1	; 0x01
    1c16:	0e c0       	rjmp	.+28     	; 0x1c34 <main+0x2a6>
    1c18:	9e 01       	movw	r18, r28
    1c1a:	2d 5c       	subi	r18, 0xCD	; 205
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	9a 81       	ldd	r25, Y+2	; 0x02
    1c22:	82 0f       	add	r24, r18
    1c24:	93 1f       	adc	r25, r19
    1c26:	fc 01       	movw	r30, r24
    1c28:	10 82       	st	Z, r1
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	21 e0       	ldi	r18, 0x01	; 1
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3a:	82 33       	cpi	r24, 0x32	; 50
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	0c f0       	brlt	.+2      	; 0x1c42 <main+0x2b4>
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	22 23       	and	r18, r18
    1c44:	49 f7       	brne	.-46     	; 0x1c18 <main+0x28a>
			sei();
    1c46:	78 94       	sei
		}		
		
		//Power save. Should sleep for ~10 seconds
		//Print0(" Going to sleep... ");
		prtDebug &= ~(1 << bnD4);
    1c48:	88 e2       	ldi	r24, 0x28	; 40
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	28 e2       	ldi	r18, 0x28	; 40
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	2f 77       	andi	r18, 0x7F	; 127
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
		flagGoToSleep=fTrue;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 93 74 01 	sts	0x0174, r24
		sleepCnt=0;
    1c60:	10 92 73 01 	sts	0x0173, r1
    1c64:	10 92 72 01 	sts	0x0172, r1
		SMCR = (1 << SM1)|(1 << SM0);
    1c68:	83 e5       	ldi	r24, 0x53	; 83
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	26 e0       	ldi	r18, 0x06	; 6
    1c6e:	fc 01       	movw	r30, r24
    1c70:	20 83       	st	Z, r18
		SMCR |= (1 << SE);
    1c72:	83 e5       	ldi	r24, 0x53	; 83
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	23 e5       	ldi	r18, 0x53	; 83
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	20 81       	ld	r18, Z
    1c7e:	21 60       	ori	r18, 0x01	; 1
    1c80:	fc 01       	movw	r30, r24
    1c82:	20 83       	st	Z, r18
		while (!flagReceivePi){
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <main+0x30c>
			asm volatile("SLEEP");
    1c86:	88 95       	sleep
			sleepCnt++;
    1c88:	80 91 72 01 	lds	r24, 0x0172
    1c8c:	90 91 73 01 	lds	r25, 0x0173
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	90 93 73 01 	sts	0x0173, r25
    1c96:	80 93 72 01 	sts	0x0172, r24
		prtDebug &= ~(1 << bnD4);
		flagGoToSleep=fTrue;
		sleepCnt=0;
		SMCR = (1 << SM1)|(1 << SM0);
		SMCR |= (1 << SE);
		while (!flagReceivePi){
    1c9a:	90 91 76 01 	lds	r25, 0x0176
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	99 23       	and	r25, r25
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <main+0x318>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	88 23       	and	r24, r24
    1ca8:	71 f7       	brne	.-36     	; 0x1c86 <main+0x2f8>
			asm volatile("SLEEP");
			sleepCnt++;
		}		
		SMCR = 0;
    1caa:	83 e5       	ldi	r24, 0x53	; 83
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	fc 01       	movw	r30, r24
    1cb0:	10 82       	st	Z, r1
		flagGoToSleep = fFalse;
    1cb2:	10 92 74 01 	sts	0x0174, r1
		prtDebug|=(1 << bnD4);
    1cb6:	88 e2       	ldi	r24, 0x28	; 40
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	28 e2       	ldi	r18, 0x28	; 40
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	20 81       	ld	r18, Z
    1cc2:	20 68       	ori	r18, 0x80	; 128
    1cc4:	fc 01       	movw	r30, r24
    1cc6:	20 83       	st	Z, r18
		Wait_ms(10);
    1cc8:	8a e0       	ldi	r24, 0x0A	; 10
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	InitTimer2();
	sei();
	Wait_sec(2);
	prtDebug|=(1 << bnD4);
	// main program loop
	while (fTrue) {	
    1cd0:	83 ce       	rjmp	.-762    	; 0x19d8 <main+0x4a>

00001cd2 <_Z10DeviceInitv>:
	}  //end while fTrue
} // end main()

/**********************************************************************************************************************************/
void DeviceInit(void)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	// Default all i/o ports to input with pull-ups disabled 	
	DDRA = 0;
    1cda:	81 e2       	ldi	r24, 0x21	; 33
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	fc 01       	movw	r30, r24
    1ce0:	10 82       	st	Z, r1
	DDRB = 0;
    1ce2:	84 e2       	ldi	r24, 0x24	; 36
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	10 82       	st	Z, r1
	DDRC = 0;
    1cea:	87 e2       	ldi	r24, 0x27	; 39
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	fc 01       	movw	r30, r24
    1cf0:	10 82       	st	Z, r1
	DDRD = 0;
    1cf2:	8a e2       	ldi	r24, 0x2A	; 42
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	10 82       	st	Z, r1

	PORTA = 0x00;
    1cfa:	82 e2       	ldi	r24, 0x22	; 34
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	fc 01       	movw	r30, r24
    1d00:	10 82       	st	Z, r1
	PORTB = 0x00;
    1d02:	85 e2       	ldi	r24, 0x25	; 37
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	fc 01       	movw	r30, r24
    1d08:	10 82       	st	Z, r1
	PORTC = 0x00;
    1d0a:	88 e2       	ldi	r24, 0x28	; 40
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	fc 01       	movw	r30, r24
    1d10:	10 82       	st	Z, r1
	PORTD = 0x00;
    1d12:	8b e2       	ldi	r24, 0x2B	; 43
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	fc 01       	movw	r30, r24
    1d18:	10 82       	st	Z, r1
}
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <_Z7AppInitj>:
/**********************************************************************************************************************************/
void AppInit(unsigned int ubrr)
{
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <_Z7AppInitj+0x6>
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <_Z7AppInitj+0x8>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <_Z7AppInitj+0xa>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
	//initialize stuff for UART
	UBRR0L = ubrr;   											//set low byte of baud rate
    1d32:	84 ec       	ldi	r24, 0xC4	; 196
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	2d 81       	ldd	r18, Y+5	; 0x05
    1d38:	fc 01       	movw	r30, r24
    1d3a:	20 83       	st	Z, r18
	UBRR0H = (ubrr >> 8);										//set high byte of baud rate
    1d3c:	85 ec       	ldi	r24, 0xC5	; 197
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	2d 81       	ldd	r18, Y+5	; 0x05
    1d42:	3e 81       	ldd	r19, Y+6	; 0x06
    1d44:	23 2f       	mov	r18, r19
    1d46:	33 27       	eor	r19, r19
    1d48:	fc 01       	movw	r30, r24
    1d4a:	20 83       	st	Z, r18
	//enable tx using normal clock
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
    1d4c:	81 ec       	ldi	r24, 0xC1	; 193
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	28 e1       	ldi	r18, 0x18	; 24
    1d52:	fc 01       	movw	r30, r24
    1d54:	20 83       	st	Z, r18
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity
    1d56:	82 ec       	ldi	r24, 0xC2	; 194
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	26 e0       	ldi	r18, 0x06	; 6
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	20 83       	st	Z, r18

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
    1d60:	87 e2       	ldi	r24, 0x27	; 39
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	27 e2       	ldi	r18, 0x27	; 39
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	f9 01       	movw	r30, r18
    1d6a:	20 81       	ld	r18, Z
    1d6c:	28 6f       	ori	r18, 0xF8	; 248
    1d6e:	fc 01       	movw	r30, r24
    1d70:	20 83       	st	Z, r18
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    1d72:	84 e0       	ldi	r24, 0x04	; 4
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	1d c0       	rjmp	.+58     	; 0x1db6 <_Z7AppInitj+0x96>
		prtDebug |= (1 << i);
    1d7c:	88 e2       	ldi	r24, 0x28	; 40
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	28 e2       	ldi	r18, 0x28	; 40
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	f9 01       	movw	r30, r18
    1d86:	20 81       	ld	r18, Z
    1d88:	42 2f       	mov	r20, r18
    1d8a:	21 e0       	ldi	r18, 0x01	; 1
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	09 80       	ldd	r0, Y+1	; 0x01
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <_Z7AppInitj+0x76>
    1d92:	22 0f       	add	r18, r18
    1d94:	33 1f       	adc	r19, r19
    1d96:	0a 94       	dec	r0
    1d98:	e2 f7       	brpl	.-8      	; 0x1d92 <_Z7AppInitj+0x72>
    1d9a:	24 2b       	or	r18, r20
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	20 83       	st	Z, r18
		Wait_ms(200);
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
		ResetDebug();
    1da8:	0e 94 de 12 	call	0x25bc	; 0x25bc <_Z10ResetDebugv>
	UCSR0B = (1 << TXEN0)|(1 << RXEN0);
	UCSR0C = (1 << UCSZ01)|(1 << UCSZ00);							//8 data bits, no parity

	//Initialize Debug LEDS. Check by strobing up and down
	ddrDebug |= (1 << bnD0)|(1 << bnD1)|(1 << bnD2)|(1 << bnD3)|(1 << bnD4);	//Set as outputs
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	01 96       	adiw	r24, 0x01	; 1
    1db2:	9a 83       	std	Y+2, r25	; 0x02
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	21 e0       	ldi	r18, 0x01	; 1
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	9a 81       	ldd	r25, Y+2	; 0x02
    1dbc:	88 30       	cpi	r24, 0x08	; 8
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	0c f0       	brlt	.+2      	; 0x1dc4 <_Z7AppInitj+0xa4>
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	22 23       	and	r18, r18
    1dc6:	d1 f6       	brne	.-76     	; 0x1d7c <_Z7AppInitj+0x5c>
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    1dc8:	87 e0       	ldi	r24, 0x07	; 7
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 83       	std	Y+4, r25	; 0x04
    1dce:	8b 83       	std	Y+3, r24	; 0x03
    1dd0:	1d c0       	rjmp	.+58     	; 0x1e0c <_Z7AppInitj+0xec>
		prtDebug |= (1 << j);
    1dd2:	88 e2       	ldi	r24, 0x28	; 40
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	28 e2       	ldi	r18, 0x28	; 40
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	f9 01       	movw	r30, r18
    1ddc:	20 81       	ld	r18, Z
    1dde:	42 2f       	mov	r20, r18
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	0b 80       	ldd	r0, Y+3	; 0x03
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <_Z7AppInitj+0xcc>
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <_Z7AppInitj+0xc8>
    1df0:	24 2b       	or	r18, r20
    1df2:	fc 01       	movw	r30, r24
    1df4:	20 83       	st	Z, r18
		Wait_ms(200);
    1df6:	88 ec       	ldi	r24, 0xC8	; 200
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
		ResetDebug();
    1dfe:	0e 94 de 12 	call	0x25bc	; 0x25bc <_Z10ResetDebugv>
	for (int i = 4; i < 8; i++) {	//Strobe from right to left
		prtDebug |= (1 << i);
		Wait_ms(200);
		ResetDebug();
	}
	for (int j = 7; j >= 4; j--){	//Strobe from left to right
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	9c 81       	ldd	r25, Y+4	; 0x04
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9c 83       	std	Y+4, r25	; 0x04
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	21 e0       	ldi	r18, 0x01	; 1
    1e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e10:	9c 81       	ldd	r25, Y+4	; 0x04
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	91 05       	cpc	r25, r1
    1e16:	0c f4       	brge	.+2      	; 0x1e1a <_Z7AppInitj+0xfa>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	22 23       	and	r18, r18
    1e1c:	d1 f6       	brne	.-76     	; 0x1dd2 <_Z7AppInitj+0xb2>
		Wait_ms(200);
		ResetDebug();
	}		
	
	//Initialize SPI for AD Temperature Sensor
	ddrSpi |= (1 << bnMosi)|(1 << bnSck)|(1 << bnSS);				//SS, Sck, MOSI all outputs
    1e1e:	84 e2       	ldi	r24, 0x24	; 36
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	24 e2       	ldi	r18, 0x24	; 36
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	f9 01       	movw	r30, r18
    1e28:	20 81       	ld	r18, Z
    1e2a:	20 6b       	ori	r18, 0xB0	; 176
    1e2c:	fc 01       	movw	r30, r24
    1e2e:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);								//pull Sck and SS high
    1e30:	85 e2       	ldi	r24, 0x25	; 37
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	25 e2       	ldi	r18, 0x25	; 37
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	f9 01       	movw	r30, r18
    1e3a:	20 81       	ld	r18, Z
    1e3c:	20 69       	ori	r18, 0x90	; 144
    1e3e:	fc 01       	movw	r30, r24
    1e40:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMiso);										//no pull up on Miso, its an input, keep it low
    1e42:	85 e2       	ldi	r24, 0x25	; 37
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	25 e2       	ldi	r18, 0x25	; 37
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	20 81       	ld	r18, Z
    1e4e:	2f 7b       	andi	r18, 0xBF	; 191
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18
	prtSpi &= ~(1 << bnMosi);										//pull dwon on Mosi, should always be low
    1e54:	85 e2       	ldi	r24, 0x25	; 37
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	25 e2       	ldi	r18, 0x25	; 37
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	f9 01       	movw	r30, r18
    1e5e:	20 81       	ld	r18, Z
    1e60:	2f 7d       	andi	r18, 0xDF	; 223
    1e62:	fc 01       	movw	r30, r24
    1e64:	20 83       	st	Z, r18
	SPCR0 |= (1 << MSTR0)|(1 << SPE0)|(1 << SPR00)|(1 << SPR10);	//enables spi, master mode to talk with AD and fck/128
    1e66:	8c e4       	ldi	r24, 0x4C	; 76
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	2c e4       	ldi	r18, 0x4C	; 76
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	f9 01       	movw	r30, r18
    1e70:	20 81       	ld	r18, Z
    1e72:	23 65       	ori	r18, 0x53	; 83
    1e74:	fc 01       	movw	r30, r24
    1e76:	20 83       	st	Z, r18
/*	//RTC initialization
	ddrRTC |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
	prtDebug |= (1 << bnMFP)|(1 << bnSDA)|(1 << bnSCL);
*/
	//Initialize power outputs
	PRR0 |= (1 << PRTWI)|(1 << PRTIM2)|(1 << PRTIM1)|(1 << PRTIM0)|(1 << PRUSART1)|(1 << PRADC)|(1 << PRSPI); //Turn EVERYTHING off initially
    1e78:	84 e6       	ldi	r24, 0x64	; 100
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	24 e6       	ldi	r18, 0x64	; 100
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	f9 01       	movw	r30, r18
    1e82:	20 81       	ld	r18, Z
    1e84:	2d 6f       	ori	r18, 0xFD	; 253
    1e86:	fc 01       	movw	r30, r24
    1e88:	20 83       	st	Z, r18

	//set up interrupts for waking device up through INT2
	EICRA |= (1 << ISC21)|(1 << ISC20);		//rising edge of INT2 triggers asynchronous interrupt
    1e8a:	89 e6       	ldi	r24, 0x69	; 105
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	29 e6       	ldi	r18, 0x69	; 105
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	f9 01       	movw	r30, r18
    1e94:	20 81       	ld	r18, Z
    1e96:	20 63       	ori	r18, 0x30	; 48
    1e98:	fc 01       	movw	r30, r24
    1e9a:	20 83       	st	Z, r18
	EIMSK  = (1 << INT2);					//enables interrupts on INT2 as long as global interrupt is set.
    1e9c:	8d e3       	ldi	r24, 0x3D	; 61
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	24 e0       	ldi	r18, 0x04	; 4
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
	
	//Initialize Booleans
	flagGoToSleep=fFalse;
    1ea6:	10 92 74 01 	sts	0x0174, r1
	flagAllStats=fFalse;
    1eaa:	10 92 75 01 	sts	0x0175, r1
	flagReceivePi=fFalse;
    1eae:	10 92 76 01 	sts	0x0176, r1
	flagSendWeek=fFalse;
    1eb2:	10 92 77 01 	sts	0x0177, r1
}
    1eb6:	26 96       	adiw	r28, 0x06	; 6
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	08 95       	ret

00001ec8 <_Z10InitTimer2v>:

/**********************************************************************************************************************************/
void InitTimer2(){
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	//Disable global interrupts
	cli();
    1ed0:	f8 94       	cli
	//Give timer2 power
	PRR0 &= ~(1 << PRTIM2);	
    1ed2:	84 e6       	ldi	r24, 0x64	; 100
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	24 e6       	ldi	r18, 0x64	; 100
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	f9 01       	movw	r30, r18
    1edc:	20 81       	ld	r18, Z
    1ede:	2f 7b       	andi	r18, 0xBF	; 191
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	20 83       	st	Z, r18
	Wait_ms(1);	
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	//Set up registers	
	TCCR2B |= (1 << CS22)|(1 << CS21)|(1 << CS20);	//1024 prescaler
    1eec:	81 eb       	ldi	r24, 0xB1	; 177
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	21 eb       	ldi	r18, 0xB1	; 177
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	f9 01       	movw	r30, r18
    1ef6:	20 81       	ld	r18, Z
    1ef8:	27 60       	ori	r18, 0x07	; 7
    1efa:	fc 01       	movw	r30, r24
    1efc:	20 83       	st	Z, r18
	while (ASSR & ((1 << TCR2BUB)|(1 << TCN2UB)));	//wait for it not to be busy
    1efe:	86 eb       	ldi	r24, 0xB6	; 182
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	fc 01       	movw	r30, r24
    1f04:	80 81       	ld	r24, Z
    1f06:	88 2f       	mov	r24, r24
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	81 71       	andi	r24, 0x11	; 17
    1f0c:	90 70       	andi	r25, 0x00	; 0
    1f0e:	21 e0       	ldi	r18, 0x01	; 1
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <_Z10InitTimer2v+0x4e>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	22 23       	and	r18, r18
    1f18:	91 f7       	brne	.-28     	; 0x1efe <_Z10InitTimer2v+0x36>
	TIFR2 = (1 << TOV2);							//Clear any interrupts pending for the timer
    1f1a:	87 e3       	ldi	r24, 0x37	; 55
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	21 e0       	ldi	r18, 0x01	; 1
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18
	TIMSK2 = (1 << TOIE2);							//Enable overflow on it
    1f24:	80 e7       	ldi	r24, 0x70	; 112
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	21 e0       	ldi	r18, 0x01	; 1
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	20 83       	st	Z, r18
	//Re-enable global interrupts
	sei();
    1f2e:	78 94       	sei
}
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	08 95       	ret

00001f36 <_Z9GetTempTIj>:
/**********************************************************************************************************************************/

double GetTempTI(unsigned int ubrr)
{
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
    1f3e:	28 97       	sbiw	r28, 0x08	; 8
    1f40:	0f b6       	in	r0, 0x3f	; 63
    1f42:	f8 94       	cli
    1f44:	de bf       	out	0x3e, r29	; 62
    1f46:	0f be       	out	0x3f, r0	; 63
    1f48:	cd bf       	out	0x3d, r28	; 61
    1f4a:	98 87       	std	Y+8, r25	; 0x08
    1f4c:	8f 83       	std	Y+7, r24	; 0x07
	WORD tempDataTI = 0;
    1f4e:	1a 82       	std	Y+2, r1	; 0x02
    1f50:	19 82       	std	Y+1, r1	; 0x01
	
	//Bring the USART1 back online, reset regitser
	PRR0 &= ~(1 << PRUSART1);	//give it power
    1f52:	84 e6       	ldi	r24, 0x64	; 100
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	24 e6       	ldi	r18, 0x64	; 100
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	20 81       	ld	r18, Z
    1f5e:	2f 7e       	andi	r18, 0xEF	; 239
    1f60:	fc 01       	movw	r30, r24
    1f62:	20 83       	st	Z, r18
	Wait_ms(10);				//Leveling time
    1f64:	8a e0       	ldi	r24, 0x0A	; 10
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	UBRR1 = 0;
    1f6c:	8c ec       	ldi	r24, 0xCC	; 204
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	fc 01       	movw	r30, r24
    1f72:	11 82       	std	Z+1, r1	; 0x01
    1f74:	10 82       	st	Z, r1
	
	//Initialize USART1 pins
	ddrSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Initialize Sck and Cs as outputs
    1f76:	8a e2       	ldi	r24, 0x2A	; 42
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	2a e2       	ldi	r18, 0x2A	; 42
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	f9 01       	movw	r30, r18
    1f80:	20 81       	ld	r18, Z
    1f82:	20 63       	ori	r18, 0x30	; 48
    1f84:	fc 01       	movw	r30, r24
    1f86:	20 83       	st	Z, r18
	prtSpi1 |= (1 << bnSpiSck_1)|(1 << bnSpiCs_1);	//Bring them high to initialize
    1f88:	8b e2       	ldi	r24, 0x2B	; 43
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	2b e2       	ldi	r18, 0x2B	; 43
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	f9 01       	movw	r30, r18
    1f92:	20 81       	ld	r18, Z
    1f94:	20 63       	ori	r18, 0x30	; 48
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
	
	//INitialize functionality
	UCSR1C = (1 << UMSEL11)|(1 << UMSEL10)|(0 << UCPOL1)|(0 << 1);	//Set MSPI mode and SPI data mode 0, pg 202 of ds
    1f9a:	8a ec       	ldi	r24, 0xCA	; 202
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	20 ec       	ldi	r18, 0xC0	; 192
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	20 83       	st	Z, r18
	UCSR1B = (1 << RXEN1)|(1 << TXEN1);								//Enable the receiver and transmitter
    1fa4:	89 ec       	ldi	r24, 0xC9	; 201
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	28 e1       	ldi	r18, 0x18	; 24
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18

	//Set Baud rate, 9600, same as SPI
	UBRR1L = ubrr;
    1fae:	8c ec       	ldi	r24, 0xCC	; 204
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	2f 81       	ldd	r18, Y+7	; 0x07
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	20 83       	st	Z, r18
	UBRR1H = (ubrr >> 8);
    1fb8:	8d ec       	ldi	r24, 0xCD	; 205
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1fbe:	38 85       	ldd	r19, Y+8	; 0x08
    1fc0:	23 2f       	mov	r18, r19
    1fc2:	33 27       	eor	r19, r19
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	20 83       	st	Z, r18
	
	//Wait for empty transmit buffer
	while (!(UCSR1A & (1 << UDRE1)));
    1fc8:	00 00       	nop
    1fca:	88 ec       	ldi	r24, 0xC8	; 200
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	fc 01       	movw	r30, r24
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	80 72       	andi	r24, 0x20	; 32
    1fd8:	90 70       	andi	r25, 0x00	; 0
    1fda:	21 e0       	ldi	r18, 0x01	; 1
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	09 f0       	breq	.+2      	; 0x1fe2 <_Z9GetTempTIj+0xac>
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	22 23       	and	r18, r18
    1fe4:	91 f7       	brne	.-28     	; 0x1fca <_Z9GetTempTIj+0x94>
	
	//Send CS low
	prtSpi1 &= ~(1 << bnSpiCs_1);
    1fe6:	8b e2       	ldi	r24, 0x2B	; 43
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	2b e2       	ldi	r18, 0x2B	; 43
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	f9 01       	movw	r30, r18
    1ff0:	20 81       	ld	r18, Z
    1ff2:	2f 7d       	andi	r18, 0xDF	; 223
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	20 83       	st	Z, r18
	
	//Write to the buffer, starting a transmission
	UDR1 = 0x00;	
    1ff8:	8e ec       	ldi	r24, 0xCE	; 206
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	10 82       	st	Z, r1
	
	//Wait for it to be received, this is the first byte
	while (!(UCSR1A & (1 << RXC1)));
    2000:	00 00       	nop
    2002:	88 ec       	ldi	r24, 0xC8	; 200
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	fc 01       	movw	r30, r24
    2008:	80 81       	ld	r24, Z
    200a:	80 95       	com	r24
    200c:	88 1f       	adc	r24, r24
    200e:	88 27       	eor	r24, r24
    2010:	88 1f       	adc	r24, r24
    2012:	88 23       	and	r24, r24
    2014:	b1 f7       	brne	.-20     	; 0x2002 <_Z9GetTempTIj+0xcc>
	tempDataTI = (UDR1 << 8);	//first byte of data
    2016:	8e ec       	ldi	r24, 0xCE	; 206
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	fc 01       	movw	r30, r24
    201c:	80 81       	ld	r24, Z
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	98 2f       	mov	r25, r24
    2024:	88 27       	eor	r24, r24
    2026:	9a 83       	std	Y+2, r25	; 0x02
    2028:	89 83       	std	Y+1, r24	; 0x01
	
	//Write to buffer again, get second byte
	UDR1 = 0x00;
    202a:	8e ec       	ldi	r24, 0xCE	; 206
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	fc 01       	movw	r30, r24
    2030:	10 82       	st	Z, r1
	
	//Wait for it to be received, second byte
	while (!(UCSR1A &(1 << RXC1)));
    2032:	00 00       	nop
    2034:	88 ec       	ldi	r24, 0xC8	; 200
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	80 95       	com	r24
    203e:	88 1f       	adc	r24, r24
    2040:	88 27       	eor	r24, r24
    2042:	88 1f       	adc	r24, r24
    2044:	88 23       	and	r24, r24
    2046:	b1 f7       	brne	.-20     	; 0x2034 <_Z9GetTempTIj+0xfe>
	tempDataTI |= UDR1;	
    2048:	8e ec       	ldi	r24, 0xCE	; 206
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	fc 01       	movw	r30, r24
    204e:	80 81       	ld	r24, Z
    2050:	88 2f       	mov	r24, r24
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	29 81       	ldd	r18, Y+1	; 0x01
    2056:	3a 81       	ldd	r19, Y+2	; 0x02
    2058:	82 2b       	or	r24, r18
    205a:	93 2b       	or	r25, r19
    205c:	9a 83       	std	Y+2, r25	; 0x02
    205e:	89 83       	std	Y+1, r24	; 0x01
	
	//Bring SCK and CS back high
	prtSpi1 |= (1 << bnSpiCs_1)|(1 << bnSpiSck_1);
    2060:	8b e2       	ldi	r24, 0x2B	; 43
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	2b e2       	ldi	r18, 0x2B	; 43
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	f9 01       	movw	r30, r18
    206a:	20 81       	ld	r18, Z
    206c:	20 63       	ori	r18, 0x30	; 48
    206e:	fc 01       	movw	r30, r24
    2070:	20 83       	st	Z, r18
	
	//Reset all hardware, then discontinue power
	UCSR1C = 0;
    2072:	8a ec       	ldi	r24, 0xCA	; 202
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	fc 01       	movw	r30, r24
    2078:	10 82       	st	Z, r1
	UCSR1B = 0;
    207a:	89 ec       	ldi	r24, 0xC9	; 201
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	fc 01       	movw	r30, r24
    2080:	10 82       	st	Z, r1
	UCSR1A = 0;
    2082:	88 ec       	ldi	r24, 0xC8	; 200
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	fc 01       	movw	r30, r24
    2088:	10 82       	st	Z, r1
	UBRR1L = 0;
    208a:	8c ec       	ldi	r24, 0xCC	; 204
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	fc 01       	movw	r30, r24
    2090:	10 82       	st	Z, r1
	UBRR1H = 0;
    2092:	8d ec       	ldi	r24, 0xCD	; 205
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	fc 01       	movw	r30, r24
    2098:	10 82       	st	Z, r1
	PRR0 |= (1 << PRUSART1);	//turns off power to USART1
    209a:	84 e6       	ldi	r24, 0x64	; 100
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	24 e6       	ldi	r18, 0x64	; 100
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	f9 01       	movw	r30, r18
    20a4:	20 81       	ld	r18, Z
    20a6:	20 61       	ori	r18, 0x10	; 16
    20a8:	fc 01       	movw	r30, r24
    20aa:	20 83       	st	Z, r18
	
	//Manipulate tempDataTI
	double dataTI = (tempDataTI/4)*ON_CHIP_CONVERTER*1.8 + 32;			//Div 4 shifts right 2 bits; Converts into celcius, then into Fahrenheit
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	96 95       	lsr	r25
    20b2:	87 95       	ror	r24
    20b4:	96 95       	lsr	r25
    20b6:	87 95       	ror	r24
    20b8:	cc 01       	movw	r24, r24
    20ba:	a0 e0       	ldi	r26, 0x00	; 0
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	bc 01       	movw	r22, r24
    20cc:	cd 01       	movw	r24, r26
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	5d e3       	ldi	r21, 0x3D	; 61
    20d6:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	bc 01       	movw	r22, r24
    20e0:	cd 01       	movw	r24, r26
    20e2:	26 e6       	ldi	r18, 0x66	; 102
    20e4:	36 e6       	ldi	r19, 0x66	; 102
    20e6:	46 ee       	ldi	r20, 0xE6	; 230
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e0       	ldi	r20, 0x00	; 0
    20fc:	52 e4       	ldi	r21, 0x42	; 66
    20fe:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	9c 83       	std	Y+4, r25	; 0x04
    210a:	ad 83       	std	Y+5, r26	; 0x05
    210c:	be 83       	std	Y+6, r27	; 0x06

	return dataTI;	
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	9c 81       	ldd	r25, Y+4	; 0x04
    2112:	ad 81       	ldd	r26, Y+5	; 0x05
    2114:	be 81       	ldd	r27, Y+6	; 0x06
		
}
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	28 96       	adiw	r28, 0x08	; 8
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	df 91       	pop	r29
    2128:	cf 91       	pop	r28
    212a:	08 95       	ret

0000212c <_Z12GetTempThermv>:

/**********************************************************************************************************************************/
double  GetTempTherm()
{
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	28 97       	sbiw	r28, 0x08	; 8
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	de bf       	out	0x3e, r29	; 62
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD tempDataTherm = 0;
    2140:	1c 82       	std	Y+4, r1	; 0x04
    2142:	1b 82       	std	Y+3, r1	; 0x03
	double dataTherm = 0;
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	dc 01       	movw	r26, r24
    214a:	8d 83       	std	Y+5, r24	; 0x05
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	af 83       	std	Y+7, r26	; 0x07
    2150:	b8 87       	std	Y+8, r27	; 0x08
	
	//Turn ADC on
	PRR0 &= ~(1 << PRADC);
    2152:	84 e6       	ldi	r24, 0x64	; 100
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	24 e6       	ldi	r18, 0x64	; 100
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	f9 01       	movw	r30, r18
    215c:	20 81       	ld	r18, Z
    215e:	2e 7f       	andi	r18, 0xFE	; 254
    2160:	fc 01       	movw	r30, r24
    2162:	20 83       	st	Z, r18
	ADMUX |= (1 << REFS0)|(1 << MUX1);	//internal 3v3 reference, ADC2
    2164:	8c e7       	ldi	r24, 0x7C	; 124
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	2c e7       	ldi	r18, 0x7C	; 124
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	f9 01       	movw	r30, r18
    216e:	20 81       	ld	r18, Z
    2170:	22 64       	ori	r18, 0x42	; 66
    2172:	fc 01       	movw	r30, r24
    2174:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);		//Enables ADC, 128 clock prescaler
    2176:	8a e7       	ldi	r24, 0x7A	; 122
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	2a e7       	ldi	r18, 0x7A	; 122
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	f9 01       	movw	r30, r18
    2180:	20 81       	ld	r18, Z
    2182:	27 68       	ori	r18, 0x87	; 135
    2184:	fc 01       	movw	r30, r24
    2186:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC7D)|(1 << ADC6D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(0 << ADC2D)|(1 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    2188:	8e e7       	ldi	r24, 0x7E	; 126
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	2b ef       	ldi	r18, 0xFB	; 251
    218e:	fc 01       	movw	r30, r24
    2190:	20 83       	st	Z, r18
	Wait_ms(10);
    2192:	8a e0       	ldi	r24, 0x0A	; 10
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    219a:	1a 82       	std	Y+2, r1	; 0x02
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	1c c0       	rjmp	.+56     	; 0x21d8 <_Z12GetTempThermv+0xac>
    21a0:	8a e7       	ldi	r24, 0x7A	; 122
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	2a e7       	ldi	r18, 0x7A	; 122
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	f9 01       	movw	r30, r18
    21aa:	20 81       	ld	r18, Z
    21ac:	20 64       	ori	r18, 0x40	; 64
    21ae:	fc 01       	movw	r30, r24
    21b0:	20 83       	st	Z, r18
    21b2:	8a e7       	ldi	r24, 0x7A	; 122
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	fc 01       	movw	r30, r24
    21b8:	80 81       	ld	r24, Z
    21ba:	88 2f       	mov	r24, r24
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	80 74       	andi	r24, 0x40	; 64
    21c0:	90 70       	andi	r25, 0x00	; 0
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	00 97       	sbiw	r24, 0x00	; 0
    21c6:	09 f4       	brne	.+2      	; 0x21ca <_Z12GetTempThermv+0x9e>
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	22 23       	and	r18, r18
    21cc:	91 f7       	brne	.-28     	; 0x21b2 <_Z12GetTempThermv+0x86>
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	21 e0       	ldi	r18, 0x01	; 1
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	91 05       	cpc	r25, r1
    21e2:	0c f0       	brlt	.+2      	; 0x21e6 <_Z12GetTempThermv+0xba>
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	22 23       	and	r18, r18
    21e8:	d9 f6       	brne	.-74     	; 0x21a0 <_Z12GetTempThermv+0x74>
	
	//Put conversion into buffer
	tempDataTherm = ADCL;
    21ea:	88 e7       	ldi	r24, 0x78	; 120
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	fc 01       	movw	r30, r24
    21f0:	80 81       	ld	r24, Z
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
	tempDataTherm |= (ADCH << 8);
    21fa:	89 e7       	ldi	r24, 0x79	; 121
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	fc 01       	movw	r30, r24
    2200:	80 81       	ld	r24, Z
    2202:	88 2f       	mov	r24, r24
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	98 2f       	mov	r25, r24
    2208:	88 27       	eor	r24, r24
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	82 2b       	or	r24, r18
    2210:	93 2b       	or	r25, r19
    2212:	9c 83       	std	Y+4, r25	; 0x04
    2214:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    2216:	8a e7       	ldi	r24, 0x7A	; 122
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	fc 01       	movw	r30, r24
    221c:	10 82       	st	Z, r1
	ADMUX = 0;
    221e:	8c e7       	ldi	r24, 0x7C	; 124
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	fc 01       	movw	r30, r24
    2224:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC2D);	//disable ADC2D
    2226:	8e e7       	ldi	r24, 0x7E	; 126
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	2e e7       	ldi	r18, 0x7E	; 126
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	f9 01       	movw	r30, r18
    2230:	20 81       	ld	r18, Z
    2232:	24 60       	ori	r18, 0x04	; 4
    2234:	fc 01       	movw	r30, r24
    2236:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    2238:	84 e6       	ldi	r24, 0x64	; 100
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	24 e6       	ldi	r18, 0x64	; 100
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	f9 01       	movw	r30, r18
    2242:	20 81       	ld	r18, Z
    2244:	21 60       	ori	r18, 0x01	; 1
    2246:	fc 01       	movw	r30, r24
    2248:	20 83       	st	Z, r18
	
	/**Operate to make real temperature in celcius, then Fahrenheit**/
	
	//Get offset of temperature from maximum ADC reading and offset to 0 for our linear progression
	tempDataTherm = 1023 - tempDataTherm - THERM_OFFSET;					//For 0->40 degree C	
    224a:	22 ef       	ldi	r18, 0xF2	; 242
    224c:	32 e0       	ldi	r19, 0x02	; 2
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	a9 01       	movw	r20, r18
    2254:	48 1b       	sub	r20, r24
    2256:	59 0b       	sbc	r21, r25
    2258:	ca 01       	movw	r24, r20
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
	
	//Multiply by conversion factor
	dataTherm = tempDataTherm/THERM_CONVERTER;	//now in celsius
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	cc 01       	movw	r24, r24
    2264:	a0 e0       	ldi	r26, 0x00	; 0
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    2270:	dc 01       	movw	r26, r24
    2272:	cb 01       	movw	r24, r22
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	28 e4       	ldi	r18, 0x48	; 72
    227a:	31 ee       	ldi	r19, 0xE1	; 225
    227c:	4c e1       	ldi	r20, 0x1C	; 28
    227e:	51 e4       	ldi	r21, 0x41	; 65
    2280:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	8d 83       	std	Y+5, r24	; 0x05
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	af 83       	std	Y+7, r26	; 0x07
    228e:	b8 87       	std	Y+8, r27	; 0x08
		
	//Convert to Fahrenheit; F = C*(9/5) * 32; 74.4 correlates to 23.555 Celsius
	dataTherm = dataTherm*1.8 + 32;	
    2290:	6d 81       	ldd	r22, Y+5	; 0x05
    2292:	7e 81       	ldd	r23, Y+6	; 0x06
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	26 e6       	ldi	r18, 0x66	; 102
    229a:	36 e6       	ldi	r19, 0x66	; 102
    229c:	46 ee       	ldi	r20, 0xE6	; 230
    229e:	5f e3       	ldi	r21, 0x3F	; 63
    22a0:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	52 e4       	ldi	r21, 0x42	; 66
    22b4:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8d 83       	std	Y+5, r24	; 0x05
    22be:	9e 83       	std	Y+6, r25	; 0x06
    22c0:	af 83       	std	Y+7, r26	; 0x07
    22c2:	b8 87       	std	Y+8, r27	; 0x08
	
	return dataTherm;
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	af 81       	ldd	r26, Y+7	; 0x07
    22ca:	b8 85       	ldd	r27, Y+8	; 0x08

		
}
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	28 96       	adiw	r28, 0x08	; 8
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <_Z11GetHumidityv>:

/**********************************************************************************************************************************/	
double GetHumidity()
{
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	28 97       	sbiw	r28, 0x08	; 8
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
	//Function variables
	WORD humidityResult;
	
	//Turn on power to ADC, turn on components
	PRR0 &= ~(1 << PRADC);				//give ADC power again
    22f6:	84 e6       	ldi	r24, 0x64	; 100
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	24 e6       	ldi	r18, 0x64	; 100
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	20 81       	ld	r18, Z
    2302:	2e 7f       	andi	r18, 0xFE	; 254
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
	Wait_ms(10);						
    2308:	8a e0       	ldi	r24, 0x0A	; 10
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	ADMUX |= (1 << REFS0)|(1 << MUX0);  //Chooses AVCC as reference, channel ADC1
    2310:	8c e7       	ldi	r24, 0x7C	; 124
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	2c e7       	ldi	r18, 0x7C	; 124
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	f9 01       	movw	r30, r18
    231a:	20 81       	ld	r18, Z
    231c:	21 64       	ori	r18, 0x41	; 65
    231e:	fc 01       	movw	r30, r24
    2320:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADEN)|(1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);	//Enables ADC, starts conversion, 128 clock prescaler
    2322:	8a e7       	ldi	r24, 0x7A	; 122
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	2a e7       	ldi	r18, 0x7A	; 122
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	f9 01       	movw	r30, r18
    232c:	20 81       	ld	r18, Z
    232e:	27 68       	ori	r18, 0x87	; 135
    2330:	fc 01       	movw	r30, r24
    2332:	20 83       	st	Z, r18
	DIDR0 = (1 << ADC6D)|(1 << ADC7D)|(1 << ADC5D)|(1 << ADC4D)|(1 << ADC3D)|(1 << ADC2D)|(0 << ADC1D)|(1 << ADC0D);	//disable all ADC except for ADC1
    2334:	8e e7       	ldi	r24, 0x7E	; 126
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	2d ef       	ldi	r18, 0xFD	; 253
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18
	Wait_ms(10);
    233e:	8a e0       	ldi	r24, 0x0A	; 10
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	
	//Run conversion twice
	for (int i = 0; i < 2; i++){ ADCSRA |= (1 << ADSC); while (ADCSRA & (1 << ADSC));}	//do two conversions, throw first one out
    2346:	1a 82       	std	Y+2, r1	; 0x02
    2348:	19 82       	std	Y+1, r1	; 0x01
    234a:	1c c0       	rjmp	.+56     	; 0x2384 <_Z11GetHumidityv+0xa2>
    234c:	8a e7       	ldi	r24, 0x7A	; 122
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	2a e7       	ldi	r18, 0x7A	; 122
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	20 81       	ld	r18, Z
    2358:	20 64       	ori	r18, 0x40	; 64
    235a:	fc 01       	movw	r30, r24
    235c:	20 83       	st	Z, r18
    235e:	8a e7       	ldi	r24, 0x7A	; 122
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	fc 01       	movw	r30, r24
    2364:	80 81       	ld	r24, Z
    2366:	88 2f       	mov	r24, r24
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	80 74       	andi	r24, 0x40	; 64
    236c:	90 70       	andi	r25, 0x00	; 0
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	09 f4       	brne	.+2      	; 0x2376 <_Z11GetHumidityv+0x94>
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	22 23       	and	r18, r18
    2378:	91 f7       	brne	.-28     	; 0x235e <_Z11GetHumidityv+0x7c>
    237a:	89 81       	ldd	r24, Y+1	; 0x01
    237c:	9a 81       	ldd	r25, Y+2	; 0x02
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	9a 83       	std	Y+2, r25	; 0x02
    2382:	89 83       	std	Y+1, r24	; 0x01
    2384:	21 e0       	ldi	r18, 0x01	; 1
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	91 05       	cpc	r25, r1
    238e:	0c f0       	brlt	.+2      	; 0x2392 <_Z11GetHumidityv+0xb0>
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	22 23       	and	r18, r18
    2394:	d9 f6       	brne	.-74     	; 0x234c <_Z11GetHumidityv+0x6a>
	
	//Put ADC result into buffer
	humidityResult = ADCL;
    2396:	88 e7       	ldi	r24, 0x78	; 120
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	fc 01       	movw	r30, r24
    239c:	80 81       	ld	r24, Z
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	9c 83       	std	Y+4, r25	; 0x04
    23a4:	8b 83       	std	Y+3, r24	; 0x03
	humidityResult |= (ADCH << 8);
    23a6:	89 e7       	ldi	r24, 0x79	; 121
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	fc 01       	movw	r30, r24
    23ac:	80 81       	ld	r24, Z
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	98 2f       	mov	r25, r24
    23b4:	88 27       	eor	r24, r24
    23b6:	2b 81       	ldd	r18, Y+3	; 0x03
    23b8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ba:	82 2b       	or	r24, r18
    23bc:	93 2b       	or	r25, r19
    23be:	9c 83       	std	Y+4, r25	; 0x04
    23c0:	8b 83       	std	Y+3, r24	; 0x03
	
	//Disable ADC hardware/registers
	ADCSRA = 0;
    23c2:	8a e7       	ldi	r24, 0x7A	; 122
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	fc 01       	movw	r30, r24
    23c8:	10 82       	st	Z, r1
	ADMUX = 0;
    23ca:	8c e7       	ldi	r24, 0x7C	; 124
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	fc 01       	movw	r30, r24
    23d0:	10 82       	st	Z, r1
	DIDR0 |= (1 << ADC1D);	//disable ADC1 in DIDR0
    23d2:	8e e7       	ldi	r24, 0x7E	; 126
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	2e e7       	ldi	r18, 0x7E	; 126
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	f9 01       	movw	r30, r18
    23dc:	20 81       	ld	r18, Z
    23de:	22 60       	ori	r18, 0x02	; 2
    23e0:	fc 01       	movw	r30, r24
    23e2:	20 83       	st	Z, r18
	
	//Turn off power to ADC
	PRR0 |= (1 << PRADC);
    23e4:	84 e6       	ldi	r24, 0x64	; 100
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	24 e6       	ldi	r18, 0x64	; 100
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	f9 01       	movw	r30, r18
    23ee:	20 81       	ld	r18, Z
    23f0:	21 60       	ori	r18, 0x01	; 1
    23f2:	fc 01       	movw	r30, r24
    23f4:	20 83       	st	Z, r18

	//Get actual humidity
	double humidityResultDouble = (double)humidityResult;
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	cc 01       	movw	r24, r24
    23fc:	a0 e0       	ldi	r26, 0x00	; 0
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	8d 83       	std	Y+5, r24	; 0x05
    240e:	9e 83       	std	Y+6, r25	; 0x06
    2410:	af 83       	std	Y+7, r26	; 0x07
    2412:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble -= HUMIDITY_OFFSET;	//155 is 0 for a conversion, then divide the converting factor 
    2414:	6d 81       	ldd	r22, Y+5	; 0x05
    2416:	7e 81       	ldd	r23, Y+6	; 0x06
    2418:	8f 81       	ldd	r24, Y+7	; 0x07
    241a:	98 85       	ldd	r25, Y+8	; 0x08
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4b e1       	ldi	r20, 0x1B	; 27
    2422:	53 e4       	ldi	r21, 0x43	; 67
    2424:	0e 94 8d 13 	call	0x271a	; 0x271a <__subsf3>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	8d 83       	std	Y+5, r24	; 0x05
    242e:	9e 83       	std	Y+6, r25	; 0x06
    2430:	af 83       	std	Y+7, r26	; 0x07
    2432:	b8 87       	std	Y+8, r27	; 0x08
	humidityResultDouble /= HUMIDITY_CONVERTER;	//get actual humidity	
    2434:	6d 81       	ldd	r22, Y+5	; 0x05
    2436:	7e 81       	ldd	r23, Y+6	; 0x06
    2438:	8f 81       	ldd	r24, Y+7	; 0x07
    243a:	98 85       	ldd	r25, Y+8	; 0x08
    243c:	23 e7       	ldi	r18, 0x73	; 115
    243e:	38 e6       	ldi	r19, 0x68	; 104
    2440:	4d e9       	ldi	r20, 0x9D	; 157
    2442:	50 e4       	ldi	r21, 0x40	; 64
    2444:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__divsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	af 83       	std	Y+7, r26	; 0x07
    2452:	b8 87       	std	Y+8, r27	; 0x08
	
	return humidityResultDouble;
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	af 81       	ldd	r26, Y+7	; 0x07
    245a:	b8 85       	ldd	r27, Y+8	; 0x08
}
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	28 96       	adiw	r28, 0x08	; 8
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	df 91       	pop	r29
    246e:	cf 91       	pop	r28
    2470:	08 95       	ret

00002472 <_Z10GetTempADTv>:
/**********************************************************************************************************************************/	

double GetTempADT()
{
    2472:	cf 93       	push	r28
    2474:	df 93       	push	r29
    2476:	00 d0       	rcall	.+0      	; 0x2478 <_Z10GetTempADTv+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <_Z10GetTempADTv+0x8>
    247a:	00 d0       	rcall	.+0      	; 0x247c <_Z10GetTempADTv+0xa>
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	WORD rawDataAD = 0;
    2480:	1a 82       	std	Y+2, r1	; 0x02
    2482:	19 82       	std	Y+1, r1	; 0x01
	
	//Turn SPI on
	PRR0 &= ~(1 << PRSPI);
    2484:	84 e6       	ldi	r24, 0x64	; 100
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	24 e6       	ldi	r18, 0x64	; 100
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	f9 01       	movw	r30, r18
    248e:	20 81       	ld	r18, Z
    2490:	2b 7f       	andi	r18, 0xFB	; 251
    2492:	fc 01       	movw	r30, r24
    2494:	20 83       	st	Z, r18
	Wait_ms(10);
    2496:	8a e0       	ldi	r24, 0x0A	; 10
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	
	//Slave select goes low to signal start of transmission
	prtSpi &= ~(1 << bnSS);	
    249e:	85 e2       	ldi	r24, 0x25	; 37
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	25 e2       	ldi	r18, 0x25	; 37
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	f9 01       	movw	r30, r18
    24a8:	20 81       	ld	r18, Z
    24aa:	2f 7e       	andi	r18, 0xEF	; 239
    24ac:	fc 01       	movw	r30, r24
    24ae:	20 83       	st	Z, r18
	SPDR0 = 0x00;						//start a transmission
    24b0:	8e e4       	ldi	r24, 0x4E	; 78
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	fc 01       	movw	r30, r24
    24b6:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get MSB byte
    24b8:	00 00       	nop
    24ba:	8d e4       	ldi	r24, 0x4D	; 77
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	fc 01       	movw	r30, r24
    24c0:	80 81       	ld	r24, Z
    24c2:	80 95       	com	r24
    24c4:	88 1f       	adc	r24, r24
    24c6:	88 27       	eor	r24, r24
    24c8:	88 1f       	adc	r24, r24
    24ca:	88 23       	and	r24, r24
    24cc:	b1 f7       	brne	.-20     	; 0x24ba <_Z10GetTempADTv+0x48>
	rawDataAD = (SPDR0 << 8);				//should contain the data send over, store first byte in upper 8 bits
    24ce:	8e e4       	ldi	r24, 0x4E	; 78
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	fc 01       	movw	r30, r24
    24d4:	80 81       	ld	r24, Z
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	98 2f       	mov	r25, r24
    24dc:	88 27       	eor	r24, r24
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
	SPDR0 = 0x00;						//start transmission of second byte
    24e2:	8e e4       	ldi	r24, 0x4E	; 78
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	fc 01       	movw	r30, r24
    24e8:	10 82       	st	Z, r1
	while (!(SPSR0 & (1 << SPIF0)));	//get LSB byte byte
    24ea:	00 00       	nop
    24ec:	8d e4       	ldi	r24, 0x4D	; 77
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	fc 01       	movw	r30, r24
    24f2:	80 81       	ld	r24, Z
    24f4:	80 95       	com	r24
    24f6:	88 1f       	adc	r24, r24
    24f8:	88 27       	eor	r24, r24
    24fa:	88 1f       	adc	r24, r24
    24fc:	88 23       	and	r24, r24
    24fe:	b1 f7       	brne	.-20     	; 0x24ec <_Z10GetTempADTv+0x7a>
	rawDataAD |= SPDR0;					//get second byte, store in low order
    2500:	8e e4       	ldi	r24, 0x4E	; 78
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	fc 01       	movw	r30, r24
    2506:	80 81       	ld	r24, Z
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	29 81       	ldd	r18, Y+1	; 0x01
    250e:	3a 81       	ldd	r19, Y+2	; 0x02
    2510:	82 2b       	or	r24, r18
    2512:	93 2b       	or	r25, r19
    2514:	9a 83       	std	Y+2, r25	; 0x02
    2516:	89 83       	std	Y+1, r24	; 0x01

	
	//Power off ADC, reset components
	PRR0 |= (1 << PRSPI);				//Turn SPI off	
    2518:	84 e6       	ldi	r24, 0x64	; 100
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	24 e6       	ldi	r18, 0x64	; 100
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	f9 01       	movw	r30, r18
    2522:	20 81       	ld	r18, Z
    2524:	24 60       	ori	r18, 0x04	; 4
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
	prtSpi |= (1 << bnSS)|(1 << bnSck);	//bring CS/SS, Sck high again
    252a:	85 e2       	ldi	r24, 0x25	; 37
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	25 e2       	ldi	r18, 0x25	; 37
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	f9 01       	movw	r30, r18
    2534:	20 81       	ld	r18, Z
    2536:	20 69       	ori	r18, 0x90	; 144
    2538:	fc 01       	movw	r30, r24
    253a:	20 83       	st	Z, r18
	Wait_ms(10);						//Give it time to settle
    253c:	8a e0       	ldi	r24, 0x0A	; 10
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 2c 13 	call	0x2658	; 0x2658 <_Z7Wait_msj>
	
	//Convert number into Celsius, then Fahrenheit
	double dataAD = rawDataAD*ON_CHIP_CONVERTER*1.8 + 32;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	cc 01       	movw	r24, r24
    254a:	a0 e0       	ldi	r26, 0x00	; 0
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	5d e3       	ldi	r21, 0x3D	; 61
    2566:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	26 e6       	ldi	r18, 0x66	; 102
    2574:	36 e6       	ldi	r19, 0x66	; 102
    2576:	46 ee       	ldi	r20, 0xE6	; 230
    2578:	5f e3       	ldi	r21, 0x3F	; 63
    257a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	52 e4       	ldi	r21, 0x42	; 66
    258e:	0e 94 8e 13 	call	0x271c	; 0x271c <__addsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8b 83       	std	Y+3, r24	; 0x03
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	ad 83       	std	Y+5, r26	; 0x05
    259c:	be 83       	std	Y+6, r27	; 0x06
	
	return dataAD;
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	ad 81       	ldd	r26, Y+5	; 0x05
    25a4:	be 81       	ldd	r27, Y+6	; 0x06
}
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	26 96       	adiw	r28, 0x06	; 6
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <_Z10ResetDebugv>:

/**********************************************************************************************************************************/	
void ResetDebug()
{
    25bc:	cf 93       	push	r28
    25be:	df 93       	push	r29
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <_Z10ResetDebugv+0x6>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
		WORD tempNumber = (prtDebug ^ DEBUG_NUMBER);	//gets numbers to clear,
    25c6:	88 e2       	ldi	r24, 0x28	; 40
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	fc 01       	movw	r30, r24
    25cc:	90 81       	ld	r25, Z
    25ce:	80 ef       	ldi	r24, 0xF0	; 240
    25d0:	89 27       	eor	r24, r25
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
		prtDebug &= tempNumber;
    25da:	88 e2       	ldi	r24, 0x28	; 40
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	28 e2       	ldi	r18, 0x28	; 40
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	f9 01       	movw	r30, r18
    25e4:	30 81       	ld	r19, Z
    25e6:	29 81       	ldd	r18, Y+1	; 0x01
    25e8:	23 23       	and	r18, r19
    25ea:	fc 01       	movw	r30, r24
    25ec:	20 83       	st	Z, r18
}
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <_Z8Wait_secj>:
/**********************************************************************************************************************************/
void Wait_sec(WORD delay){
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <_Z8Wait_secj+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <_Z8Wait_secj+0x8>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
	WORD exitTime=((theClock.getSecond()+delay)%60);
    2608:	88 e7       	ldi	r24, 0x78	; 120
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5clock9getSecondEv>
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	82 0f       	add	r24, r18
    261a:	93 1f       	adc	r25, r19
    261c:	2c e3       	ldi	r18, 0x3C	; 60
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	b9 01       	movw	r22, r18
    2622:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__udivmodhi4>
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
	while (theClock.getSecond() != exitTime);
    262a:	00 00       	nop
    262c:	88 e7       	ldi	r24, 0x78	; 120
    262e:	91 e0       	ldi	r25, 0x01	; 1
    2630:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN5clock9getSecondEv>
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	41 e0       	ldi	r20, 0x01	; 1
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	28 17       	cp	r18, r24
    2640:	39 07       	cpc	r19, r25
    2642:	09 f4       	brne	.+2      	; 0x2646 <_Z8Wait_secj+0x4e>
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	44 23       	and	r20, r20
    2648:	89 f7       	brne	.-30     	; 0x262c <_Z8Wait_secj+0x34>
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <_Z7Wait_msj>:
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	00 d0       	rcall	.+0      	; 0x265e <_Z7Wait_msj+0x6>
    265e:	00 d0       	rcall	.+0      	; 0x2660 <_Z7Wait_msj+0x8>
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
	WORD i;

	while(delay > 0){
    2668:	18 c0       	rjmp	.+48     	; 0x269a <_Z7Wait_msj+0x42>
		for( i = 0; i < 400; i++){
    266a:	1a 82       	std	Y+2, r1	; 0x02
    266c:	19 82       	std	Y+1, r1	; 0x01
    266e:	06 c0       	rjmp	.+12     	; 0x267c <_Z7Wait_msj+0x24>
			asm volatile("nop");
    2670:	00 00       	nop
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
		for( i = 0; i < 400; i++){
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	01 96       	adiw	r24, 0x01	; 1
    2678:	9a 83       	std	Y+2, r25	; 0x02
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	21 e0       	ldi	r18, 0x01	; 1
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	9a 81       	ldd	r25, Y+2	; 0x02
    2682:	31 e0       	ldi	r19, 0x01	; 1
    2684:	80 39       	cpi	r24, 0x90	; 144
    2686:	93 07       	cpc	r25, r19
    2688:	08 f0       	brcs	.+2      	; 0x268c <_Z7Wait_msj+0x34>
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	22 23       	and	r18, r18
    268e:	81 f7       	brne	.-32     	; 0x2670 <_Z7Wait_msj+0x18>
			asm volatile("nop");
		}
		delay -= 1;
    2690:	8b 81       	ldd	r24, Y+3	; 0x03
    2692:	9c 81       	ldd	r25, Y+4	; 0x04
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9c 83       	std	Y+4, r25	; 0x04
    2698:	8b 83       	std	Y+3, r24	; 0x03
/**********************************************************************************************************************************/																											
void Wait_ms(WORD delay)
{	
	WORD i;

	while(delay > 0){
    269a:	21 e0       	ldi	r18, 0x01	; 1
    269c:	8b 81       	ldd	r24, Y+3	; 0x03
    269e:	9c 81       	ldd	r25, Y+4	; 0x04
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	09 f4       	brne	.+2      	; 0x26a6 <_Z7Wait_msj+0x4e>
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	22 23       	and	r18, r18
    26a8:	01 f7       	brne	.-64     	; 0x266a <_Z7Wait_msj+0x12>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	0f 90       	pop	r0
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <_Z41__static_initialization_and_destruction_0ii>:
    26b8:	cf 93       	push	r28
    26ba:	df 93       	push	r29
    26bc:	00 d0       	rcall	.+0      	; 0x26be <_Z41__static_initialization_and_destruction_0ii+0x6>
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <_Z41__static_initialization_and_destruction_0ii+0x8>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	9a 83       	std	Y+2, r25	; 0x02
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	7c 83       	std	Y+4, r23	; 0x04
    26ca:	6b 83       	std	Y+3, r22	; 0x03
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	91 05       	cpc	r25, r1
    26d4:	71 f4       	brne	.+28     	; 0x26f2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	2f ef       	ldi	r18, 0xFF	; 255
    26dc:	8f 3f       	cpi	r24, 0xFF	; 255
    26de:	92 07       	cpc	r25, r18
    26e0:	41 f4       	brne	.+16     	; 0x26f2 <_Z41__static_initialization_and_destruction_0ii+0x3a>
/* ------------------------------------------------------------ */

WORD sleepCnt=0;									//originally used to map how long the device sleeps, can now be used for downtime?
BOOL flagGoToSleep, flagAllStats,flagReceivePi, flagSendWeek;

clock theClock;
    26e2:	88 e7       	ldi	r24, 0x78	; 120
    26e4:	91 e0       	ldi	r25, 0x01	; 1
    26e6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN5clockC1Ev>
thermostat theThermostat;
    26ea:	8f e7       	ldi	r24, 0x7F	; 127
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_ZN10thermostatC1Ev>
		for( i = 0; i < 400; i++){
			asm volatile("nop");
		}
		delay -= 1;
	}
}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <_GLOBAL__sub_I__ZN10thermostatC2Ev>:
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	6f ef       	ldi	r22, 0xFF	; 255
    270e:	7f ef       	ldi	r23, 0xFF	; 255
    2710:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_Z41__static_initialization_and_destruction_0ii>
    2714:	df 91       	pop	r29
    2716:	cf 91       	pop	r28
    2718:	08 95       	ret

0000271a <__subsf3>:
    271a:	50 58       	subi	r21, 0x80	; 128

0000271c <__addsf3>:
    271c:	bb 27       	eor	r27, r27
    271e:	aa 27       	eor	r26, r26
    2720:	0e d0       	rcall	.+28     	; 0x273e <__addsf3x>
    2722:	70 c1       	rjmp	.+736    	; 0x2a04 <__fp_round>
    2724:	61 d1       	rcall	.+706    	; 0x29e8 <__fp_pscA>
    2726:	30 f0       	brcs	.+12     	; 0x2734 <__addsf3+0x18>
    2728:	66 d1       	rcall	.+716    	; 0x29f6 <__fp_pscB>
    272a:	20 f0       	brcs	.+8      	; 0x2734 <__addsf3+0x18>
    272c:	31 f4       	brne	.+12     	; 0x273a <__addsf3+0x1e>
    272e:	9f 3f       	cpi	r25, 0xFF	; 255
    2730:	11 f4       	brne	.+4      	; 0x2736 <__addsf3+0x1a>
    2732:	1e f4       	brtc	.+6      	; 0x273a <__addsf3+0x1e>
    2734:	56 c1       	rjmp	.+684    	; 0x29e2 <__fp_nan>
    2736:	0e f4       	brtc	.+2      	; 0x273a <__addsf3+0x1e>
    2738:	e0 95       	com	r30
    273a:	e7 fb       	bst	r30, 7
    273c:	4c c1       	rjmp	.+664    	; 0x29d6 <__fp_inf>

0000273e <__addsf3x>:
    273e:	e9 2f       	mov	r30, r25
    2740:	72 d1       	rcall	.+740    	; 0x2a26 <__fp_split3>
    2742:	80 f3       	brcs	.-32     	; 0x2724 <__addsf3+0x8>
    2744:	ba 17       	cp	r27, r26
    2746:	62 07       	cpc	r22, r18
    2748:	73 07       	cpc	r23, r19
    274a:	84 07       	cpc	r24, r20
    274c:	95 07       	cpc	r25, r21
    274e:	18 f0       	brcs	.+6      	; 0x2756 <__addsf3x+0x18>
    2750:	71 f4       	brne	.+28     	; 0x276e <__addsf3x+0x30>
    2752:	9e f5       	brtc	.+102    	; 0x27ba <__addsf3x+0x7c>
    2754:	8a c1       	rjmp	.+788    	; 0x2a6a <__fp_zero>
    2756:	0e f4       	brtc	.+2      	; 0x275a <__addsf3x+0x1c>
    2758:	e0 95       	com	r30
    275a:	0b 2e       	mov	r0, r27
    275c:	ba 2f       	mov	r27, r26
    275e:	a0 2d       	mov	r26, r0
    2760:	0b 01       	movw	r0, r22
    2762:	b9 01       	movw	r22, r18
    2764:	90 01       	movw	r18, r0
    2766:	0c 01       	movw	r0, r24
    2768:	ca 01       	movw	r24, r20
    276a:	a0 01       	movw	r20, r0
    276c:	11 24       	eor	r1, r1
    276e:	ff 27       	eor	r31, r31
    2770:	59 1b       	sub	r21, r25
    2772:	99 f0       	breq	.+38     	; 0x279a <__addsf3x+0x5c>
    2774:	59 3f       	cpi	r21, 0xF9	; 249
    2776:	50 f4       	brcc	.+20     	; 0x278c <__addsf3x+0x4e>
    2778:	50 3e       	cpi	r21, 0xE0	; 224
    277a:	68 f1       	brcs	.+90     	; 0x27d6 <__addsf3x+0x98>
    277c:	1a 16       	cp	r1, r26
    277e:	f0 40       	sbci	r31, 0x00	; 0
    2780:	a2 2f       	mov	r26, r18
    2782:	23 2f       	mov	r18, r19
    2784:	34 2f       	mov	r19, r20
    2786:	44 27       	eor	r20, r20
    2788:	58 5f       	subi	r21, 0xF8	; 248
    278a:	f3 cf       	rjmp	.-26     	; 0x2772 <__addsf3x+0x34>
    278c:	46 95       	lsr	r20
    278e:	37 95       	ror	r19
    2790:	27 95       	ror	r18
    2792:	a7 95       	ror	r26
    2794:	f0 40       	sbci	r31, 0x00	; 0
    2796:	53 95       	inc	r21
    2798:	c9 f7       	brne	.-14     	; 0x278c <__addsf3x+0x4e>
    279a:	7e f4       	brtc	.+30     	; 0x27ba <__addsf3x+0x7c>
    279c:	1f 16       	cp	r1, r31
    279e:	ba 0b       	sbc	r27, r26
    27a0:	62 0b       	sbc	r22, r18
    27a2:	73 0b       	sbc	r23, r19
    27a4:	84 0b       	sbc	r24, r20
    27a6:	ba f0       	brmi	.+46     	; 0x27d6 <__addsf3x+0x98>
    27a8:	91 50       	subi	r25, 0x01	; 1
    27aa:	a1 f0       	breq	.+40     	; 0x27d4 <__addsf3x+0x96>
    27ac:	ff 0f       	add	r31, r31
    27ae:	bb 1f       	adc	r27, r27
    27b0:	66 1f       	adc	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	88 1f       	adc	r24, r24
    27b6:	c2 f7       	brpl	.-16     	; 0x27a8 <__addsf3x+0x6a>
    27b8:	0e c0       	rjmp	.+28     	; 0x27d6 <__addsf3x+0x98>
    27ba:	ba 0f       	add	r27, r26
    27bc:	62 1f       	adc	r22, r18
    27be:	73 1f       	adc	r23, r19
    27c0:	84 1f       	adc	r24, r20
    27c2:	48 f4       	brcc	.+18     	; 0x27d6 <__addsf3x+0x98>
    27c4:	87 95       	ror	r24
    27c6:	77 95       	ror	r23
    27c8:	67 95       	ror	r22
    27ca:	b7 95       	ror	r27
    27cc:	f7 95       	ror	r31
    27ce:	9e 3f       	cpi	r25, 0xFE	; 254
    27d0:	08 f0       	brcs	.+2      	; 0x27d4 <__addsf3x+0x96>
    27d2:	b3 cf       	rjmp	.-154    	; 0x273a <__addsf3+0x1e>
    27d4:	93 95       	inc	r25
    27d6:	88 0f       	add	r24, r24
    27d8:	08 f0       	brcs	.+2      	; 0x27dc <__addsf3x+0x9e>
    27da:	99 27       	eor	r25, r25
    27dc:	ee 0f       	add	r30, r30
    27de:	97 95       	ror	r25
    27e0:	87 95       	ror	r24
    27e2:	08 95       	ret

000027e4 <__cmpsf2>:
    27e4:	d4 d0       	rcall	.+424    	; 0x298e <__fp_cmp>
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <__cmpsf2+0x6>
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	08 95       	ret

000027ec <__divsf3>:
    27ec:	0c d0       	rcall	.+24     	; 0x2806 <__divsf3x>
    27ee:	0a c1       	rjmp	.+532    	; 0x2a04 <__fp_round>
    27f0:	02 d1       	rcall	.+516    	; 0x29f6 <__fp_pscB>
    27f2:	40 f0       	brcs	.+16     	; 0x2804 <__divsf3+0x18>
    27f4:	f9 d0       	rcall	.+498    	; 0x29e8 <__fp_pscA>
    27f6:	30 f0       	brcs	.+12     	; 0x2804 <__divsf3+0x18>
    27f8:	21 f4       	brne	.+8      	; 0x2802 <__divsf3+0x16>
    27fa:	5f 3f       	cpi	r21, 0xFF	; 255
    27fc:	19 f0       	breq	.+6      	; 0x2804 <__divsf3+0x18>
    27fe:	eb c0       	rjmp	.+470    	; 0x29d6 <__fp_inf>
    2800:	51 11       	cpse	r21, r1
    2802:	34 c1       	rjmp	.+616    	; 0x2a6c <__fp_szero>
    2804:	ee c0       	rjmp	.+476    	; 0x29e2 <__fp_nan>

00002806 <__divsf3x>:
    2806:	0f d1       	rcall	.+542    	; 0x2a26 <__fp_split3>
    2808:	98 f3       	brcs	.-26     	; 0x27f0 <__divsf3+0x4>

0000280a <__divsf3_pse>:
    280a:	99 23       	and	r25, r25
    280c:	c9 f3       	breq	.-14     	; 0x2800 <__divsf3+0x14>
    280e:	55 23       	and	r21, r21
    2810:	b1 f3       	breq	.-20     	; 0x27fe <__divsf3+0x12>
    2812:	95 1b       	sub	r25, r21
    2814:	55 0b       	sbc	r21, r21
    2816:	bb 27       	eor	r27, r27
    2818:	aa 27       	eor	r26, r26
    281a:	62 17       	cp	r22, r18
    281c:	73 07       	cpc	r23, r19
    281e:	84 07       	cpc	r24, r20
    2820:	38 f0       	brcs	.+14     	; 0x2830 <__divsf3_pse+0x26>
    2822:	9f 5f       	subi	r25, 0xFF	; 255
    2824:	5f 4f       	sbci	r21, 0xFF	; 255
    2826:	22 0f       	add	r18, r18
    2828:	33 1f       	adc	r19, r19
    282a:	44 1f       	adc	r20, r20
    282c:	aa 1f       	adc	r26, r26
    282e:	a9 f3       	breq	.-22     	; 0x281a <__divsf3_pse+0x10>
    2830:	33 d0       	rcall	.+102    	; 0x2898 <__divsf3_pse+0x8e>
    2832:	0e 2e       	mov	r0, r30
    2834:	3a f0       	brmi	.+14     	; 0x2844 <__divsf3_pse+0x3a>
    2836:	e0 e8       	ldi	r30, 0x80	; 128
    2838:	30 d0       	rcall	.+96     	; 0x289a <__divsf3_pse+0x90>
    283a:	91 50       	subi	r25, 0x01	; 1
    283c:	50 40       	sbci	r21, 0x00	; 0
    283e:	e6 95       	lsr	r30
    2840:	00 1c       	adc	r0, r0
    2842:	ca f7       	brpl	.-14     	; 0x2836 <__divsf3_pse+0x2c>
    2844:	29 d0       	rcall	.+82     	; 0x2898 <__divsf3_pse+0x8e>
    2846:	fe 2f       	mov	r31, r30
    2848:	27 d0       	rcall	.+78     	; 0x2898 <__divsf3_pse+0x8e>
    284a:	66 0f       	add	r22, r22
    284c:	77 1f       	adc	r23, r23
    284e:	88 1f       	adc	r24, r24
    2850:	bb 1f       	adc	r27, r27
    2852:	26 17       	cp	r18, r22
    2854:	37 07       	cpc	r19, r23
    2856:	48 07       	cpc	r20, r24
    2858:	ab 07       	cpc	r26, r27
    285a:	b0 e8       	ldi	r27, 0x80	; 128
    285c:	09 f0       	breq	.+2      	; 0x2860 <__divsf3_pse+0x56>
    285e:	bb 0b       	sbc	r27, r27
    2860:	80 2d       	mov	r24, r0
    2862:	bf 01       	movw	r22, r30
    2864:	ff 27       	eor	r31, r31
    2866:	93 58       	subi	r25, 0x83	; 131
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	2a f0       	brmi	.+10     	; 0x2876 <__divsf3_pse+0x6c>
    286c:	9e 3f       	cpi	r25, 0xFE	; 254
    286e:	51 05       	cpc	r21, r1
    2870:	68 f0       	brcs	.+26     	; 0x288c <__divsf3_pse+0x82>
    2872:	b1 c0       	rjmp	.+354    	; 0x29d6 <__fp_inf>
    2874:	fb c0       	rjmp	.+502    	; 0x2a6c <__fp_szero>
    2876:	5f 3f       	cpi	r21, 0xFF	; 255
    2878:	ec f3       	brlt	.-6      	; 0x2874 <__divsf3_pse+0x6a>
    287a:	98 3e       	cpi	r25, 0xE8	; 232
    287c:	dc f3       	brlt	.-10     	; 0x2874 <__divsf3_pse+0x6a>
    287e:	86 95       	lsr	r24
    2880:	77 95       	ror	r23
    2882:	67 95       	ror	r22
    2884:	b7 95       	ror	r27
    2886:	f7 95       	ror	r31
    2888:	9f 5f       	subi	r25, 0xFF	; 255
    288a:	c9 f7       	brne	.-14     	; 0x287e <__divsf3_pse+0x74>
    288c:	88 0f       	add	r24, r24
    288e:	91 1d       	adc	r25, r1
    2890:	96 95       	lsr	r25
    2892:	87 95       	ror	r24
    2894:	97 f9       	bld	r25, 7
    2896:	08 95       	ret
    2898:	e1 e0       	ldi	r30, 0x01	; 1
    289a:	66 0f       	add	r22, r22
    289c:	77 1f       	adc	r23, r23
    289e:	88 1f       	adc	r24, r24
    28a0:	bb 1f       	adc	r27, r27
    28a2:	62 17       	cp	r22, r18
    28a4:	73 07       	cpc	r23, r19
    28a6:	84 07       	cpc	r24, r20
    28a8:	ba 07       	cpc	r27, r26
    28aa:	20 f0       	brcs	.+8      	; 0x28b4 <__divsf3_pse+0xaa>
    28ac:	62 1b       	sub	r22, r18
    28ae:	73 0b       	sbc	r23, r19
    28b0:	84 0b       	sbc	r24, r20
    28b2:	ba 0b       	sbc	r27, r26
    28b4:	ee 1f       	adc	r30, r30
    28b6:	88 f7       	brcc	.-30     	; 0x289a <__divsf3_pse+0x90>
    28b8:	e0 95       	com	r30
    28ba:	08 95       	ret

000028bc <__fixunssfsi>:
    28bc:	bc d0       	rcall	.+376    	; 0x2a36 <__fp_splitA>
    28be:	88 f0       	brcs	.+34     	; 0x28e2 <__fixunssfsi+0x26>
    28c0:	9f 57       	subi	r25, 0x7F	; 127
    28c2:	90 f0       	brcs	.+36     	; 0x28e8 <__fixunssfsi+0x2c>
    28c4:	b9 2f       	mov	r27, r25
    28c6:	99 27       	eor	r25, r25
    28c8:	b7 51       	subi	r27, 0x17	; 23
    28ca:	a0 f0       	brcs	.+40     	; 0x28f4 <__fixunssfsi+0x38>
    28cc:	d1 f0       	breq	.+52     	; 0x2902 <__fixunssfsi+0x46>
    28ce:	66 0f       	add	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	1a f0       	brmi	.+6      	; 0x28de <__fixunssfsi+0x22>
    28d8:	ba 95       	dec	r27
    28da:	c9 f7       	brne	.-14     	; 0x28ce <__fixunssfsi+0x12>
    28dc:	12 c0       	rjmp	.+36     	; 0x2902 <__fixunssfsi+0x46>
    28de:	b1 30       	cpi	r27, 0x01	; 1
    28e0:	81 f0       	breq	.+32     	; 0x2902 <__fixunssfsi+0x46>
    28e2:	c3 d0       	rcall	.+390    	; 0x2a6a <__fp_zero>
    28e4:	b1 e0       	ldi	r27, 0x01	; 1
    28e6:	08 95       	ret
    28e8:	c0 c0       	rjmp	.+384    	; 0x2a6a <__fp_zero>
    28ea:	67 2f       	mov	r22, r23
    28ec:	78 2f       	mov	r23, r24
    28ee:	88 27       	eor	r24, r24
    28f0:	b8 5f       	subi	r27, 0xF8	; 248
    28f2:	39 f0       	breq	.+14     	; 0x2902 <__fixunssfsi+0x46>
    28f4:	b9 3f       	cpi	r27, 0xF9	; 249
    28f6:	cc f3       	brlt	.-14     	; 0x28ea <__fixunssfsi+0x2e>
    28f8:	86 95       	lsr	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b3 95       	inc	r27
    2900:	d9 f7       	brne	.-10     	; 0x28f8 <__fixunssfsi+0x3c>
    2902:	3e f4       	brtc	.+14     	; 0x2912 <__fixunssfsi+0x56>
    2904:	90 95       	com	r25
    2906:	80 95       	com	r24
    2908:	70 95       	com	r23
    290a:	61 95       	neg	r22
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	08 95       	ret

00002914 <__floatunsisf>:
    2914:	e8 94       	clt
    2916:	09 c0       	rjmp	.+18     	; 0x292a <__floatsisf+0x12>

00002918 <__floatsisf>:
    2918:	97 fb       	bst	r25, 7
    291a:	3e f4       	brtc	.+14     	; 0x292a <__floatsisf+0x12>
    291c:	90 95       	com	r25
    291e:	80 95       	com	r24
    2920:	70 95       	com	r23
    2922:	61 95       	neg	r22
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	8f 4f       	sbci	r24, 0xFF	; 255
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	99 23       	and	r25, r25
    292c:	a9 f0       	breq	.+42     	; 0x2958 <__floatsisf+0x40>
    292e:	f9 2f       	mov	r31, r25
    2930:	96 e9       	ldi	r25, 0x96	; 150
    2932:	bb 27       	eor	r27, r27
    2934:	93 95       	inc	r25
    2936:	f6 95       	lsr	r31
    2938:	87 95       	ror	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	b7 95       	ror	r27
    2940:	f1 11       	cpse	r31, r1
    2942:	f8 cf       	rjmp	.-16     	; 0x2934 <__floatsisf+0x1c>
    2944:	fa f4       	brpl	.+62     	; 0x2984 <__floatsisf+0x6c>
    2946:	bb 0f       	add	r27, r27
    2948:	11 f4       	brne	.+4      	; 0x294e <__floatsisf+0x36>
    294a:	60 ff       	sbrs	r22, 0
    294c:	1b c0       	rjmp	.+54     	; 0x2984 <__floatsisf+0x6c>
    294e:	6f 5f       	subi	r22, 0xFF	; 255
    2950:	7f 4f       	sbci	r23, 0xFF	; 255
    2952:	8f 4f       	sbci	r24, 0xFF	; 255
    2954:	9f 4f       	sbci	r25, 0xFF	; 255
    2956:	16 c0       	rjmp	.+44     	; 0x2984 <__floatsisf+0x6c>
    2958:	88 23       	and	r24, r24
    295a:	11 f0       	breq	.+4      	; 0x2960 <__floatsisf+0x48>
    295c:	96 e9       	ldi	r25, 0x96	; 150
    295e:	11 c0       	rjmp	.+34     	; 0x2982 <__floatsisf+0x6a>
    2960:	77 23       	and	r23, r23
    2962:	21 f0       	breq	.+8      	; 0x296c <__floatsisf+0x54>
    2964:	9e e8       	ldi	r25, 0x8E	; 142
    2966:	87 2f       	mov	r24, r23
    2968:	76 2f       	mov	r23, r22
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <__floatsisf+0x5e>
    296c:	66 23       	and	r22, r22
    296e:	71 f0       	breq	.+28     	; 0x298c <__floatsisf+0x74>
    2970:	96 e8       	ldi	r25, 0x86	; 134
    2972:	86 2f       	mov	r24, r22
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	2a f0       	brmi	.+10     	; 0x2984 <__floatsisf+0x6c>
    297a:	9a 95       	dec	r25
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	da f7       	brpl	.-10     	; 0x297a <__floatsisf+0x62>
    2984:	88 0f       	add	r24, r24
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	97 f9       	bld	r25, 7
    298c:	08 95       	ret

0000298e <__fp_cmp>:
    298e:	99 0f       	add	r25, r25
    2990:	00 08       	sbc	r0, r0
    2992:	55 0f       	add	r21, r21
    2994:	aa 0b       	sbc	r26, r26
    2996:	e0 e8       	ldi	r30, 0x80	; 128
    2998:	fe ef       	ldi	r31, 0xFE	; 254
    299a:	16 16       	cp	r1, r22
    299c:	17 06       	cpc	r1, r23
    299e:	e8 07       	cpc	r30, r24
    29a0:	f9 07       	cpc	r31, r25
    29a2:	c0 f0       	brcs	.+48     	; 0x29d4 <__fp_cmp+0x46>
    29a4:	12 16       	cp	r1, r18
    29a6:	13 06       	cpc	r1, r19
    29a8:	e4 07       	cpc	r30, r20
    29aa:	f5 07       	cpc	r31, r21
    29ac:	98 f0       	brcs	.+38     	; 0x29d4 <__fp_cmp+0x46>
    29ae:	62 1b       	sub	r22, r18
    29b0:	73 0b       	sbc	r23, r19
    29b2:	84 0b       	sbc	r24, r20
    29b4:	95 0b       	sbc	r25, r21
    29b6:	39 f4       	brne	.+14     	; 0x29c6 <__fp_cmp+0x38>
    29b8:	0a 26       	eor	r0, r26
    29ba:	61 f0       	breq	.+24     	; 0x29d4 <__fp_cmp+0x46>
    29bc:	23 2b       	or	r18, r19
    29be:	24 2b       	or	r18, r20
    29c0:	25 2b       	or	r18, r21
    29c2:	21 f4       	brne	.+8      	; 0x29cc <__fp_cmp+0x3e>
    29c4:	08 95       	ret
    29c6:	0a 26       	eor	r0, r26
    29c8:	09 f4       	brne	.+2      	; 0x29cc <__fp_cmp+0x3e>
    29ca:	a1 40       	sbci	r26, 0x01	; 1
    29cc:	a6 95       	lsr	r26
    29ce:	8f ef       	ldi	r24, 0xFF	; 255
    29d0:	81 1d       	adc	r24, r1
    29d2:	81 1d       	adc	r24, r1
    29d4:	08 95       	ret

000029d6 <__fp_inf>:
    29d6:	97 f9       	bld	r25, 7
    29d8:	9f 67       	ori	r25, 0x7F	; 127
    29da:	80 e8       	ldi	r24, 0x80	; 128
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	08 95       	ret

000029e2 <__fp_nan>:
    29e2:	9f ef       	ldi	r25, 0xFF	; 255
    29e4:	80 ec       	ldi	r24, 0xC0	; 192
    29e6:	08 95       	ret

000029e8 <__fp_pscA>:
    29e8:	00 24       	eor	r0, r0
    29ea:	0a 94       	dec	r0
    29ec:	16 16       	cp	r1, r22
    29ee:	17 06       	cpc	r1, r23
    29f0:	18 06       	cpc	r1, r24
    29f2:	09 06       	cpc	r0, r25
    29f4:	08 95       	ret

000029f6 <__fp_pscB>:
    29f6:	00 24       	eor	r0, r0
    29f8:	0a 94       	dec	r0
    29fa:	12 16       	cp	r1, r18
    29fc:	13 06       	cpc	r1, r19
    29fe:	14 06       	cpc	r1, r20
    2a00:	05 06       	cpc	r0, r21
    2a02:	08 95       	ret

00002a04 <__fp_round>:
    2a04:	09 2e       	mov	r0, r25
    2a06:	03 94       	inc	r0
    2a08:	00 0c       	add	r0, r0
    2a0a:	11 f4       	brne	.+4      	; 0x2a10 <__fp_round+0xc>
    2a0c:	88 23       	and	r24, r24
    2a0e:	52 f0       	brmi	.+20     	; 0x2a24 <__fp_round+0x20>
    2a10:	bb 0f       	add	r27, r27
    2a12:	40 f4       	brcc	.+16     	; 0x2a24 <__fp_round+0x20>
    2a14:	bf 2b       	or	r27, r31
    2a16:	11 f4       	brne	.+4      	; 0x2a1c <__fp_round+0x18>
    2a18:	60 ff       	sbrs	r22, 0
    2a1a:	04 c0       	rjmp	.+8      	; 0x2a24 <__fp_round+0x20>
    2a1c:	6f 5f       	subi	r22, 0xFF	; 255
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a20:	8f 4f       	sbci	r24, 0xFF	; 255
    2a22:	9f 4f       	sbci	r25, 0xFF	; 255
    2a24:	08 95       	ret

00002a26 <__fp_split3>:
    2a26:	57 fd       	sbrc	r21, 7
    2a28:	90 58       	subi	r25, 0x80	; 128
    2a2a:	44 0f       	add	r20, r20
    2a2c:	55 1f       	adc	r21, r21
    2a2e:	59 f0       	breq	.+22     	; 0x2a46 <__fp_splitA+0x10>
    2a30:	5f 3f       	cpi	r21, 0xFF	; 255
    2a32:	71 f0       	breq	.+28     	; 0x2a50 <__fp_splitA+0x1a>
    2a34:	47 95       	ror	r20

00002a36 <__fp_splitA>:
    2a36:	88 0f       	add	r24, r24
    2a38:	97 fb       	bst	r25, 7
    2a3a:	99 1f       	adc	r25, r25
    2a3c:	61 f0       	breq	.+24     	; 0x2a56 <__fp_splitA+0x20>
    2a3e:	9f 3f       	cpi	r25, 0xFF	; 255
    2a40:	79 f0       	breq	.+30     	; 0x2a60 <__fp_splitA+0x2a>
    2a42:	87 95       	ror	r24
    2a44:	08 95       	ret
    2a46:	12 16       	cp	r1, r18
    2a48:	13 06       	cpc	r1, r19
    2a4a:	14 06       	cpc	r1, r20
    2a4c:	55 1f       	adc	r21, r21
    2a4e:	f2 cf       	rjmp	.-28     	; 0x2a34 <__fp_split3+0xe>
    2a50:	46 95       	lsr	r20
    2a52:	f1 df       	rcall	.-30     	; 0x2a36 <__fp_splitA>
    2a54:	08 c0       	rjmp	.+16     	; 0x2a66 <__fp_splitA+0x30>
    2a56:	16 16       	cp	r1, r22
    2a58:	17 06       	cpc	r1, r23
    2a5a:	18 06       	cpc	r1, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	f1 cf       	rjmp	.-30     	; 0x2a42 <__fp_splitA+0xc>
    2a60:	86 95       	lsr	r24
    2a62:	71 05       	cpc	r23, r1
    2a64:	61 05       	cpc	r22, r1
    2a66:	08 94       	sec
    2a68:	08 95       	ret

00002a6a <__fp_zero>:
    2a6a:	e8 94       	clt

00002a6c <__fp_szero>:
    2a6c:	bb 27       	eor	r27, r27
    2a6e:	66 27       	eor	r22, r22
    2a70:	77 27       	eor	r23, r23
    2a72:	cb 01       	movw	r24, r22
    2a74:	97 f9       	bld	r25, 7
    2a76:	08 95       	ret

00002a78 <__gesf2>:
    2a78:	8a df       	rcall	.-236    	; 0x298e <__fp_cmp>
    2a7a:	08 f4       	brcc	.+2      	; 0x2a7e <__gesf2+0x6>
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	08 95       	ret

00002a80 <__mulsf3>:
    2a80:	0b d0       	rcall	.+22     	; 0x2a98 <__mulsf3x>
    2a82:	c0 cf       	rjmp	.-128    	; 0x2a04 <__fp_round>
    2a84:	b1 df       	rcall	.-158    	; 0x29e8 <__fp_pscA>
    2a86:	28 f0       	brcs	.+10     	; 0x2a92 <__mulsf3+0x12>
    2a88:	b6 df       	rcall	.-148    	; 0x29f6 <__fp_pscB>
    2a8a:	18 f0       	brcs	.+6      	; 0x2a92 <__mulsf3+0x12>
    2a8c:	95 23       	and	r25, r21
    2a8e:	09 f0       	breq	.+2      	; 0x2a92 <__mulsf3+0x12>
    2a90:	a2 cf       	rjmp	.-188    	; 0x29d6 <__fp_inf>
    2a92:	a7 cf       	rjmp	.-178    	; 0x29e2 <__fp_nan>
    2a94:	11 24       	eor	r1, r1
    2a96:	ea cf       	rjmp	.-44     	; 0x2a6c <__fp_szero>

00002a98 <__mulsf3x>:
    2a98:	c6 df       	rcall	.-116    	; 0x2a26 <__fp_split3>
    2a9a:	a0 f3       	brcs	.-24     	; 0x2a84 <__mulsf3+0x4>

00002a9c <__mulsf3_pse>:
    2a9c:	95 9f       	mul	r25, r21
    2a9e:	d1 f3       	breq	.-12     	; 0x2a94 <__mulsf3+0x14>
    2aa0:	95 0f       	add	r25, r21
    2aa2:	50 e0       	ldi	r21, 0x00	; 0
    2aa4:	55 1f       	adc	r21, r21
    2aa6:	62 9f       	mul	r22, r18
    2aa8:	f0 01       	movw	r30, r0
    2aaa:	72 9f       	mul	r23, r18
    2aac:	bb 27       	eor	r27, r27
    2aae:	f0 0d       	add	r31, r0
    2ab0:	b1 1d       	adc	r27, r1
    2ab2:	63 9f       	mul	r22, r19
    2ab4:	aa 27       	eor	r26, r26
    2ab6:	f0 0d       	add	r31, r0
    2ab8:	b1 1d       	adc	r27, r1
    2aba:	aa 1f       	adc	r26, r26
    2abc:	64 9f       	mul	r22, r20
    2abe:	66 27       	eor	r22, r22
    2ac0:	b0 0d       	add	r27, r0
    2ac2:	a1 1d       	adc	r26, r1
    2ac4:	66 1f       	adc	r22, r22
    2ac6:	82 9f       	mul	r24, r18
    2ac8:	22 27       	eor	r18, r18
    2aca:	b0 0d       	add	r27, r0
    2acc:	a1 1d       	adc	r26, r1
    2ace:	62 1f       	adc	r22, r18
    2ad0:	73 9f       	mul	r23, r19
    2ad2:	b0 0d       	add	r27, r0
    2ad4:	a1 1d       	adc	r26, r1
    2ad6:	62 1f       	adc	r22, r18
    2ad8:	83 9f       	mul	r24, r19
    2ada:	a0 0d       	add	r26, r0
    2adc:	61 1d       	adc	r22, r1
    2ade:	22 1f       	adc	r18, r18
    2ae0:	74 9f       	mul	r23, r20
    2ae2:	33 27       	eor	r19, r19
    2ae4:	a0 0d       	add	r26, r0
    2ae6:	61 1d       	adc	r22, r1
    2ae8:	23 1f       	adc	r18, r19
    2aea:	84 9f       	mul	r24, r20
    2aec:	60 0d       	add	r22, r0
    2aee:	21 1d       	adc	r18, r1
    2af0:	82 2f       	mov	r24, r18
    2af2:	76 2f       	mov	r23, r22
    2af4:	6a 2f       	mov	r22, r26
    2af6:	11 24       	eor	r1, r1
    2af8:	9f 57       	subi	r25, 0x7F	; 127
    2afa:	50 40       	sbci	r21, 0x00	; 0
    2afc:	8a f0       	brmi	.+34     	; 0x2b20 <__mulsf3_pse+0x84>
    2afe:	e1 f0       	breq	.+56     	; 0x2b38 <__mulsf3_pse+0x9c>
    2b00:	88 23       	and	r24, r24
    2b02:	4a f0       	brmi	.+18     	; 0x2b16 <__mulsf3_pse+0x7a>
    2b04:	ee 0f       	add	r30, r30
    2b06:	ff 1f       	adc	r31, r31
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	66 1f       	adc	r22, r22
    2b0c:	77 1f       	adc	r23, r23
    2b0e:	88 1f       	adc	r24, r24
    2b10:	91 50       	subi	r25, 0x01	; 1
    2b12:	50 40       	sbci	r21, 0x00	; 0
    2b14:	a9 f7       	brne	.-22     	; 0x2b00 <__mulsf3_pse+0x64>
    2b16:	9e 3f       	cpi	r25, 0xFE	; 254
    2b18:	51 05       	cpc	r21, r1
    2b1a:	70 f0       	brcs	.+28     	; 0x2b38 <__mulsf3_pse+0x9c>
    2b1c:	5c cf       	rjmp	.-328    	; 0x29d6 <__fp_inf>
    2b1e:	a6 cf       	rjmp	.-180    	; 0x2a6c <__fp_szero>
    2b20:	5f 3f       	cpi	r21, 0xFF	; 255
    2b22:	ec f3       	brlt	.-6      	; 0x2b1e <__mulsf3_pse+0x82>
    2b24:	98 3e       	cpi	r25, 0xE8	; 232
    2b26:	dc f3       	brlt	.-10     	; 0x2b1e <__mulsf3_pse+0x82>
    2b28:	86 95       	lsr	r24
    2b2a:	77 95       	ror	r23
    2b2c:	67 95       	ror	r22
    2b2e:	b7 95       	ror	r27
    2b30:	f7 95       	ror	r31
    2b32:	e7 95       	ror	r30
    2b34:	9f 5f       	subi	r25, 0xFF	; 255
    2b36:	c1 f7       	brne	.-16     	; 0x2b28 <__mulsf3_pse+0x8c>
    2b38:	fe 2b       	or	r31, r30
    2b3a:	88 0f       	add	r24, r24
    2b3c:	91 1d       	adc	r25, r1
    2b3e:	96 95       	lsr	r25
    2b40:	87 95       	ror	r24
    2b42:	97 f9       	bld	r25, 7
    2b44:	08 95       	ret

00002b46 <__udivmodhi4>:
    2b46:	aa 1b       	sub	r26, r26
    2b48:	bb 1b       	sub	r27, r27
    2b4a:	51 e1       	ldi	r21, 0x11	; 17
    2b4c:	07 c0       	rjmp	.+14     	; 0x2b5c <__udivmodhi4_ep>

00002b4e <__udivmodhi4_loop>:
    2b4e:	aa 1f       	adc	r26, r26
    2b50:	bb 1f       	adc	r27, r27
    2b52:	a6 17       	cp	r26, r22
    2b54:	b7 07       	cpc	r27, r23
    2b56:	10 f0       	brcs	.+4      	; 0x2b5c <__udivmodhi4_ep>
    2b58:	a6 1b       	sub	r26, r22
    2b5a:	b7 0b       	sbc	r27, r23

00002b5c <__udivmodhi4_ep>:
    2b5c:	88 1f       	adc	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	5a 95       	dec	r21
    2b62:	a9 f7       	brne	.-22     	; 0x2b4e <__udivmodhi4_loop>
    2b64:	80 95       	com	r24
    2b66:	90 95       	com	r25
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	08 95       	ret

00002b6e <__divmodhi4>:
    2b6e:	97 fb       	bst	r25, 7
    2b70:	09 2e       	mov	r0, r25
    2b72:	07 26       	eor	r0, r23
    2b74:	0a d0       	rcall	.+20     	; 0x2b8a <__divmodhi4_neg1>
    2b76:	77 fd       	sbrc	r23, 7
    2b78:	04 d0       	rcall	.+8      	; 0x2b82 <__divmodhi4_neg2>
    2b7a:	e5 df       	rcall	.-54     	; 0x2b46 <__udivmodhi4>
    2b7c:	06 d0       	rcall	.+12     	; 0x2b8a <__divmodhi4_neg1>
    2b7e:	00 20       	and	r0, r0
    2b80:	1a f4       	brpl	.+6      	; 0x2b88 <__divmodhi4_exit>

00002b82 <__divmodhi4_neg2>:
    2b82:	70 95       	com	r23
    2b84:	61 95       	neg	r22
    2b86:	7f 4f       	sbci	r23, 0xFF	; 255

00002b88 <__divmodhi4_exit>:
    2b88:	08 95       	ret

00002b8a <__divmodhi4_neg1>:
    2b8a:	f6 f7       	brtc	.-4      	; 0x2b88 <__divmodhi4_exit>
    2b8c:	90 95       	com	r25
    2b8e:	81 95       	neg	r24
    2b90:	9f 4f       	sbci	r25, 0xFF	; 255
    2b92:	08 95       	ret

00002b94 <__tablejump2__>:
    2b94:	ee 0f       	add	r30, r30
    2b96:	ff 1f       	adc	r31, r31

00002b98 <__tablejump__>:
    2b98:	05 90       	lpm	r0, Z+
    2b9a:	f4 91       	lpm	r31, Z
    2b9c:	e0 2d       	mov	r30, r0
    2b9e:	09 94       	ijmp

00002ba0 <dtostrf>:
    2ba0:	ef 92       	push	r14
    2ba2:	0f 93       	push	r16
    2ba4:	1f 93       	push	r17
    2ba6:	cf 93       	push	r28
    2ba8:	32 2f       	mov	r19, r18
    2baa:	c0 2f       	mov	r28, r16
    2bac:	47 ff       	sbrs	r20, 7
    2bae:	02 c0       	rjmp	.+4      	; 0x2bb4 <dtostrf+0x14>
    2bb0:	a4 e1       	ldi	r26, 0x14	; 20
    2bb2:	01 c0       	rjmp	.+2      	; 0x2bb6 <dtostrf+0x16>
    2bb4:	a4 e0       	ldi	r26, 0x04	; 4
    2bb6:	e4 2f       	mov	r30, r20
    2bb8:	ff 27       	eor	r31, r31
    2bba:	e7 fd       	sbrc	r30, 7
    2bbc:	f0 95       	com	r31
    2bbe:	f7 ff       	sbrs	r31, 7
    2bc0:	03 c0       	rjmp	.+6      	; 0x2bc8 <dtostrf+0x28>
    2bc2:	f0 95       	com	r31
    2bc4:	e1 95       	neg	r30
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	4c 2f       	mov	r20, r28
    2bca:	51 2f       	mov	r21, r17
    2bcc:	2e 2f       	mov	r18, r30
    2bce:	03 2f       	mov	r16, r19
    2bd0:	ea 2e       	mov	r14, r26
    2bd2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <dtoa_prf>
    2bd6:	8c 2f       	mov	r24, r28
    2bd8:	91 2f       	mov	r25, r17
    2bda:	cf 91       	pop	r28
    2bdc:	1f 91       	pop	r17
    2bde:	0f 91       	pop	r16
    2be0:	ef 90       	pop	r14
    2be2:	08 95       	ret

00002be4 <atoi>:
    2be4:	fc 01       	movw	r30, r24
    2be6:	88 27       	eor	r24, r24
    2be8:	99 27       	eor	r25, r25
    2bea:	e8 94       	clt
    2bec:	21 91       	ld	r18, Z+
    2bee:	20 32       	cpi	r18, 0x20	; 32
    2bf0:	e9 f3       	breq	.-6      	; 0x2bec <atoi+0x8>
    2bf2:	29 30       	cpi	r18, 0x09	; 9
    2bf4:	10 f0       	brcs	.+4      	; 0x2bfa <atoi+0x16>
    2bf6:	2e 30       	cpi	r18, 0x0E	; 14
    2bf8:	c8 f3       	brcs	.-14     	; 0x2bec <atoi+0x8>
    2bfa:	2b 32       	cpi	r18, 0x2B	; 43
    2bfc:	41 f0       	breq	.+16     	; 0x2c0e <atoi+0x2a>
    2bfe:	2d 32       	cpi	r18, 0x2D	; 45
    2c00:	39 f4       	brne	.+14     	; 0x2c10 <atoi+0x2c>
    2c02:	68 94       	set
    2c04:	04 c0       	rjmp	.+8      	; 0x2c0e <atoi+0x2a>
    2c06:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__mulhi_const_10>
    2c0a:	82 0f       	add	r24, r18
    2c0c:	91 1d       	adc	r25, r1
    2c0e:	21 91       	ld	r18, Z+
    2c10:	20 53       	subi	r18, 0x30	; 48
    2c12:	2a 30       	cpi	r18, 0x0A	; 10
    2c14:	c0 f3       	brcs	.-16     	; 0x2c06 <atoi+0x22>
    2c16:	1e f4       	brtc	.+6      	; 0x2c1e <atoi+0x3a>
    2c18:	90 95       	com	r25
    2c1a:	81 95       	neg	r24
    2c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1e:	08 95       	ret

00002c20 <strcat>:
    2c20:	fb 01       	movw	r30, r22
    2c22:	dc 01       	movw	r26, r24
    2c24:	0d 90       	ld	r0, X+
    2c26:	00 20       	and	r0, r0
    2c28:	e9 f7       	brne	.-6      	; 0x2c24 <strcat+0x4>
    2c2a:	11 97       	sbiw	r26, 0x01	; 1
    2c2c:	01 90       	ld	r0, Z+
    2c2e:	0d 92       	st	X+, r0
    2c30:	00 20       	and	r0, r0
    2c32:	e1 f7       	brne	.-8      	; 0x2c2c <strcat+0xc>
    2c34:	08 95       	ret

00002c36 <strncmp>:
    2c36:	fb 01       	movw	r30, r22
    2c38:	dc 01       	movw	r26, r24
    2c3a:	41 50       	subi	r20, 0x01	; 1
    2c3c:	50 40       	sbci	r21, 0x00	; 0
    2c3e:	30 f0       	brcs	.+12     	; 0x2c4c <strncmp+0x16>
    2c40:	8d 91       	ld	r24, X+
    2c42:	01 90       	ld	r0, Z+
    2c44:	80 19       	sub	r24, r0
    2c46:	19 f4       	brne	.+6      	; 0x2c4e <strncmp+0x18>
    2c48:	00 20       	and	r0, r0
    2c4a:	b9 f7       	brne	.-18     	; 0x2c3a <strncmp+0x4>
    2c4c:	88 1b       	sub	r24, r24
    2c4e:	99 0b       	sbc	r25, r25
    2c50:	08 95       	ret

00002c52 <__mulhi_const_10>:
    2c52:	7a e0       	ldi	r23, 0x0A	; 10
    2c54:	97 9f       	mul	r25, r23
    2c56:	90 2d       	mov	r25, r0
    2c58:	87 9f       	mul	r24, r23
    2c5a:	80 2d       	mov	r24, r0
    2c5c:	91 0d       	add	r25, r1
    2c5e:	11 24       	eor	r1, r1
    2c60:	08 95       	ret

00002c62 <utoa>:
    2c62:	fb 01       	movw	r30, r22
    2c64:	9f 01       	movw	r18, r30
    2c66:	42 30       	cpi	r20, 0x02	; 2
    2c68:	74 f0       	brlt	.+28     	; 0x2c86 <utoa+0x24>
    2c6a:	45 32       	cpi	r20, 0x25	; 37
    2c6c:	64 f4       	brge	.+24     	; 0x2c86 <utoa+0x24>
    2c6e:	64 2f       	mov	r22, r20
    2c70:	77 27       	eor	r23, r23
    2c72:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <__udivmodhi4>
    2c76:	80 5d       	subi	r24, 0xD0	; 208
    2c78:	8a 33       	cpi	r24, 0x3A	; 58
    2c7a:	0c f0       	brlt	.+2      	; 0x2c7e <utoa+0x1c>
    2c7c:	89 5d       	subi	r24, 0xD9	; 217
    2c7e:	81 93       	st	Z+, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	a1 f7       	brne	.-24     	; 0x2c6e <utoa+0xc>
    2c86:	10 82       	st	Z, r1
    2c88:	c9 01       	movw	r24, r18
    2c8a:	0c 94 af 18 	jmp	0x315e	; 0x315e <strrev>

00002c8e <__eerd_byte_m324pa>:
    2c8e:	f9 99       	sbic	0x1f, 1	; 31
    2c90:	fe cf       	rjmp	.-4      	; 0x2c8e <__eerd_byte_m324pa>
    2c92:	92 bd       	out	0x22, r25	; 34
    2c94:	81 bd       	out	0x21, r24	; 33
    2c96:	f8 9a       	sbi	0x1f, 0	; 31
    2c98:	99 27       	eor	r25, r25
    2c9a:	80 b5       	in	r24, 0x20	; 32
    2c9c:	08 95       	ret

00002c9e <__eerd_dword_m324pa>:
    2c9e:	a6 e1       	ldi	r26, 0x16	; 22
    2ca0:	b0 e0       	ldi	r27, 0x00	; 0
    2ca2:	44 e0       	ldi	r20, 0x04	; 4
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__eerd_blraw_m324pa>

00002caa <__eerd_word_m324pa>:
    2caa:	a8 e1       	ldi	r26, 0x18	; 24
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	42 e0       	ldi	r20, 0x02	; 2
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__eerd_blraw_m324pa>

00002cb6 <__eeupd_byte_m324pa>:
    2cb6:	26 2f       	mov	r18, r22

00002cb8 <__eeupd_r18_m324pa>:
    2cb8:	f9 99       	sbic	0x1f, 1	; 31
    2cba:	fe cf       	rjmp	.-4      	; 0x2cb8 <__eeupd_r18_m324pa>
    2cbc:	92 bd       	out	0x22, r25	; 34
    2cbe:	81 bd       	out	0x21, r24	; 33
    2cc0:	f8 9a       	sbi	0x1f, 0	; 31
    2cc2:	01 97       	sbiw	r24, 0x01	; 1
    2cc4:	00 b4       	in	r0, 0x20	; 32
    2cc6:	02 16       	cp	r0, r18
    2cc8:	39 f0       	breq	.+14     	; 0x2cd8 <__eeupd_r18_m324pa+0x20>
    2cca:	1f ba       	out	0x1f, r1	; 31
    2ccc:	20 bd       	out	0x20, r18	; 32
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	fa 9a       	sbi	0x1f, 2	; 31
    2cd4:	f9 9a       	sbi	0x1f, 1	; 31
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	08 95       	ret

00002cda <__eeupd_dword_m324pa>:
    2cda:	03 96       	adiw	r24, 0x03	; 3
    2cdc:	27 2f       	mov	r18, r23
    2cde:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <__eeupd_r18_m324pa>
    2ce2:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__eeupd_byte_m324pa>
    2ce6:	25 2f       	mov	r18, r21
    2ce8:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <__eeupd_r18_m324pa>
    2cec:	24 2f       	mov	r18, r20
    2cee:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <__eeupd_r18_m324pa>

00002cf2 <__eeupd_word_m324pa>:
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	27 2f       	mov	r18, r23
    2cf6:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <__eeupd_r18_m324pa>
    2cfa:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <__eeupd_byte_m324pa>

00002cfe <dtoa_prf>:
    2cfe:	a9 e0       	ldi	r26, 0x09	; 9
    2d00:	b0 e0       	ldi	r27, 0x00	; 0
    2d02:	e5 e8       	ldi	r30, 0x85	; 133
    2d04:	f6 e1       	ldi	r31, 0x16	; 22
    2d06:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__prologue_saves__+0x8>
    2d0a:	6a 01       	movw	r12, r20
    2d0c:	12 2f       	mov	r17, r18
    2d0e:	f0 2e       	mov	r15, r16
    2d10:	2b e3       	ldi	r18, 0x3B	; 59
    2d12:	20 17       	cp	r18, r16
    2d14:	18 f0       	brcs	.+6      	; 0x2d1c <dtoa_prf+0x1e>
    2d16:	b0 2e       	mov	r11, r16
    2d18:	b3 94       	inc	r11
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <dtoa_prf+0x22>
    2d1c:	3c e3       	ldi	r19, 0x3C	; 60
    2d1e:	b3 2e       	mov	r11, r19
    2d20:	ae 01       	movw	r20, r28
    2d22:	4f 5f       	subi	r20, 0xFF	; 255
    2d24:	5f 4f       	sbci	r21, 0xFF	; 255
    2d26:	27 e0       	ldi	r18, 0x07	; 7
    2d28:	0b 2d       	mov	r16, r11
    2d2a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__ftoa_engine>
    2d2e:	bc 01       	movw	r22, r24
    2d30:	a9 81       	ldd	r26, Y+1	; 0x01
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	cd 01       	movw	r24, r26
    2d36:	89 70       	andi	r24, 0x09	; 9
    2d38:	90 70       	andi	r25, 0x00	; 0
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	31 f0       	breq	.+12     	; 0x2d4c <dtoa_prf+0x4e>
    2d40:	e1 fc       	sbrc	r14, 1
    2d42:	06 c0       	rjmp	.+12     	; 0x2d50 <dtoa_prf+0x52>
    2d44:	e0 fe       	sbrs	r14, 0
    2d46:	06 c0       	rjmp	.+12     	; 0x2d54 <dtoa_prf+0x56>
    2d48:	40 e2       	ldi	r20, 0x20	; 32
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <dtoa_prf+0x58>
    2d4c:	4d e2       	ldi	r20, 0x2D	; 45
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <dtoa_prf+0x58>
    2d50:	4b e2       	ldi	r20, 0x2B	; 43
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <dtoa_prf+0x58>
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	a3 ff       	sbrs	r26, 3
    2d58:	36 c0       	rjmp	.+108    	; 0x2dc6 <dtoa_prf+0xc8>
    2d5a:	44 23       	and	r20, r20
    2d5c:	11 f0       	breq	.+4      	; 0x2d62 <dtoa_prf+0x64>
    2d5e:	84 e0       	ldi	r24, 0x04	; 4
    2d60:	01 c0       	rjmp	.+2      	; 0x2d64 <dtoa_prf+0x66>
    2d62:	83 e0       	ldi	r24, 0x03	; 3
    2d64:	81 17       	cp	r24, r17
    2d66:	10 f4       	brcc	.+4      	; 0x2d6c <dtoa_prf+0x6e>
    2d68:	18 1b       	sub	r17, r24
    2d6a:	01 c0       	rjmp	.+2      	; 0x2d6e <dtoa_prf+0x70>
    2d6c:	10 e0       	ldi	r17, 0x00	; 0
    2d6e:	e4 fc       	sbrc	r14, 4
    2d70:	0b c0       	rjmp	.+22     	; 0x2d88 <dtoa_prf+0x8a>
    2d72:	91 2f       	mov	r25, r17
    2d74:	f6 01       	movw	r30, r12
    2d76:	80 e2       	ldi	r24, 0x20	; 32
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <dtoa_prf+0x80>
    2d7a:	81 93       	st	Z+, r24
    2d7c:	91 50       	subi	r25, 0x01	; 1
    2d7e:	99 23       	and	r25, r25
    2d80:	e1 f7       	brne	.-8      	; 0x2d7a <dtoa_prf+0x7c>
    2d82:	c1 0e       	add	r12, r17
    2d84:	d1 1c       	adc	r13, r1
    2d86:	10 e0       	ldi	r17, 0x00	; 0
    2d88:	44 23       	and	r20, r20
    2d8a:	19 f0       	breq	.+6      	; 0x2d92 <dtoa_prf+0x94>
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	41 93       	st	Z+, r20
    2d90:	6f 01       	movw	r12, r30
    2d92:	e2 fe       	sbrs	r14, 2
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <dtoa_prf+0xa2>
    2d96:	8e e4       	ldi	r24, 0x4E	; 78
    2d98:	f6 01       	movw	r30, r12
    2d9a:	80 83       	st	Z, r24
    2d9c:	91 e4       	ldi	r25, 0x41	; 65
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <dtoa_prf+0xaa>
    2da0:	8e e6       	ldi	r24, 0x6E	; 110
    2da2:	f6 01       	movw	r30, r12
    2da4:	80 83       	st	Z, r24
    2da6:	91 e6       	ldi	r25, 0x61	; 97
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	82 83       	std	Z+2, r24	; 0x02
    2dac:	83 e0       	ldi	r24, 0x03	; 3
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	c8 0e       	add	r12, r24
    2db2:	d9 1e       	adc	r13, r25
    2db4:	81 2f       	mov	r24, r17
    2db6:	f6 01       	movw	r30, r12
    2db8:	90 e2       	ldi	r25, 0x20	; 32
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <dtoa_prf+0xc2>
    2dbc:	91 93       	st	Z+, r25
    2dbe:	81 50       	subi	r24, 0x01	; 1
    2dc0:	88 23       	and	r24, r24
    2dc2:	e1 f7       	brne	.-8      	; 0x2dbc <dtoa_prf+0xbe>
    2dc4:	3a c0       	rjmp	.+116    	; 0x2e3a <dtoa_prf+0x13c>
    2dc6:	a2 ff       	sbrs	r26, 2
    2dc8:	3f c0       	rjmp	.+126    	; 0x2e48 <dtoa_prf+0x14a>
    2dca:	44 23       	and	r20, r20
    2dcc:	11 f0       	breq	.+4      	; 0x2dd2 <dtoa_prf+0xd4>
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <dtoa_prf+0xd6>
    2dd2:	83 e0       	ldi	r24, 0x03	; 3
    2dd4:	81 17       	cp	r24, r17
    2dd6:	10 f4       	brcc	.+4      	; 0x2ddc <dtoa_prf+0xde>
    2dd8:	18 1b       	sub	r17, r24
    2dda:	01 c0       	rjmp	.+2      	; 0x2dde <dtoa_prf+0xe0>
    2ddc:	10 e0       	ldi	r17, 0x00	; 0
    2dde:	e4 fc       	sbrc	r14, 4
    2de0:	0b c0       	rjmp	.+22     	; 0x2df8 <dtoa_prf+0xfa>
    2de2:	91 2f       	mov	r25, r17
    2de4:	f6 01       	movw	r30, r12
    2de6:	80 e2       	ldi	r24, 0x20	; 32
    2de8:	02 c0       	rjmp	.+4      	; 0x2dee <dtoa_prf+0xf0>
    2dea:	81 93       	st	Z+, r24
    2dec:	91 50       	subi	r25, 0x01	; 1
    2dee:	99 23       	and	r25, r25
    2df0:	e1 f7       	brne	.-8      	; 0x2dea <dtoa_prf+0xec>
    2df2:	c1 0e       	add	r12, r17
    2df4:	d1 1c       	adc	r13, r1
    2df6:	10 e0       	ldi	r17, 0x00	; 0
    2df8:	44 23       	and	r20, r20
    2dfa:	19 f0       	breq	.+6      	; 0x2e02 <dtoa_prf+0x104>
    2dfc:	f6 01       	movw	r30, r12
    2dfe:	41 93       	st	Z+, r20
    2e00:	6f 01       	movw	r12, r30
    2e02:	e2 fe       	sbrs	r14, 2
    2e04:	07 c0       	rjmp	.+14     	; 0x2e14 <dtoa_prf+0x116>
    2e06:	89 e4       	ldi	r24, 0x49	; 73
    2e08:	f6 01       	movw	r30, r12
    2e0a:	80 83       	st	Z, r24
    2e0c:	8e e4       	ldi	r24, 0x4E	; 78
    2e0e:	81 83       	std	Z+1, r24	; 0x01
    2e10:	86 e4       	ldi	r24, 0x46	; 70
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <dtoa_prf+0x122>
    2e14:	89 e6       	ldi	r24, 0x69	; 105
    2e16:	f6 01       	movw	r30, r12
    2e18:	80 83       	st	Z, r24
    2e1a:	8e e6       	ldi	r24, 0x6E	; 110
    2e1c:	81 83       	std	Z+1, r24	; 0x01
    2e1e:	86 e6       	ldi	r24, 0x66	; 102
    2e20:	82 83       	std	Z+2, r24	; 0x02
    2e22:	83 e0       	ldi	r24, 0x03	; 3
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	c8 0e       	add	r12, r24
    2e28:	d9 1e       	adc	r13, r25
    2e2a:	81 2f       	mov	r24, r17
    2e2c:	f6 01       	movw	r30, r12
    2e2e:	90 e2       	ldi	r25, 0x20	; 32
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <dtoa_prf+0x138>
    2e32:	91 93       	st	Z+, r25
    2e34:	81 50       	subi	r24, 0x01	; 1
    2e36:	88 23       	and	r24, r24
    2e38:	e1 f7       	brne	.-8      	; 0x2e32 <dtoa_prf+0x134>
    2e3a:	c1 0e       	add	r12, r17
    2e3c:	d1 1c       	adc	r13, r1
    2e3e:	f6 01       	movw	r30, r12
    2e40:	10 82       	st	Z, r1
    2e42:	8e ef       	ldi	r24, 0xFE	; 254
    2e44:	9f ef       	ldi	r25, 0xFF	; 255
    2e46:	af c0       	rjmp	.+350    	; 0x2fa6 <dtoa_prf+0x2a8>
    2e48:	21 e0       	ldi	r18, 0x01	; 1
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	44 23       	and	r20, r20
    2e4e:	11 f4       	brne	.+4      	; 0x2e54 <dtoa_prf+0x156>
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	16 16       	cp	r1, r22
    2e56:	17 06       	cpc	r1, r23
    2e58:	1c f4       	brge	.+6      	; 0x2e60 <dtoa_prf+0x162>
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	02 c0       	rjmp	.+4      	; 0x2e64 <dtoa_prf+0x166>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	28 0f       	add	r18, r24
    2e66:	39 1f       	adc	r19, r25
    2e68:	ff 20       	and	r15, r15
    2e6a:	21 f0       	breq	.+8      	; 0x2e74 <dtoa_prf+0x176>
    2e6c:	8f 2d       	mov	r24, r15
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	01 96       	adiw	r24, 0x01	; 1
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <dtoa_prf+0x17a>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	82 0f       	add	r24, r18
    2e7a:	93 1f       	adc	r25, r19
    2e7c:	21 2f       	mov	r18, r17
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	82 17       	cp	r24, r18
    2e82:	93 07       	cpc	r25, r19
    2e84:	1c f4       	brge	.+6      	; 0x2e8c <dtoa_prf+0x18e>
    2e86:	51 2f       	mov	r21, r17
    2e88:	58 1b       	sub	r21, r24
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <dtoa_prf+0x190>
    2e8c:	50 e0       	ldi	r21, 0x00	; 0
    2e8e:	8e 2d       	mov	r24, r14
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9c 01       	movw	r18, r24
    2e94:	20 71       	andi	r18, 0x10	; 16
    2e96:	30 70       	andi	r19, 0x00	; 0
    2e98:	e4 fc       	sbrc	r14, 4
    2e9a:	0d c0       	rjmp	.+26     	; 0x2eb6 <dtoa_prf+0x1b8>
    2e9c:	e3 fc       	sbrc	r14, 3
    2e9e:	0b c0       	rjmp	.+22     	; 0x2eb6 <dtoa_prf+0x1b8>
    2ea0:	85 2f       	mov	r24, r21
    2ea2:	f6 01       	movw	r30, r12
    2ea4:	90 e2       	ldi	r25, 0x20	; 32
    2ea6:	02 c0       	rjmp	.+4      	; 0x2eac <dtoa_prf+0x1ae>
    2ea8:	91 93       	st	Z+, r25
    2eaa:	81 50       	subi	r24, 0x01	; 1
    2eac:	88 23       	and	r24, r24
    2eae:	e1 f7       	brne	.-8      	; 0x2ea8 <dtoa_prf+0x1aa>
    2eb0:	c5 0e       	add	r12, r21
    2eb2:	d1 1c       	adc	r13, r1
    2eb4:	50 e0       	ldi	r21, 0x00	; 0
    2eb6:	44 23       	and	r20, r20
    2eb8:	19 f0       	breq	.+6      	; 0x2ec0 <dtoa_prf+0x1c2>
    2eba:	f6 01       	movw	r30, r12
    2ebc:	41 93       	st	Z+, r20
    2ebe:	6f 01       	movw	r12, r30
    2ec0:	21 15       	cp	r18, r1
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	59 f4       	brne	.+22     	; 0x2edc <dtoa_prf+0x1de>
    2ec6:	85 2f       	mov	r24, r21
    2ec8:	f6 01       	movw	r30, r12
    2eca:	90 e3       	ldi	r25, 0x30	; 48
    2ecc:	02 c0       	rjmp	.+4      	; 0x2ed2 <dtoa_prf+0x1d4>
    2ece:	91 93       	st	Z+, r25
    2ed0:	81 50       	subi	r24, 0x01	; 1
    2ed2:	88 23       	and	r24, r24
    2ed4:	e1 f7       	brne	.-8      	; 0x2ece <dtoa_prf+0x1d0>
    2ed6:	c5 0e       	add	r12, r21
    2ed8:	d1 1c       	adc	r13, r1
    2eda:	50 e0       	ldi	r21, 0x00	; 0
    2edc:	b6 0e       	add	r11, r22
    2ede:	4a 81       	ldd	r20, Y+2	; 0x02
    2ee0:	20 e1       	ldi	r18, 0x10	; 16
    2ee2:	62 2e       	mov	r6, r18
    2ee4:	71 2c       	mov	r7, r1
    2ee6:	6a 22       	and	r6, r26
    2ee8:	7b 22       	and	r7, r27
    2eea:	a4 ff       	sbrs	r26, 4
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <dtoa_prf+0x1f6>
    2eee:	41 33       	cpi	r20, 0x31	; 49
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <dtoa_prf+0x1f6>
    2ef2:	ba 94       	dec	r11
    2ef4:	1b 14       	cp	r1, r11
    2ef6:	2c f4       	brge	.+10     	; 0x2f02 <dtoa_prf+0x204>
    2ef8:	8b 2d       	mov	r24, r11
    2efa:	89 30       	cpi	r24, 0x09	; 9
    2efc:	18 f0       	brcs	.+6      	; 0x2f04 <dtoa_prf+0x206>
    2efe:	88 e0       	ldi	r24, 0x08	; 8
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <dtoa_prf+0x206>
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	9b 01       	movw	r18, r22
    2f06:	77 ff       	sbrs	r23, 7
    2f08:	02 c0       	rjmp	.+4      	; 0x2f0e <dtoa_prf+0x210>
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	9e e2       	ldi	r25, 0x2E	; 46
    2f14:	e9 2e       	mov	r14, r25
    2f16:	4b 01       	movw	r8, r22
    2f18:	88 1a       	sub	r8, r24
    2f1a:	91 08       	sbc	r9, r1
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	82 1b       	sub	r24, r18
    2f20:	93 0b       	sbc	r25, r19
    2f22:	8e 01       	movw	r16, r28
    2f24:	0f 5f       	subi	r16, 0xFF	; 255
    2f26:	1f 4f       	sbci	r17, 0xFF	; 255
    2f28:	08 0f       	add	r16, r24
    2f2a:	19 1f       	adc	r17, r25
    2f2c:	8f 2d       	mov	r24, r15
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	aa 24       	eor	r10, r10
    2f32:	bb 24       	eor	r11, r11
    2f34:	a8 1a       	sub	r10, r24
    2f36:	b9 0a       	sbc	r11, r25
    2f38:	ff ef       	ldi	r31, 0xFF	; 255
    2f3a:	2f 3f       	cpi	r18, 0xFF	; 255
    2f3c:	3f 07       	cpc	r19, r31
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <dtoa_prf+0x248>
    2f40:	f6 01       	movw	r30, r12
    2f42:	e1 92       	st	Z+, r14
    2f44:	6f 01       	movw	r12, r30
    2f46:	62 17       	cp	r22, r18
    2f48:	73 07       	cpc	r23, r19
    2f4a:	44 f0       	brlt	.+16     	; 0x2f5c <dtoa_prf+0x25e>
    2f4c:	82 16       	cp	r8, r18
    2f4e:	93 06       	cpc	r9, r19
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <dtoa_prf+0x25e>
    2f52:	f8 01       	movw	r30, r16
    2f54:	ea 0f       	add	r30, r26
    2f56:	fb 1f       	adc	r31, r27
    2f58:	81 81       	ldd	r24, Z+1	; 0x01
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <dtoa_prf+0x260>
    2f5c:	80 e3       	ldi	r24, 0x30	; 48
    2f5e:	21 50       	subi	r18, 0x01	; 1
    2f60:	30 40       	sbci	r19, 0x00	; 0
    2f62:	11 96       	adiw	r26, 0x01	; 1
    2f64:	2a 15       	cp	r18, r10
    2f66:	3b 05       	cpc	r19, r11
    2f68:	24 f0       	brlt	.+8      	; 0x2f72 <dtoa_prf+0x274>
    2f6a:	f6 01       	movw	r30, r12
    2f6c:	81 93       	st	Z+, r24
    2f6e:	6f 01       	movw	r12, r30
    2f70:	e3 cf       	rjmp	.-58     	; 0x2f38 <dtoa_prf+0x23a>
    2f72:	26 17       	cp	r18, r22
    2f74:	37 07       	cpc	r19, r23
    2f76:	41 f4       	brne	.+16     	; 0x2f88 <dtoa_prf+0x28a>
    2f78:	46 33       	cpi	r20, 0x36	; 54
    2f7a:	28 f4       	brcc	.+10     	; 0x2f86 <dtoa_prf+0x288>
    2f7c:	45 33       	cpi	r20, 0x35	; 53
    2f7e:	21 f4       	brne	.+8      	; 0x2f88 <dtoa_prf+0x28a>
    2f80:	61 14       	cp	r6, r1
    2f82:	71 04       	cpc	r7, r1
    2f84:	09 f4       	brne	.+2      	; 0x2f88 <dtoa_prf+0x28a>
    2f86:	81 e3       	ldi	r24, 0x31	; 49
    2f88:	f6 01       	movw	r30, r12
    2f8a:	81 93       	st	Z+, r24
    2f8c:	85 2f       	mov	r24, r21
    2f8e:	df 01       	movw	r26, r30
    2f90:	90 e2       	ldi	r25, 0x20	; 32
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <dtoa_prf+0x29a>
    2f94:	9d 93       	st	X+, r25
    2f96:	81 50       	subi	r24, 0x01	; 1
    2f98:	88 23       	and	r24, r24
    2f9a:	e1 f7       	brne	.-8      	; 0x2f94 <dtoa_prf+0x296>
    2f9c:	e5 0f       	add	r30, r21
    2f9e:	f1 1d       	adc	r31, r1
    2fa0:	10 82       	st	Z, r1
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	29 96       	adiw	r28, 0x09	; 9
    2fa8:	ee e0       	ldi	r30, 0x0E	; 14
    2faa:	0c 94 ef 18 	jmp	0x31de	; 0x31de <__epilogue_restores__+0x8>

00002fae <__ftoa_engine>:
    2fae:	28 30       	cpi	r18, 0x08	; 8
    2fb0:	08 f0       	brcs	.+2      	; 0x2fb4 <__ftoa_engine+0x6>
    2fb2:	27 e0       	ldi	r18, 0x07	; 7
    2fb4:	33 27       	eor	r19, r19
    2fb6:	da 01       	movw	r26, r20
    2fb8:	99 0f       	add	r25, r25
    2fba:	31 1d       	adc	r19, r1
    2fbc:	87 fd       	sbrc	r24, 7
    2fbe:	91 60       	ori	r25, 0x01	; 1
    2fc0:	00 96       	adiw	r24, 0x00	; 0
    2fc2:	61 05       	cpc	r22, r1
    2fc4:	71 05       	cpc	r23, r1
    2fc6:	39 f4       	brne	.+14     	; 0x2fd6 <__ftoa_engine+0x28>
    2fc8:	32 60       	ori	r19, 0x02	; 2
    2fca:	2e 5f       	subi	r18, 0xFE	; 254
    2fcc:	3d 93       	st	X+, r19
    2fce:	30 e3       	ldi	r19, 0x30	; 48
    2fd0:	2a 95       	dec	r18
    2fd2:	e1 f7       	brne	.-8      	; 0x2fcc <__ftoa_engine+0x1e>
    2fd4:	08 95       	ret
    2fd6:	9f 3f       	cpi	r25, 0xFF	; 255
    2fd8:	30 f0       	brcs	.+12     	; 0x2fe6 <__ftoa_engine+0x38>
    2fda:	80 38       	cpi	r24, 0x80	; 128
    2fdc:	71 05       	cpc	r23, r1
    2fde:	61 05       	cpc	r22, r1
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <__ftoa_engine+0x36>
    2fe2:	3c 5f       	subi	r19, 0xFC	; 252
    2fe4:	3c 5f       	subi	r19, 0xFC	; 252
    2fe6:	3d 93       	st	X+, r19
    2fe8:	91 30       	cpi	r25, 0x01	; 1
    2fea:	08 f0       	brcs	.+2      	; 0x2fee <__ftoa_engine+0x40>
    2fec:	80 68       	ori	r24, 0x80	; 128
    2fee:	91 1d       	adc	r25, r1
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	1f 93       	push	r17
    2ff6:	0f 93       	push	r16
    2ff8:	ff 92       	push	r15
    2ffa:	ef 92       	push	r14
    2ffc:	19 2f       	mov	r17, r25
    2ffe:	98 7f       	andi	r25, 0xF8	; 248
    3000:	96 95       	lsr	r25
    3002:	e9 2f       	mov	r30, r25
    3004:	96 95       	lsr	r25
    3006:	96 95       	lsr	r25
    3008:	e9 0f       	add	r30, r25
    300a:	ff 27       	eor	r31, r31
    300c:	ea 52       	subi	r30, 0x2A	; 42
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	99 27       	eor	r25, r25
    3012:	33 27       	eor	r19, r19
    3014:	ee 24       	eor	r14, r14
    3016:	ff 24       	eor	r15, r15
    3018:	a7 01       	movw	r20, r14
    301a:	e7 01       	movw	r28, r14
    301c:	05 90       	lpm	r0, Z+
    301e:	08 94       	sec
    3020:	07 94       	ror	r0
    3022:	28 f4       	brcc	.+10     	; 0x302e <__ftoa_engine+0x80>
    3024:	36 0f       	add	r19, r22
    3026:	e7 1e       	adc	r14, r23
    3028:	f8 1e       	adc	r15, r24
    302a:	49 1f       	adc	r20, r25
    302c:	51 1d       	adc	r21, r1
    302e:	66 0f       	add	r22, r22
    3030:	77 1f       	adc	r23, r23
    3032:	88 1f       	adc	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	06 94       	lsr	r0
    3038:	a1 f7       	brne	.-24     	; 0x3022 <__ftoa_engine+0x74>
    303a:	05 90       	lpm	r0, Z+
    303c:	07 94       	ror	r0
    303e:	28 f4       	brcc	.+10     	; 0x304a <__ftoa_engine+0x9c>
    3040:	e7 0e       	add	r14, r23
    3042:	f8 1e       	adc	r15, r24
    3044:	49 1f       	adc	r20, r25
    3046:	56 1f       	adc	r21, r22
    3048:	c1 1d       	adc	r28, r1
    304a:	77 0f       	add	r23, r23
    304c:	88 1f       	adc	r24, r24
    304e:	99 1f       	adc	r25, r25
    3050:	66 1f       	adc	r22, r22
    3052:	06 94       	lsr	r0
    3054:	a1 f7       	brne	.-24     	; 0x303e <__ftoa_engine+0x90>
    3056:	05 90       	lpm	r0, Z+
    3058:	07 94       	ror	r0
    305a:	28 f4       	brcc	.+10     	; 0x3066 <__ftoa_engine+0xb8>
    305c:	f8 0e       	add	r15, r24
    305e:	49 1f       	adc	r20, r25
    3060:	56 1f       	adc	r21, r22
    3062:	c7 1f       	adc	r28, r23
    3064:	d1 1d       	adc	r29, r1
    3066:	88 0f       	add	r24, r24
    3068:	99 1f       	adc	r25, r25
    306a:	66 1f       	adc	r22, r22
    306c:	77 1f       	adc	r23, r23
    306e:	06 94       	lsr	r0
    3070:	a1 f7       	brne	.-24     	; 0x305a <__ftoa_engine+0xac>
    3072:	05 90       	lpm	r0, Z+
    3074:	07 94       	ror	r0
    3076:	20 f4       	brcc	.+8      	; 0x3080 <__ftoa_engine+0xd2>
    3078:	49 0f       	add	r20, r25
    307a:	56 1f       	adc	r21, r22
    307c:	c7 1f       	adc	r28, r23
    307e:	d8 1f       	adc	r29, r24
    3080:	99 0f       	add	r25, r25
    3082:	66 1f       	adc	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	06 94       	lsr	r0
    308a:	a9 f7       	brne	.-22     	; 0x3076 <__ftoa_engine+0xc8>
    308c:	84 91       	lpm	r24, Z
    308e:	10 95       	com	r17
    3090:	17 70       	andi	r17, 0x07	; 7
    3092:	41 f0       	breq	.+16     	; 0x30a4 <__ftoa_engine+0xf6>
    3094:	d6 95       	lsr	r29
    3096:	c7 95       	ror	r28
    3098:	57 95       	ror	r21
    309a:	47 95       	ror	r20
    309c:	f7 94       	ror	r15
    309e:	e7 94       	ror	r14
    30a0:	1a 95       	dec	r17
    30a2:	c1 f7       	brne	.-16     	; 0x3094 <__ftoa_engine+0xe6>
    30a4:	ec e7       	ldi	r30, 0x7C	; 124
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	68 94       	set
    30aa:	15 90       	lpm	r1, Z+
    30ac:	15 91       	lpm	r17, Z+
    30ae:	35 91       	lpm	r19, Z+
    30b0:	65 91       	lpm	r22, Z+
    30b2:	95 91       	lpm	r25, Z+
    30b4:	05 90       	lpm	r0, Z+
    30b6:	7f e2       	ldi	r23, 0x2F	; 47
    30b8:	73 95       	inc	r23
    30ba:	e1 18       	sub	r14, r1
    30bc:	f1 0a       	sbc	r15, r17
    30be:	43 0b       	sbc	r20, r19
    30c0:	56 0b       	sbc	r21, r22
    30c2:	c9 0b       	sbc	r28, r25
    30c4:	d0 09       	sbc	r29, r0
    30c6:	c0 f7       	brcc	.-16     	; 0x30b8 <__ftoa_engine+0x10a>
    30c8:	e1 0c       	add	r14, r1
    30ca:	f1 1e       	adc	r15, r17
    30cc:	43 1f       	adc	r20, r19
    30ce:	56 1f       	adc	r21, r22
    30d0:	c9 1f       	adc	r28, r25
    30d2:	d0 1d       	adc	r29, r0
    30d4:	7e f4       	brtc	.+30     	; 0x30f4 <__ftoa_engine+0x146>
    30d6:	70 33       	cpi	r23, 0x30	; 48
    30d8:	11 f4       	brne	.+4      	; 0x30de <__ftoa_engine+0x130>
    30da:	8a 95       	dec	r24
    30dc:	e6 cf       	rjmp	.-52     	; 0x30aa <__ftoa_engine+0xfc>
    30de:	e8 94       	clt
    30e0:	01 50       	subi	r16, 0x01	; 1
    30e2:	30 f0       	brcs	.+12     	; 0x30f0 <__ftoa_engine+0x142>
    30e4:	08 0f       	add	r16, r24
    30e6:	0a f4       	brpl	.+2      	; 0x30ea <__ftoa_engine+0x13c>
    30e8:	00 27       	eor	r16, r16
    30ea:	02 17       	cp	r16, r18
    30ec:	08 f4       	brcc	.+2      	; 0x30f0 <__ftoa_engine+0x142>
    30ee:	20 2f       	mov	r18, r16
    30f0:	23 95       	inc	r18
    30f2:	02 2f       	mov	r16, r18
    30f4:	7a 33       	cpi	r23, 0x3A	; 58
    30f6:	28 f0       	brcs	.+10     	; 0x3102 <__ftoa_engine+0x154>
    30f8:	79 e3       	ldi	r23, 0x39	; 57
    30fa:	7d 93       	st	X+, r23
    30fc:	2a 95       	dec	r18
    30fe:	e9 f7       	brne	.-6      	; 0x30fa <__ftoa_engine+0x14c>
    3100:	10 c0       	rjmp	.+32     	; 0x3122 <__ftoa_engine+0x174>
    3102:	7d 93       	st	X+, r23
    3104:	2a 95       	dec	r18
    3106:	89 f6       	brne	.-94     	; 0x30aa <__ftoa_engine+0xfc>
    3108:	06 94       	lsr	r0
    310a:	97 95       	ror	r25
    310c:	67 95       	ror	r22
    310e:	37 95       	ror	r19
    3110:	17 95       	ror	r17
    3112:	17 94       	ror	r1
    3114:	e1 18       	sub	r14, r1
    3116:	f1 0a       	sbc	r15, r17
    3118:	43 0b       	sbc	r20, r19
    311a:	56 0b       	sbc	r21, r22
    311c:	c9 0b       	sbc	r28, r25
    311e:	d0 09       	sbc	r29, r0
    3120:	98 f0       	brcs	.+38     	; 0x3148 <__ftoa_engine+0x19a>
    3122:	23 95       	inc	r18
    3124:	7e 91       	ld	r23, -X
    3126:	73 95       	inc	r23
    3128:	7a 33       	cpi	r23, 0x3A	; 58
    312a:	08 f0       	brcs	.+2      	; 0x312e <__ftoa_engine+0x180>
    312c:	70 e3       	ldi	r23, 0x30	; 48
    312e:	7c 93       	st	X, r23
    3130:	20 13       	cpse	r18, r16
    3132:	b8 f7       	brcc	.-18     	; 0x3122 <__ftoa_engine+0x174>
    3134:	7e 91       	ld	r23, -X
    3136:	70 61       	ori	r23, 0x10	; 16
    3138:	7d 93       	st	X+, r23
    313a:	30 f0       	brcs	.+12     	; 0x3148 <__ftoa_engine+0x19a>
    313c:	83 95       	inc	r24
    313e:	71 e3       	ldi	r23, 0x31	; 49
    3140:	7d 93       	st	X+, r23
    3142:	70 e3       	ldi	r23, 0x30	; 48
    3144:	2a 95       	dec	r18
    3146:	e1 f7       	brne	.-8      	; 0x3140 <__ftoa_engine+0x192>
    3148:	11 24       	eor	r1, r1
    314a:	ef 90       	pop	r14
    314c:	ff 90       	pop	r15
    314e:	0f 91       	pop	r16
    3150:	1f 91       	pop	r17
    3152:	cf 91       	pop	r28
    3154:	df 91       	pop	r29
    3156:	99 27       	eor	r25, r25
    3158:	87 fd       	sbrc	r24, 7
    315a:	90 95       	com	r25
    315c:	08 95       	ret

0000315e <strrev>:
    315e:	dc 01       	movw	r26, r24
    3160:	fc 01       	movw	r30, r24
    3162:	67 2f       	mov	r22, r23
    3164:	71 91       	ld	r23, Z+
    3166:	77 23       	and	r23, r23
    3168:	e1 f7       	brne	.-8      	; 0x3162 <strrev+0x4>
    316a:	32 97       	sbiw	r30, 0x02	; 2
    316c:	04 c0       	rjmp	.+8      	; 0x3176 <strrev+0x18>
    316e:	7c 91       	ld	r23, X
    3170:	6d 93       	st	X+, r22
    3172:	70 83       	st	Z, r23
    3174:	62 91       	ld	r22, -Z
    3176:	ae 17       	cp	r26, r30
    3178:	bf 07       	cpc	r27, r31
    317a:	c8 f3       	brcs	.-14     	; 0x316e <strrev+0x10>
    317c:	08 95       	ret

0000317e <__eerd_block_m324pa>:
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22

00003182 <__eerd_blraw_m324pa>:
    3182:	fc 01       	movw	r30, r24
    3184:	f9 99       	sbic	0x1f, 1	; 31
    3186:	fe cf       	rjmp	.-4      	; 0x3184 <__eerd_blraw_m324pa+0x2>
    3188:	06 c0       	rjmp	.+12     	; 0x3196 <__eerd_blraw_m324pa+0x14>
    318a:	f2 bd       	out	0x22, r31	; 34
    318c:	e1 bd       	out	0x21, r30	; 33
    318e:	f8 9a       	sbi	0x1f, 0	; 31
    3190:	31 96       	adiw	r30, 0x01	; 1
    3192:	00 b4       	in	r0, 0x20	; 32
    3194:	0d 92       	st	X+, r0
    3196:	41 50       	subi	r20, 0x01	; 1
    3198:	50 40       	sbci	r21, 0x00	; 0
    319a:	b8 f7       	brcc	.-18     	; 0x318a <__eerd_blraw_m324pa+0x8>
    319c:	08 95       	ret

0000319e <__prologue_saves__>:
    319e:	2f 92       	push	r2
    31a0:	3f 92       	push	r3
    31a2:	4f 92       	push	r4
    31a4:	5f 92       	push	r5
    31a6:	6f 92       	push	r6
    31a8:	7f 92       	push	r7
    31aa:	8f 92       	push	r8
    31ac:	9f 92       	push	r9
    31ae:	af 92       	push	r10
    31b0:	bf 92       	push	r11
    31b2:	cf 92       	push	r12
    31b4:	df 92       	push	r13
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	0f 93       	push	r16
    31bc:	1f 93       	push	r17
    31be:	cf 93       	push	r28
    31c0:	df 93       	push	r29
    31c2:	cd b7       	in	r28, 0x3d	; 61
    31c4:	de b7       	in	r29, 0x3e	; 62
    31c6:	ca 1b       	sub	r28, r26
    31c8:	db 0b       	sbc	r29, r27
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	09 94       	ijmp

000031d6 <__epilogue_restores__>:
    31d6:	2a 88       	ldd	r2, Y+18	; 0x12
    31d8:	39 88       	ldd	r3, Y+17	; 0x11
    31da:	48 88       	ldd	r4, Y+16	; 0x10
    31dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    31de:	6e 84       	ldd	r6, Y+14	; 0x0e
    31e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    31e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    31e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    31e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    31e8:	b9 84       	ldd	r11, Y+9	; 0x09
    31ea:	c8 84       	ldd	r12, Y+8	; 0x08
    31ec:	df 80       	ldd	r13, Y+7	; 0x07
    31ee:	ee 80       	ldd	r14, Y+6	; 0x06
    31f0:	fd 80       	ldd	r15, Y+5	; 0x05
    31f2:	0c 81       	ldd	r16, Y+4	; 0x04
    31f4:	1b 81       	ldd	r17, Y+3	; 0x03
    31f6:	aa 81       	ldd	r26, Y+2	; 0x02
    31f8:	b9 81       	ldd	r27, Y+1	; 0x01
    31fa:	ce 0f       	add	r28, r30
    31fc:	d1 1d       	adc	r29, r1
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	ed 01       	movw	r28, r26
    320a:	08 95       	ret

0000320c <_exit>:
    320c:	f8 94       	cli

0000320e <__stop_program>:
    320e:	ff cf       	rjmp	.-2      	; 0x320e <__stop_program>
